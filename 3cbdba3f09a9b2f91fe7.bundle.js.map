{"version":3,"file":"3cbdba3f09a9b2f91fe7.bundle.js","mappings":"kIACO,SAASA,EAAkBC,GAC9B,OAAO,IAAAC,WAAUD,EAAO,CAAEE,QAAQ,EAAOC,SAAS,M,8LCUtD,MAAMC,GAAkB,QAAe,IAAM,yDACvCC,GAAc,QAAe,IAAM,yDACzC,MAAMC,UAA+B,cACjCC,oBACI,MAAM,qBAAEC,EAAoB,eAAEC,EAAc,gBAAEC,EAAe,qBAAEC,EAAoB,WAAEC,EAAU,sBAAEC,GAA2BC,KAAKC,MAEjIH,IAEAF,EAAgB,MAAiBG,GACjCJ,EAAe,MAAiBE,GAChCH,IAEJQ,SACI,MAAM,2BAAEC,EAA0B,SAAEC,EAAQ,qBAAEC,EAAoB,sBAAEC,GAA0BN,KAAKC,MACnG,OAAQ,kBAAoB,aAAgB,KAAgC,IAA1BK,GAA+C,kBAAoBf,EAAa,KAA+B,IAAzBc,GAA8C,kBAAoB,IAAe,KACrN,kBAAoBf,EAAiB,MACN,IAA/Ba,GAAmDC,MAG/D,MAAMG,GAAkB,SAAsBC,IAC1C,MAAMC,EAAkB,2BAA+CD,GACjEE,EAAuB,gCAAoDF,GAC3EL,EAA6B,sCAA0DK,GACvFX,GAAuB,OAAkB,MACzCc,EAAY,qBAAmCH,EAAO,MAAiBX,GACvEe,EAAiB,0BAAwCJ,EAAO,MAAiBX,GACjFQ,EAAuB,gCAA8CG,EAAO,MAAiBX,GAC7FE,GAAwB,OAAmB,MAIjD,MAAO,CACHU,gBAAAA,EACAC,qBAAAA,EACAP,2BAAAA,EACAQ,UAAAA,EACAC,eAAAA,EACAP,qBAAAA,EACAR,qBAAAA,EACAgB,WAXe,sBAAqCL,EAAO,MAAiBT,GAY5Ee,gBAXoB,2BAA0CN,EAAO,MAAiBT,GAYtFO,sBAX0B,iCAAgDE,EAAO,MAAiBT,GAYlGA,sBAAAA,MAGFgB,EAAqB,CACvBrB,qBAAsB,QACtBC,eAAgB,QAChBC,gBAAiB,QACjBE,WAAY,SAEVkB,GAA4B,IAAAC,SAAQV,EAAiBQ,EAAzB,CAA6CvB,GAE/E,GAD2B,QAAWwB","sources":["webpack://koku-ui/./src/api/queries/providersQuery.ts","webpack://koku-ui/./src/components/permissions/permissionsWrapper.tsx"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { asyncComponent } from 'components/async';\nimport { ExportsDrawer } from 'components/exports';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { accountSettingsActions, accountSettingsSelectors } from 'store/accountSettings';\nimport { createMapStateToProps } from 'store/common';\nimport { providersActions, providersQuery, providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { userAccessActions, userAccessQuery, userAccessSelectors } from 'store/userAccess';\nconst InactiveSources = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/inactiveSources'));\nconst Permissions = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/permissions'));\nclass PermissionsWrapperBase extends React.Component {\n    componentDidMount() {\n        const { fetchAccountSettings, fetchProviders, fetchUserAccess, providersQueryString, resetState, userAccessQueryString, } = this.props;\n        // Clear cached API responses\n        resetState();\n        // Fetched in order of component usage via render()\n        fetchUserAccess(\"all\" /* all */, userAccessQueryString);\n        fetchProviders(\"all\" /* all */, providersQueryString);\n        fetchAccountSettings();\n    }\n    render() {\n        const { accountSettingsFetchStatus, children, providersFetchStatus, userAccessFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, userAccessFetchStatus === 2 /* complete */ && (React.createElement(Permissions, null, providersFetchStatus === 2 /* complete */ && (React.createElement(ExportsDrawer, null,\n            React.createElement(InactiveSources, null),\n            accountSettingsFetchStatus === 2 /* complete */ && children))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const accountSettings = accountSettingsSelectors.selectAccountSettings(state);\n    const accountSettingsError = accountSettingsSelectors.selectAccountSettingsError(state);\n    const accountSettingsFetchStatus = accountSettingsSelectors.selectAccountSettingsFetchStatus(state);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        accountSettings,\n        accountSettingsError,\n        accountSettingsFetchStatus,\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchAccountSettings: accountSettingsActions.fetchAccountSettings,\n    fetchProviders: providersActions.fetchProviders,\n    fetchUserAccess: userAccessActions.fetchUserAccess,\n    resetState: uiActions.resetState,\n};\nconst PermissionsWrapperConnect = connect(mapStateToProps, mapDispatchToProps)(PermissionsWrapperBase);\nconst PermissionsWrapper = injectIntl(PermissionsWrapperConnect);\nexport default PermissionsWrapper;\n"],"names":["getProvidersQuery","query","stringify","encode","indices","InactiveSources","Permissions","PermissionsWrapperBase","componentDidMount","fetchAccountSettings","fetchProviders","fetchUserAccess","providersQueryString","resetState","userAccessQueryString","this","props","render","accountSettingsFetchStatus","children","providersFetchStatus","userAccessFetchStatus","mapStateToProps","state","accountSettings","accountSettingsError","providers","providersError","userAccess","userAccessError","mapDispatchToProps","PermissionsWrapperConnect","connect"],"sourceRoot":""}