{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/utils/sort.ts","webpack:///./src/testIds.ts","webpack:///./src/components/randomId/randomId.tsx","webpack:///./src/components/formGroup/formGroup.styles.ts","webpack:///./src/components/formGroup/formGroup.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/components/textInput/textInput.styles.ts","webpack:///./src/components/textInput/textInput.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/bulletChart/bulletChart.styles.ts","webpack:///./src/components/bulletChart/bulletChart.tsx","webpack:///./src/pages/ocpDetails/ocpDetails.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.tsx","webpack:///./src/pages/ocpDetails/detailsItem.tsx","webpack:///./src/pages/ocpDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpDetails/exportModal.styles.ts","webpack:///./src/pages/ocpDetails/exportModal.tsx","webpack:///./src/pages/ocpDetails/ocpDetails.tsx","webpack:///./src/pages/ocpDetails/index.ts"],"names":["unitLookupKey","unit","split","toLowerCase","formatValue","value","options","lookup","fValue","formatCurrency","formatStorage","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","getValueForItem","item","key","sort","array","direction","a","b","aVal","bVal","__webpack_require__","d","__webpack_exports__","getTestProps","id","data-testid","testIds","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","empty_state_add_btn","name_input","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","currentId","randomId_RandomId","react_default","Component","[object Object]","super","arguments","this","props","prefix","children","defaultProps","styles","StyleSheet","create","formGroup","marginBottom","esm","label","display","fontWeight","paddingBottom","FormGroup","createElement","className","Object","htmlFor","cloneElement","Children","only","groups","getComputedOcpReportItems","report","idKey","labelKey","sortKey","sortDirection","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","visitDataPoint","dataPoint","values","forEach","capacity","charge","limit","request","usage","assign","deltaPercent","delta_percent","deltaValue","delta_value","units","group","data","getIdKeyForGroupBy","groupBy","project","cluster","node","textInput","width","fontSize","paddingTop","paddingRight","paddingLeft","lineHeight","outline","border",":focus","borderColor","flat","borderBottom","join","error","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","textInput_TextInput","handleChange","evt","onChange","currentTarget","handleKeyPressed","onKeyPress","preventDefault","_a","isFlat","isError","isEqual","obj1","obj2","JSON","stringify","bulletChartOverride","index_esm","bulletChart_BulletChart","nextProps","legend","maxDomain","ranges","threshold","maxDomainVal","Fragment","Boolean","BulletChart_BulletChart","customAxis","BulletChartAxis","BulletChartAxisTic","text","showAxis","thresholdError","thresholdWarning","BulletChartLegend","map","index","BulletChartLegendItem","title","color","tooltipFunction","alignItems","chargeLabel","chargeValue","marginTop","marginRight","var","chargeLabelUnit","chargeLabelDate","cpuContainer","content","backgroundColor","height","header","justifyContent","padding","headerLeft","flex","headerRight","memoryContainer","ocpDetails","minHeight","groupBySelector","groupBySelectorLabel","toolbarContainer","infoItemArrow","position","bottom","listViewOverride","name","toolbarOverride","TooltipFunction","Tooltip","Date","now","randomId","mapStateToProps","common","state","queryString","cpuReport","ocpReports","selectReport","cpuReportFetchStatus","selectReportFetchStatus","memoryReport","memoryReportFetchStatus","mapDispatchToProps","fetchReport","DetailsChart","es","react_redux_es","prevProps","datum","Math","trunc","total","max","cpuDatum","getChartDatum","memoryDatum","Grid","GridItem","md","lg","DetailsItem","expanded","handleExpand","setState","handleExpandClose","handleCheckboxChange","event","onCheckboxChange","checked","handleSelectChange","groupByKey","currentGroupBy","parentGroupBy","parentQuery","newQuery","delta","undefined","filter","time_scope_units","time_scope_value","resolution","group_by","order_by","ocpQuery","selected","today","date","getDate","month","getMonth","abs","percentage","iconOverride","getQueryString","ListView","Item","heading","checkboxInput","type","additionalInfo","InfoItem","stacked","actions","onExpand","onExpandClose","Row","Col","btnOverride","toggleOverride","detailsToolbar_DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentSortType","sortField","isSortNumeric","isNumeric","isSortAscending","query","isSortByOpen","currentViewType","filterCategory","addQuery","keys","Array","isArray","field","getFilter","push","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","slice","filterValue","handleExportClicked","onExportClicked","handleSortBySelect","handleSortByToggle","onValueKeyPress","stopPropagation","removeFilter","updated","selectFilterType","filterType","toggleCurrentSortDirection","onSortChanged","updateCurrentSortType","sortType","updateCurrentValue","prevState","equal","placeholder","isExportDisabled","sortFields","Toolbar","Filter","TypeSelector","filterTypes","onFilterTypeSelected","renderInput","Sort","Dropdown","onClick","onSelect","toggle","DropdownToggle","onToggle","isOpen","dropdownItems","option","DirectionSelector","isAscending","Button","isDisabled","variant","file_export_icon","Results","resultsTotal","ActiveLabel","List","onRemove","filterData","href","onActionPerformed","helpers","exportModal_styles_styles","modal","h2","input","ul","marginLeft","resolutionOptions","exportModal","ocpExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","isExportModalOpen","ui","selectIsExportModalOpen","exportReport","closeExportModal","defaultState","groupById","isAllItems","items","handleCancel","handleFetchReport","handleResolutionChange","_","file_download_default","Modal","isLarge","onClose","secondary","primary","Radio","isValid","aria-label","groupItem","reportType","baseQuery","groupByOptions","ocpDetails_mapStateToProps","queryFromRoute","location","search","reportFetchStatus","ocpDetails_mapDispatchToProps","openExportModal","stateProps","dispatchProps","isGroupByOpen","selectedItems","handleGroupByItemClick","history","replace","getRouteForQuery","handleGroupBySelect","handleGroupByToggle","onCheckboxAllChange","computedItems","updateReport","getFilterFields","getSortTypes","isSelected","selectedItem","bind","includes","filteredQuery","Title","size","exportText","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDetails__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"dd19c12b0dc8e942acd5.bundle.js","sourcesContent":["export const unitLookupKey = unit => unit ? unit.split('-')[0].toLowerCase() : '';\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n            return formatStorage(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatStorage = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import React from 'react';\nlet currentId = 0;\nclass RandomId extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.id = `${this.props.prefix}${currentId++}`;\n    }\n    render() {\n        return this.props.children({ id: this.id });\n    }\n}\nRandomId.defaultProps = {\n    prefix: 'random-id-',\n};\nexport { RandomId };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontWeight_normal, global_gutter, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    formGroup: {\n        marginBottom: global_gutter.value,\n    },\n    label: {\n        display: 'block',\n        fontWeight: global_FontWeight_normal.value,\n        paddingBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { RandomId } from '../randomId';\nimport { styles } from './formGroup.styles';\nexport const FormGroup = ({ label, children }) => (React.createElement(RandomId, { prefix: label }, ({ id }) => (React.createElement(\"div\", { className: css(styles.formGroup) },\n    React.createElement(\"label\", { className: css(styles.label), htmlFor: id }, label),\n    React.createElement(\"div\", null, React.cloneElement(React.Children.only(children), { id }))))));\n","import { sort } from './sort';\nconst groups = ['clusters', 'nodes', 'projects'];\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'charge', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity;\n                const charge = value.charge;\n                const id = value[idKey];\n                const label = value[labelKey];\n                const limit = value.limit;\n                const request = value.request;\n                const usage = value.usage;\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        capacity,\n                        charge,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        id,\n                        label,\n                        limit,\n                        request,\n                        units: value.units || usage ? 'GB' : 'USD',\n                        usage,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { capacity: itemMap[id].capacity + capacity, charge: itemMap[id].charge + charge, limit: itemMap[id].limit + limit, request: itemMap[id].request + request, usage: itemMap[id].usage + usage });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    report.data.forEach(visitDataPoint);\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BorderColor, global_BorderColor_dark, global_BorderWidth_md, global_BorderWidth_sm, global_danger_color_100, global_danger_color_200, global_FontSize_md, global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    textInput: {\n        width: '100%',\n        fontSize: global_FontSize_md.value,\n        paddingTop: global_spacer_xs.value,\n        paddingRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xs.value,\n        paddingLeft: global_spacer_sm.value,\n        lineHeight: '24px',\n        outline: 0,\n        border: `${global_BorderWidth_sm.value} solid ${global_BorderColor.value}`,\n        ':focus': {\n            borderColor: global_BorderColor_dark.value,\n        },\n    },\n    flat: {\n        border: 'none',\n        borderBottom: [\n            global_BorderWidth_sm.value,\n            'solid',\n            global_BorderColor.value,\n        ].join(' '),\n        ':focus': {\n            borderBottom: [\n                global_BorderWidth_md.value,\n                'solid',\n                global_BorderColor_dark.value,\n            ].join(' '),\n        },\n    },\n    error: {\n        borderColor: global_danger_color_100.value,\n        ':focus': {\n            borderColor: global_danger_color_200.value,\n        },\n    },\n});\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './textInput.styles';\nexport class TextInput extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleChange = (evt) => {\n            this.props.onChange(evt.currentTarget.value, evt);\n        };\n        this.handleKeyPressed = (evt) => {\n            if (this.props.onKeyPress && evt.key === 'Enter') {\n                evt.preventDefault();\n                this.props.onKeyPress(evt);\n            }\n        };\n    }\n    render() {\n        const _a = this.props, { className, isFlat, isError } = _a, props = __rest(_a, [\"className\", \"isFlat\", \"isError\"]);\n        return (React.createElement(\"input\", Object.assign({}, props, { className: css(className, styles.textInput, isFlat && styles.flat, isError && styles.error), onChange: this.handleChange, onKeyPress: this.handleKeyPressed })));\n    }\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { global_Color_100 } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const bulletChartOverride = css `\n  & .bullet-chart-pf,\n  & .bullet-chart-pf-legend-item {\n    color: ${global_Color_100.value};\n  }\n  & .bullet-chart-pf-legend-item-text {\n    max-width: none;\n    text-overflow: initial;\n  }\n  & .bullet-chart-pf-overflow {\n    flex: none;\n  }\n`;\n","import { BulletChart as ChartBullet, BulletChartAxis, BulletChartAxisTic, BulletChartLegend, BulletChartLegendItem, } from 'patternfly-react';\nimport React from 'react';\nimport { bulletChartOverride } from './bulletChart.styles';\nclass BulletChart extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.values) {\n            return false;\n        }\n        return true;\n    }\n    render() {\n        const { id, label, legend, maxDomain, ranges, threshold, values, } = this.props;\n        const maxDomainVal = maxDomain > 0 ? maxDomain : 100;\n        return (React.createElement(React.Fragment, null, Boolean(values.length) && (React.createElement(\"div\", { className: bulletChartOverride },\n            React.createElement(ChartBullet, { customAxis: React.createElement(BulletChartAxis, null,\n                    React.createElement(BulletChartAxisTic, { value: 0, text: '0' }),\n                    React.createElement(BulletChartAxisTic, { value: 50, text: `${maxDomainVal / 2}` }),\n                    React.createElement(BulletChartAxisTic, { value: 100, text: `${maxDomainVal}` })), id: id, label: label, ranges: ranges, showAxis: true, thresholdError: threshold, thresholdWarning: threshold, values: values }),\n            React.createElement(BulletChartLegend, { id: \"cpu-legend\" }, legend.map((value, index) => {\n                return (React.createElement(BulletChartLegendItem, { key: `legend-${index}`, title: value.title, value: value.value, color: value.color, tooltipFunction: value.tooltipFunction }));\n            }))))));\n    }\n}\nexport { BulletChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_BackgroundColor_300, global_BorderRadius_sm, global_BoxShadow_sm, global_Color_100, global_Color_200, global_Color_light_100, global_Color_light_200, global_danger_color_100, global_disabled_color_100, global_FontSize_lg, global_FontSize_md, global_FontSize_sm, global_FontSize_xs, global_FontWeight_bold, global_FontWeight_normal, global_LineHeight_md, global_primary_color_100, global_spacer_2xl, global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, global_spacer_xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    charge: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    chargeLabel: {},\n    chargeValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    chargeLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    chargeLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    cpuContainer: {\n        paddingLeft: global_spacer_2xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.var,\n        paddingTop: global_spacer_xl.value,\n        height: '100%',\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    headerLeft: {\n        flex: 1,\n    },\n    headerRight: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    memoryContainer: {\n        paddingTop: global_spacer_xl.value,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n    ocpDetails: {\n        backgroundColor: global_BackgroundColor_300.var,\n        minHeight: '100%',\n    },\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_300.value,\n    },\n    infoItemArrow: {\n        position: 'relative',\n        bottom: global_spacer_xs.value,\n    },\n});\nexport const listViewOverride = css `\n  min-height: 100%;\n  padding: 0 ${global_spacer_xl.value};\n  background-color: ${global_Color_light_200.value};\n  ${global_Color_100.name}: ${global_Color_light_100.value};\n  ${global_Color_200.name}: ${global_Color_light_200.value};\n\n  .list-view-pf {\n    margin-top: 0;\n  }\n  .list-group-item:hover {\n    background-color: #fff;\n    box-shadow: ${global_BoxShadow_sm.value};\n    z-index: 1;\n  }\n\n  & * {\n    // outline: 1px solid blue;\n  }\n\n  .list-group-item-heading,\n  strong {\n    font-weight: ${global_FontWeight_normal.value};\n    word-break: break-word;\n  }\n\n  .list-group-item-heading {\n    font-size: ${global_FontSize_md.value};\n  }\n\n  .list-view-pf-main-info {\n    padding: 0;\n  }\n\n  .list-view-pf-actions,\n  .fa-angle-right {\n    margin: 0;\n  }\n\n  input[type='checkbox'] {\n    margin: 0;\n  }\n\n  .list-view-pf-description {\n    display: inline-flex;\n    margin-left: 0;\n    float: none;\n  }\n\n  .list-view-pf-additional-info {\n    flex: 0 0 40%;\n    float: none;\n    width: auto;\n  }\n\n  .list-view-pf-actions {\n    flex: 0 0 25%;\n  }\n\n  .list-group-item-header {\n    display: flex;\n    align-items: center;\n  }\n\n  & .list-view-pf-main-info {\n    flex: 1;\n  }\n\n  .list-view-pf-checkbox {\n    border: none;\n    margin-top: 0;\n    margin-bottom: 0;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .list-view-pf-expand {\n    min-width: 1.5rem;\n    margin-top: 0;\n    margin-bottom: 0;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .list-view-pf-additional-info-item {\n    align-items: flex-end;\n    text-align: left;\n    word-break: break-word;\n    .fa {\n      margin-right 0;\n    }\n  }\n\n  .list-view-pf-actions .list-view-pf-additional-info-item {\n    align-items: flex-end;\n  }\n\n  .list-view-pf-additional-info-item \n    strong {\n      display: block;\n      margin-right: 0;\n      margin-bottom: ${global_spacer_xs.value};\n      font-size: ${global_FontSize_md.value};\n      &.iconOverride {\n        &.decrease {\n          color: ${global_success_color_100.value};\n        }\n        &.increase {\n          color: ${global_danger_color_100.value};\n        }\n        .fa-sort-asc, .fa-sort-desc {\n          margin-left: 10px;\n        }\n        .fa-sort-asc::before {\n          color: ${global_danger_color_100.value};\n        }\n        .fa-sort-desc::before {\n          color: ${global_success_color_100.value};\n        }\n        span {\n          margin-right: -17px !important;\n        }\n      }\n    }\n  }\n\n  .list-view-pf-additional-info-item span {\n    font-size: ${global_FontSize_xs.value};\n    color: ${global_disabled_color_100.value};\n  }\n\n  .list-group-item {\n    padding: ${global_spacer_lg.value} ${global_spacer_xl.value};\n    border-bottom: 2px solid #f2f2f2;\n  }\n\n  .list-group-item:first-child {\n    border-top: 0;\n    padding: 0.55rem ${global_spacer_lg.value} ${global_spacer_xs.value} 3.5rem;\n\n    &,\n    .list-group-item-heading,\n    .list-view-pf-additional-info-item strong {\n      font-size: ${global_FontSize_sm.value};\n      font-weight: ${global_FontWeight_bold.value};\n    }\n\n    .list-view-pf-additional-info {\n      transform: translateX(-0.55rem);\n    }\n\n    .list-view-pf-actions .list-view-pf-additional-info-item {\n      float: right;\n    }\n  }\n\n  .list-group-item-container {\n    padding: ${global_spacer_lg.value} ${global_spacer_3xl.value}\n      ${global_spacer_lg.value} ${global_spacer_3xl.value};\n    margin: ${global_spacer_lg.value} -${global_spacer_xl.value} -${global_spacer_lg.value} -${global_spacer_xl.value};\n    background-image: linear-gradient(\n      to right,\n      ${global_primary_color_100.value},\n      ${global_primary_color_100.value} 3px,\n      transparent 3px\n    );\n  }\n\n  .list-group-item.list-view-pf-expand-active {\n    background-color: #fff;\n  }\n\n  .list-view-pf-expand-active {\n    box-shadow: ${global_BoxShadow_sm.value};\n    z-index: 1;\n    background-image: linear-gradient(\n      to right,\n      ${global_primary_color_100.value},\n      ${global_primary_color_100.value} 3px,\n      transparent 3px\n    );\n  }\n`;\nexport const toolbarOverride = css `\n  margin-left: ${global_spacer_xl.value};\n  margin-right: ${global_spacer_xl.value};\n  background-color: ${global_Color_light_100.value};\n  font-size: ${global_FontSize_xs.value};\n\n  .pf-c-button {\n    border-radius: 0;\n    padding-left: 0;\n    padding-right: 0;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .fa-download {\n    color: ${global_Color_100.value};\n    margin-right: ${global_spacer_sm.value};\n    font-size: 1.125rem;\n  }\n\n  .toolbar-pf-actions {\n    display: flex;\n    padding-top: ${global_spacer_sm.value};\n    padding-bottom: ${global_spacer_sm.value};\n  }\n\n  .form-group {\n    border: none;\n  }\n\n  .btn {\n    line-height: 28px;\n  }\n\n  .btn-link {\n    color: ${global_Color_200.value};\n    margin-left: ${global_spacer_sm.value};\n  }\n\n  .btn-link .fa {\n    font-size: ${global_FontSize_lg.value};\n    color: ${global_Color_100.value};\n  }\n\n  .pf-m-plain {\n    padding: 0;\n    display: flex;\n    align-items: center;\n  }\n\n  .dropdown .btn {\n    border-radius: ${global_BorderRadius_sm.value};\n    background: transparent;\n    box-shadow: none;\n    border-color: #c7c7c7;\n    font-size: ${global_FontSize_md.value};\n    font-weight: 500;\n    padding-left: ${global_spacer_sm.value};\n    padding-right: ${global_spacer_sm.value};\n  }\n\n  input[type='text'] {\n    border-color: #c7c7c7;\n    border-radius: ${global_BorderRadius_sm.value};\n  }\n\n  /* filter results */\n\n  .toolbar-pf-results {\n    font-size: ${global_FontSize_sm.value};\n    padding: ${global_spacer_sm.value} 0;\n    line-heght: ${global_LineHeight_md.value};\n    font-weight: ${global_FontWeight_normal.value};\n\n    .col-sm-12 {\n      display: flex;\n      align-items: center;\n    }\n\n    h5 {\n      font-size: ${global_FontSize_sm.value};\n      font-weight: ${global_FontWeight_normal.value};\n      line-height: ${global_LineHeight_md.value};\n    }\n\n    .filter-pf-active-label {\n      line-height: ${global_LineHeight_md.value};\n    }\n\n    .list-inline {\n      line-height: ${global_LineHeight_md.value};\n    }\n\n    .label {\n      font-size: ${global_FontSize_xs.value};\n      border-radius: ${global_BorderRadius_sm.value};\n      display: inline-flex;\n      align-items: center;\n    }\n\n    .pf-remove-button {\n      display: inline-flex;\n      font-weight: ${global_FontWeight_normal.value};\n    }\n  }\n`;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { global_active_color_100, global_danger_color_100, global_disabled_color_200, global_primary_color_light_100, } from '@patternfly/react-tokens';\nimport { BulletChart } from 'components/bulletChart';\nimport { Tooltip } from 'patternfly-react';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { styles } from './ocpDetails.styles';\nconst randomId = () => Date.now();\nconst TooltipFunction = value => {\n    return () => {\n        return React.createElement(Tooltip, { id: randomId() }, `${value.title}`);\n    };\n};\nclass DetailsChartBase extends React.Component {\n    componentDidMount() {\n        const { cpuReport, memoryReport, queryString } = this.props;\n        if (!cpuReport) {\n            this.props.fetchReport(\"cpu\" /* cpu */, queryString);\n        }\n        if (!memoryReport) {\n            this.props.fetchReport(\"memory\" /* memory */, queryString);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.queryString !== this.props.queryString) {\n            this.props.fetchReport(\"cpu\" /* cpu */, this.props.queryString);\n            this.props.fetchReport(\"memory\" /* memory */, this.props.queryString);\n        }\n    }\n    getChartDatum(report) {\n        const { t } = this.props;\n        const datum = {\n            capacity: 0,\n            legend: [],\n            limit: 0,\n            maxDomain: 0,\n            ranges: [],\n            values: [],\n        };\n        if (report) {\n            datum.limit = Math.trunc(report.total.limit);\n            datum.capacity = Math.trunc(report.total.capacity);\n            const request = Math.trunc(report.total.request);\n            const usage = Math.trunc(report.total.usage);\n            datum.maxDomain = Math.max(usage, request, datum.limit, datum.capacity);\n            datum.ranges = [\n                {\n                    color: global_disabled_color_200.value,\n                    title: t('ocp_details.bullet.capacity', { value: datum.capacity }),\n                    value: Math.trunc((datum.capacity / datum.maxDomain) * 100),\n                },\n            ];\n            datum.values = [\n                {\n                    color: global_active_color_100.value,\n                    title: t('ocp_details.bullet.usage', { value: usage }),\n                    value: Math.trunc((usage / datum.maxDomain) * 100),\n                },\n                {\n                    color: global_primary_color_light_100.value,\n                    title: t('ocp_details.bullet.requests', { value: request }),\n                    value: Math.trunc((request / datum.maxDomain) * 100),\n                },\n            ];\n            const legend = [\n                {\n                    className: 'limit',\n                    color: global_danger_color_100.value,\n                    title: t('ocp_details.bullet.limit', { value: datum.limit }),\n                },\n                {\n                    color: global_disabled_color_200.value,\n                    title: t('ocp_details.bullet.capacity', { value: datum.capacity }),\n                },\n            ];\n            datum.ranges.map((value, index) => {\n                value.tooltipFunction = TooltipFunction(value);\n            });\n            datum.values.map((value, index) => {\n                value.tooltipFunction = TooltipFunction(value);\n            });\n            legend.map((value, index) => {\n                value.tooltipFunction = TooltipFunction(value);\n            });\n            datum.legend = [...datum.values, ...legend];\n            datum.limit = Math.trunc((datum.limit / datum.maxDomain) * 100);\n        }\n        return datum;\n    }\n    render() {\n        const { cpuReport, memoryReport, t } = this.props;\n        const cpuDatum = this.getChartDatum(cpuReport);\n        const memoryDatum = this.getChartDatum(memoryReport);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.cpuContainer) },\n                React.createElement(Grid, null,\n                    React.createElement(GridItem, { md: 12, lg: 6 },\n                        React.createElement(React.Fragment, null)),\n                    React.createElement(GridItem, { md: 12, lg: 6 }, Boolean(cpuDatum && cpuDatum.values.length) && (React.createElement(BulletChart, { id: \"cpu-chart\", label: t('ocp_details.bullet.cpu_label'), legend: cpuDatum.legend, maxDomain: cpuDatum.maxDomain, ranges: cpuDatum.ranges, threshold: cpuDatum.limit, values: cpuDatum.values }))))),\n            React.createElement(\"div\", { className: css(styles.memoryContainer) },\n                React.createElement(Grid, null,\n                    React.createElement(GridItem, { md: 12, lg: 6 },\n                        React.createElement(React.Fragment, null)),\n                    React.createElement(GridItem, { md: 12, lg: 6 }, Boolean(memoryDatum && memoryDatum.values.length) && (React.createElement(BulletChart, { id: \"memory-chart\", label: t('ocp_details.bullet.memory_label'), legend: memoryDatum.legend, maxDomain: memoryDatum.maxDomain, ranges: memoryDatum.ranges, threshold: memoryDatum.limit, values: memoryDatum.values })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { queryString }) => {\n    const cpuReport = ocpReportsSelectors.selectReport(state, \"cpu\" /* cpu */, queryString);\n    const cpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, \"cpu\" /* cpu */, queryString);\n    const memoryReport = ocpReportsSelectors.selectReport(state, \"memory\" /* memory */, queryString);\n    const memoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, \"memory\" /* memory */, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart, DetailsChartBase };\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { Col, ListView, Row } from 'patternfly-react';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './ocpDetails.styles';\nclass DetailsItemBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            expanded: false,\n        };\n        this.handleExpand = () => {\n            this.setState({ expanded: true });\n        };\n        this.handleExpandClose = () => {\n            this.setState({ expanded: false });\n        };\n        this.handleCheckboxChange = event => {\n            const { item, onCheckboxChange } = this.props;\n            onCheckboxChange(event.currentTarget.checked, item);\n        };\n        this.handleSelectChange = (event) => {\n            const groupByKey = event.currentTarget\n                .value;\n            this.setState({ currentGroupBy: groupByKey });\n        };\n    }\n    getQueryString() {\n        const { item, parentGroupBy, parentQuery } = this.props;\n        const newQuery = Object.assign({}, parentQuery, { delta: undefined, filter: {\n                time_scope_units: 'month',\n                time_scope_value: -1,\n                resolution: 'monthly',\n                limit: 5,\n            }, group_by: { [parentGroupBy]: item.id }, order_by: undefined });\n        return getQuery(newQuery);\n    }\n    render() {\n        const { charge, t, item, parentGroupBy, selected } = this.props;\n        const today = new Date();\n        const date = today.getDate();\n        const month = (today.getMonth() - 1) % 12;\n        const value = formatCurrency(Math.abs(item.deltaValue));\n        const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n        let iconOverride = 'iconOverride';\n        if (item.deltaPercent !== null && item.deltaValue < 0) {\n            iconOverride += ' decrease';\n        }\n        if (item.deltaPercent !== null && item.deltaValue > 0) {\n            iconOverride += ' increase';\n        }\n        const queryString = this.getQueryString();\n        return (React.createElement(ListView.Item, { key: item.label, heading: item.label, checkboxInput: React.createElement(\"input\", { type: \"checkbox\", checked: selected, onChange: this.handleCheckboxChange }), additionalInfo: [\n                React.createElement(ListView.InfoItem, { key: \"1\", stacked: true },\n                    React.createElement(\"strong\", { className: iconOverride },\n                        t('percent', { value: percentage }),\n                        Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-asc', styles.infoItemArrow) })),\n                        Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-desc', styles.infoItemArrow) }))),\n                    React.createElement(\"span\", null, (Boolean(item.deltaPercent !== null && item.deltaValue > 0) &&\n                        ((Boolean(date < 31) &&\n                            t('ocp_details.increase_since_date', {\n                                date,\n                                month,\n                                value,\n                            })) ||\n                            t('ocp_details.increase_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            }))) ||\n                        (Boolean(item.deltaPercent !== null && item.deltaValue < 0) &&\n                            ((Boolean(date < 31) &&\n                                t('ocp_details.decrease_since_date', {\n                                    date,\n                                    month,\n                                    value,\n                                })) ||\n                                t('ocp_details.decrease_since_last_month', {\n                                    date,\n                                    month,\n                                    value,\n                                }))) ||\n                        t('ocp_details.no_change_since_date', { date, month }))),\n            ], actions: [\n                React.createElement(ListView.InfoItem, { key: \"1\", stacked: true },\n                    React.createElement(\"strong\", null, formatCurrency(item.charge)),\n                    React.createElement(\"span\", null,\n                        ((item.charge / charge) * 100).toFixed(2),\n                        t('percent_of_charge'))),\n            ], onExpand: this.handleExpand, onExpandClose: this.handleExpandClose },\n            React.createElement(Row, null,\n                React.createElement(Col, null, Boolean(queryString) && (React.createElement(DetailsChart, { queryString: queryString, currentGroupBy: parentGroupBy }))))));\n    }\n}\nconst DetailsItem = translate()(connect()(DetailsItemBase));\nexport { DetailsItem, DetailsItemBase };\n","import { css } from 'emotion';\nexport const btnOverride = css `\n  &.pf-c-button {\n    --pf-c-button--m-disabled--BackgroundColor: none;\n  }\n`;\nexport const toggleOverride = css `\n  &.pf-c-dropdown__toggle {\n    --pf-c-dropdown__toggle--MinHeight: auto;\n  }\n`;\n","import React from 'react';\nimport { Button, ButtonVariant, Dropdown, DropdownItem, DropdownToggle, } from '@patternfly/react-core';\nimport { FileExportIcon } from '@patternfly/react-icons';\nimport { TextInput } from 'components/textInput';\nimport { Filter, noop, Sort, Toolbar } from 'patternfly-react';\nimport { isEqual } from 'utils/equal';\nimport { btnOverride, toggleOverride } from './detailsToolbar.styles';\nexport class DetailsToolbar extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentSortType: this.props.sortField,\n            isSortNumeric: this.props.sortField && this.props.sortField.isNumeric\n                ? this.props.sortField.isNumeric\n                : false,\n            isSortAscending: !(this.props.query &&\n                this.props.sortField &&\n                this.props.sortField.id &&\n                this.props.query.order_by[this.props.sortField.id] === 'desc'),\n            isSortByOpen: false,\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            filterText =\n                filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.handleSortBySelect = event => {\n            this.setState({\n                isSortByOpen: !this.state.isSortByOpen,\n            });\n        };\n        this.handleSortByToggle = isSortByOpen => {\n            this.setState({\n                isSortByOpen,\n            });\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.toggleCurrentSortDirection = () => {\n            const { currentSortType, isSortAscending } = this.state;\n            this.setState({ isSortAscending: !isSortAscending });\n            this.props.onSortChanged(currentSortType.id, !isSortAscending);\n        };\n        this.updateCurrentSortType = (event, sortType) => {\n            const isSortAscending = true;\n            this.setState({\n                currentSortType: sortType,\n                isSortNumeric: sortType.isNumeric,\n                isSortAscending,\n            });\n            this.props.onSortChanged(sortType.id, isSortAscending);\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report, sortField } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n        if (!isEqual(sortField, prevProps.sortField)) {\n            this.setState({\n                currentSortType: sortField,\n                isSortAscending: !(query && query.order_by[sortField.id] === 'desc'),\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, type: \"text\", value: currentValue }));\n    }\n    render() {\n        const { isExportDisabled, sortFields } = this.props;\n        const { activeFilters, currentFilterType, currentSortType, isSortNumeric, isSortAscending, isSortByOpen, } = this.state;\n        return (React.createElement(Toolbar, null,\n            React.createElement(Filter, null,\n                React.createElement(Filter.TypeSelector, { filterTypes: this.props.filterFields, currentFilterType: currentFilterType, onFilterTypeSelected: this.selectFilterType }),\n                this.renderInput()),\n            React.createElement(Sort, null,\n                React.createElement(Dropdown, { onClick: event => event.preventDefault(), onSelect: this.handleSortBySelect, toggle: React.createElement(DropdownToggle, { className: toggleOverride, onToggle: this.handleSortByToggle }, currentSortType.title), isOpen: isSortByOpen, dropdownItems: sortFields.map(option => (React.createElement(DropdownItem, { key: option.id, onClick: event => this.updateCurrentSortType(event, option) }, option.title))) }),\n                React.createElement(Sort.DirectionSelector, { isNumeric: isSortNumeric, isAscending: isSortAscending, onClick: this.toggleCurrentSortDirection })),\n            React.createElement(\"div\", { className: \"form-group\" },\n                React.createElement(Button, { className: btnOverride, isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(FileExportIcon, null),\n                    \"Export\")),\n            !activeFilters ||\n                (activeFilters.length === 0 && (React.createElement(Toolbar.Results, null,\n                    React.createElement(\"h5\", null,\n                        this.props.resultsTotal,\n                        \" Results\")))),\n            activeFilters &&\n                activeFilters.length > 0 && (React.createElement(Toolbar.Results, null,\n                React.createElement(\"h5\", null,\n                    this.props.resultsTotal,\n                    \" Results\"),\n                React.createElement(Filter.ActiveLabel, null, \"Active Filters:\"),\n                React.createElement(Filter.List, null, activeFilters.map((item, index) => (React.createElement(Filter.Item, { key: index, onRemove: this.removeFilter, filterData: item }, item.label)))),\n                React.createElement(\"a\", { href: \"#\", onClick: this.clearFilters }, \"Clear All Filters\")))));\n    }\n}\nDetailsToolbar.defaultProps = { onActionPerformed: noop };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n});\n","import { Button, ButtonVariant, Modal, Radio } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport fileDownload from 'js-file-download';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpExportActions, ocpExportSelectors } from 'store/ocpExport';\nimport { uiActions, uiSelectors } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport { FormGroup } from '../../components/formGroup';\nimport { sort } from '../../utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nexport class ExportModal extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupById, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, query, { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupById}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupById}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleCancel = () => {\n            this.props.closeExportModal();\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"charge\" /* charge */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { closeExportModal, fetchStatus, isExportModalOpen } = this.props;\n        if (isExportModalOpen && !prevProps.isExportModalOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (this.props.export !== prevProps.export &&\n            fetchStatus === 2 /* complete */) {\n            fileDownload(this.props.export, 'report.csv', 'text/csv');\n            closeExportModal();\n        }\n    }\n    render() {\n        const { fetchStatus, groupById, items, t } = this.props;\n        const { resolution } = this.state;\n        if (this.props.isExportModalOpen) {\n            sort(items, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isExportModalOpen, onClose: this.handleCancel, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleCancel, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(\"h2\", null, t('export.heading', { groupBy: groupById })),\n            React.createElement(FormGroup, { label: t('export.aggregate_type') },\n                React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: \"resolution\", isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n            React.createElement(FormGroup, { label: t('export.selected', { groupBy: groupById }) },\n                React.createElement(\"ul\", null, items.map((groupItem, index) => {\n                    return React.createElement(\"li\", { key: index }, groupItem.label);\n                })))));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    error: ocpExportSelectors.selectExportError(state),\n    export: ocpExportSelectors.selectExport(state),\n    fetchStatus: ocpExportSelectors.selectExportFetchStatus(state),\n    isExportModalOpen: uiSelectors.selectIsExportModalOpen(state),\n})), {\n    exportReport: ocpExportActions.exportReport,\n    closeExportModal: uiActions.closeExportModal,\n})(translate()(ExportModal));\n","import { Dropdown, DropdownItem, DropdownToggle, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpQuery';\nimport { ListView } from 'patternfly-react';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { uiActions } from 'store/ui';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsItem } from './detailsItem';\nimport { DetailsToolbar } from './detailsToolbar';\nimport ExportModal from './exportModal';\nimport { listViewOverride, styles, toolbarOverride } from './ocpDetails.styles';\nconst reportType = \"charge\" /* charge */;\nconst baseQuery = {\n    delta: 'charge',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        charge: 'desc',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByItemClick = (event, groupBy) => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, query, { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { charge: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery));\n            this.setState({ selectedItems: [] });\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.onCheckboxChange = (checked, item) => {\n            const { selectedItems } = this.state;\n            let updated = [...selectedItems, item];\n            if (!checked) {\n                let index = -1;\n                for (let i = 0; i < selectedItems.length; i++) {\n                    if (selectedItems[i].label === item.label) {\n                        index = i;\n                        break;\n                    }\n                }\n                if (index > -1) {\n                    updated = [\n                        ...selectedItems.slice(0, index),\n                        ...selectedItems.slice(index + 1),\n                    ];\n                }\n            }\n            this.setState({ selectedItems: updated });\n        };\n        this.onCheckboxAllChange = event => {\n            const { query, report } = this.props;\n            let computedItems = [];\n            if (event.currentTarget.checked) {\n                const groupById = getIdKeyForGroupBy(query.group_by);\n                computedItems = getUnsortedComputedOcpReportItems({\n                    report,\n                    idKey: groupById,\n                });\n            }\n            this.setState({ selectedItems: computedItems });\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { charge: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        title: t('ocp_details.filter.cluster_select'),\n                        placeholder: t('ocp_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        title: t('ocp_details.filter.node_select'),\n                        placeholder: t('ocp_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        title: t('ocp_details.filter.project_select'),\n                        placeholder: t('ocp_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getSortTypes = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        isNumeric: false,\n                        title: t('ocp_details.order.name'),\n                    },\n                    {\n                        id: 'charge',\n                        isNumeric: true,\n                        title: t('ocp_details.order.charge'),\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        isNumeric: false,\n                        title: t('ocp_details.order.name'),\n                    },\n                    {\n                        id: 'charge',\n                        isNumeric: true,\n                        title: t('ocp_details.order.charge'),\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        isNumeric: false,\n                        title: t('ocp_details.order.name'),\n                    },\n                    {\n                        id: 'charge',\n                        isNumeric: true,\n                        title: t('ocp_details.order.charge'),\n                    },\n                ];\n            }\n            return [];\n        };\n        this.isSelected = (item) => {\n            const { selectedItems } = this.state;\n            let selected = false;\n            for (const selectedItem of selectedItems) {\n                if (selectedItem.label === item.label) {\n                    selected = true;\n                    break;\n                }\n            }\n            return selected;\n        };\n        this.onCheckboxChange = this.onCheckboxChange.bind(this);\n        this.onExportClicked = this.onExportClicked.bind(this);\n        this.onFilterAdded = this.onFilterAdded.bind(this);\n        this.onFilterRemoved = this.onFilterRemoved.bind(this);\n        this.onSortChanged = this.onSortChanged.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n        this.setState({});\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, queryString } = this.props;\n        if (prevProps.queryString !== queryString || !report || !location.search) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query) {\n        return `/ocp?${getQuery(query)}`;\n    }\n    onExportClicked() {\n        this.props.openExportModal();\n    }\n    onFilterAdded(filterType, filterValue) {\n        const { history, query } = this.props;\n        if (query.group_by[filterType]) {\n            if (query.group_by[filterType] === '*') {\n                query.group_by[filterType] = filterValue;\n            }\n            else if (!query.group_by[filterType].includes(filterValue)) {\n                query.group_by[filterType] = [query.group_by[filterType], filterValue];\n            }\n        }\n        else {\n            query.group_by[filterType] = [filterValue];\n        }\n        const filteredQuery = this.getRouteForQuery(query);\n        history.replace(filteredQuery);\n    }\n    onFilterRemoved(filterType, filterValue) {\n        const { history, query } = this.props;\n        if (filterValue === '' || !Array.isArray(query.group_by[filterType])) {\n            query.group_by[filterType] = '*';\n        }\n        else {\n            const index = query.group_by[filterType].indexOf(filterValue);\n            if (index > -1) {\n                query.group_by[filterType] = [\n                    ...query.group_by[filterType].slice(0, index),\n                    ...query.group_by[filterType].slice(index + 1),\n                ];\n            }\n        }\n        const filteredQuery = this.getRouteForQuery(query);\n        history.replace(filteredQuery);\n    }\n    onSortChanged(sortType, isSortAscending) {\n        const { history, query } = this.props;\n        query.order_by = {};\n        query.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n        const filteredQuery = this.getRouteForQuery(query);\n        history.replace(filteredQuery);\n    }\n    render() {\n        const { isGroupByOpen, selectedItems } = this.state;\n        const { query, report, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const filterFields = this.getFilterFields(groupById);\n        const sortFields = this.getSortTypes(groupById);\n        const today = new Date();\n        const computedItems = getUnsortedComputedOcpReportItems({\n            report,\n            idKey: groupById,\n        });\n        let sortField = sortFields[0];\n        for (const field of sortFields) {\n            if (query.order_by && query.order_by[field.id]) {\n                sortField = field;\n                break;\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.ocpDetails) },\n            React.createElement(\"header\", { className: css(styles.header) },\n                React.createElement(\"div\", null,\n                    React.createElement(Title, { className: css(styles.title), size: \"2xl\" }, t('ocp_details.title')),\n                    React.createElement(\"div\", { className: css(styles.groupBySelector) },\n                        React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                            t('group_by.charges'),\n                            \":\"),\n                        React.createElement(Dropdown, { onClick: event => event.preventDefault(), onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, t(`group_by.values.${groupById}`)), isOpen: isGroupByOpen, dropdownItems: groupByOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: event => this.handleGroupByItemClick(event, option.value) }, t(`group_by.values.${option.label}`)))) }))),\n                Boolean(report) && (React.createElement(\"div\", { className: css(styles.charge) },\n                    React.createElement(Title, { className: css(styles.chargeValue), size: \"4xl\" }, formatCurrency(report.total.charge)),\n                    React.createElement(\"div\", { className: css(styles.chargeLabel) },\n                        React.createElement(\"div\", { className: css(styles.chargeLabelUnit) }, t('ocp_details.total_charge')),\n                        React.createElement(\"div\", { className: css(styles.chargeLabelDate) }, t('since_date', { month: today.getMonth(), date: 1 })))))),\n            React.createElement(\"div\", { className: css(styles.content) },\n                React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n                    React.createElement(\"div\", { className: toolbarOverride },\n                        React.createElement(DetailsToolbar, { exportText: t('ocp_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.onExportClicked, onFilterAdded: this.onFilterAdded, onFilterRemoved: this.onFilterRemoved, onSortChanged: this.onSortChanged, sortField: sortField, sortFields: sortFields, report: report, resultsTotal: computedItems.length, query: query }),\n                        React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupById: groupById, items: selectedItems, query: query }))),\n                React.createElement(\"div\", { className: listViewOverride },\n                    React.createElement(ListView, null,\n                        React.createElement(ListView.Item, { key: \"header_item\", heading: t('ocp_details.name_column_title', {\n                                groupBy: groupById,\n                            }), checkboxInput: React.createElement(\"input\", { type: \"checkbox\", checked: selectedItems.length === computedItems.length, onChange: this.onCheckboxAllChange }), additionalInfo: [\n                                React.createElement(ListView.InfoItem, { key: \"1\" },\n                                    React.createElement(\"strong\", null, t('ocp_details.change_column_title'))),\n                            ], actions: [\n                                React.createElement(ListView.InfoItem, { key: \"2\" },\n                                    React.createElement(\"strong\", null,\n                                        t('ocp_details.charge_column_title'),\n                                        Boolean(report) && (React.createElement(React.Fragment, null, t('ocp_details.charge_column_subtitle', {\n                                            charge: formatCurrency(report.total.charge),\n                                        }))))),\n                            ] }),\n                        computedItems.map((groupItem, index) => {\n                            return (React.createElement(DetailsItem, { charge: report.total.charge, key: index, parentQuery: query, parentGroupBy: groupById, item: groupItem, onCheckboxChange: this.onCheckboxChange, selected: this.isSelected(groupItem) }));\n                        }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'charge',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, \"charge\" /* charge */, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, \"charge\" /* charge */, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n        query,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n    openExportModal: uiActions.openExportModal,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n","import { hot } from 'react-hot-loader';\nimport OcpDetails from './ocpDetails';\nexport default hot(module)(OcpDetails);\n"],"sourceRoot":""}