{"version":3,"file":"7333ba1c67d01842e460.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/views/details/components/breakdown/index.ts","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/ocpBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/index.ts","webpack://koku-ui/./src/pages/views/details/components/columnManagement/columnManagementModal.tsx","webpack://koku-ui/./src/utils/computedReport/getComputedOcpReportItems.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/index.ts"],"sourcesContent":["import BreakdownBase from './breakdownBase';\nexport default BreakdownBase;\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers: filterProviders(providers, \"ocp\" /* ocp */),\n        providersFetchStatus,\n        providerType: \"ocp\" /* ocp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"ocp\" /* ocp */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import OcpBreakdown from './ocpBreakdown';\nexport default OcpBreakdown;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.manageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.selectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.manageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.manageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": option.value, isChecked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: \"table-column-management-item1\", key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { id: \"table-column-management-item2\", key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport { ColumnManagementModal };\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport { Currency } from 'pages/components/currency';\nimport { EmptyValueState } from 'pages/components/state/emptyValueState/emptyValueState';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = \"ocp\" /* ocp */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, null),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, \"ocp\" /* ocp */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport './detailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { EmptyFilterState } from 'pages/components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'pages/components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = \"ocp\" /* ocp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { hiddenColumns, isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        title: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        title: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        title: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { transforms: [sortable] }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        title: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { transforms: [sortable] }),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ocpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { title: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { title: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 7 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id));\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id));\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                loadingRows,\n                rows: filteredRows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, item: item, providerType: \"ocp\" /* ocp */, query: query, reportPathsType: reportPathsType, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1; // Bump for selection column\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.gcpDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"ocp\" /* ocp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== 1 /* inProgress */) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"ocp\" /* ocp */, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { ColumnManagementModal, initHiddenColumns, } from 'pages/views/details/components/columnManagement/columnManagementModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"ocp\" /* ocp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"ocp\" /* ocp */),\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n","import OcpDetails from './ocpDetails';\nexport default OcpDetails;\n"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","injectIntl","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","constructor","stateProps","dispatchProps","super","this","defaultState","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","setState","handleClose","onClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","render","Modal","TextContent","Text","component","TextVariants","Button","isInline","onClick","variant","isOpen","ModalVariant","actions","key","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","isChecked","name","onChange","DataListItemCells","dataListCells","DataListCell","label","ColumnManagementModalConnect","ColumnManagementModal","getIdKeyForGroupBy","project","cluster","node","baseQuery","delta","groupByOptions","DetailsHeaderBase","arguments","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onGroupBySelected","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","showTags","Boolean","Tooltip","content","enableFlip","featureFlags","DetailsHeader","styles","emptyState","backgroundColor","global_BackgroundColor_light_100","display","justifyContent","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","item","index","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getSupplementaryCost","getTotalCost","getActions","to","basePath","toString","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","filteredColumns","column","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","sortBy","showPriceListOption","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","percentValue","toFixed","keys","tagIndex","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","ininfoArrow","getSortBy","direction","SortByDirection","order_by","c","handleOnSelect","isSelected","rowId","items","handleOnSort","onSort","bind","componentDidMount","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","paddingBottom","global_spacer_lg","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","offset","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","getExportModal","isAllItems","handleExportModalClose","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"sourceRoot":""}