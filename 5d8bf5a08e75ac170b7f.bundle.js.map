{"version":3,"file":"5d8bf5a08e75ac170b7f.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/routes/views/details/ocpBreakdown/costOverview.tsx","webpack://koku-ui/./src/routes/views/details/ocpBreakdown/historicalData.tsx","webpack://koku-ui/./src/routes/views/details/ocpBreakdown/ocpBreakdown.tsx","webpack://koku-ui/./src/routes/views/details/components/columnManagement/columnManagementModal.tsx","webpack://koku-ui/./src/utils/computedReport/getComputedOcpReportItems.ts","webpack://koku-ui/./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack://koku-ui/./src/routes/views/details/ocpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack://koku-ui/./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack://koku-ui/./src/routes/views/details/ocpDetails/ocpDetails.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"ocp\" /* ReportPathsType.ocp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers: filterProviders(providers, \"ocp\" /* ProviderType.ocp */),\n        providersFetchStatus,\n        providerType: \"ocp\" /* ProviderType.ocp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"ocp\" /* TagPathsType.ocp */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.manageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.selectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.manageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.manageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": `${option.value}Label`, isChecked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: `${option.value}Label`, key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport default ColumnManagementModal;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = \"ocp\" /* TagPathsType.ocp */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, null),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, \"ocp\" /* ProviderType.ocp */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport './detailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = \"ocp\" /* ReportPathsType.ocp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { hiddenColumns, isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        title: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        title: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        title: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { transforms: [sortable] }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        title: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { transforms: [sortable] }),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ocpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { title: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { title: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 7 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id));\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id));\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                loadingRows,\n                rows: filteredRows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, item: item, providerType: \"ocp\" /* ProviderType.ocp */, query: query, reportPathsType: reportPathsType, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1; // Bump for selection column\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.gcpDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* TagType.tag */;\nconst tagReportPathsType = \"ocp\" /* TagPathsType.ocp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"ocp\" /* ResourcePathsType.ocp */, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns, } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { addFilterToQuery, removeFilterFromQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"ocp\" /* ReportPathsType.ocp */;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { intl, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* FetchStatus.inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filter) => {\n            const { history, query } = this.props;\n            const filteredQuery = addFilterToQuery(query, filter);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filter) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeFilterFromQuery(query, filter);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* FetchStatus.inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* FetchStatus.complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"ocp\" /* ProviderType.ocp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"ocp\" /* ProviderType.ocp */),\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","injectIntl","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","constructor","stateProps","dispatchProps","super","this","defaultState","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","setState","handleClose","onClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","render","Modal","TextContent","Text","component","TextVariants","Button","isInline","onClick","variant","isOpen","ModalVariant","actions","key","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","isChecked","name","onChange","DataListItemCells","dataListCells","DataListCell","label","ColumnManagementModalConnect","getIdKeyForGroupBy","project","cluster","node","baseQuery","delta","groupByOptions","DetailsHeaderBase","arguments","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onGroupBySelected","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","showTags","Boolean","Tooltip","content","enableFlip","featureFlags","DetailsHeader","styles","emptyState","backgroundColor","global_BackgroundColor_light_100","display","justifyContent","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","item","index","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getSupplementaryCost","getTotalCost","getActions","to","basePath","toString","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","filteredColumns","column","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","sortBy","showPriceListOption","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","percentValue","toFixed","keys","tagIndex","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","ininfoArrow","getSortBy","direction","SortByDirection","order_by","c","handleOnSelect","isSelected","rowId","items","handleOnSort","onSort","bind","componentDidMount","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","paddingBottom","global_spacer_lg","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","offset","exclude","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","getExportModal","isAllItems","handleExportModalClose","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"sourceRoot":""}