{"version":3,"file":"c192170d1a4cc37a700d.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/state/noData/index.ts","webpack://koku-ui/./src/pages/views/components/export/exportModal.styles.ts","webpack://koku-ui/./src/pages/views/components/export/exportSubmit.tsx","webpack://koku-ui/./src/pages/views/components/export/exportModal.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.styles.ts","webpack://koku-ui/./src/pages/views/components/groupBy/groupByOrg.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupByTag.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.tsx","webpack://koku-ui/./src/pages/views/details/components/actions/actions.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdown.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tag.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tagContent.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagModal.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagLink.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownBase.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterContent.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.tsx","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModalContent.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.tsx","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/costOverview/costOverviewBase.tsx","webpack://koku-ui/./src/pages/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataCostChart.tsx","webpack://koku-ui/./src/pages/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack://koku-ui/./src/pages/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataBase.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/utils/paths.ts","webpack://koku-ui/./src/testIds.ts"],"sourcesContent":["import NoData from './noData';\nexport default NoData;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    alert: {\n        marginBottom: global_spacer_md.var,\n    },\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        marginBottom: global_spacer_md.var,\n    },\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { endOfMonth, format, startOfMonth } from 'date-fns';\nimport fileDownload from 'js-file-download';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions, exportSelectors } from 'store/export';\nimport { getTestProps, testIds } from 'testIds';\nimport { getToday } from 'utils/dateRange';\nconst reportType = \"cost\" /* cost */;\nexport class ExportSubmitBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            fetchReportClicked: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExport = () => {\n            const { report, reportFetchStatus } = this.props;\n            if (report && reportFetchStatus === 2 /* complete */) {\n                fileDownload(report.data, this.getFileName(), 'text/csv');\n                this.handleClose();\n            }\n        };\n        this.getFileName = () => {\n            const { endDate, groupBy, intl, reportPathsType, resolution, startDate } = this.props;\n            // defaultMessage: '<provider>_<groupBy>_<resolution>_<start-date>_<end-date>',\n            const fileName = intl.formatMessage(messages.exportFileName, {\n                endDate,\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n                resolution,\n                startDate,\n            });\n            return `${fileName}.csv`;\n        };\n        this.handleClose = () => {\n            const { reportError } = this.props;\n            this.setState(Object.assign({}, this.defaultState), () => {\n                if (!reportError) {\n                    this.props.onClose(false);\n                }\n            });\n        };\n        this.handleFetchReport = () => {\n            const { exportReport, queryString, reportPathsType } = this.props;\n            exportReport(reportPathsType, reportType, queryString);\n            this.setState({\n                fetchReportClicked: true,\n            }, () => {\n                this.getExport();\n            });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError } = this.props;\n        const { fetchReportClicked } = this.state;\n        if (prevProps.report !== report && fetchReportClicked) {\n            this.getExport();\n        }\n        if (reportError) {\n            this.props.onError(reportError);\n        }\n    }\n    render() {\n        const { disabled, intl, reportFetchStatus } = this.props;\n        return (React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: disabled || reportFetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), intl.formatMessage(messages.exportGenerate)));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const { groupBy, isAllItems, items, query, reportPathsType, resolution, timeScope } = props;\n    let endDate = query.end_date;\n    let startDate = query.start_date;\n    // Todo: Add name and format type for \"all exports\" feature\n    const getQueryString = () => {\n        const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter: Object.assign({ limit: undefined, offset: undefined, resolution: resolution ? resolution : undefined }, (!(startDate && endDate) && { time_scope_value: timeScope === 'previous' ? -2 : -1 })), filter_by: {}, limit: 0, order_by: undefined, perspective: undefined, dateRange: undefined, delta: undefined });\n        // Store filter_by as an array so we can add to it below\n        if (query.filter_by) {\n            for (const key of Object.keys(query.filter_by)) {\n                if (newQuery.filter_by[key] === undefined) {\n                    newQuery.filter_by[key] = [];\n                }\n                newQuery.filter_by[key].push(query.filter_by[key]);\n            }\n        }\n        if (isAllItems) {\n            // Ensure group_by isn't overridden -- org_unit_id is not unique\n            if (groupBy === orgUnitIdKey) {\n                if (newQuery.filter_by[orgUnitIdKey] === undefined) {\n                    newQuery.filter_by[orgUnitIdKey] = [];\n                }\n                newQuery.filter_by[orgUnitIdKey].push(query.group_by[orgUnitIdKey]);\n            }\n        }\n        else {\n            if (groupBy === orgUnitIdKey) {\n                for (const item of items) {\n                    // Note that type only exists when grouping by org units\n                    const type = item.type === 'organizational_unit' ? orgUnitIdKey : item.type;\n                    if (newQuery.filter_by[type] === undefined) {\n                        newQuery.filter_by[type] = [];\n                    }\n                    newQuery.filter_by[type].push(item.id);\n                }\n            }\n            else {\n                for (const item of items) {\n                    if (newQuery.filter_by[groupBy] === undefined) {\n                        newQuery.filter_by[groupBy] = [];\n                    }\n                    newQuery.filter_by[groupBy].push(item.id);\n                }\n            }\n        }\n        return getQuery(newQuery);\n    };\n    const queryString = getQueryString();\n    const report = exportSelectors.selectExport(state, reportPathsType, reportType, queryString);\n    const reportError = exportSelectors.selectExportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = exportSelectors.selectExportFetchStatus(state, reportPathsType, reportType, queryString);\n    if (!(startDate && endDate)) {\n        const isPrevious = timeScope === 'previous';\n        const today = getToday();\n        if (isPrevious) {\n            today.setMonth(today.getMonth() - 1);\n        }\n        endDate = format(isPrevious ? endOfMonth(today) : today, 'yyyy-MM-dd');\n        startDate = format(startOfMonth(today), 'yyyy-MM-dd');\n    }\n    return {\n        endDate,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        startDate,\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportSubmitConnect = connect(mapStateToProps, mapDispatchToProps)(ExportSubmitBase);\nconst ExportSubmit = injectIntl(ExportSubmitConnect);\nexport { ExportSubmit };\n","import { Alert, Button, ButtonVariant, Form, FormGroup, Grid, GridItem, Modal, Radio, TextInput, } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { orderBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions } from 'store/export';\nimport { getTestProps, testIds } from 'testIds';\nimport { isFeatureVisible } from 'utils/feature';\nimport { styles } from './exportModal.styles';\nimport { ExportSubmit } from './exportSubmit';\nconst formatTypeOptions = [\n    { label: messages.exportFormatType, value: 'csv' },\n    { label: messages.exportFormatType, value: 'json' },\n];\nconst resolutionOptions = [\n    { label: messages.exportResolution, value: 'daily' },\n    { label: messages.exportResolution, value: 'monthly' },\n];\nconst timeScopeOptions = [\n    { label: messages.exportTimeScope, value: 'current' },\n    { label: messages.exportTimeScope, value: 'previous' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            error: undefined,\n            formatType: 'csv',\n            timeScope: 'current',\n            resolution: this.props.resolution || 'monthly',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Reset default state upon close -- see https://issues.redhat.com/browse/COST-1134\n        this.handleClose = () => {\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleError = (error) => {\n            this.setState({ error });\n        };\n        this.handleMonthChange = (_, event) => {\n            this.setState({ timeScope: event.currentTarget.value });\n        };\n        this.handleNameChange = (_, event) => {\n            this.setState({ name: event.currentTarget.value });\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleTypeChange = (_, event) => {\n            this.setState({ formatType: event.currentTarget.value });\n        };\n        this.nameValidator = value => {\n            if (value.trim().length === 0) {\n                return messages.exportNameRequired;\n            }\n            // Todo: what is the max length allowed?\n            if (value.length > 50) {\n                return messages.exportNameTooLong;\n            }\n            return undefined;\n        };\n        this.handleMonthChange = this.handleMonthChange.bind(this);\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n        this.handleTypeChange = this.handleTypeChange.bind(this);\n    }\n    render() {\n        const { count = 0, groupBy, intl, isAllItems, items, query, reportPathsType, showAggregateType = true, showFormatType = true, showTimeScope = true, } = this.props;\n        const { error, formatType, name, resolution, timeScope } = this.state;\n        let sortedItems = [...items];\n        if (this.props.isOpen) {\n            if (items && items.length === 0 && isAllItems) {\n                sortedItems = [\n                    {\n                        label: intl.formatMessage(messages.exportAll),\n                    },\n                ];\n            }\n            else {\n                sortedItems = orderBy(sortedItems, ['label'], ['asc']);\n            }\n        }\n        let selectedLabel = intl.formatMessage(messages.exportSelected, { groupBy, count });\n        if (groupBy.indexOf(tagPrefix) !== -1) {\n            selectedLabel = intl.formatMessage(messages.exportSelected, { groupBy: 'tag', count });\n        }\n        const thisMonth = new Date();\n        const lastMonth = new Date().setMonth(thisMonth.getMonth() - 1);\n        const currentMonth = format(thisMonth, 'MMMM yyyy');\n        const previousMonth = format(lastMonth - 1, 'MMMM yyyy');\n        const defaultName = name !== undefined\n            ? name\n            : intl.formatMessage(messages.exportName, {\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n            });\n        const helpText = this.nameValidator(defaultName);\n        const validated = helpText ? 'error' : 'default';\n        return (React.createElement(Modal, { style: styles.modal, isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.exportTitle), variant: \"small\", actions: [\n                React.createElement(ExportSubmit, { disabled: validated === 'error', formatType: formatType, groupBy: groupBy, isAllItems: isAllItems, items: items, key: \"confirm\", timeScope: showTimeScope ? timeScope : undefined, onClose: this.handleClose, onError: this.handleError, name: defaultName, query: query, reportPathsType: reportPathsType, resolution: resolution }),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }), intl.formatMessage(messages.cancel)),\n            ] },\n            error && React.createElement(Alert, { variant: \"danger\", style: styles.alert, title: intl.formatMessage(messages.exportError) }),\n            React.createElement(\"div\", { style: styles.title }, isFeatureVisible(\"exports\" /* exports */) ? (React.createElement(\"span\", null, intl.formatMessage(messages.exportDesc, { value: React.createElement(\"b\", null, intl.formatMessage(messages.exportsTitle)) }))) : (React.createElement(\"span\", null, intl.formatMessage(messages.exportHeading, { groupBy })))),\n            React.createElement(Form, { style: styles.form },\n                React.createElement(Grid, { hasGutter: true, md: 6 },\n                    isFeatureVisible(\"exports\" /* exports */) && (React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { fieldId: \"exportName\", helperTextInvalid: helpText ? intl.formatMessage(helpText) : undefined, label: intl.formatMessage(messages.names, { count: 1 }), isRequired: true, validated: validated },\n                            React.createElement(TextInput, { isRequired: true, type: \"text\", id: \"exportName\", name: \"exportName\", value: defaultName, onChange: this.handleNameChange })))),\n                    showAggregateType && (React.createElement(FormGroup, { fieldId: \"aggregate-type\", label: intl.formatMessage(messages.exportAggregateType), isRequired: true },\n                        React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                    showTimeScope && (React.createElement(FormGroup, { fieldId: \"timeScope\", label: intl.formatMessage(messages.exportTimeScopeTitle), isRequired: true },\n                        React.createElement(React.Fragment, null, timeScopeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `timeScope-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, {\n                                date: option.value === 'previous' ? previousMonth : currentMonth,\n                                value: option.value,\n                            }), value: option.value, checked: timeScope === option.value, name: \"timeScope\", onChange: this.handleMonthChange, \"aria-label\": intl.formatMessage(option.label, {\n                                date: option.value === 'previous' ? previousMonth : currentMonth,\n                                value: option.value,\n                            }) })))))),\n                    showFormatType && isFeatureVisible(\"exports\" /* exports */) && (React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { fieldId: \"formatType\", label: intl.formatMessage(messages.exportFormatTypeTitle), isRequired: true }, formatTypeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `formatType-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: formatType === option.value, name: \"formatType\", onChange: this.handleTypeChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                    React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selectedLabels\" },\n                            React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                                return React.createElement(\"li\", { key: index }, groupItem.label);\n                            }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportModalConnect = connect(mapStateToProps, mapDispatchToProps)(ExportModalBase);\nconst ExportModal = injectIntl(ExportModalConnect);\nexport { ExportModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { orgUnitIdKey, orgUnitNameKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByOrgBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            for (const key of groupByKeys) {\n                const index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = queryFromRoute.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.getGroupByItems = () => {\n            const { orgReport } = this.props;\n            if (!(orgReport && orgReport.data)) {\n                return [];\n            }\n            // Sort all names first\n            const sortedData = orgReport.data.sort((a, b) => {\n                if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                    return -1;\n                }\n                if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                    return 1;\n                }\n                return 0;\n            });\n            // Move roots first\n            const roots = sortedData.filter(org => org.level === 0);\n            const filteredOrgs = sortedData.filter(org => org.level !== 0);\n            roots.map(root => {\n                const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n                filteredOrgs.unshift(item);\n            });\n            return filteredOrgs.map(org => ({\n                id: org[orgUnitIdKey],\n                toString: () => org[orgUnitNameKey],\n            }));\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection.id,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${orgUnitIdKey}${selection.id}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled = false, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const groupByItems = this.getGroupByItems();\n        const selection = groupByItems.find((item) => item.id === currentItem);\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.filterByOrgUnitAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.filterByOrgUnitPlaceholder), selections: selection, variant: SelectVariant.typeahead }, groupByItems.map(item => (React.createElement(SelectOption, { description: item.id, key: item.id, value: item }))))));\n    }\n}\nconst GroupByOrg = injectIntl(GroupByOrgBase);\nexport { GroupByOrg };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { uniq, uniqBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getGroupByItems = () => {\n            const { tagReport } = this.props;\n            if (!(tagReport && tagReport.data)) {\n                return [];\n            }\n            // If the key_only param is used, we have an array of strings\n            let hasTagKeys = false;\n            for (const item of tagReport.data) {\n                if (item.hasOwnProperty('key')) {\n                    hasTagKeys = true;\n                    break;\n                }\n            }\n            // Workaround for https://github.com/project-koku/koku/issues/1797\n            let data = [];\n            if (hasTagKeys) {\n                const keepData = tagReport.data.map(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                (_a) => {\n                    var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                    return keepProps;\n                });\n                data = uniqBy(keepData, 'key');\n            }\n            else {\n                data = uniq(tagReport.data);\n            }\n            return data.map(item => {\n                const tagKey = hasTagKeys ? item.key : item;\n                return React.createElement(SelectOption, { key: item.key, value: tagKey });\n            });\n        };\n        this.getCurrentGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy;\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = key.slice(tagPrefix.length);\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${tagPrefix}${selection}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.filterByTagKeyAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.filterByTagKeyPlaceholder), selections: currentItem, variant: SelectVariant.typeahead }, this.getGroupByItems())));\n    }\n}\nconst GroupByTag = injectIntl(GroupByTagBase);\nexport { GroupByTag };\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, parseQuery, tagKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { getDateRange, getDateRangeDefault } from 'pages/views/explorer/explorerUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './groupBy.styles';\nimport { GroupByOrg } from './groupByOrg';\nimport { GroupByTag } from './groupByTag';\nconst groupByOrgOptions = [{ label: orgUnitIdKey, value: orgUnitIdKey }];\nconst groupByTagOptions = [{ label: tagKey, value: tagKey }];\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n            isGroupByOrgVisible: false,\n            isGroupByTagVisible: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const { defaultItem } = this.state;\n            const queryFromRoute = parseQuery(location.search);\n            if (!(queryFromRoute && queryFromRoute.group_by)) {\n                return defaultItem;\n            }\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            for (const key of groupByKeys) {\n                let index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = tagKey;\n                    this.setState({\n                        isGroupByTagVisible: true,\n                    });\n                    break;\n                }\n                index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = orgUnitIdKey;\n                    this.setState({\n                        isGroupByOrgVisible: true,\n                    });\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : defaultItem;\n        };\n        this.getGroupBy = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isGroupByOpen } = this.state;\n            const selectOptions = this.getGroupByOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"groupBySelect\", isDisabled: isDisabled, isOpen: isGroupByOpen, onSelect: this.handleGroupBySelected, onToggle: this.handleGroupByToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getGroupByOptions = () => {\n            const { options, orgReport, tagReport, intl } = this.props;\n            const allOptions = [...options];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                allOptions.push(...groupByOrgOptions);\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                allOptions.push(...groupByTagOptions);\n            }\n            return allOptions.map(option => ({\n                toString: () => intl.formatMessage(messages.groupByValuesTitleCase, { value: option.label, count: 1 }),\n                value: option.value,\n            }));\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            if (selection.value === orgUnitIdKey || selection.value === tagKey) {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: selection.value === orgUnitIdKey,\n                    isGroupByTagVisible: selection.value === tagKey,\n                });\n            }\n            else {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                }, () => {\n                    if (onSelected) {\n                        onSelected(selection.value);\n                    }\n                });\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportFetchStatus, orgReportPathsType, queryString, showOrgs, showTags, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        }, () => {\n            if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgReportFetchStatus, orgReportPathsType, perspective, queryString, showOrgs, showTags, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            let options;\n            if (prevProps.perspective !== perspective) {\n                options = {\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                };\n            }\n            this.setState(Object.assign({ currentItem: this.getCurrentGroupBy() }, (options ? options : {})), () => {\n                if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                    fetchOrg(orgReportPathsType, orgReportType, queryString);\n                }\n                if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n    }\n    render() {\n        const { getIdKeyForGroupBy, groupBy, isDisabled = false, onSelected, orgReport, intl, tagReport } = this.props;\n        const { isGroupByOrgVisible, isGroupByTagVisible } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.groupBySelectorLabel }, intl.formatMessage(messages.groupByLabel)),\n            this.getGroupBy(),\n            Boolean(isGroupByOrgVisible) && (React.createElement(GroupByOrg, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByOrgOptions, orgReport: orgReport })),\n            Boolean(isGroupByTagVisible) && (React.createElement(GroupByTag, { groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByTagOptions, tagReport: tagReport }))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { orgReportPathsType, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    // Default to current month filter for details pages\n    let tagFilter = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    };\n    // Replace with start and end dates for Cost Explorer\n    if (queryFromRoute.dateRange) {\n        const dateRange = getDateRangeDefault(queryFromRoute);\n        const { end_date, start_date } = getDateRange(dateRange);\n        tagFilter = {\n            end_date,\n            start_date,\n        };\n    }\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery(Object.assign(Object.assign({}, tagFilter), { key_only: true, limit: 1000 }));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    return {\n        orgReport,\n        orgReportFetchStatus,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst GroupByConnect = connect(mapStateToProps, mapDispatchToProps)(GroupByBase);\nconst GroupBy = injectIntl(GroupByConnect);\nexport { GroupBy };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query, reportPathsType } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, redirectToCostModel, history, item: { source_uuid }, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], history) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport { Actions };\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { TagContent } from './tagContent';\nconst tagReportType = \"tag\" /* tag */;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, query, tagReport, intl } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagModalBase));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = \"tag\" /* tag */;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }), count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase));\nexport { TagLink };\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { breakdownDescKey, breakdownTitleKey, getQueryRoute, orgUnitIdKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { Currency } from 'pages/components/currency';\nimport { CostType } from 'pages/views/components/costType';\nimport { TagLink } from 'pages/views/details/components/tag/tagLink';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { isFeatureVisible } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = () => {\n            const { detailsURL, groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            // Don't want these params when returning to the details page\n            if (newQuery.filter) {\n                newQuery.filter.account = undefined;\n                newQuery[breakdownDescKey] = undefined;\n                newQuery[orgUnitIdKey] = undefined;\n                newQuery[breakdownTitleKey] = undefined;\n            }\n            return `${detailsURL}?${getQueryRoute(newQuery)}`;\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { costType, description, groupBy, query, intl, showCostType = false, tabs, tagReportPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'project' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            React.createElement(Link, { to: this.buildDetailsLink() }, intl.formatMessage(messages.breakdownBackToDetails, {\n                                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagReportPathsType }),\n                                groupBy: groupByKey,\n                            }))))),\n                React.createElement(\"div\", { style: styles.headerContentRight }, isFeatureVisible(\"currency\" /* currency */) && React.createElement(Currency, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: this.handleCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getForDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }), messages.breakdownTotalCostDate, 0)))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst BreakdownHeader = injectIntl(BreakdownHeaderBase);\nexport { BreakdownHeader };\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQueryRoute } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './breakdown.styles';\nimport { BreakdownHeader } from './breakdownHeader';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"cost-overview\" /* costOverview */:\n            return 'cost-overview';\n        case \"historical-data\" /* historicalData */:\n            return 'historical-data';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: \"cost-overview\" /* costOverview */,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: \"historical-data\" /* historicalData */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"cost-overview\" /* costOverview */) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === \"historical-data\" /* historicalData */) {\n                return historicalDataComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"cost-overview\" /* costOverview */) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === \"historical-data\" /* historicalData */) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { location, fetchReport, queryString, reportPathsType, reportType } = this.props;\n            if (location.search) {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costType: costType, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: this.handleCostTypeSelected, query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nexport default injectIntl(BreakdownBase);\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { item } = this.props;\n        if (!item.clusters) {\n            return null;\n        }\n        return item.clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, intl } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, { groupBy, name: item.label }), width: '50%' },\n            React.createElement(ClusterContent, { item: item })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, report, intl } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        const item = computedItems && computedItems.length ? computedItems[0] : undefined;\n        if (!item) {\n            return null;\n        }\n        for (const cluster of item.clusters) {\n            const prefix = someClusters.length > 0 ? ', ' : '';\n            const clusterString = `${prefix}${cluster}`;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + clusterString.length > maxChars) {\n                    someClusters.push(clusterString\n                        .slice(0, maxChars - charCount)\n                        .trim()\n                        .concat('...'));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            charCount += clusterString.length;\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.cluster_lnk), { href: \"#/\", onClick: this.handleOpen }), intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport { Cluster };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 400,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 25, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.breakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.breakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.breakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport { CostChart };\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { ReportSummaryItem, ReportSummaryItems } from 'pages/views/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './summaryModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportGroupBy, reportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { ReportSummaryItem, ReportSummaryItems } from 'pages/views/components/reports/reportSummary';\nimport { SummaryModal } from 'pages/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { groupBy, query, reportGroupBy, reportPathsType, intl } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { groupBy: groupBy, groupByValue: groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== queryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { reportGroupBy, reportFetchStatus, intl } = this.props;\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.breakdownSummaryTitle, { value: reportGroupBy }))),\n            React.createElement(CardBody, null, reportFetchStatus === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportGroupBy, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        cost_type: costType,\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        report,\n        reportFetchStatus,\n        reportPathsType,\n        reportType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryBase));\nexport { SummaryCard };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { getResizeObserver } from 'pages/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, report, intl } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included only when grouped by cluster\n        if (groupBy === 'cluster') {\n            const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n            const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase));\nexport { UsageChart };\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { Cluster } from 'pages/views/details/components/cluster/cluster';\nimport { CostChart } from 'pages/views/details/components/costChart/costChart';\nimport { SummaryCard } from 'pages/views/details/components/summary/summaryCard';\nimport { UsageChart } from 'pages/views/details/components/usageChart/usageChart';\nimport { styles } from 'pages/views/details/ocpDetails/detailsHeader.styles';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, report, intl } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report }))));\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = () => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.breakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.breakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, groupBy, query } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                if (groupById === groupBy ||\n                    (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                    (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cluster\" /* cluster */:\n                return this.getClusterChart(widget);\n            case \"cost\" /* cost */:\n                return this.getCostChart();\n            case \"cpuUsage\" /* cpuUsage */:\n                return this.getCpuUsageChart(widget);\n            case \"memoryUsage\" /* memoryUsage */:\n                return this.getMemoryUsageChart(widget);\n            case \"summary\" /* reportSummary */:\n                return this.getSummaryCard(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport { CostOverviewBase };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getCostRangeString } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costInfrastructureKey = messages.chartCostInfrastructureLegendLabel;\n            const costInfrastructureTooltipKey = messages.chartCostInfrastructureLegendTooltip;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: previousInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1, messages.chartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousInfrastructureCostData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: currentInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false, 0, messages.chartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentInfrastructureCostData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 700 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 700\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport { HistoricalCostChart };\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { transformReport } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { HistoricalCostChart } from 'pages/views/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, 0 /* rolling */, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, 0 /* rolling */, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const baseQuery = {\n        cost_type: costType,\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport { HistoricalTrendChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { transformReport } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { HistoricalTrendChart } from 'pages/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl } = this.props;\n        const isCostChart = reportType === \"cost\" /* cost */;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const baseQuery = {\n        cost_type: costType,\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getUsageRangeString } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 900 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 900\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport { HistoricalUsageChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { transformReport } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { HistoricalUsageChart } from 'pages/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, 1 /* daily */, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, 1 /* daily */, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, 1 /* daily */, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, 1 /* daily */, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, 1 /* daily */, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, 1 /* daily */, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === \"instance_type\" /* instanceType */ || reportType === \"storage\" /* storage */;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cost\" /* cost */:\n                return this.getCostChart(widget);\n            case \"trend\" /* trend */:\n                return this.getTrendChart(widget);\n            case \"usage\" /* usage */:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport { HistoricalDataBase };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { hasCloudProvider } from 'pages/views/utils/providers';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate, getLast90DaysDate } from 'utils/dateRange';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: messages.explorerDateRange, value: 'current_month_to_date' },\n    { label: messages.explorerDateRange, value: 'previous_month_to_date' },\n    { label: messages.explorerDateRange, value: 'last_thirty_days' },\n    { label: messages.explorerDateRange, value: 'last_sixty_days' },\n    { label: messages.explorerDateRange, value: 'last_ninety_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByGcpOcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nexport const infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure OCI options\nexport const infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nexport const infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OpenShift options\nexport const infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OpenShift options\nexport const infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nexport const infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nexport const ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift supplementary & usage\" perspectives -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift usage\" perspective -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"total\" /* total */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_ninety_days\" /* lastNinetyDays */:\n            dateRange = getLast90DaysDate();\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, azureProviders, ociProviders, gcpProviders, ibmProviders, ocpProviders, queryFromRoute, userAccess, }) => {\n    const perspective = queryFromRoute.perspective;\n    // Upon page refresh, perspective param takes precedence\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n        case \"ibm_ocp\" /* ibmOcp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            return perspective;\n    }\n    if (isOcpAvailable(userAccess, ocpProviders)) {\n        return \"ocp\" /* ocp */;\n    }\n    const hasAwsCloud = hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n    const hasAzureCloud = hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n    const hasGcpCloud = hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n    const hasIbmCloud = hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n    if (hasAwsCloud || hasAzureCloud || hasGcpCloud || hasIbmCloud) {\n        return \"ocp_cloud\" /* ocpCloud */;\n    }\n    if (isAwsAvailable(userAccess, awsProviders)) {\n        return \"aws\" /* aws */;\n    }\n    if (isAzureAvailable(userAccess, azureProviders)) {\n        return \"azure\" /* azure */;\n    }\n    if (isOciAvailable(userAccess, ociProviders)) {\n        return \"oci\" /* oci */;\n    }\n    if (isGcpAvailable(userAccess, gcpProviders)) {\n        return \"gcp\" /* gcp */;\n    }\n    if (isIbmAvailable(userAccess, ibmProviders)) {\n        return \"ibm\" /* ibm */;\n    }\n    return undefined;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = groupByGcpOcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            result = \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            result = \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n        case \"ibm\" /* ibm */:\n            return \"ibm\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, label, description, groupBy, query, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n            [groupBy]: label,\n        } });\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, orgUnitId, query, title, type, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && orgUnitId && { [orgUnitIdKey]: orgUnitId })), { group_by: {\n            [groupBy]: id, // This may be overridden below\n        } });\n    if (!newQuery.filter) {\n        newQuery.filter = {};\n    }\n    if (type === 'account') {\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n"],"names":["styles","alert","marginBottom","global_spacer_md","form","marginLeft","global_spacer_sm","modal","input","marginRight","global_spacer_xs","ul","title","reportType","ExportSubmitBase","constructor","stateProps","dispatchProps","super","this","defaultState","fetchReportClicked","state","Object","assign","getExport","report","reportFetchStatus","props","data","getFileName","handleClose","endDate","groupBy","intl","reportPathsType","resolution","startDate","formatMessage","messages","provider","indexOf","reportError","setState","onClose","handleFetchReport","exportReport","queryString","componentDidUpdate","prevProps","onError","render","disabled","Button","testIds","isDisabled","key","onClick","variant","ButtonVariant","mapStateToProps","isAllItems","items","query","timeScope","end_date","start_date","newQuery","JSON","parse","stringify","filter","limit","undefined","offset","time_scope_value","filter_by","order_by","perspective","dateRange","delta","keys","push","group_by","item","type","id","getQueryString","isPrevious","today","setMonth","getMonth","format","endOfMonth","startOfMonth","mapDispatchToProps","ExportSubmitConnect","connect","ExportSubmit","injectIntl","formatTypeOptions","label","value","resolutionOptions","timeScopeOptions","ExportModalBase","error","formatType","handleError","handleMonthChange","_","event","currentTarget","handleNameChange","name","handleResolutionChange","handleTypeChange","nameValidator","trim","length","bind","count","showAggregateType","showFormatType","showTimeScope","sortedItems","isOpen","orderBy","selectedLabel","thisMonth","Date","lastMonth","currentMonth","previousMonth","defaultName","helpText","validated","Modal","style","actions","Alert","Form","Grid","hasGutter","md","GridItem","span","FormGroup","fieldId","helperTextInvalid","isRequired","TextInput","onChange","map","option","index","Radio","isValid","checked","date","groupItem","ExportModalConnect","ExportModal","groupBySelector","display","alignItems","groupBySelectorLabel","whiteSpace","GroupByOrgBase","defaultItem","options","isGroupByOpen","getCurrentGroupBy","getIdKeyForGroupBy","queryFromRoute","location","search","groupByKeys","getGroupByItems","orgReport","sortedData","sort","a","b","roots","org","level","filteredOrgs","root","find","unshift","toString","handleGroupByClear","currentItem","handleGroupBySelected","selection","onSelected","handleGroupByToggle","componentDidMount","groupByItems","Select","onClear","onToggle","onSelect","placeholderText","selections","SelectVariant","SelectOption","description","GroupByOrg","GroupByTagBase","tagReport","hasTagKeys","hasOwnProperty","keepData","_a","s","e","t","p","prototype","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","uniqBy","uniq","tagKey","slice","GroupByTag","groupByOrgOptions","groupByTagOptions","orgReportType","tagReportType","GroupByBase","isGroupByOrgVisible","isGroupByTagVisible","getGroupBy","selectOptions","getGroupByOptions","allOptions","fetchOrg","fetchTag","orgReportFetchStatus","orgReportPathsType","showOrgs","showTags","tagReportFetchStatus","tagReportPathsType","Title","headingLevel","size","Boolean","tagFilter","time_scope_units","key_only","GroupByConnect","GroupBy","DetailsActionsBase","isDropdownOpen","isExportModalOpen","getExportModal","handleExportModalClose","handleExportModalOpen","handleOnSelect","handleOnToggle","showPriceListOption","redirectToCostModel","history","source_uuid","DropdownItem","component","includes","Dropdown","toggle","KebabToggle","isPlain","position","dropdownItems","DetailsActionsConnect","Actions","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","tagLink","tagsContainer","global_spacer_3xl","marginTop","TagContentBase","arguments","getDataListItems","result","val","values","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","groupByValue","dataListItems","DataList","isCompact","TagContent","TagModalBase","getTagValueCount","shouldComponentUpdate","nextProps","account","width","groupByOrgValue","filterByParams","TagModal","TagLinkBase","handleOpen","preventDefault","href","TagLink","cost","global_spacer_xl","costLabel","costValue","textAlign","costLabelDate","costType","header","backgroundColor","global_BackgroundColor_100","headerContent","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeaderBase","buildDetailsLink","detailsURL","groupByKey","getTotalCost","hasCost","meta","total","units","handleCostTypeSelected","onCostTypeSelected","showCostType","filterByAccount","groupByOrg","groupByTag","className","to","TitleSizes","BreakdownHeader","getIdKeyForTab","tab","BreakdownBase","activeTabKey","getAvailableTabs","contentRef","getRouteForQuery","pathname","getTab","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","ref","getTabItem","costOverviewComponent","historicalDataComponent","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","cost_type","replace","tabIndex","updateReport","fetchReport","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","height","subTitle","ClusterModalBase","ClusterModal","ClusterBase","showAll","charCount","someClusters","allClusters","computedItems","getComputedReportItems","idKey","clusterString","concat","Cluster","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","CostChart","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","_item","formatOptions","totalValue","SummaryModalContent","SummaryModalBase","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","handleBulletChartModalOpen","ButtonType","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","SummaryCard","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasCapacity","request","capacityUnits","hasRequest","requestUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","lg","percentage","minimumFractionDigits","maximumFractionDigits","UsageChart","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","enableFlip","bodyContent","rel","target","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","usePlaceholder","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","CostOverviewBase","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costInfrastructureKey","costInfrastructureTooltipKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","HistoricalCostChart","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalTrendChart","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalUsageChart","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTrendChart","getUsageChart","HistoricalDataBase","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByGcpOcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","getComputedReportItemType","getComputedReportItemValueType","getDateRange","dateRangeType","setDate","getDateRangeDefault","getPerspectiveDefault","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","ocpProviders","userAccess","hasAwsCloud","hasAzureCloud","hasGcpCloud","hasIbmCloud","getGroupByDefault","getOrgReportPathsType","getReportType","getReportPathsType","getResourcePathsType","getTagReportPathsType","reset","getBreakdownPath","basePath","getOrgBreakdownPath","orgUnitId","getTestProps","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","export","cancel_btn","submit_btn","login","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop"],"sourceRoot":""}