{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/testIds.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/computedReport/getItemLabel.ts","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts","webpack:///./src/utils/computedReport/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/computedReport/getComputedAzureReportItems.ts","webpack:///./src/utils/computedReport/getComputedAwsReportItems.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/trendChart/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","unitLookupKey","formatValue","formatCurrency","unit","lookup","toLowerCase","value","options","fValue","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","transformAwsReport","transformAzureReport","transformOcpReport","transformOcpCloudReport","getDateRange","getMaxValue","getTooltipContent","getTooltipLabel","getCostRangeString","getUsageRangeString","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0__","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","n","date_fns_format__WEBPACK_IMPORTED_MODULE_1__","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3__","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","i18next__WEBPACK_IMPORTED_MODULE_5__","utils_computedReport_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_6__","utils_computedReport_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_7__","utils_computedReport_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_8__","utils_computedReport_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_9__","utils_formatValue__WEBPACK_IMPORTED_MODULE_10__","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","map","i","createDatum","reduce","acc","prevValue","length","y","computedItem","x","id","label","Number","isFloat","parseFloat","toFixed","isInt","name","units","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","getDatumDateRange","setDate","lastDate","getDate","max","forEach","datum","t","formatOptions","toString","count","endDate","month","startDate","year","getTestProps","testIds","data-testid","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","styles","StyleSheet","create","container","fontSize","esm","EmptyValueState","react_default","createElement","className","minus_icon","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getItemLabel","api_query__WEBPACK_IMPORTED_MODULE_0__","labelKey","itemLabelKey","String","meta","group_by","keys","indexOf","tagPrefixKey","hasOwnProperty","display","justifyContent","height","marginTop","LoadingState","es","icon","binoculars_icon","title","subTitle","EmptyState","Spinner","size","Title","EmptyStateBody","ErrorState","error","error_circle_o_icon","response","status","lock_icon","EmptyStateIcon","getComputedOcpReportItems","getUnsortedComputedOcpReportItems","getIdKeyForGroupBy","utils_sort__WEBPACK_IMPORTED_MODULE_0__","_getItemLabel__WEBPACK_IMPORTED_MODULE_1__","itemMap","Map","visitDataPoint","dataPoint","values","cluster_alias","clusters","undefined","cluster","capacity","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","viewSources","NoProvidersState","react_redux_es","Component","[object Object]","super","arguments","this","getViewSources","props","pathName","window","location","pathname","split","shift","release","href","dollar_sign_icon","chartStyles","labels","fontFamily","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","state","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis"],"mappings":"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","file":"5669a7058e570c8024a2.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { getComputedAwsReportItems, } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/computedReport/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/computedReport/getComputedOcpReportItems';\nimport { unitLookupKey, } from 'utils/formatValue';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { tagKeyPrefix } from 'api/query';\nexport function getItemLabel({ report, labelKey, value }) {\n    let itemLabelKey = String(labelKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagKeyPrefix)) {\n                const tagPrefixKey = tagKeyPrefix + labelKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, Spinner, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(Spinner, { size: \"lg\" }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { ErrorCircleOIcon, LockIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error &&\n        error.response &&\n        (error.response.status === 401 || error.response.status === 403)) {\n        icon = LockIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            const pathName = window.location.pathname.split('/');\n            pathName.shift();\n            let release = '';\n            if (pathName[0] === 'beta') {\n                release = `/beta`;\n            }\n            return (React.createElement(\"a\", Object.assign({ href: `${release}/settings/sources` }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst NoProvidersState = translate()(connect()(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            // Todo: Leave one legend item visible at all times?\n            // const { hiddenSeries, series } = this.state;\n            // const leaveVisible = hiddenSeries.size === series.length - 1;\n            // if (leaveVisible && !this.isSeriesHidden(props.index)) {\n            //   return;\n            // }\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export { TrendChart } from './trendChart';\n"],"sourceRoot":""}