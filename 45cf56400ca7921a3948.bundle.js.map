{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx","webpack://koku-ui/./src/utils/userAccess.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","t","label","getCurrentLabel","currentItem","getDropDown","isDisabled","dropdownItems","length","style","Dropdown","onSelect","handleSelect","toggle","DropdownToggle","onToggle","handleToggle","isOpen","onItemClicked","setState","render","Perspective","withTranslation","mapStateToProps","selectWidgets","azureCostOverview","widgets","CostOverview","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","costValue","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupByClicked","providersError","showContent","meta","count","hasCost","total","cost","Title","headingLevel","size","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","tagFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute","account","cluster","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChart","containerRef","observer","noop","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","units","getUnits","datum","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getBarWidth","domainPadding","maxWidth","maxValue","forEach","s","sectionWidth","getChart","barWidth","has","y","ChartBar","formatDatumValue","formatDatumOptions","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","max","getEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","modVal","i","str","substr","maxChars","getTickValue","handleResize","clientWidth","current","componentWillUnmount","container","disable","labelComponent","ChartLegendTooltip","legendData","i18next","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartTheme","ChartStack","ChartAxis","C","fixLabelOverlap","dependentAxis","tickFormat","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","ocpOptions","getComputedReportItemType","perspective","result","getComputedReportItemValueType","getDateRange","dateRangeType","endDate","Date","startDate","dateRange","setDate","setMonth","getMonth","end_date","format","start_date","getDateRangeDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","getDate","month","yVal","parseFloat","getChartDatums","computedReportItemType","computedReportItemValueType","chartDatums","datums","Map","Array","from","padChartDatums","getChartTitle","getGroupBy","daily","groupByOrg","getSkeleton","Skeleton","skeleton","padDate","chartDatum","formatValue","ExplorerChartConnect","ExplorerChart","withRouter","DateRangeBase","isDateRangeOpen","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgQueryString","orgReportPathsType","tagQueryString","orgReportFetchStatus","tagReportFetchStatus","ExplorerFilterConnect","ExplorerFilter","costLabel","costLabelDate","global_Color_200","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getPerspective","currentPerspective","aws","isAwsAvailable","azure","isAzureAvailable","gcp","isGcpAvailable","ibm","isIbmAvailable","ocp","isOcpAvailable","handlePerspectiveClick","onPerspectiveClicked","awsProviders","awsProvidersFetchStatus","userAccess","azureProviders","azureProvidersFetchStatus","gcpProviders","gcpProvidersFetchStatus","ibmProviders","ibmProvidersFetchStatus","ibmUserAccess","ocpProviders","ocpProvidersFetchStatus","noProviders","getResourcePathsType","showOrgs","userAccessQueryString","userAccessError","userAccessFetchStatus","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","mapIdDate","rowItem","get","set","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","showAggregateType","showTimeScope","slice","newPerspective","getPerspectiveDefault","hasAccess","userAccessType","isArray","d","type","access","hasProviders","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess"],"mappings":"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","file":"45cf56400ca7921a3948.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.getDropDown = () => {\n            const { isDisabled, options, t } = this.props;\n            const { isPerspectiveOpen } = this.state;\n            const dropdownItems = this.getDropDownItems();\n            if (options.length === 1) {\n                return React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, t(options[0].label));\n            }\n            return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems }));\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            this.getDropDown()));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.azure_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.azure_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString())))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('details.tag_names'),\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                {\n                    name: t('filter_by.values.subscription_guid'),\n                    key: 'subscription_guid',\n                },\n                { name: t('filter_by.values.service_name'), key: 'service_name' },\n                {\n                    name: t('filter_by.values.resource_location'),\n                    key: 'resource_location',\n                },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"azure\" /* azure */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.azure_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { formatCurrencyAbbreviation } from 'utils/formatValue';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // If bar width exceeds max and domainPadding is true, extra width is returned to help center bars horizontally\n        this.getBarWidth = (domainPadding = false) => {\n            const { hiddenSeries, series, width } = this.state;\n            const maxWidth = 200;\n            let maxValue = -1;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        if (s.data.length > maxValue) {\n                            maxValue = s.data.length;\n                        }\n                    }\n                });\n            }\n            // Divide available width into equal sections\n            const sections = maxValue * 2 + 1;\n            const sectionWidth = maxValue > 0 ? width / sections : 0;\n            if (domainPadding) {\n                // Add any extra bar width for domain padding\n                const extraWidth = sectionWidth > maxWidth ? (sectionWidth - maxWidth) * maxValue : 0;\n                return (sectionWidth + extraWidth / 2) * 2;\n            }\n            return sectionWidth > maxWidth ? maxWidth : sectionWidth;\n        };\n        this.getChart = (series, index, barWidth) => {\n            const { hiddenSeries } = this.state;\n            const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n            return (React.createElement(ChartBar, { barWidth: barWidth, data: data, key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            const modVal = values.length < 6 ? 2 : 3;\n            for (let i = 0; i < values.length; i++) {\n                if (i % modVal === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n                else if (values.length < 3 && i + 1 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 20,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        const barWidth = this.getBarWidth();\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), domainPadding: { x: this.getBarWidth(true) }, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index, barWidth)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues(), fixLabelOverlap: true }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: 'explorer.date_range.current_month_to_date', value: 'current_month_to_date' },\n    { label: 'explorer.date_range.previous_month_to_date', value: 'previous_month_to_date' },\n    { label: 'explorer.date_range.last_thirty_days', value: 'last_thirty_days' },\n    { label: 'explorer.date_range.last_sixty_days', value: 'last_sixty_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: 'explorer.perspective.aws', value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nexport const infrastructureAwsOcpOptions = [{ label: 'explorer.perspective.aws_ocp', value: 'aws_ocp' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: 'explorer.perspective.azure', value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nexport const infrastructureAzureOcpOptions = [{ label: 'explorer.perspective.azure_ocp', value: 'azure_ocp' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: 'explorer.perspective.gcp', value: 'gcp' }];\n// Infrastructure GCP filtered by OpenShift options\nexport const infrastructureGcpOcpOptions = [{ label: 'explorer.perspective.gcp_ocp', value: 'gcp_ocp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: 'explorer.perspective.ibm', value: 'ibm' }];\n// Infrastructure Ocp cloud options\nexport const infrastructureOcpCloudOptions = [{ label: 'explorer.perspective.ocp_cloud', value: 'ocp_cloud' }];\n// Ocp options\nexport const ocpOptions = [{ label: 'explorer.perspective.ocp', value: 'ocp' }];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift supplementary & usage\" perspectives -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift usage\" perspective -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"total\" /* total */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, queryFromRoute, userAccess, }) => {\n    let result = queryFromRoute.perspective;\n    if (!result) {\n        if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n            result = \"ocp\" /* ocp */;\n        }\n        else if (isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus)) {\n            result = \"aws\" /* aws */;\n        }\n        else if (isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus)) {\n            result = \"azure\" /* azure */;\n        }\n        else if (isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus)) {\n            result = \"gcp\" /* gcp */;\n        }\n        else if (isIbmAvailable(userAccess, ibmProviders, ibmProvidersFetchStatus)) {\n            result = \"ibm\" /* ibm */;\n        }\n    }\n    return result;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            result = \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            result = \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n        case \"ibm\" /* ibm */:\n            return \"ibm\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","import { Skeleton, Title } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { isFloat, isInt, } from 'components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'components/charts/costExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatValue } from 'utils/formatValue';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { t } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = t('chart.date', { date: getDate(computedItemDate), month: getMonth(computedItemDate) });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return {\n                x: xVal,\n                y: value === null ? null : yVal,\n                date: computedItem.date,\n                key: computedItem.id,\n                name: computedItem.label ? computedItem.label : computedItem.id,\n                units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined,\n            };\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            if (perspective) {\n                const reportPathsType = getReportPathsType(perspective);\n                const reportType = getReportType(perspective);\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getChartTitle = (perspective) => {\n            let result;\n            switch (perspective) {\n                case \"aws\" /* aws */:\n                    result = 'explorer.title.aws';\n                    break;\n                case \"aws_ocp\" /* awsOcp */:\n                    result = 'explorer.title.aws_ocp';\n                    break;\n                case \"azure\" /* azure */:\n                    result = 'explorer.title.azure';\n                    break;\n                case \"azure_ocp\" /* azureOcp */:\n                    result = 'explorer.title.azure_ocp';\n                    break;\n                case \"gcp\" /* gcp */:\n                    result = 'explorer.title.gcp';\n                    break;\n                case \"gcp_ocp\" /* gcpOcp */:\n                    result = 'explorer.title.gcp_ocp';\n                    break;\n                case \"ibm\" /* ibm */:\n                    result = 'explorer.title.ibm';\n                    break;\n                case \"ocp\" /* ocp */:\n                    result = 'explorer.title.ocp';\n                    break;\n                case \"ocp_cloud\" /* ocpCloud */:\n                    result = 'explorer.title.ocp_cloud';\n                    break;\n                default:\n                    result = undefined;\n                    break;\n            }\n            return result;\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const label = datums[0].name;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key, label }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, t } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, t(this.getChartTitle(perspective)))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = withRouter(withTranslation()(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isDateRangeOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isDateRangeOpen: !this.state.isDateRangeOpen,\n            });\n        };\n        this.handleToggle = isDateRangeOpen => {\n            this.setState({\n                isDateRangeOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled } = this.props;\n        const { isDateRangeOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isDateRangeOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst DateRange = withTranslation()(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, t, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: t(`filter_by.values.${option.label}`),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentDateRange: value });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportPathsType, tagQueryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgQueryString, orgReport, orgReportPathsType, perspective, query, tagQueryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, resourcePathsType, tagReport } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, resourcePathsType: resourcePathsType, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    }\n    // Fetch tags with largest date range available\n    const { start_date, end_date } = getLast60DaysDate();\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery({\n        start_date,\n        end_date,\n    });\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    }\n    return {\n        dateRange,\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilterConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase);\nconst ExplorerFilter = withRouter(withTranslation()(ExplorerFilterConnect));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getResourcePathsType, getRouteForQuery, getTagReportPathsType, infrastructureAwsOcpOptions, infrastructureAwsOptions, infrastructureAzureOcpOptions, infrastructureAzureOptions, \n// infrastructureGcpOcpOptions, // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\ninfrastructureGcpOptions, infrastructureIbmOptions, \n// infrastructureOcpCloudOptions, // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\nocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPerspective = (isDisabled) => {\n            const { currentPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (ocp) {\n                options.push(...ocpOptions);\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n                //\n                // options.push(...infrastructureOcpCloudOptions);\n            }\n            if (aws) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (aws && ocp) {\n                options.push(...infrastructureAwsOcpOptions);\n            }\n            if (gcp) {\n                options.push(...infrastructureGcpOptions);\n            }\n            // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n            //\n            // if (gcp && ocp) {\n            //   options.push(...infrastructureGcpOcpOptions);\n            // }\n            if (ibm) {\n                options.push(...infrastructureIbmOptions);\n            }\n            if (azure) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (azure && ocp) {\n                options.push(...infrastructureAzureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.handlePerspectiveClick = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: undefined, perspective: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n            });\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.props.perspective,\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { perspective } = this.props;\n        if (prevProps.perspective !== perspective) {\n            this.setState({\n                currentPerspective: this.props.perspective,\n            });\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, ibmProvidersFetchStatus, ibmUserAccess, groupBy, gcpProvidersFetchStatus, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupByClicked, perspective, query, t, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const resourcePathsType = getResourcePathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        // Fetch tags with largest date range available\n        const { start_date, end_date } = getLast60DaysDate();\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.explorer')),\n                React.createElement(\"div\", { style: styles.perspectiveContainer },\n                    this.getPerspective(noProviders),\n                    React.createElement(\"div\", { style: styles.groupBy },\n                        React.createElement(GroupBy, { endDate: end_date, getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, startDate: start_date, tagReportPathsType: tagReportPathsType }))),\n                React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, perspective: perspective, query: query, resourcePathsType: resourcePathsType }))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const queryFromRoute = parseQuery(location.search);\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = withRouter(withTranslation()(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, t, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg ? t('explorer.org_unit_column_title') : t('details.tag_names'),\n                    },\n                ]\n                : [\n                    {\n                        cellTransforms: [nowrap],\n                        orderBy: groupById === 'account' && perspective === \"aws\" /* aws */ ? 'account_alias' : groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                ];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push({\n                    cellTransforms: [nowrap],\n                    orderBy: undefined,\n                    title: t('explorer.daily_column_title', { date, month }),\n                    transforms: undefined,\n                });\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n            }\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[reportItem] && item[reportItem][reportItemValue]\n                            ? formatCurrency(item[reportItem][reportItemValue].value)\n                            : t('explorer.no_data'),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            if (query && query.order_by) {\n                for (const key of Object.keys(query.order_by)) {\n                    let c = 0;\n                    for (const column of columns) {\n                        if (column.orderBy === key) {\n                            direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        c++;\n                    }\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": \"explorer-table\", canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = withTranslation()(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, selectedItems, } = this.props;\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = withTranslation()(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getComputedReportItemValueType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\", showAggregateType: false, showTimeScope: false }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: undefined });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: query ? query.order_by : undefined,\n                    dateRange,\n                }));\n            }\n            else if (perspective) {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, perspective, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newPerspective = prevProps.perspective !== perspective;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newPerspective || newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ibmUserAccess, ibmUserAccessFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, t, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */ ||\n            ibmUserAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = t('navigation.explorer');\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupByClicked: this.handleGroupByClick, onPerspectiveClicked: this.handlePerspectiveClick, perspective: perspective }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), perspective: perspective })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    // Cost Report\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const perspective = getPerspectiveDefault({\n        awsProviders,\n        awsProvidersFetchStatus,\n        azureProviders,\n        azureProvidersFetchStatus,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        queryFromRoute,\n        userAccess,\n    });\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n"],"sourceRoot":""}