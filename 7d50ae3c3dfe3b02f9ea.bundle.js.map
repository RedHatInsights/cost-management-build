{"version":3,"sources":["webpack://koku-ui/./src/api/api.ts","webpack://koku-ui/./src/api/costModels.ts","webpack://koku-ui/./src/api/providers.ts","webpack://koku-ui/./src/api/queries/awsQuery.ts","webpack://koku-ui/./src/api/queries/azureQuery.ts","webpack://koku-ui/./src/api/queries/gcpQuery.ts","webpack://koku-ui/./src/api/queries/ibmQuery.ts","webpack://koku-ui/./src/api/queries/ocpCloudQuery.ts","webpack://koku-ui/./src/api/queries/ocpQuery.ts","webpack://koku-ui/./src/api/reports/awsReports.ts","webpack://koku-ui/./src/api/reports/azureReports.ts","webpack://koku-ui/./src/api/reports/gcpReports.ts","webpack://koku-ui/./src/api/reports/ibmReports.ts","webpack://koku-ui/./src/api/reports/ocpCloudReports.ts","webpack://koku-ui/./src/api/reports/ocpReports.ts","webpack://koku-ui/./src/api/userAccess.ts","webpack://koku-ui/./src/components/i18n/i18nProvider.tsx","webpack://koku-ui/./src/components/i18n/i18init.ts","webpack://koku-ui/./src/pages/state/maintenance/maintenanceState.tsx","webpack://koku-ui/./src/pages/state/maintenance/index.ts","webpack://koku-ui/./src/pages/state/maintenance/maintenance.tsx","webpack://koku-ui/./src/app.tsx","webpack://koku-ui/./src/pages/costModels/createCostModelWizard/parseError.ts","webpack://koku-ui/./src/components/async/asyncComponent/asyncComponent.tsx","webpack://koku-ui/./src/components/async/asyncComponent/index.ts","webpack://koku-ui/./src/components/async/permissionsComponent/permissionsComponent.tsx","webpack://koku-ui/./src/routes.tsx","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/common.ts","webpack://koku-ui/./src/store/costModels/actions.ts","webpack://koku-ui/./src/store/costModels/reducer.ts","webpack://koku-ui/./src/store/costModels/selectors.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardReducer.ts","webpack://koku-ui/./src/store/djangoUtils/pagination.ts","webpack://koku-ui/./src/store/djangoUtils/query.ts","webpack://koku-ui/./src/store/exports/exportCommon.ts","webpack://koku-ui/./src/store/exports/exportSelectors.ts","webpack://koku-ui/./src/store/exports/exportActions.ts","webpack://koku-ui/./src/api/exports/exportUtils.ts","webpack://koku-ui/./src/api/exports/awsExport.ts","webpack://koku-ui/./src/api/exports/azureExport.ts","webpack://koku-ui/./src/api/exports/gcpExport.ts","webpack://koku-ui/./src/api/exports/ibmExport.ts","webpack://koku-ui/./src/api/exports/ocpCloudExport.ts","webpack://koku-ui/./src/api/exports/ocpExport.ts","webpack://koku-ui/./src/store/exports/exportReducer.ts","webpack://koku-ui/./src/api/forecasts/awsCloudForecast.ts","webpack://koku-ui/./src/api/forecasts/awsForecast.ts","webpack://koku-ui/./src/api/forecasts/azureCloudForecast.ts","webpack://koku-ui/./src/api/forecasts/azureForecast.ts","webpack://koku-ui/./src/api/forecasts/gcpForecast.ts","webpack://koku-ui/./src/api/forecasts/ibmForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpCloudForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpForecast.ts","webpack://koku-ui/./src/store/forecasts/forecastCommon.ts","webpack://koku-ui/./src/store/forecasts/forecastSelectors.ts","webpack://koku-ui/./src/store/forecasts/forecastActions.ts","webpack://koku-ui/./src/api/forecasts/forecastUtils.ts","webpack://koku-ui/./src/store/forecasts/forecastReducer.ts","webpack://koku-ui/./src/store/priceList/reducer.ts","webpack://koku-ui/./src/store/priceList/actions.ts","webpack://koku-ui/./src/store/ui/uiActions.ts","webpack://koku-ui/./src/store/ui/uiReducer.ts","webpack://koku-ui/./src/store/rootReducer.ts","webpack://koku-ui/./src/store/store.ts","webpack://koku-ui/./src/store/metrics/actions.ts","webpack://koku-ui/./src/api/metrics.ts","webpack://koku-ui/./src/store/metrics/reducer.ts","webpack://koku-ui/./src/store/metrics/selectors.ts","webpack://koku-ui/./src/api/orgs/awsOrgs.ts","webpack://koku-ui/./src/store/orgs/orgCommon.ts","webpack://koku-ui/./src/store/orgs/orgSelectors.ts","webpack://koku-ui/./src/store/orgs/orgActions.ts","webpack://koku-ui/./src/api/orgs/orgUtils.ts","webpack://koku-ui/./src/store/orgs/orgReducer.ts","webpack://koku-ui/./src/store/providers/providersSelectors.ts","webpack://koku-ui/./src/store/providers/providersCommon.ts","webpack://koku-ui/./src/store/rbac/actions.ts","webpack://koku-ui/./src/api/rbac.ts","webpack://koku-ui/./src/store/rbac/reducer.ts","webpack://koku-ui/./src/store/rbac/selectors.ts","webpack://koku-ui/./src/api/reports/awsCloudReports.ts","webpack://koku-ui/./src/api/reports/azureCloudReports.ts","webpack://koku-ui/./src/api/reports/ocpUsageReports.ts","webpack://koku-ui/./src/store/reports/reportCommon.ts","webpack://koku-ui/./src/store/reports/reportSelectors.ts","webpack://koku-ui/./src/store/reports/reportActions.ts","webpack://koku-ui/./src/api/reports/reportUtils.ts","webpack://koku-ui/./src/store/reports/reportReducer.ts","webpack://koku-ui/./src/store/sourceSettings/actions.ts","webpack://koku-ui/./src/store/sourceSettings/reducer.ts","webpack://koku-ui/./src/store/sourceSettings/selectors.ts","webpack://koku-ui/./src/api/tags/awsTags.ts","webpack://koku-ui/./src/api/tags/azureTags.ts","webpack://koku-ui/./src/api/tags/gcpTags.ts","webpack://koku-ui/./src/api/tags/ibmTags.ts","webpack://koku-ui/./src/api/tags/ocpTags.ts","webpack://koku-ui/./src/store/tags/tagCommon.ts","webpack://koku-ui/./src/store/tags/tagSelectors.ts","webpack://koku-ui/./src/store/tags/tagActions.ts","webpack://koku-ui/./src/api/tags/tagUtils.ts","webpack://koku-ui/./src/store/tags/tagReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessSelectors.ts","webpack://koku-ui/./src/store/userAccess/userAccessCommon.ts","webpack://koku-ui/./src/utils/getBaseName.ts"],"names":["initApi","version","authInterceptor","reqConfig","Object","assign","headers","fetchCostModels","query","addCostModel","request","updateCostModel","uuid","deleteCostModel","fetchProviders","insights","window","queryString","chrome","auth","getUser","then","getQueryRoute","getQuery","parseQuery","ReportTypePaths","runReport","reportType","path","fetchUserAccess","I18nProvider","this","props","locale","I18nextProvider","i18n","children","use","initReactI18next","init","backend","loadPath","fallbackLng","ns","defaultNS","react","useSuspense","MaintenanceStateBase","t","Maintenance","description","Stack","StackItem","href","MaintenanceState","withTranslation","withRouter","Main","App","super","arguments","state","maintenanceMode","history","location","identifyApp","pathname","appAction","appNav","on","event","currRoute","routes","includes","navId","domEvent","push","prevProps","scrollTo","undefined","route","mapStateToProps","mapDispatchToProps","compose","connect","parseApiError","error","response","data","Error","errors","map","er","source","detail","join","message","asyncComponent","loader","LoadedComponent","Async","isLoading","Comp","default","setState","InactiveSources","Permissions","permissionsComponent","AysncComponent","PermissionsComponent","NotFound","AwsBreakdown","AwsDetails","AzureBreakdown","AzureDetails","Explorer","GcpBreakdown","GcpDetails","IbmBreakdown","IbmDetails","OcpDetails","OcpBreakdown","Overview","CostModelsDetails","CostModel","paths","awsDetails","awsDetailsBreakdown","azureDetails","azureDetailsBreakdown","costModels","explorer","gcpDetails","gcpDetailsBreakdown","ibmDetails","ibmDetailsBreakdown","ocpDetails","ocpDetailsBreakdown","overview","labelKey","component","exact","Routes","Switch","Route","key","awsCostOverviewStateKey","currrentId","getId","costWidget","id","reportPathsType","type","accountSummaryWidget","reportSummary","reportGroupBy","showWidgetOnGroupBy","regionSummaryWidget","serviceSummaryWidget","defaultState","currentWidgets","widgets","awsCostOverviewReducer","selectAwsCostOverviewState","selectWidgets","selectWidget","selectCurrentWidgets","azureCostOverviewStateKey","azureCostOverviewReducer","selectAzureCostOverviewState","gcpCostOverviewStateKey","projectSummaryWidget","gcpCostOverviewReducer","selectGcpCostOverviewState","ibmCostOverviewStateKey","ibmCostOverviewReducer","selectIbmCostOverviewState","ocpCostOverviewStateKey","clusterWidget","cluster","cpuUsageWidget","usage","showCapacityOnGroupBy","memoryUsageWidget","usePlaceholder","ocpCostOverviewReducer","selectOcpCostOverviewState","awsHistoricalDataStateKey","computeUsageWidget","storageUsageWidget","awsHistoricalDataReducer","selectAwsHistoricalDataState","azureHistoricalDataStateKey","azureHistoricalDataReducer","selectAzureHistoricalDataState","gcpHistoricalDataStateKey","gcpHistoricalDataReducer","selectGcpHistoricalDataState","ibmHistoricalDataStateKey","ibmHistoricalDataReducer","selectIbmHistoricalDataState","ocpHistoricalDataStateKey","ocpHistoricalDataReducer","selectOcpHistoricalDataState","createMapStateToProps","updateFilterToolbar","createAction","selectCostModel","resetCostModel","setCostModelDialog","fetchCostModelsRequest","success","fetchCostModelsSuccess","failure","fetchCostModelsFailure","createAsyncAction","dispatch","res","catch","err","updateCostModelsRequest","updateCostModelsSuccess","updateCostModelsFailure","dialog","name","isOpen","deleteCostModelsRequest","deleteCostModelsSuccess","deleteCostModelsFailure","redirectToCostModelFromSourceUuid","source_uuid","appNavClick","secondaryNav","addNotification","title","variant","dismissable","stateKey","status","currentFilterType","currentFilterValue","isDialogOpen","deleteRate","deleteSource","addSource","addRate","updateRate","deleteMarkup","updateMarkup","createWizard","dialogData","update","current","delete","reducer","action","getType","payload","meta","costModelsState","cms","dialogs","stateName","costStatus","costError","costData","costQuery","length","keys","every","updateProcessing","updateError","updateErr","selected","deleteProcessing","deleteError","awsCloudDashboardStateKey","awsCloudDashboardDefaultFilters","time_scope_units","time_scope_value","resolution","awsCloudDashboardTabFilters","limit","getQueryForWidget","filter","getQueryForWidgetTabs","widget","group_by","currentTab","service","tabsFilter","account","region","instance_type","getGroupByForTab","newFilter","JSON","parse","stringify","selectAwsCloudDashboardState","selectWidgetQueries","previous","forecast","tabs","fetchWidgetForecasts","getState","forecastPathsType","forecastType","fetchWidgetReports","availableTabs","setWidgetTab","changeWidgetTab","tab","computeWidget","titleKey","details","costKey","formatOptions","fractionDigits","showUnits","showUsageFirst","showUsageLegendLabel","usageFormatOptions","usageKey","trend","computedReportItem","computedReportItemValue","topItems","chartType","costSummaryWidget","showHorizontal","computedForecastItem","dailyTitleKey","databaseWidget","networkWidget","storageWidget","awsCloudDashboardReducer","awsDashboardStateKey","awsDashboardDefaultFilters","awsDashboardTabFilters","selectAwsDashboardState","adjustContainerHeight","appNavId","viewAllPath","awsDashboardReducer","azureCloudDashboardStateKey","azureCloudDashboardDefaultFilters","azureCloudDashboardTabFilters","service_name","subscription_guid","resource_location","selectAzureCloudDashboardState","units","virtualMachineWidget","azureCloudDashboardReducer","azureDashboardStateKey","azureDashboardDefaultFilters","azureDashboardTabFilters","selectAzureDashboardState","azureDashboardReducer","gcpDashboardStateKey","gcpDashboardDefaultFilters","gcpDashboardTabFilters","project","selectGcpDashboardState","gcpDashboardReducer","ibmDashboardStateKey","ibmDashboardDefaultFilters","ibmDashboardTabFilters","selectIbmDashboardState","ibmDashboardReducer","ocpCloudDashboardStateKey","ocpCloudDashboardDefaultFilters","ocpCloudDashboardTabFilters","selectOcpCloudDashboardState","defaultFilter","ocpCloudDashboardReducer","ocpDashboardStateKey","ocpDashboardDefaultFilters","ocpDashboardTabFilters","node","selectOcpDashboardState","showTooltip","computedForecastInfrastructureItem","cpuWidget","requestFormatOptions","requestKey","memoryWidget","volumeWidget","ocpDashboardReducer","ocpSupplementaryDashboardStateKey","ocpSupplementaryDashboardDefaultFilters","ocpSupplementaryDashboardTabFilters","selectOcpSupplementaryDashboardState","showSupplementaryLabel","ocpSupplementaryDashboardReducer","ocpUsageDashboardStateKey","ocpUsageDashboardDefaultFilters","ocpUsageDashboardTabFilters","selectOcpUsageDashboardState","ocpUsageDashboardReducer","selectPagination","stateProjector","getPagination","page","perPage","count","urlParams","links","next","URLSearchParams","split","Number","get","first","selectQuery","params","reduce","acc","curr","search","exportStateKey","getExportId","selectExportState","selectExport","byId","selectExportFetchStatus","fetchStatus","selectExportError","fetchExportRequest","fetchExportSuccess","fetchExportFailure","exportReport","report","Date","now","timeRequested","isExportExpired","reportId","Accept","Map","exportReducer","set","ForecastTypePaths","forecastStateKey","getForecastId","selectForecastState","selectForecast","selectForecastFetchStatus","selectForecastError","fetchForecastRequest","fetchForecastSuccess","fetchForecastFailure","fetchForecast","isForecastExpired","forecastId","forecastReducer","rates","fetchPriceListRequest","fetchPriceListSuccess","fetchPriceListFailure","closeProvidersModal","openProvidersModal","toggleSidebar","isExportModalOpen","isProvidersModalOpen","isSidebarOpen","rootReducer","combineReducers","awsCloudDashboard","awsCostOverview","awsDashboard","awsHistoricalData","azureCloudDashboard","azureCostOverview","azureDashboard","azureHistoricalData","gcpCostOverview","gcpDashboard","gcpHistoricalData","ibmCostOverview","ibmDashboard","ibmHistoricalData","metrics","ocpCostOverview","ocpDashboard","ocpCloudDashboard","ocpHistoricalData","ocpSupplementaryDashboard","ocpUsageDashboard","providerUuid","providers","rbac","userAccess","notifications","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","middlewares","notificationsMiddleware","configureStore","initialState","enhancer","applyMiddleware","store","createStore","Promise","reject","fetchMetricsRequest","fetchMetricsSuccess","fetchMetricsFailure","fetchMetrics","source_type","fetchRateMetrics","metricsState","metricsPayload","prev","label_metric","label_measurement","maxRate","costTypes","default_cost_type","OrgTypePaths","orgStateKey","getOrgId","orgPathsType","orgType","selectOrgState","selectOrg","selectOrgFetchStatus","selectOrgError","fetchOrgRequest","fetchOrgSuccess","fetchOrgFailure","fetchOrg","orgReport","isOrgExpired","orgId","orgReducer","selectProvidersState","selectAddProviderFetchStatus","selectAddProviderError","selectProviders","providerType","selectProvidersFetchStatus","selectProvidersError","addProviderKey","awsProvidersQuery","azureProvidersQuery","ocpProvidersQuery","gcpProvidersQuery","ibmProvidersQuery","getReportId","fetchRbacRequest","fetchRbacSuccess","fetchRbacFailure","fetchRbac","async","_insights","getUserPermissions","user","permissions","isOrgAdmin","identity","is_org_admin","getRBAC","selectRbacState","isCostModelWritePermission","costModelPermissions","find","item","permission","startsWith","app","resource","operation","reportStateKey","selectReportState","selectReport","selectReportFetchStatus","selectReportError","fetchReportRequest","fetchReportSuccess","fetchReportFailure","fetchReport","isReportExpired","reportReducer","fetchSourcesRequest","fetchSourcesSuccess","fetchSourcesFailure","fetchSources","sources","sourcesState","srcs","TagTypePaths","tagStateKey","getTagId","tagPathsType","tagType","selectTagState","selectTag","selectTagFetchStatus","selectTagError","fetchTagRequest","fetchTagSuccess","fetchTagFailure","fetchTag","tagReport","isTagExpired","tagId","tagReducer","selectUserAccessState","selectUserAccess","selectUserAccessFetchStatus","selectUserAccessError","userAccessKey","allUserAccessQuery","getBaseName","release","pathName","shift"],"mappings":"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","file":"7d50ae3c3dfe3b02f9ea.bundle.js","sourcesContent":["import { authInterceptor as insightsAuthInterceptor } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport axios from 'axios';\nexport function initApi({ version }) {\n    axios.defaults.baseURL = `/api/cost-management/${version}/`;\n    axios.interceptors.request.use(authInterceptor);\n    axios.interceptors.request.use(insightsAuthInterceptor);\n}\nexport function authInterceptor(reqConfig) {\n    return Object.assign(Object.assign({}, reqConfig), { headers: Object.assign({}, reqConfig.headers) });\n}\n","import axios from 'axios';\nexport function fetchCostModels(query = '') {\n    return axios.get(`cost-models/${query && '?'}${query}`);\n}\nexport function fetchCostModel(uuid) {\n    return axios.get(`cost-models/${uuid}/`);\n}\nexport function addCostModel(request) {\n    return axios.post('cost-models/', request);\n}\nexport function updateCostModel(uuid, request) {\n    return axios.put(`cost-models/${uuid}/`, request);\n}\nexport function deleteCostModel(uuid) {\n    return axios.delete(`cost-models/${uuid}/`);\n}\n","import axios from 'axios';\nexport function fetchProviders(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`sources/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`sources/${queryString}`);\n    }\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/aws/costs/',\n    [\"database\" /* database */]: 'reports/aws/costs/',\n    [\"network\" /* network */]: 'reports/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/azure/costs/',\n    [\"database\" /* database */]: 'reports/azure/costs/',\n    [\"network\" /* network */]: 'reports/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\n// Todo: update to use ibm backend apis when they become available\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/all/instance-types/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/all/storage/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\n// If the user-access API is called without a query parameter, all types are returned in the response\nexport function fetchUserAccess(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`user-access/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`user-access/${queryString}`);\n    }\n}\n","import { i18nInit } from 'components/i18n';\nimport React from 'react';\nimport { I18nextProvider } from 'react-i18next';\nclass I18nProvider extends React.Component {\n    render() {\n        i18nInit.changeLanguage(this.props.locale);\n        return (React.createElement(I18nextProvider, { i18n: i18nInit },\n            React.createElement(React.Fragment, null, this.props.children)));\n    }\n}\nexport { I18nProvider };\n","import i18next from 'i18next';\nimport XHR from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\nconst appPublicPath = process.env.APP_PUBLIC_PATH || '/insights/platform/cost-management';\n// For props see https://react.i18next.com/legacy-v9/i18next-instance\ni18next\n    .use(XHR)\n    .use(initReactI18next)\n    .init({\n    backend: {\n        loadPath: `${appPublicPath}/locales/{{lng}}.json`,\n    },\n    fallbackLng: 'en',\n    ns: ['default'],\n    defaultNS: 'default',\n    react: {\n        useSuspense: false,\n    },\n});\n// Must re-export -- see https://github.com/i18next/react-i18next/issues/898\nexport { i18next as i18nInit };\n","import { Stack, StackItem } from '@patternfly/react-core';\nimport Maintenance from '@redhat-cloud-services/frontend-components/Maintenance';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass MaintenanceStateBase extends React.Component {\n    render() {\n        const { t } = this.props;\n        return (React.createElement(Maintenance, { description: React.createElement(Stack, null,\n                React.createElement(StackItem, null, t('maintenance.empty_state_desc')),\n                React.createElement(StackItem, null,\n                    t('maintenance.empty_state_info'),\n                    \" \",\n                    React.createElement(\"a\", { href: \"https://status.redhat.com\" }, \"status.redhat.com\"),\n                    \".\"),\n                React.createElement(StackItem, null, t('maintenance.empty_state_thanks'))) }));\n    }\n}\nconst MaintenanceState = withTranslation()(MaintenanceStateBase);\nexport { MaintenanceState };\n","import Maintenance from './maintenance';\nexport default Maintenance;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { MaintenanceState } from './maintenanceState';\nconst Maintenance = () => {\n    return (React.createElement(Main, null,\n        React.createElement(MaintenanceState, null)));\n};\nexport default withRouter(Maintenance);\n","import { I18nProvider } from 'components/i18n';\nimport Maintenance from 'pages/state/maintenance';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { createMapStateToProps } from 'store/common';\nimport { Routes, routes } from './routes';\nexport class App extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Todo: Will Insights provide a flag to enable maintenance mode?\n        // https://docs.google.com/document/d/1VLs7vFczWUzyIpH6EUsTEpJugDsjeuh4a_azs6IJbC0/edit#\n        this.state = { locale: 'en', maintenanceMode: false };\n    }\n    componentDidMount() {\n        const { history, location } = this.props;\n        insights.chrome.init();\n        insights.chrome.identifyApp('cost-management');\n        if (location && location.pathname) {\n            insights.chrome.appAction(location.pathname);\n        }\n        this.appNav = insights.chrome.on('APP_NAVIGATION', event => {\n            const currRoute = routes.find(({ path }) => path.includes(event.navId));\n            if (event.domEvent && currRoute) {\n                history.push(currRoute.path);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { location } = this.props;\n        if (location && location.pathname !== prevProps.location.pathname) {\n            window.scrollTo(0, 0);\n            insights.chrome.appAction(location.pathname);\n        }\n    }\n    componentWillUnmount() {\n        this.appNav();\n        insights.chrome.appAction(undefined);\n    }\n    render() {\n        const { maintenanceMode } = this.state;\n        const route = maintenanceMode ? React.createElement(Maintenance, null) : React.createElement(Routes, null);\n        return React.createElement(I18nProvider, { locale: this.state.locale }, route);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = { history };\nexport default compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(App);\n","export const parseApiError = error => {\n    if (error.response && error.response.data) {\n        if (error.response.data.Error) {\n            return error.response.data.Error;\n        }\n        if (error.response.data.errors) {\n            return error.response.data.errors.map(er => `${er.source}: ${er.detail}`).join(', ');\n        }\n    }\n    else if (error.message) {\n        return error.message;\n    }\n    return 'unknown';\n};\n","import React from 'react';\nexport function asyncComponent(loader) {\n    let LoadedComponent = null;\n    class Async extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                isLoading: !LoadedComponent,\n            };\n        }\n        componentDidMount() {\n            if (!this.state.isLoading) {\n                return;\n            }\n            loader().then(Comp => {\n                LoadedComponent = Comp.default ? Comp.default : Comp;\n                this.setState({ isLoading: false });\n            });\n        }\n        render() {\n            const { isLoading } = this.state;\n            return isLoading ? null : React.createElement(LoadedComponent, Object.assign({}, this.props));\n        }\n    }\n    return Async;\n}\n","import { asyncComponent } from './asyncComponent';\nexport default asyncComponent;\n","import asyncComponent from 'components/async/asyncComponent';\nimport React from 'react';\nconst InactiveSources = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/sources/inactiveSources'));\nconst Permissions = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/async/permissionsComponent'));\n// Permissions component wrapper for AsyncComponent\nexport function permissionsComponent(AysncComponent) {\n    class PermissionsComponent extends React.Component {\n        render() {\n            return (React.createElement(Permissions, null,\n                React.createElement(InactiveSources, Object.assign({}, this.props)),\n                React.createElement(AysncComponent, Object.assign({}, this.props))));\n        }\n    }\n    return PermissionsComponent;\n}\n","import { asyncComponent } from 'components/async/asyncComponent/asyncComponent';\nimport { permissionsComponent } from 'components/async/permissionsComponent/permissionsComponent';\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nconst NotFound = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'pages/state/notFound'));\nconst AwsBreakdown = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ 'pages/views/details/awsBreakdown'));\nconst AwsDetails = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ 'pages/views/details/awsDetails'));\nconst AzureBreakdown = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/details/azureBreakdown'));\nconst AzureDetails = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/details/azureDetails'));\nconst Explorer = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/explorer/explorer'));\nconst GcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ 'pages/views/details/gcpBreakdown'));\nconst GcpDetails = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ 'pages/views/details/gcpDetails'));\nconst IbmBreakdown = asyncComponent(() => import(/* webpackChunkName: \"ibm\" */ 'pages/views/details/ibmBreakdown'));\nconst IbmDetails = asyncComponent(() => import(/* webpackChunkName: \"ibm\" */ 'pages/views/details/ibmDetails'));\nconst OcpDetails = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ 'pages/views/details/ocpDetails'));\nconst OcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ 'pages/views/details/ocpBreakdown'));\nconst Overview = asyncComponent(() => import(/* webpackChunkName: \"overview\" */ 'pages/views/overview'));\nconst CostModelsDetails = asyncComponent(() => import(/* webpackChunkName: \"costModels\" */ 'pages/costModels/costModelsDetails'));\n// import(/* webpackChunkName: \"costModels\" */ './pages/costModels/costModelList')\nconst CostModel = asyncComponent(() => import(/* webpackChunkName: \"costModel\" */ 'pages/costModels/costModel'));\n// For syncing with permissions\nconst paths = {\n    awsDetails: '/infrastructure/aws',\n    awsDetailsBreakdown: '/infrastructure/aws/breakdown',\n    azureDetails: '/infrastructure/azure',\n    azureDetailsBreakdown: '/infrastructure/azure/breakdown',\n    costModels: '/cost-models',\n    explorer: '/explorer',\n    gcpDetails: '/infrastructure/gcp',\n    gcpDetailsBreakdown: '/infrastructure/gcp/breakdown',\n    ibmDetails: '/infrastructure/ibm',\n    ibmDetailsBreakdown: '/infrastructure/ibm/breakdown',\n    ocpDetails: '/ocp',\n    ocpDetailsBreakdown: '/ocp/breakdown',\n    overview: '/',\n};\nconst routes = [\n    {\n        path: paths.overview,\n        labelKey: 'navigation.overview',\n        component: permissionsComponent(Overview),\n        exact: true,\n    },\n    {\n        path: paths.costModels,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModelsDetails),\n        exact: true,\n    },\n    {\n        path: `${paths.costModels}/:uuid`,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModel),\n        exact: true,\n    },\n    {\n        path: paths.awsDetails,\n        labelKey: 'navigation.aws_details',\n        component: permissionsComponent(AwsDetails),\n        exact: true,\n    },\n    {\n        path: paths.awsDetailsBreakdown,\n        labelKey: 'navigation.aws_details_breakdown',\n        component: permissionsComponent(AwsBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.azureDetails,\n        labelKey: 'navigation.azure_details',\n        component: permissionsComponent(AzureDetails),\n        exact: true,\n    },\n    {\n        path: paths.azureDetailsBreakdown,\n        labelKey: 'navigation.azure_details_breakdown',\n        component: permissionsComponent(AzureBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.explorer,\n        labelKey: 'navigation.explorer',\n        component: permissionsComponent(Explorer),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetails,\n        labelKey: 'navigation.gcp_details',\n        component: permissionsComponent(GcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetailsBreakdown,\n        labelKey: 'navigation.gcp_details_breakdown',\n        component: permissionsComponent(GcpBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.ibmDetails,\n        labelKey: 'navigation.ibm_details',\n        component: permissionsComponent(IbmDetails),\n        exact: true,\n    },\n    {\n        path: paths.ibmDetailsBreakdown,\n        labelKey: 'navigation.ibm_details_breakdown',\n        component: permissionsComponent(IbmBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetails,\n        labelKey: 'navigation.ocp_details',\n        component: permissionsComponent(OcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetailsBreakdown,\n        labelKey: 'navigation.ocp_details_breakdown',\n        component: permissionsComponent(OcpBreakdown),\n        exact: true,\n    },\n];\nconst Routes = () => (React.createElement(Switch, null,\n    routes.map(route => (React.createElement(Route, Object.assign({ key: route.path }, route)))),\n    React.createElement(Route, { component: NotFound })));\nexport { paths, Routes, routes };\n","export const awsCostOverviewStateKey = 'awsCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['region', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['region', 'account', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget } from './awsCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function awsCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { awsCostOverviewStateKey } from './awsCostOverviewCommon';\nexport const selectAwsCostOverviewState = (state) => state[awsCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAwsCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsCostOverviewState(state).currentWidgets;\n","export const azureCostOverviewStateKey = 'azureCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'subscription_guid',\n        showWidgetOnGroupBy: ['resource_location', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'resource_location',\n        showWidgetOnGroupBy: ['subscription_guid', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service_name',\n        showWidgetOnGroupBy: ['resource_location', 'subscription_guid', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget, } from './azureCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function azureCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { azureCostOverviewStateKey } from './azureCostOverviewCommon';\nexport const selectAzureCostOverviewState = (state) => state[azureCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAzureCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureCostOverviewState(state).currentWidgets;\n","export const gcpCostOverviewStateKey = 'gcpCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['project', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['account', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'project', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['project', 'region', 'account', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, projectSummaryWidget, regionSummaryWidget, serviceSummaryWidget, } from './gcpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costWidget.id,\n        accountSummaryWidget.id,\n        projectSummaryWidget.id,\n        serviceSummaryWidget.id,\n        regionSummaryWidget.id,\n    ],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function gcpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { gcpCostOverviewStateKey } from './gcpCostOverviewCommon';\nexport const selectGcpCostOverviewState = (state) => state[gcpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectGcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpCostOverviewState(state).currentWidgets;\n","export const ibmCostOverviewStateKey = 'ibmCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['project', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['account', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'project', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['project', 'region', 'account', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, projectSummaryWidget, regionSummaryWidget, serviceSummaryWidget, } from './ibmCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costWidget.id,\n        accountSummaryWidget.id,\n        projectSummaryWidget.id,\n        serviceSummaryWidget.id,\n        regionSummaryWidget.id,\n    ],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function ibmCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { ibmCostOverviewStateKey } from './ibmCostOverviewCommon';\nexport const selectIbmCostOverviewState = (state) => state[ibmCostOverviewStateKey];\nexport const selectWidgets = (state) => selectIbmCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmCostOverviewState(state).currentWidgets;\n","export const ocpCostOverviewStateKey = 'ocpCostOverview';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const clusterWidget = {\n    id: getId(),\n    cluster: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['project'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cluster\" /* cluster */,\n};\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"cpuUsage\" /* cpuUsage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"memoryUsage\" /* memoryUsage */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['cluster'],\n        usePlaceholder: true,\n    },\n    reportType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { clusterWidget, costWidget, cpuUsageWidget, memoryUsageWidget, projectSummaryWidget, } from './ocpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, clusterWidget.id, projectSummaryWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [clusterWidget.id]: clusterWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { ocpCostOverviewStateKey } from './ocpCostOverviewCommon';\nexport const selectOcpCostOverviewState = (state) => state[ocpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectOcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCostOverviewState(state).currentWidgets;\n","export const awsHistoricalDataStateKey = 'awsHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './awsHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function awsHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { awsHistoricalDataStateKey } from './awsHistoricalDataCommon';\nexport const selectAwsHistoricalDataState = (state) => state[awsHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAwsHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsHistoricalDataState(state).currentWidgets;\n","export const azureHistoricalDataStateKey = 'azureHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './azureHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function azureHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { azureHistoricalDataStateKey } from './azureHistoricalDataCommon';\nexport const selectAzureHistoricalDataState = (state) => state[azureHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAzureHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureHistoricalDataState(state).currentWidgets;\n","export const gcpHistoricalDataStateKey = 'gcpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"trend\" /* trend */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    type: \"trend\" /* trend */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './gcpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function gcpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { gcpHistoricalDataStateKey } from './gcpHistoricalDataCommon';\nexport const selectGcpHistoricalDataState = (state) => state[gcpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectGcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpHistoricalDataState(state).currentWidgets;\n","export const ibmHistoricalDataStateKey = 'ibmHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"trend\" /* trend */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"storage\" /* storage */,\n    type: \"trend\" /* trend */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './ibmHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function ibmHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { ibmHistoricalDataStateKey } from './ibmHistoricalDataCommon';\nexport const selectIbmHistoricalDataState = (state) => state[ibmHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectIbmHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmHistoricalDataState(state).currentWidgets;\n","export const ocpHistoricalDataStateKey = 'ocpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"usage\" /* usage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"usage\" /* usage */,\n};\n","import { costWidget, cpuUsageWidget, memoryUsageWidget } from './ocpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { ocpHistoricalDataStateKey } from './ocpHistoricalDataCommon';\nexport const selectOcpHistoricalDataState = (state) => state[ocpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectOcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpHistoricalDataState(state).currentWidgets;\n","export const expirationMS = 30 * 60 * 1000; // 30 minutes\nexport function createMapStateToProps(mapStateToProps) {\n    return mapStateToProps;\n}\nexport function createMapDispatchToProps(mapDispatchToProps) {\n    return mapDispatchToProps;\n}\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { deleteCostModel as apiDeleteCostModel, fetchCostModels as apiGetCostModels, updateCostModel as apiUpdateCostModel, } from 'api/costModels';\nimport i18next from 'i18next';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/costModels/filter')();\nexport const selectCostModel = createAction('select/costModels')();\nexport const resetCostModel = createAction('reset/costModels')();\nexport const setCostModelDialog = createAction('display/costModels/dialog')();\nexport const { request: fetchCostModelsRequest, success: fetchCostModelsSuccess, failure: fetchCostModelsFailure, } = createAsyncAction('fetch/costModels/request', 'fetch/costModels/success', 'fetch/costModels/failure')();\nexport const fetchCostModels = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchCostModelsRequest());\n        return apiGetCostModels(query)\n            .then(res => {\n            dispatch(fetchCostModelsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: updateCostModelsRequest, success: updateCostModelsSuccess, failure: updateCostModelsFailure, } = createAsyncAction('update/costModels/request', 'update/costModels/success', 'update/costModels/failure')();\nexport const updateCostModel = (uuid, request, dialog = null) => {\n    return (dispatch) => {\n        dispatch(updateCostModelsRequest());\n        return apiUpdateCostModel(uuid, request)\n            .then(res => {\n            dispatch(updateCostModelsSuccess(res));\n            if (dialog !== null) {\n                fetchCostModels(`uuid=${uuid}`)(dispatch);\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(updateCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: deleteCostModelsRequest, success: deleteCostModelsSuccess, failure: deleteCostModelsFailure, } = createAsyncAction('delete/costModels/request', 'delete/costModels/success', 'delete/costModels/failure')();\nexport const deleteCostModel = (uuid, dialog = '', history = null) => {\n    return (dispatch) => {\n        dispatch(deleteCostModelsRequest());\n        return apiDeleteCostModel(uuid)\n            .then(() => {\n            dispatch(deleteCostModelsSuccess());\n            dispatch(resetCostModel());\n            fetchCostModels()(dispatch);\n            if (dialog !== null) {\n                if (dialog === 'deleteCostModel' && history) {\n                    history.push('/cost-models');\n                }\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(deleteCostModelsFailure(err));\n        });\n    };\n};\nexport const redirectToCostModelFromSourceUuid = (source_uuid, history) => {\n    return (dispatch) => {\n        return apiGetCostModels(`source_uuid=${source_uuid}`)\n            .then(res => {\n            const uuid = res.data.data[0].uuid;\n            insights.chrome.appNavClick({ id: 'cost-models', secondaryNav: null });\n            history.push(`/cost-models/${uuid}`);\n        })\n            .catch(() => {\n            dispatch(addNotification({\n                title: i18next.t('cost_models_router.error_title'),\n                description: i18next.t('cost_models_router.server_error'),\n                variant: 'danger',\n                dismissable: true,\n            }));\n        });\n    };\n};\n","import { getType } from 'typesafe-actions';\nimport { deleteCostModelsFailure, deleteCostModelsRequest, deleteCostModelsSuccess, fetchCostModelsFailure, fetchCostModelsRequest, fetchCostModelsSuccess, resetCostModel, selectCostModel, setCostModelDialog, updateCostModelsFailure, updateCostModelsRequest, updateCostModelsSuccess, updateFilterToolbar, } from './actions';\nexport const stateKey = 'costModels';\nexport const defaultState = {\n    costModels: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n    isDialogOpen: {\n        deleteRate: false,\n        deleteSource: false,\n        addSource: false,\n        addRate: false,\n        updateRate: false,\n        deleteCostModel: false,\n        updateCostModel: false,\n        deleteMarkup: false,\n        updateMarkup: false,\n        createWizard: false,\n    },\n    dialogData: null,\n    update: {\n        error: null,\n        status: 0 /* none */,\n        current: null,\n    },\n    delete: {\n        error: null,\n        status: 0 /* none */,\n    },\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(resetCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: null }) });\n        case getType(selectCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: action.payload }) });\n        case getType(updateCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 1 /* inProgress */ }) });\n        case getType(updateCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { update: {\n                    error: null,\n                    status: 2 /* complete */,\n                    current: action.payload.data,\n                } });\n        case getType(updateCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 2 /* complete */, error: action.payload }) });\n        case getType(fetchCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', status: 2 /* complete */, error: null, costModels: action.payload.data });\n        case getType(fetchCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(deleteCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { delete: Object.assign(Object.assign({}, state.delete), { status: 1 /* inProgress */ }) });\n        case getType(deleteCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    error: null,\n                    status: 2 /* complete */,\n                } });\n        case getType(deleteCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    status: 2 /* complete */,\n                    error: action.payload,\n                } });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        case getType(setCostModelDialog):\n            return Object.assign(Object.assign({}, state), { isDialogOpen: Object.assign(Object.assign({}, state.isDialogOpen), { [action.payload.name]: action.payload.isOpen }), dialogData: action.payload.meta });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const costModelsState = (state) => state[stateKey];\nexport const costModels = (state) => {\n    const cms = costModelsState(state).costModels;\n    if (cms) {\n        return cms.data;\n    }\n    return [];\n};\nexport const isDialogOpen = (state) => {\n    const dialogs = costModelsState(state).isDialogOpen;\n    return (type) => {\n        switch (type) {\n            case 'markup': {\n                const { deleteMarkup, updateMarkup } = dialogs;\n                return { deleteMarkup, updateMarkup };\n            }\n            case 'costmodel': {\n                const { deleteCostModel, updateCostModel, createWizard } = dialogs;\n                return { deleteCostModel, updateCostModel, createWizard };\n            }\n            case 'sources': {\n                const { deleteSource, addSource } = dialogs;\n                return { deleteSource, addSource };\n            }\n            case 'rate': {\n                const { addRate, updateRate, deleteRate } = dialogs;\n                return { addRate, updateRate, deleteRate };\n            }\n            default:\n                return costModelsState(state).isDialogOpen;\n        }\n    };\n};\nexport const status = (state) => costModelsState(state).status;\nexport const error = (state) => costModelsState(state).error;\nexport const stateName = (state) => {\n    const costStatus = status(state);\n    const costError = error(state);\n    const costData = costModels(state);\n    const costQuery = query(state);\n    if (costStatus !== 2 /* complete */) {\n        return 'loading';\n    }\n    if (costError !== null) {\n        return 'failure';\n    }\n    if (costData.length > 0) {\n        return 'success';\n    }\n    const hasNoFilters = Object.keys(costQuery).every(key => {\n        switch (key) {\n            case 'limit':\n                return costQuery[key] === '10';\n            case 'offset':\n                return costQuery[key] === '0';\n            default:\n                return costQuery[key] === null;\n        }\n    });\n    if (hasNoFilters) {\n        return 'empty';\n    }\n    return 'no-match';\n};\nexport const currentFilterValue = (state) => costModelsState(state).currentFilterValue;\nexport const currentFilterType = (state) => costModelsState(state).currentFilterType;\nexport const query = selectQuery((state) => costModelsState(state).costModels, [\n    'ordering',\n    'name',\n    'source_type',\n    'description',\n    'offset',\n    'limit',\n]);\nexport const pagination = selectPagination((state) => costModelsState(state).costModels);\nexport const dialogData = (state) => costModelsState(state).dialogData;\nexport const updateProcessing = (state) => costModelsState(state).update.status === 1 /* inProgress */;\nexport const updateError = (state) => {\n    const updateErr = costModelsState(state).update.error;\n    if (updateErr === null) {\n        return '';\n    }\n    return parseApiError(updateErr);\n};\nexport const selected = (state) => {\n    return costModelsState(state).update.current;\n};\nexport const deleteProcessing = (state) => costModelsState(state).delete.status === 1 /* inProgress */;\nexport const deleteError = (state) => {\n    const err = costModelsState(state).delete.error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\n","import { getQuery } from 'api/queries/awsQuery';\nexport const awsCloudDashboardStateKey = 'awsCloudDashboard';\nexport const awsCloudDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsCloudDashboardTabFilters = Object.assign(Object.assign({}, awsCloudDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = awsCloudDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsCloudDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { awsCloudDashboardDefaultFilters, awsCloudDashboardStateKey, awsCloudDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsCloudDashboardCommon';\nexport const selectAwsCloudDashboardState = (state) => state[awsCloudDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsCloudDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsCloudDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsCloudDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsCloudDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsCloudDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsCloudDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'aws_cloud_dashboard.compute_title',\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsCloudDashboardTab.instanceType,\n    //   AwsCloudDashboardTab.accounts,\n    //   AwsCloudDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'aws_cloud_dashboard.cost_title',\n    forecastPathsType: \"aws_cloud\" /* awsCloud */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'aws_cloud_dashboard.daily_cost_trend_title',\n        titleKey: 'aws_cloud_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsCloudDashboardTab.services,\n    //   AwsCloudDashboardTab.accounts,\n    //   AwsCloudDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsCloudDashboardTab.services,\n    //   AwsCloudDashboardTab.accounts,\n    //   AwsCloudDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsCloudDashboardTab.services,\n    //   AwsCloudDashboardTab.accounts,\n    //   AwsCloudDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsCloudDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './awsCloudDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsCloudDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/awsQuery';\nexport const awsDashboardStateKey = 'awsDashboard';\nexport const awsDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsDashboardTabFilters = Object.assign(Object.assign({}, awsDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = awsDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { awsDashboardDefaultFilters, awsDashboardStateKey, awsDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsDashboardCommon';\nexport const selectAwsDashboardState = (state) => state[awsDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'aws_dashboard.compute_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.instanceType,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'aws_dashboard.cost_title',\n    forecastPathsType: \"aws\" /* aws */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        appNavId: 'aws',\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.awsDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'aws_dashboard.daily_cost_trend_title',\n        titleKey: 'aws_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './awsDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureCloudDashboardStateKey = 'azureCloudDashboard';\nexport const azureCloudDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureCloudDashboardTabFilters = Object.assign(Object.assign({}, azureCloudDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureCloudDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureCloudDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ &&\n        widget.tabsFilter &&\n        widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureCloudDashboardDefaultFilters, azureCloudDashboardStateKey, azureCloudDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureCloudDashboardCommon';\nexport const selectAzureCloudDashboardState = (state) => state[azureCloudDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureCloudDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureCloudDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureCloudDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureCloudDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureCloudDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureCloudDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'azure_cloud_dashboard.cost_title',\n    forecastPathsType: \"azure_cloud\" /* azureCloud */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'azure_cloud_dashboard.daily_cost_trend_title',\n        titleKey: 'azure_cloud_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureCloudDashboardTab.service_names,\n    //   AzureCloudDashboardTab.subscription_guids,\n    //   AzureCloudDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureCloudDashboardTab.service_names,\n    //   AzureCloudDashboardTab.subscription_guids,\n    //   AzureCloudDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        units: 'gb-mo',\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureCloudDashboardTab.service_names,\n    //   AzureCloudDashboardTab.subscription_guids,\n    //   AzureCloudDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: 'azure_cloud_dashboard.compute_title',\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        units: 'vm-hours',\n        usageKey: 'dashboard.usage_label',\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureCloudDashboardTab.instanceType,\n    //   AzureCloudDashboardTab.subscription_guids,\n    //   AzureCloudDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureCloudDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureCloudDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureCloudDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureDashboardStateKey = 'azureDashboard';\nexport const azureDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureDashboardTabFilters = Object.assign(Object.assign({}, azureDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ && widget.tabsFilter && widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureDashboardDefaultFilters, azureDashboardStateKey, azureDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureDashboardCommon';\nexport const selectAzureDashboardState = (state) => state[azureDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'azure_dashboard.cost_title',\n    forecastPathsType: \"azure\" /* azure */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        appNavId: 'aws',\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.azureDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'azure_dashboard.daily_cost_trend_title',\n        titleKey: 'azure_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        units: 'gb-mo',\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: 'azure_dashboard.compute_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        units: 'vm-hours',\n        usageKey: 'dashboard.usage_label',\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.instanceType,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/gcpQuery';\nexport const gcpDashboardStateKey = 'gcpDashboard';\nexport const gcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const gcpDashboardTabFilters = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = gcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = gcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { gcpDashboardDefaultFilters, gcpDashboardStateKey, gcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './gcpDashboardCommon';\nexport const selectGcpDashboardState = (state) => state[gcpDashboardStateKey];\nexport const selectWidgets = (state) => selectGcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, gcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './gcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('gcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'gcp_dashboard.compute_title',\n    forecastPathsType: \"gcp\" /* gcp */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.instanceType,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'gcp_dashboard.cost_title',\n    forecastPathsType: \"gcp\" /* gcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        appNavId: 'gcp',\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.gcpDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'gcp_dashboard.daily_cost_trend_title',\n        titleKey: 'gcp_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './gcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './gcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function gcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ibmQuery';\nexport const ibmDashboardStateKey = 'ibmDashboard';\nexport const ibmDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ibmDashboardTabFilters = Object.assign(Object.assign({}, ibmDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ibmDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ibmDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ibmDashboardDefaultFilters, ibmDashboardStateKey, ibmDashboardTabFilters, } from './ibmDashboardCommon';\nexport const selectIbmDashboardState = (state) => state[ibmDashboardStateKey];\nexport const selectWidgets = (state) => selectIbmDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, ibmDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ibmDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ibmDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ibmDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'ibm_dashboard.compute_title',\n    forecastPathsType: \"gcp\" /* ibm */,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.instanceType,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ibm_dashboard.cost_title',\n    forecastPathsType: \"gcp\" /* ibm */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        appNavId: 'ibm',\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.ibmDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ibm_dashboard.daily_cost_trend_title',\n        titleKey: 'ibm_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ibmDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './ibmDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function ibmDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpCloudQuery';\nexport const ocpCloudDashboardStateKey = 'ocpCloudDashboard';\nexport const ocpCloudDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpCloudDashboardTabFilters = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpCloudDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpCloudDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpCloudDashboardDefaultFilters, ocpCloudDashboardStateKey, ocpCloudDashboardTabFilters, } from './ocpCloudDashboardCommon';\nexport const selectOcpCloudDashboardState = (state) => state[ocpCloudDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpCloudDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCloudDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpCloudDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpCloudDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpCloudDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_cloud_dashboard.cost_title',\n    forecastPathsType: \"ocp_cloud\" /* ocpCloud */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_cloud_dashboard.daily_cost_trend_title',\n        titleKey: 'ocp_cloud_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\n// Cloud widgets\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'ocp_cloud_dashboard.compute_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB' +\n            'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway' +\n            'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_cloud_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"trend\" /* trend */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpCloudDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './ocpCloudDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function ocpCloudDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpQuery';\nexport const ocpDashboardStateKey = 'ocpDashboard';\nexport const ocpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpDashboardTabFilters = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpDashboardDefaultFilters, ocpDashboardStateKey, ocpDashboardTabFilters, } from './ocpDashboardCommon';\nexport const selectOcpDashboardState = (state) => state[ocpDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_dashboard.cost_title',\n    forecastPathsType: \"ocp\" /* ocp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        appNavId: 'ocp',\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        showTooltip: true,\n        viewAllPath: paths.ocpDetails,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedForecastInfrastructureItem: \"infrastructure\" /* infrastructure */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_dashboard.daily_cost_trend_title',\n        titleKey: 'ocp_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"dailyCost\" /* dailyCost */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp.cpu_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp.memory_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp.volume_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpQuery';\nexport const ocpSupplementaryDashboardStateKey = 'ocpSupplementaryDashboard';\nexport const ocpSupplementaryDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpSupplementaryDashboardTabFilters = Object.assign(Object.assign({}, ocpSupplementaryDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpSupplementaryDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpSupplementaryDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpSupplementaryDashboardDefaultFilters, ocpSupplementaryDashboardStateKey, ocpSupplementaryDashboardTabFilters, } from './ocpSupplementaryDashboardCommon';\nexport const selectOcpSupplementaryDashboardState = (state) => state[ocpSupplementaryDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpSupplementaryDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpSupplementaryDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpSupplementaryDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpSupplementaryDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpSupplementaryDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpSupplementaryDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_supplementary_dashboard.cost_title',\n    forecastPathsType: \"ocp\" /* ocp */,\n    forecastType: \"supplementary\" /* supplementary */,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    trend: {\n        computedForecastItem: \"supplementary\" /* supplementary */,\n        computedReportItem: \"supplementary\" /* supplementary */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_supplementary_dashboard.daily_cost_trend_title',\n        showSupplementaryLabel: true,\n        titleKey: 'ocp_supplementary_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp.cpu_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_supplementary_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"none\" /* none */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpSupplementaryDashboardTab.projects,\n    //   OcpSupplementaryDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp.memory_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_supplementary_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpSupplementaryDashboardTab.projects,\n    //   OcpSupplementaryDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp.volume_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_supplementary_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"none\" /* none */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpSupplementaryDashboardTab.projects,\n    //   OcpSupplementaryDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpSupplementaryDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpSupplementaryDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpSupplementaryDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpCloudQuery';\nexport const ocpUsageDashboardStateKey = 'ocpUsageDashboard';\nexport const ocpUsageDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpUsageDashboardTabFilters = Object.assign(Object.assign({}, ocpUsageDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpUsageDashboardDefaultFilters) {\n    const query = {\n        filter,\n    };\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpUsageDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpUsageDashboardDefaultFilters, ocpUsageDashboardStateKey, ocpUsageDashboardTabFilters, } from './ocpUsageDashboardCommon';\nexport const selectOcpUsageDashboardState = (state) => state[ocpUsageDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpUsageDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpUsageDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpUsageDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpUsageDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpUsageDashboardSelectors';\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpUsageDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.cost_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedReportItem: \"infrastructure\" /* infrastructure */,\n        computedReportItemValue: \"usage\" /* usage */,\n        formatOptions: {},\n        titleKey: 'ocp_usage_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.cpu_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_usage_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"usage\" /* usage */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.memory_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_usage_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"usage\" /* usage */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.volume_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_usage_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"usage\" /* usage */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpUsageDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpUsageDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpUsageDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","export const selectPagination = (stateProjector) => {\n    return (state) => {\n        return getPagination(stateProjector(state));\n    };\n};\nexport const getPagination = (payload) => {\n    if (payload === null) {\n        return {\n            page: 1,\n            perPage: 1,\n            count: 0,\n        };\n    }\n    let urlParams = null;\n    if (payload.links.next !== null) {\n        urlParams = new URLSearchParams(payload.links.next.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) - limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    if (payload.links.previous !== null) {\n        urlParams = new URLSearchParams(payload.links.previous.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) + limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    urlParams = new URLSearchParams(payload.links.first.split('?')[1]);\n    return {\n        page: 1,\n        perPage: Number(urlParams.get('limit')),\n        count: payload.meta.count,\n    };\n};\n","export const selectQuery = (stateProjector, keys) => {\n    return (state) => {\n        const params = getQuery(stateProjector(state));\n        return keys.reduce((acc, curr) => {\n            return Object.assign(Object.assign({}, acc), { [curr]: params.get(curr) });\n        }, {});\n    };\n};\nconst getQuery = (payload) => {\n    if (payload === null) {\n        return new URLSearchParams();\n    }\n    const [, search] = payload.links.first.split('?');\n    return new URLSearchParams(search);\n};\n","export const exportStateKey = 'export';\nexport function getExportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}-${reportType}--${query}`;\n}\n","import { exportStateKey, getExportId } from './exportCommon';\nexport const selectExportState = (state) => state[exportStateKey];\nexport const selectExport = (state, reportPathsType, reportType, query) => selectExportState(state).byId.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportFetchStatus = (state, reportPathsType, reportType, query) => selectExportState(state).fetchStatus.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportError = (state, reportPathsType, reportType, query) => selectExportState(state).errors.get(getExportId(reportPathsType, reportType, query));\n","import { runExport } from 'api/exports/exportUtils';\nimport { getExportId } from 'store/exports/exportCommon';\nimport { selectExport, selectExportFetchStatus } from 'store/exports/exportSelectors';\nimport { createAction } from 'typesafe-actions';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchExportRequest = createAction('report/request')();\nexport const fetchExportSuccess = createAction('report/success')();\nexport const fetchExportFailure = createAction('report/failure')();\nexport function exportReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isExportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getExportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchExportRequest(meta));\n        runExport(reportPathsType, reportType, query)\n            .then(res => {\n            dispatch(fetchExportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchExportFailure(err, meta));\n        });\n    };\n}\nfunction isExportExpired(state, reportPathsType, reportType, query) {\n    const report = selectExport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectExportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runExport as runAwsExport } from './awsExport';\nimport { runExport as runAzureExport } from './azureExport';\nimport { runExport as runGcpExport } from './gcpExport';\nimport { runExport as runIbmExport } from './ibmExport';\nimport { runExport as runOcpCloudExport } from './ocpCloudExport';\nimport { runExport as runOcpExport } from './ocpExport';\nexport function runExport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsExport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureExport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpExport(reportType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            report = runIbmExport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudExport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpExport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { ReportTypePaths } from 'api/reports/awsReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/azureReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/gcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ibmReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpCloudReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchExportFailure, fetchExportRequest, fetchExportSuccess } from './exportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function exportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchExportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchExportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, {\n                    data: action.payload,\n                    timeRequested: Date.now(),\n                }), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchExportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/gcp/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/ibm/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/all/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/costs/',\n    [\"infrastructure\" /* infrastructure */]: 'forecasts/openshift/costs/',\n    [\"supplementary\" /* supplementary */]: 'forecasts/openshift/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","export const forecastStateKey = 'forecast';\nexport function getForecastId(forecastPathsType, forecastType, query) {\n    return `${forecastPathsType}--${forecastType}--${query}`;\n}\n","import { forecastStateKey, getForecastId } from './forecastCommon';\nexport const selectForecastState = (state) => state[forecastStateKey];\nexport const selectForecast = (state, forecastPathsType, forecastType, query) => selectForecastState(state).byId.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastFetchStatus = (state, forecastPathsType, forecastType, query) => selectForecastState(state).fetchStatus.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastError = (state, forecastPathsType, forecastType, query) => selectForecastState(state).errors.get(getForecastId(forecastPathsType, forecastType, query));\n","import { runForecast } from 'api/forecasts/forecastUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getForecastId } from './forecastCommon';\nimport { selectForecast, selectForecastFetchStatus } from './forecastSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchForecastRequest = createAction('forecast/request')();\nexport const fetchForecastSuccess = createAction('forecast/success')();\nexport const fetchForecastFailure = createAction('forecast/failure')();\nexport function fetchForecast(forecastPathsType, forecastType, query) {\n    return (dispatch, getState) => {\n        if (!isForecastExpired(getState(), forecastPathsType, forecastType, query)) {\n            return;\n        }\n        const meta = {\n            forecastId: getForecastId(forecastPathsType, forecastType, query),\n        };\n        dispatch(fetchForecastRequest(meta));\n        runForecast(forecastPathsType, forecastType, query)\n            .then(res => {\n            dispatch(fetchForecastSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchForecastFailure(err, meta));\n        });\n    };\n}\nfunction isForecastExpired(state, forecastPathsType, forecastType, query) {\n    const forecast = selectForecast(state, forecastPathsType, forecastType, query);\n    const fetchStatus = selectForecastFetchStatus(state, forecastPathsType, forecastType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!forecast) {\n        return true;\n    }\n    const now = Date.now();\n    return now > forecast.timeRequested + expirationMS;\n}\n","import { runForecast as runAwsCloudForecast } from './awsCloudForecast';\nimport { runForecast as runAwsForecast } from './awsForecast';\nimport { runForecast as runAzureCloudForecast } from './azureCloudForecast';\nimport { runForecast as runAzureForecast } from './azureForecast';\nimport { runForecast as runGcpForecast } from './gcpForecast';\nimport { runForecast as runIbmForecast } from './ibmForecast';\nimport { runForecast as runOcpCloudForecast } from './ocpCloudForecast';\nimport { runForecast as runOcpForecast } from './ocpForecast';\nexport function runForecast(forecastPathsType, forecastType, query) {\n    let forecast;\n    switch (forecastPathsType) {\n        case \"aws\" /* aws */:\n            forecast = runAwsForecast(forecastType, query);\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            forecast = runAwsCloudForecast(forecastType, query);\n            break;\n        case \"azure\" /* azure */:\n            forecast = runAzureForecast(forecastType, query);\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            forecast = runAzureCloudForecast(forecastType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            forecast = runGcpForecast(forecastType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            forecast = runIbmForecast(forecastType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            forecast = runOcpForecast(forecastType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            forecast = runOcpCloudForecast(forecastType, query);\n            break;\n    }\n    return forecast;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchForecastFailure, fetchForecastRequest, fetchForecastSuccess } from './forecastActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function forecastReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchForecastRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.forecastId, 1 /* inProgress */) });\n        case getType(fetchForecastSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.forecastId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.forecastId, null) });\n        case getType(fetchForecastFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.forecastId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchPriceListFailure, fetchPriceListRequest, fetchPriceListSuccess } from './actions';\nexport const stateKey = 'priceList';\nexport const defaultState = {\n    rates: new Map(),\n    error: new Map(),\n    status: new Map(),\n};\nexport function reducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchPriceListRequest):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.payload.providerUuid, 1 /* inProgress */) });\n        case getType(fetchPriceListSuccess):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */), rates: new Map(state.rates).set(action.meta.providerUuid, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), error: new Map(state.error).set(action.meta.providerUuid, null) });\n        case getType(fetchPriceListFailure):\n            return Object.assign(Object.assign({}, state), { error: new Map(state.error).set(action.meta.providerUuid, action.payload), status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */) });\n        default:\n            return state;\n    }\n}\n","import { fetchRate } from 'api/rates';\nimport { expirationMS } from 'store/common';\nimport { createAction } from 'typesafe-actions';\nimport { cachedRates, status } from './selectors';\nexport const fetchPriceListRequest = createAction('priceList/request')();\nexport const fetchPriceListSuccess = createAction('priceList/success')();\nexport const fetchPriceListFailure = createAction('priceList/failure')();\nfunction isExpired(state, meta) {\n    const cachedData = cachedRates(state, meta.providerUuid);\n    const reqStatus = status(state, meta.providerUuid);\n    if (reqStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!cachedData) {\n        return true;\n    }\n    const now = Date.now();\n    return now > cachedData.timeRequested + expirationMS;\n}\nexport function fetchPriceList(providerUuid) {\n    const meta = { providerUuid };\n    return (dispatch, getState) => {\n        if (!isExpired(getState(), meta)) {\n            return;\n        }\n        dispatch(fetchPriceListRequest(meta));\n        return fetchRate(providerUuid)\n            .then(res => {\n            dispatch(fetchPriceListSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchPriceListFailure(err, meta));\n        });\n    };\n}\n","import { createAction } from 'typesafe-actions';\nexport const closeProvidersModal = createAction('ui/close_providers_modal')();\nexport const openProvidersModal = createAction('ui/open_providers_modal')();\nexport const toggleSidebar = createAction('ui/toggle_sidebar')();\n","import { getType } from 'typesafe-actions';\nimport { closeProvidersModal, openProvidersModal, toggleSidebar } from './uiActions';\nexport const defaultState = {\n    isExportModalOpen: false,\n    isProvidersModalOpen: false,\n    isSidebarOpen: false,\n};\nexport const stateKey = 'ui';\nexport function uiReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(closeProvidersModal):\n            return Object.assign(Object.assign({}, state), { isProvidersModalOpen: false });\n        case getType(openProvidersModal):\n            return Object.assign(Object.assign({}, state), { isProvidersModalOpen: true });\n        case getType(toggleSidebar):\n            return Object.assign(Object.assign({}, state), { isSidebarOpen: !state.isSidebarOpen });\n        default:\n            return state;\n    }\n}\n","import { notifications } from '@redhat-cloud-services/frontend-components-notifications';\nimport { combineReducers } from 'redux';\nimport { awsCostOverviewReducer, awsCostOverviewStateKey } from 'store/breakdown/costOverview/awsCostOverview';\nimport { azureCostOverviewReducer, azureCostOverviewStateKey } from 'store/breakdown/costOverview/azureCostOverview';\nimport { gcpCostOverviewReducer, gcpCostOverviewStateKey } from 'store/breakdown/costOverview/gcpCostOverview';\nimport { ibmCostOverviewReducer, ibmCostOverviewStateKey } from 'store/breakdown/costOverview/ibmCostOverview';\nimport { ocpCostOverviewReducer, ocpCostOverviewStateKey } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { awsHistoricalDataReducer, awsHistoricalDataStateKey } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { azureHistoricalDataReducer, azureHistoricalDataStateKey, } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { gcpHistoricalDataReducer, gcpHistoricalDataStateKey } from 'store/breakdown/historicalData/gcpHistoricalData';\nimport { ibmHistoricalDataReducer, ibmHistoricalDataStateKey } from 'store/breakdown/historicalData/ibmHistoricalData';\nimport { ocpHistoricalDataReducer, ocpHistoricalDataStateKey } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { costModelsReducer, costModelsStateKey } from 'store/costModels';\nimport { awsCloudDashboardReducer, awsCloudDashboardStateKey } from 'store/dashboard/awsCloudDashboard';\nimport { awsDashboardReducer, awsDashboardStateKey } from 'store/dashboard/awsDashboard';\nimport { azureCloudDashboardReducer, azureCloudDashboardStateKey } from 'store/dashboard/azureCloudDashboard';\nimport { azureDashboardReducer, azureDashboardStateKey } from 'store/dashboard/azureDashboard';\nimport { gcpDashboardReducer, gcpDashboardStateKey } from 'store/dashboard/gcpDashboard';\nimport { ibmDashboardReducer, ibmDashboardStateKey } from 'store/dashboard/ibmDashboard';\nimport { ocpCloudDashboardReducer, ocpCloudDashboardStateKey } from 'store/dashboard/ocpCloudDashboard';\nimport { ocpDashboardReducer, ocpDashboardStateKey } from 'store/dashboard/ocpDashboard';\nimport { ocpSupplementaryDashboardReducer, ocpSupplementaryDashboardStateKey, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { ocpUsageDashboardReducer, ocpUsageDashboardStateKey } from 'store/dashboard/ocpUsageDashboard';\nimport { exportReducer, exportStateKey } from 'store/exports';\nimport { forecastReducer, forecastStateKey } from 'store/forecasts';\nimport { orgReducer, orgStateKey } from 'store/orgs';\nimport { priceListReducer, priceListStateKey } from 'store/priceList';\nimport { reportReducer, reportStateKey } from 'store/reports';\nimport { sourcesReducer, sourcesStateKey } from 'store/sourceSettings';\nimport { tagReducer, tagStateKey } from 'store/tags';\nimport { metricsReducer, metricsStateKey } from './metrics';\nimport { providersReducer, providersStateKey } from './providers';\nimport { rbacReducer, rbacStateKey } from './rbac';\nimport { uiReducer, uiStateKey } from './ui';\nimport { userAccessReducer, userAccessStateKey } from './userAccess';\nexport const rootReducer = combineReducers({\n    [awsCloudDashboardStateKey]: awsCloudDashboardReducer,\n    [awsCostOverviewStateKey]: awsCostOverviewReducer,\n    [awsDashboardStateKey]: awsDashboardReducer,\n    [awsHistoricalDataStateKey]: awsHistoricalDataReducer,\n    [azureCloudDashboardStateKey]: azureCloudDashboardReducer,\n    [azureCostOverviewStateKey]: azureCostOverviewReducer,\n    [azureDashboardStateKey]: azureDashboardReducer,\n    [azureHistoricalDataStateKey]: azureHistoricalDataReducer,\n    [costModelsStateKey]: costModelsReducer,\n    [exportStateKey]: exportReducer,\n    [gcpCostOverviewStateKey]: gcpCostOverviewReducer,\n    [gcpDashboardStateKey]: gcpDashboardReducer,\n    [gcpHistoricalDataStateKey]: gcpHistoricalDataReducer,\n    [ibmCostOverviewStateKey]: ibmCostOverviewReducer,\n    [ibmDashboardStateKey]: ibmDashboardReducer,\n    [ibmHistoricalDataStateKey]: ibmHistoricalDataReducer,\n    [metricsStateKey]: metricsReducer,\n    [ocpCostOverviewStateKey]: ocpCostOverviewReducer,\n    [ocpDashboardStateKey]: ocpDashboardReducer,\n    [ocpCloudDashboardStateKey]: ocpCloudDashboardReducer,\n    [ocpCloudDashboardStateKey]: ocpCloudDashboardReducer,\n    [ocpHistoricalDataStateKey]: ocpHistoricalDataReducer,\n    [ocpSupplementaryDashboardStateKey]: ocpSupplementaryDashboardReducer,\n    [ocpUsageDashboardStateKey]: ocpUsageDashboardReducer,\n    [orgStateKey]: orgReducer,\n    [priceListStateKey]: priceListReducer,\n    [providersStateKey]: providersReducer,\n    [rbacStateKey]: rbacReducer,\n    [reportStateKey]: reportReducer,\n    [forecastStateKey]: forecastReducer,\n    [sourcesStateKey]: sourcesReducer,\n    [tagStateKey]: tagReducer,\n    [uiStateKey]: uiReducer,\n    [userAccessStateKey]: userAccessReducer,\n    notifications,\n});\n","import { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications';\nimport axios from 'axios';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './rootReducer';\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ serialize: true })\n    : compose;\nexport const middlewares = [thunk, notificationsMiddleware()];\nexport function configureStore(initialState) {\n    const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n    const store = createStore(rootReducer, initialState, enhancer);\n    axios.interceptors.response.use(null, error => {\n        return Promise.reject(error);\n    });\n    return store;\n}\n","import { fetchRateMetrics } from 'api/metrics';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchMetricsRequest, success: fetchMetricsSuccess, failure: fetchMetricsFailure, } = createAsyncAction('fetch/metrics/request', 'fetch/metrics/success', 'fetch/metrics/failure')();\nexport const fetchMetrics = (source_type = '') => {\n    return (dispatch) => {\n        dispatch(fetchMetricsRequest());\n        return fetchRateMetrics(source_type)\n            .then(res => {\n            dispatch(fetchMetricsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchMetricsFailure(err));\n        });\n    };\n};\n","import axios from 'axios';\nexport function fetchRateMetrics(source_type = '') {\n    const query = source_type ? `?source_type=${source_type}` : '';\n    return axios.get(`metrics/${query}`);\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchMetricsFailure, fetchMetricsRequest, fetchMetricsSuccess } from './actions';\nexport const stateKey = 'metrics';\nexport const defaultState = {\n    error: null,\n    status: 0 /* none */,\n    metrics: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchMetricsSuccess):\n            return {\n                error: null,\n                status: 2 /* complete */,\n                metrics: action.payload.data,\n            };\n        case getType(fetchMetricsFailure):\n            return {\n                status: 2 /* complete */,\n                error: action.payload,\n                metrics: null,\n            };\n        case getType(fetchMetricsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { stateKey } from './reducer';\nexport const metricsState = (state) => state[stateKey];\nexport const status = (state) => metricsState(state).status;\nexport const error = (state) => {\n    const err = metricsState(state).error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\nexport const metrics = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return {};\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        const prev = acc[curr.label_metric] ? Object.assign({}, acc[curr.label_metric]) : {};\n        return Object.assign(Object.assign({}, acc), { [curr.label_metric]: Object.assign(Object.assign({}, prev), { [curr.label_measurement]: curr }) });\n    }, {});\n};\nexport const maxRate = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return 0;\n    }\n    return metricsPayload.data.length;\n};\nexport const costTypes = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return [];\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        if (acc.includes(curr.default_cost_type)) {\n            return acc;\n        }\n        return [curr.default_cost_type, ...acc];\n    }, []);\n};\n","import axios from 'axios';\nexport const OrgTypePaths = {\n    [\"org\" /* org */]: 'organizations/aws/',\n};\nexport function runOrg(orgType, query) {\n    const path = OrgTypePaths[orgType];\n    return axios.get(`${path}?${query}`);\n}\n","export const orgStateKey = 'org';\nexport function getOrgId(orgPathsType, orgType, query) {\n    return `${orgPathsType}--${orgType}--${query}`;\n}\n","import { getOrgId, orgStateKey } from './orgCommon';\nexport const selectOrgState = (state) => state[orgStateKey];\nexport const selectOrg = (state, orgPathsType, orgType, query) => selectOrgState(state).byId.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgFetchStatus = (state, orgPathsType, orgType, query) => selectOrgState(state).fetchStatus.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgError = (state, orgPathsType, orgType, query) => selectOrgState(state).errors.get(getOrgId(orgPathsType, orgType, query));\n","import { runOrg } from 'api/orgs/orgUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getOrgId } from './orgCommon';\nimport { selectOrg, selectOrgFetchStatus } from './orgSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchOrgRequest = createAction('org/request')();\nexport const fetchOrgSuccess = createAction('org/success')();\nexport const fetchOrgFailure = createAction('org/failure')();\nexport function fetchOrg(orgPathsType, orgType, query) {\n    return (dispatch, getState) => {\n        if (!isOrgExpired(getState(), orgPathsType, orgType, query)) {\n            return;\n        }\n        const meta = {\n            orgId: getOrgId(orgPathsType, orgType, query),\n        };\n        dispatch(fetchOrgRequest(meta));\n        runOrg(orgPathsType, orgType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchOrgSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchOrgFailure(err, meta));\n        });\n    };\n}\nfunction isOrgExpired(state, orgPathsType, orgType, query) {\n    const orgReport = selectOrg(state, orgPathsType, orgType, query);\n    const fetchStatus = selectOrgFetchStatus(state, orgPathsType, orgType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!orgReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > orgReport.timeRequested + expirationMS;\n}\n","import { runOrg as runAwsOrg } from './awsOrgs';\nexport function runOrg(orgPathsType, orgType, query) {\n    let orgReport;\n    switch (orgPathsType) {\n        case \"aws\" /* aws */:\n            orgReport = runAwsOrg(orgType, query);\n            break;\n    }\n    return orgReport;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchOrgFailure, fetchOrgRequest, fetchOrgSuccess } from './orgActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function orgReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchOrgRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.orgId, 1 /* inProgress */) });\n        case getType(fetchOrgSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.orgId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.orgId, null) });\n        case getType(fetchOrgFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.orgId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { addProviderKey, getReportId, stateKey } from './providersCommon';\nexport const selectProvidersState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectProvidersState(state).fetchStatus.get(addProviderKey);\nexport const selectAddProviderError = (state) => selectProvidersState(state).errors.get(addProviderKey);\n// Fetch providers\nexport const selectProviders = (state, providerType, query) => selectProvidersState(state).byId.get(getReportId(providerType, query));\nexport const selectProvidersFetchStatus = (state, providerType, query) => selectProvidersState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectProvidersError = (state, providerType, query) => selectProvidersState(state).errors.get(getReportId(providerType, query));\n","export const stateKey = 'providers';\nexport const addProviderKey = 'add-provider';\nexport const awsProvidersQuery = {\n    type: 'AWS',\n};\nexport const azureProvidersQuery = {\n    type: 'AZURE',\n};\nexport const ocpProvidersQuery = {\n    type: 'OCP',\n};\nexport const gcpProvidersQuery = {\n    type: 'GCP',\n};\nexport const ibmProvidersQuery = {\n    type: 'GCP',\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { getRBAC } from 'api/rbac';\nimport i18next from 'i18next';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchRbacRequest, success: fetchRbacSuccess, failure: fetchRbacFailure } = createAsyncAction('fetch/RBAC/request', 'fetch/RBAC/success', 'fetch/RBAC/failure')();\nexport const fetchRbac = () => {\n    return (dispatch) => {\n        dispatch(fetchRbacRequest());\n        return getRBAC()\n            .then(res => {\n            dispatch(fetchRbacSuccess(res));\n        })\n            .catch(err => {\n            dispatch(addNotification({\n                title: i18next.t('rbac.error_title'),\n                description: i18next.t('rbac.error_description'),\n                variant: 'danger',\n                dismissable: true,\n            }));\n            dispatch(fetchRbacFailure(err));\n        });\n    };\n};\n","export async function getRBAC() {\n    const _insights = window.insights;\n    if (_insights &&\n        _insights.chrome &&\n        _insights.chrome.auth &&\n        _insights.chrome.auth.getUser &&\n        _insights.chrome.getUserPermissions) {\n        const user = await _insights.chrome.auth.getUser();\n        const permissions = await _insights.chrome.getUserPermissions();\n        return {\n            isOrgAdmin: user.identity.user.is_org_admin,\n            permissions,\n        };\n    }\n    return { isOrgAdmin: false, permissions: null };\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchRbacFailure, fetchRbacRequest, fetchRbacSuccess } from './actions';\nexport const stateKey = 'RBAC';\nexport const defaultState = {\n    isOrgAdmin: false,\n    permissions: null,\n    status: 0 /* none */,\n    error: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchRbacRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchRbacSuccess):\n            return Object.assign(Object.assign({}, action.payload), { status: 2 /* complete */, error: null });\n        case getType(fetchRbacFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        default:\n            return state;\n    }\n};\n","import { stateKey } from './reducer';\nexport const selectRbacState = (state) => state[stateKey];\nexport const isCostModelWritePermission = (state) => {\n    const { isOrgAdmin, permissions } = selectRbacState(state);\n    if (isOrgAdmin === true) {\n        return true;\n    }\n    if (!permissions) {\n        return false;\n    }\n    const costModelPermissions = permissions.find(item => item.permission.startsWith('cost-management'));\n    if (!costModelPermissions) {\n        return false;\n    }\n    const [app, resource, operation] = costModelPermissions.permission.split(':');\n    if (app === 'cost-management' && resource === '*' && operation === '*') {\n        return true;\n    }\n    if ((resource === 'rate' || resource === 'cost_model') && operation === 'write') {\n        return true;\n    }\n    return false;\n};\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","export const reportStateKey = 'report';\nexport function getReportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}--${reportType}--${query}`;\n}\n","import { getReportId, reportStateKey } from './reportCommon';\nexport const selectReportState = (state) => state[reportStateKey];\nexport const selectReport = (state, reportPathsType, reportType, query) => selectReportState(state).byId.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportFetchStatus = (state, reportPathsType, reportType, query) => selectReportState(state).fetchStatus.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportError = (state, reportPathsType, reportType, query) => selectReportState(state).errors.get(getReportId(reportPathsType, reportType, query));\n","import { runReport } from 'api/reports/reportUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './reportCommon';\nimport { selectReport, selectReportFetchStatus } from './reportSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchReportRequest = createAction('report/request')();\nexport const fetchReportSuccess = createAction('report/success')();\nexport const fetchReportFailure = createAction('report/failure')();\nexport function fetchReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isReportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getReportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchReportRequest(meta));\n        runReport(reportPathsType, reportType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchReportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchReportFailure(err, meta));\n        });\n    };\n}\nfunction isReportExpired(state, reportPathsType, reportType, query) {\n    const report = selectReport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectReportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runReport as runAwsCloudReport } from './awsCloudReports';\nimport { runReport as runAwsReport } from './awsReports';\nimport { runReport as runAzureCloudReport } from './azureCloudReports';\nimport { runReport as runAzureReport } from './azureReports';\nimport { runReport as runGcpReport } from './gcpReports';\nimport { runReport as runIbmReport } from './ibmReports';\nimport { runReport as runOcpCloudReport } from './ocpCloudReports';\nimport { runReport as runOcpReport } from './ocpReports';\nimport { runReport as runOcpUsageReport } from './ocpUsageReports';\nexport function runReport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsReport(reportType, query);\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            report = runAwsCloudReport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureReport(reportType, query);\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            report = runAzureCloudReport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpReport(reportType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            report = runIbmReport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpReport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudReport(reportType, query);\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            report = runOcpUsageReport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchReportFailure, fetchReportRequest, fetchReportSuccess } from './reportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function reportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchReportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchReportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchReportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { fetchProviders as apiGetSources } from 'api/providers';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/source/filter')();\nexport const { request: fetchSourcesRequest, success: fetchSourcesSuccess, failure: fetchSourcesFailure, } = createAsyncAction('fetch/source/request', 'fetch/source/success', 'fetch/source/failure')();\nexport const fetchSources = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchSourcesRequest());\n        return apiGetSources(query)\n            .then(res => {\n            dispatch(fetchSourcesSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchSourcesFailure(err));\n        });\n    };\n};\n","import { getType } from 'typesafe-actions';\nimport { fetchSourcesFailure, fetchSourcesRequest, fetchSourcesSuccess, updateFilterToolbar } from './actions';\nexport const stateKey = 'sources';\nexport const defaultState = {\n    sources: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchSourcesRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchSourcesSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', status: 2 /* complete */, error: null, sources: action.payload.data });\n        case getType(fetchSourcesFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        default:\n            return state;\n    }\n};\n","import { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const sourcesState = (state) => state[stateKey];\nexport const sources = (state) => {\n    const srcs = sourcesState(state).sources;\n    if (srcs) {\n        return srcs.data;\n    }\n    return [];\n};\nexport const status = (state) => sourcesState(state).status;\nexport const error = (state) => sourcesState(state).error;\nexport const currentFilterValue = (state) => sourcesState(state).currentFilterValue;\nexport const currentFilterType = (state) => sourcesState(state).currentFilterType;\nexport const query = selectQuery((state) => sourcesState(state).sources, [\n    'name',\n    'type',\n    'offset',\n    'limit',\n]);\nexport const pagination = selectPagination((state) => sourcesState(state).sources);\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/aws/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/azure/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/gcp/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/ibm/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","export const tagStateKey = 'tag';\nexport function getTagId(tagPathsType, tagType, query) {\n    return `${tagPathsType}--${tagType}--${query}`;\n}\n","import { getTagId, tagStateKey } from './tagCommon';\nexport const selectTagState = (state) => state[tagStateKey];\nexport const selectTag = (state, tagPathsType, tagType, query) => selectTagState(state).byId.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagFetchStatus = (state, tagPathsType, tagType, query) => selectTagState(state).fetchStatus.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagError = (state, tagPathsType, tagType, query) => selectTagState(state).errors.get(getTagId(tagPathsType, tagType, query));\n","import { runTag } from 'api/tags/tagUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getTagId } from './tagCommon';\nimport { selectTag, selectTagFetchStatus } from './tagSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchTagRequest = createAction('tag/request')();\nexport const fetchTagSuccess = createAction('tag/success')();\nexport const fetchTagFailure = createAction('tag/failure')();\nexport function fetchTag(tagPathsType, tagType, query) {\n    return (dispatch, getState) => {\n        if (!isTagExpired(getState(), tagPathsType, tagType, query)) {\n            return;\n        }\n        const meta = {\n            tagId: getTagId(tagPathsType, tagType, query),\n        };\n        dispatch(fetchTagRequest(meta));\n        runTag(tagPathsType, tagType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchTagSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchTagFailure(err, meta));\n        });\n    };\n}\nfunction isTagExpired(state, tagPathsType, tagType, query) {\n    const tagReport = selectTag(state, tagPathsType, tagType, query);\n    const fetchStatus = selectTagFetchStatus(state, tagPathsType, tagType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!tagReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > tagReport.timeRequested + expirationMS;\n}\n","import { runTag as runAwsTag } from './awsTags';\nimport { runTag as runAzureTag } from './azureTags';\nimport { runTag as runGcpTag } from './gcpTags';\nimport { runTag as runIbmTag } from './ibmTags';\nimport { runTag as runOcpTag } from './ocpTags';\nexport function runTag(tagPathsType, tagType, query) {\n    let tagReport;\n    switch (tagPathsType) {\n        case \"aws\" /* aws */:\n            tagReport = runAwsTag(tagType, query);\n            break;\n        case \"azure\" /* azure */:\n            tagReport = runAzureTag(tagType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            tagReport = runGcpTag(tagType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            tagReport = runIbmTag(tagType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            tagReport = runOcpTag(tagType, query);\n            break;\n    }\n    return tagReport;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchTagFailure, fetchTagRequest, fetchTagSuccess } from './tagActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function tagReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchTagRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.tagId, 1 /* inProgress */) });\n        case getType(fetchTagSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.tagId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.tagId, null) });\n        case getType(fetchTagFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.tagId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getReportId, stateKey, userAccessKey } from './userAccessCommon';\nexport const selectUserAccessState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectUserAccessState(state).fetchStatus.get(userAccessKey);\nexport const selectAddProviderError = (state) => selectUserAccessState(state).errors.get(userAccessKey);\n// Fetch userAccess\nexport const selectUserAccess = (state, providerType, query) => selectUserAccessState(state).byId.get(getReportId(providerType, query));\nexport const selectUserAccessFetchStatus = (state, providerType, query) => selectUserAccessState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectUserAccessError = (state, providerType, query) => selectUserAccessState(state).errors.get(getReportId(providerType, query));\n","export const stateKey = 'userAccess';\nexport const userAccessKey = 'user-access';\nexport const allUserAccessQuery = {\n    type: '',\n};\nexport const awsUserAccessQuery = {\n    type: 'AWS',\n};\nexport const azureUserAccessQuery = {\n    type: 'AZURE',\n};\nexport const costModelUserAccessQuery = {\n    type: 'cost_model',\n};\nexport const ocpUserAccessQuery = {\n    type: 'OCP',\n};\nexport const gcpUserAccessQuery = {\n    type: 'GCP',\n};\nexport const ibmUserAccessQuery = {\n    type: 'GCP',\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","export const getBaseName = pathname => {\n    let release = '/';\n    const pathName = pathname.split('/');\n    pathName.shift();\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n    // return `${release}${pathName[0]}/${pathName[1] || ''}`;\n    return `${release}${pathName[0]}`;\n};\n"],"sourceRoot":""}