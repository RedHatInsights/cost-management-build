{"version":3,"sources":["webpack:///./src/pages/ocpOnCloudDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummary.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/groupBy.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/groupBy.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsHeader.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/detailsTagView.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpOnCloudDetails/exportModal.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/exportModal.tsx","webpack:///./src/pages/ocpOnCloudDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/historicalChart.tsx","webpack:///./src/pages/ocpOnCloudDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/historicalModal.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsActions.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/detailsChart.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/detailsTag.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsWidget.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsTable.tsx","webpack:///./src/pages/ocpOnCloudDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpOnCloudDetails/ocpOnCloudDetails.styles.ts","webpack:///./src/pages/ocpOnCloudDetails/ocpOnCloudDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpOnCloudDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpOnCloudReport","utils_getComputedOcpOnCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","LAYOUT_PROPS","padding","theme_koku","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnCloudReportItems","getUnsortedComputedOcpOnCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","colorScale","esm","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","legendData","chartUtils","push","symbol","setState","chartDatum","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","title","eventHandlers","target","mutation","ChartLegend","events","gutter","labelComponent","chartLabelTooltip","getLegendTooltip","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendColorScale","handleLegendClick","legendItemsPerRow","responsive","childName","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","marginLeft","historicalTrendChart_HistoricalTrendChart","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpOnCloudReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpOnCloudReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpOnCloudReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpOnCloudReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpOnCloudReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","cloudReportType","meta","total","getCostLayout","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","ocpOnCloudReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpOnCloudReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpOnCloudReportSummaryItem","ocpOnCloudReportSummaryItems_styles_styles","skeleton","OcpOnCloudReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","ocpOnCloudReportSummaryTrend_styles_styles","OcpOnCloudReportSummaryTrend","trendChart","OcpOnCloudReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","previous","previousLegendData","currentLegendData","maxCurrentLimit","maxPreviousLimit","costValue","costLabelUnit","costLabelDate","header","backgroundColor","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpOnCloudQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpOnCloudReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","getDropDownTags","Set","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","date","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","ocpOnCloudReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpOnCloudExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpOnCloudReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpOnCloudReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalTrendChart","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpOnCloudDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","trunc","limitUnits","requestUnits","cpuDatum","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpOnCloudDetails_styles_styles","ocpOnCloudDetails","tableContainer","ocpOnCloudDetails_reportType","ocpOnCloudDetails_tagKey","ocpOnCloudDetails_baseQuery","ocpOnCloudDetails_mapStateToProps","ocpOnCloudDetails_mapDispatchToProps","getFilterFields","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"e0d382853662287f18e0.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpOnCloudDetails from './ocpOnCloudDetails';\nexport default hot(module)(OcpOnCloudDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpOnCloudReportItems, } from 'utils/getComputedOcpOnCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { title } = this.props;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentUsageData, 'chart.usage_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousUsageData,\n                            name: 'previousUsage',\n                            show: true,\n                            style: chartStyles.previousUsageData,\n                        },\n                        {\n                            data: currentUsageData,\n                            name: 'currentUsage',\n                            show: true,\n                            style: chartStyles.currentUsageData,\n                        },\n                        {\n                            data: previousRequestData,\n                            name: 'previousRequest',\n                            show: true,\n                            style: chartStyles.previousRequestData,\n                        },\n                        {\n                            data: currentRequestData,\n                            name: 'currentRequest',\n                            show: true,\n                            style: chartStyles.currentRequestData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: true, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { ChartLabelTooltip } from '../chartLabelTooltip';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            const charts = [\n                {\n                    data: previousData,\n                    name: 'previous',\n                    show: true,\n                    style: chartStyles.previousMonth,\n                },\n                {\n                    data: currentData,\n                    name: 'current',\n                    show: true,\n                    style: chartStyles.currentMonth,\n                },\n            ];\n            const legend = {\n                colorScale: chartStyles.colorScale,\n                data: legendData,\n                onClick: this.handleCostLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            const { legendItemsPerRow } = this.props;\n            if (chartDatum && chartDatum.data && chartDatum.data.length) {\n                const eventHandlers = {\n                    onClick: () => {\n                        return [\n                            {\n                                target: 'data',\n                                mutation: props => {\n                                    chartDatum.onClick(props);\n                                    return null;\n                                },\n                            },\n                        ];\n                    },\n                };\n                return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers,\n                        },\n                        {\n                            target: 'labels',\n                            eventHandlers,\n                        },\n                    ], gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnCloudReportSummary.styles';\nconst OcpOnCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpOnCloudReportSummary = translate()(OcpOnCloudReportSummaryBase);\nexport { OcpOnCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnCloudReportSummaryAlt.styles';\nconst OcpOnCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpOnCloudReportSummaryAlt = translate()(OcpOnCloudReportSummaryAltBase);\nexport { OcpOnCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnCloudReportSummaryDetails.styles';\nconst OcpOnCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpOnCloudReportSummaryDetails = translate()(OcpOnCloudReportSummaryDetailsBase);\nexport { OcpOnCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnCloudReportSummaryItem.styles';\nconst OcpOnCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpOnCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpOnCloudReportSummaryItem = translate()(OcpOnCloudReportSummaryItemBase);\nexport { OcpOnCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpOnCloudReportItems, } from 'utils/getComputedOcpOnCloudReportItems';\nimport { styles } from './ocpOnCloudReportSummaryItems.styles';\nclass OcpOnCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpOnCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpOnCloudReportSummaryItems = translate()(OcpOnCloudReportSummaryItemsBase);\nexport { OcpOnCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpOnCloudReportSummaryTrend.styles';\nconst OcpOnCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpOnCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpOnCloudReportSummaryTrend.styles';\nconst OcpOnCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpOnCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { ChartLabelTooltip } from '../chartLabelTooltip';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const previous = [\n                {\n                    data: previousUsageData,\n                    name: 'previousUsage',\n                    show: true,\n                    style: chartStyles.previousUsageData,\n                },\n                {\n                    data: previousRequestData,\n                    name: 'previousRequest',\n                    show: true,\n                    style: chartStyles.previousRequestData,\n                },\n                {\n                    data: previousLimitData,\n                    name: 'previousLimit',\n                    show: true,\n                    style: chartStyles.previousLimitData,\n                },\n            ];\n            const current = [\n                {\n                    data: currentUsageData,\n                    name: 'currentUsage',\n                    show: true,\n                    style: chartStyles.currentUsageData,\n                },\n                {\n                    data: currentRequestData,\n                    name: 'currentRequest',\n                    show: true,\n                    style: chartStyles.currentRequestData,\n                },\n                {\n                    data: currentLimitData,\n                    name: 'currentLimit',\n                    show: true,\n                    style: chartStyles.currentLimitData,\n                },\n            ];\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n            }\n            if (previousLimitData) {\n                const [start] = getMonthRangeString(previousLimitData, 'chart.limit_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousLimitData, true, true, 1),\n                });\n            }\n            const currentLegendData = [];\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentLegendData, 'chart.usage_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n            }\n            if (currentLimitData) {\n                const [start] = getMonthRangeString(currentLimitData, 'chart.limit_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentLimitData, true, false),\n                });\n            }\n            // Merge current and previous data into one legend row\n            const charts = [];\n            const colorScale = [];\n            const legendData = [];\n            for (let i = 0; i < current.length && previous.length; i++) {\n                charts.push(previous[i]);\n                charts.push(current[i]);\n                legendData.push(previousLegendData[i]);\n                legendData.push(currentLegendData[i]);\n                colorScale.push(chartStyles.previousColorScale[i]);\n                colorScale.push(chartStyles.currentColorScale[i]);\n            }\n            const legend = {\n                colorScale,\n                data: legendData,\n                onClick: this.handleLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 0, height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport { parseQuery } from 'api/ocpOnCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudReportsActions, ocpOnCloudReportsSelectors, } from 'store/ocpOnCloudReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpOnCloudReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpOnCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnCloudReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudReportsActions, ocpOnCloudReportsSelectors, } from 'store/ocpOnCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const today = new Date();\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_on_cloud_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.infrastructure_cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('ocp_on_cloud_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, t('since_date', { month: today.getMonth(), date: 1 })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpOnCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpOnCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnCloudReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpOnCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudReportsActions, ocpOnCloudReportsSelectors, } from 'store/ocpOnCloudReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpOnCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnCloudReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_on_cloud_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport { OcpOnCloudReportSummaryItem, OcpOnCloudReportSummaryItems, } from 'components/reports/ocpOnCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudReportsActions, ocpOnCloudReportsSelectors, } from 'store/ocpOnCloudReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report &&\n            report.meta &&\n            report.meta.total &&\n            report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_on_cloud_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpOnCloudReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpOnCloudReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.infrastructure_cost.value, units: _item.units, value: _item.infrastructureCost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpOnCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_on_cloud_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudExportActions, ocpOnCloudExportSelectors, } from 'store/ocpOnCloudExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpOnCloudExportSelectors.selectExportError(state),\n        export: ocpOnCloudExportSelectors.selectExport(state),\n        fetchStatus: ocpOnCloudExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpOnCloudExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpOnCloudReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpOnCloudReportsActions from 'store/ocpOnCloudReports/ocpOnCloudReportsActions';\nimport * as ocpOnCloudReportsSelectors from 'store/ocpOnCloudReports/ocpOnCloudReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpOnCloudReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpOnCloudReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpOnCloudReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpOnCloudReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpOnCloudReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpOnCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpOnCloudReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpOnCloudReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpOnCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpOnCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpOnCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpOnCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpOnCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpOnCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.infrastructure_cost\n            ? currentCostReport.meta.total.infrastructure_cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('ocp_on_cloud_details.historical.cost_title'), xAxisLabel: t('ocp_on_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_on_cloud_details.historical.cpu_title'), xAxisLabel: t('ocp_on_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_on_cloud_details.historical.memory_title'), xAxisLabel: t('ocp_on_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpOnCloudReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpOnCloudReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpOnCloudReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpOnCloudReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpOnCloudReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpOnCloudReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnCloudReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudDashboardSelectors } from 'store/ocpOnCloudDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_on_cloud_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpOnCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_on_cloud_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_on_cloud_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_on_cloud_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_on_cloud_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudReportsActions, ocpOnCloudReportsSelectors, } from 'store/ocpOnCloudReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        if (report && report.meta && report.meta.total) {\n            if (report.meta.total.limit !== null) {\n                const limit = Math.trunc(report.meta.total.limit.value);\n                const limitUnits = t(`units.${unitLookupKey(report.meta.total.limit.units)}`);\n                datum.limit = {\n                    legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    value: Math.trunc(limit),\n                };\n            }\n            if (report.meta.total.request !== null) {\n                const request = Math.trunc(report.meta.total.request.value);\n                const requestUnits = t(`units.${unitLookupKey(report.meta.total.request.units)}`);\n                datum.ranges = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        value: Math.trunc(request),\n                    },\n                ];\n            }\n            if (report.meta.total.usage !== null) {\n                const usage = Math.trunc(report.meta.total.usage.value);\n                const usageUnits = t(`units.${unitLookupKey(report.meta.total.usage.units)}`);\n                datum.usage = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        value: Math.trunc(usage),\n                    },\n                ];\n            }\n        }\n        return datum;\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                    ? [\n                        {\n                            tooltip: cpuDatum.limit.tooltip,\n                            y: cpuDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: cpuDatum.usage.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.usage[0].tooltip,\n                            y: cpuDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                    ? [{ name: cpuDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: cpuDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.ranges[0].tooltip,\n                            y: cpuDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                    ? [{ name: cpuDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width })))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                    ? [\n                        {\n                            tooltip: memoryDatum.limit.tooltip,\n                            y: memoryDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                    ? [{ name: memoryDatum.limit.legend }]\n                    : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: memoryDatum.usage.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.usage[0].tooltip,\n                            y: memoryDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                    ? [{ name: memoryDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: memoryDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.ranges[0].tooltip,\n                            y: memoryDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                    ? [{ name: memoryDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpOnCloudReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpOnCloudReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnCloudReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudReportsActions, ocpOnCloudReportsSelectors, } from 'store/ocpOnCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_on_cloud_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpOnCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnCloudReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport { OcpOnCloudReportSummaryItem, OcpOnCloudReportSummaryItems, } from 'components/reports/ocpOnCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudReportsActions, ocpOnCloudReportsSelectors, } from 'store/ocpOnCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpOnCloudReportItems } from 'utils/getComputedOcpOnCloudReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedOcpOnCloudReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(OcpOnCloudReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: report.meta.total.infrastructure_cost.value, units: reportItem.units, value: reportItem.infrastructureCost }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_on_cloud_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(OcpOnCloudReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpOnCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (!((groupBy === 'project' || groupBy === 'node') &&\n                    getIdKeyForTab(tab).toString() === 'project')) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top_ocp_on_cloud', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"projects\" /* projects */,\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_on_cloud_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_on_cloud_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_on_cloud_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpOnCloudReportItems, } from 'utils/getComputedOcpOnCloudReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_on_cloud_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_on_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_on_cloud_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_on_cloud_details.name_column_title', {\n                            groupBy: groupById,\n                        }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_on_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_on_cloud_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpOnCloudReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_on_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('ocp_on_cloud_details.increase_since_date', {\n                            date,\n                            month,\n                            value,\n                        })\n                        : t('ocp_on_cloud_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('ocp_on_cloud_details.decrease_since_date', {\n                                date,\n                                month,\n                                value,\n                            })\n                            : t('ocp_on_cloud_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('ocp_on_cloud_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.infrastructure_cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpOnCloudDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpOnCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudReportsActions, ocpOnCloudReportsSelectors, } from 'store/ocpOnCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpOnCloudReportItems, } from 'utils/getComputedOcpOnCloudReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpOnCloudDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'or:tag:';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpOnCloudDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        label: t('ocp_on_cloud_details.filter.name'),\n                        title: t('ocp_on_cloud_details.filter.cluster_select'),\n                        placeholder: t('ocp_on_cloud_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        label: t('ocp_on_cloud_details.filter.name'),\n                        title: t('ocp_on_cloud_details.filter.node_select'),\n                        placeholder: t('ocp_on_cloud_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        label: t('ocp_on_cloud_details.filter.name'),\n                        title: t('ocp_on_cloud_details.filter.project_select'),\n                        placeholder: t('ocp_on_cloud_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by project tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('ocp_on_cloud_details.filter.name'),\n                        title: t('ocp_on_cloud_details.filter.tag_select'),\n                        placeholder: t('ocp_on_cloud_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTagKey ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_on_cloud_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp-on-aws?${getQuery(query)}`; // Todo: replace ocp-on-aws with ocp-on-cloud\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpOnCloudReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpOnCloudDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpOnCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpOnCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpOnCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnCloudReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpOnCloudDetails));\n"],"sourceRoot":""}