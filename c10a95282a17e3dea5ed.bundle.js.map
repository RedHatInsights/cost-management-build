{"version":3,"sources":["webpack:///./src/pages/awsDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/awsDetails/awsDetails.styles.ts","webpack:///./src/pages/awsDetails/detailsHeader.styles.ts","webpack:///./src/pages/awsDetails/groupBy.styles.ts","webpack:///./src/pages/awsDetails/groupBy.tsx","webpack:///./src/pages/awsDetails/detailsHeader.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.styles.ts","webpack:///./src/pages/awsDetails/detailsTagView.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.tsx","webpack:///./src/pages/awsDetails/exportModal.styles.ts","webpack:///./src/pages/awsDetails/exportModal.tsx","webpack:///./src/pages/awsDetails/historicalChart.styles.ts","webpack:///./src/pages/awsDetails/historicalChart.tsx","webpack:///./src/pages/awsDetails/historicalModal.styles.ts","webpack:///./src/pages/awsDetails/historicalModal.tsx","webpack:///./src/pages/awsDetails/detailsActions.tsx","webpack:///./src/pages/awsDetails/detailsTable.styles.ts","webpack:///./src/pages/awsDetails/detailsTableItem.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.tsx","webpack:///./src/pages/awsDetails/detailsWidget.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetView.tsx","webpack:///./src/pages/awsDetails/detailsWidget.tsx","webpack:///./src/pages/awsDetails/detailsTableItem.tsx","webpack:///./src/pages/awsDetails/detailsTable.tsx","webpack:///./src/pages/awsDetails/detailsToolbar.styles.ts","webpack:///./src/pages/awsDetails/filterBy.styles.ts","webpack:///./src/pages/awsDetails/filterBy.tsx","webpack:///./src/pages/awsDetails/detailsToolbar.tsx","webpack:///./src/pages/awsDetails/awsDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_awsDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","tags","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","_","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","itemsPerRow","marginLeft","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_4___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","onSelect","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","variant","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","tertiary","val","awsDetails","backgroundColor","content","paddingTop","paginationContainer","pagination","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","awsQuery","filter","resolution","time_scope_units","time_scope_value","key_only","awsReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","awsReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","awsExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","currentTarget","sortedItems","selectedLabel","actions","Button","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","awsReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","awsReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","awsDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","toolbarContainer","paddingLeft","filterBy_styles_styles","filterContainer","filterByOptions","filterBy_reportType","filterBy_tagKey","filterBy_mapStateToProps","filterBy_mapDispatchToProps","FilterBy","isFilterByOpen","isFilterByTagOpen","getFilterBy","getSelectOptions","getFilterByTag","getSelectTagOptions","getSelectOption","getSelectItems","SelectOption","getSelectTagItems","escapeValue","handleFilterBySelect","selection","isPlaceholder","handleFilterByTagSelect","currentTagItem","handleFilterByToggle","handleFilterByTagToggle","filterByTag","Select","isExpanded","selections","selectConstants","single","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","currentValue","currentViewType","filterCategory","addQuery","filter_by","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","placeholder","TextInput","onKeyPress","isExportDisabled","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","awsDetails_reportType","awsDetails_baseQuery","awsDetails_tagKey","awsDetails_mapStateToProps","awsDetails_mapDispatchToProps","groupByTag","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","newFilterType","found","filters","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"c10a95282a17e3dea5ed.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AwsDetails from './awsDetails';\nexport default hot(module)(AwsDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    awsDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { parseQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAwsReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'account';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"aws\" /* aws */ })),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('aws_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('aws_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AwsReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsExportActions, awsExportSelectors } from 'store/awsExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: awsExportSelectors.selectExportError(state),\n        export: awsExportSelectors.selectExport(state),\n        fetchStatus: awsExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: awsExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAwsReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as awsReportsActions from 'store/awsReports/awsReportsActions';\nimport * as awsReportsSelectors from 'store/awsReports/awsReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAwsReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAwsReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAwsReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAwsReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAwsReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAwsReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('aws_details.historical.cost_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('aws_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('aws_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = awsReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = awsReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = awsReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = awsReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"account\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('aws_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'account', onClick: this.handleWidgetModalOpen }, t('aws_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'account', onClick: this.handleTagModalOpen }, t('aws_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('aws_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('aws_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAwsReportItems } from 'utils/getComputedAwsReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAwsReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */ ? reportItem.cost : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('aws_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('aws_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'account') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('aws_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/awsQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('aws_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAwsReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = percentage !== 0 ? 'iconOverride' : undefined;\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    Boolean(percentage > 0) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    filterContainer: {\n        display: 'inline-flex',\n    },\n});\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { styles } from './filterBy.styles';\nconst filterByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n    { label: 'tags', value: 'tags' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass FilterByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isFilterByOpen: false,\n            isFilterByTagOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getFilterBy = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectOptions();\n            for (const item of items) {\n                if (groupBy === item.id ||\n                    (groupBy.indexOf(tagKey) !== -1 && item.id === 'tags')) {\n                    return item;\n                }\n            }\n            return null;\n        };\n        this.getFilterByTag = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectTagOptions();\n            for (const item of items) {\n                if (groupBy === item.id) {\n                    return item;\n                }\n            }\n            return items[0];\n        };\n        this.getSelectOption = (id, label) => {\n            return {\n                id,\n                toString: () => label,\n            };\n        };\n        this.getSelectItems = () => {\n            return this.getSelectOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectTagItems = () => {\n            return this.getSelectTagOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectOptions = () => {\n            const { t } = this.props;\n            return filterByOptions.map(option => {\n                return this.getSelectOption(`${option.value}`, t(`group_by.values.${option.label}`));\n            });\n        };\n        this.getSelectTagOptions = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => {\n                    return this.getSelectOption(`${tagKey}${val}`, t('group_by.tag', { key: val, interpolation: { escapeValue: false } }));\n                });\n            }\n            else {\n                return [];\n            }\n        };\n        this.handleFilterBySelect = (event, selection, isPlaceholder) => {\n            const { groupBy, onItemClicked } = this.props;\n            let selected = selection;\n            if (selection.id === 'tags') {\n                const items = this.getSelectTagOptions();\n                if (groupBy.indexOf(tagKey) !== -1) {\n                    for (const item of items) {\n                        if (groupBy === item.id) {\n                            selected = item;\n                        }\n                    }\n                }\n                else {\n                    selected = items[0];\n                }\n            }\n            if (onItemClicked) {\n                onItemClicked(selected.id);\n            }\n            this.setState({\n                currentItem: selection,\n                isFilterByOpen: false,\n            });\n        };\n        this.handleFilterByTagSelect = (event, selection, isPlaceholder) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.id);\n            }\n            this.setState({\n                currentTagItem: selection,\n                isFilterByTagOpen: false,\n            });\n        };\n        this.handleFilterByToggle = isFilterByOpen => {\n            this.setState({\n                isFilterByOpen,\n            });\n        };\n        this.handleFilterByTagToggle = isFilterByTagOpen => {\n            this.setState({\n                isFilterByTagOpen,\n            });\n        };\n        this.handleFilterBySelect = this.handleFilterBySelect.bind(this);\n        this.handleFilterByTagSelect = this.handleFilterByTagSelect.bind(this);\n        this.handleFilterByTagToggle = this.handleFilterByTagToggle.bind(this);\n        this.handleFilterByToggle = this.handleFilterByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getFilterBy(),\n            currentTagItem: this.getFilterByTag(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportFetchStatus, groupBy, queryString } = this.props;\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString ||\n            prevProps.reportFetchStatus !== reportFetchStatus) {\n            this.setState({\n                currentItem: this.getFilterBy(),\n                currentTagItem: this.getFilterByTag(),\n            });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, currentTagItem, isFilterByOpen, isFilterByTagOpen, } = this.state;\n        const filterByTag = currentItem && currentItem.id ? currentItem.id === 'tags' : false;\n        return (React.createElement(\"div\", { className: css(styles.filterContainer) },\n            React.createElement(Select, { \"aria-label\": t('aws_details.toolbar.filter_type_aria_label'), onSelect: this.handleFilterBySelect, onToggle: this.handleFilterByToggle, isExpanded: isFilterByOpen, selections: currentItem, variant: SelectVariant.single }, this.getSelectItems()),\n            Boolean(filterByTag) && (React.createElement(Select, { \"aria-label\": t('aws_details.toolbar.filter_tag_type_aria_label'), onSelect: this.handleFilterByTagSelect, onToggle: this.handleFilterByTagToggle, isExpanded: isFilterByTagOpen, selections: currentTagItem, variant: SelectVariant.single }, this.getSelectTagItems()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst FilterBy = translate()(connect(mapStateToProps, mapDispatchToProps)(FilterByBase));\nexport { FilterBy };\n","import { Button, ButtonVariant, Chip, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nimport { FilterBy } from './filterBy';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.groupBy,\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            if (query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    if (Array.isArray(query.filter_by[key])) {\n                        query.filter_by[key].forEach(value => {\n                            const field = key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key;\n                        const filter = this.getFilter(field, query.filter_by[key]);\n                        activeFilters.push(filter);\n                    }\n                });\n            }\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(this.props.groupBy, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType, value);\n        };\n        this.getFilter = (field, value) => {\n            const filterLabel = this.getFilterLabel(field, value);\n            const result = {\n                field,\n                label: filterLabel,\n                value,\n            };\n            return result;\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = (filterType) => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (groupBy !== prevProps.groupBy) {\n            this.setState({\n                currentFilterType: groupBy,\n            });\n        }\n    }\n    renderInput() {\n        const { t } = this.props;\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        const index = currentFilterType ? currentFilterType.indexOf(tagKey) : -1;\n        const placeholder = index === 0\n            ? t('aws_details.filter.tag_placeholder')\n            : t(`aws_details.filter.${currentFilterType}_placeholder`);\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: placeholder, value: currentValue }));\n    }\n    render() {\n        const { groupBy, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('aws_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FilterBy, { groupBy: groupBy, onItemClicked: this.selectFilterType })),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('aws_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('aws_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('aws_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('aws_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('aws_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('aws_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[newFilterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[newFilterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[newFilterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[newFilterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[newFilterType] = [\n                        newQuery.filter_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (!Array.isArray(newQuery.filter_by[newFilterType])) {\n                newQuery.filter_by[newFilterType] = undefined;\n            }\n            else {\n                const index = newQuery.filter_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[newFilterType] = [\n                        ...query.filter_by[newFilterType].slice(0, index),\n                        ...query.filter_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/aws?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAwsReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.awsDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n"],"sourceRoot":""}