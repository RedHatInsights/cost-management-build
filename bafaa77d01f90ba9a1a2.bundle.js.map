{"version":3,"sources":["webpack:///./node_modules/react-router-dom/es/Link.js","webpack:///./src/utils/formatValue.ts","webpack:///./src/components/charts/common/chartUtils.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/charts/common/chart.styles.ts","webpack:///./src/utils/computedReport/getComputedReportItems.ts","webpack:///./src/utils/computedReport/getItemLabel.ts","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/reports/reportSummary/reportSummary.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummary.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryAlt.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryAlt.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryDetails.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryDetails.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItem.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryItem.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItems.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryTrend.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryCost.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryTrend.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryUsage.tsx","webpack:///./src/components/reports/reportSummary/index.ts","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/sort.ts","webpack:///./src/utils/pathname.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/pages/dashboard/components/dashboardBase.tsx","webpack:///./src/pages/dashboard/components/dashboardWidget.styles.ts","webpack:///./src/pages/dashboard/components/dashboardWidgetBase.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboard.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboard.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/perspective.styles.ts","webpack:///./src/pages/overview/perspective.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","invariant__WEBPACK_IMPORTED_MODULE_2__","invariant__WEBPACK_IMPORTED_MODULE_2___default","history__WEBPACK_IMPORTED_MODULE_3__","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_possibleConstructorReturn","self","ReferenceError","isModifiedEvent","event","metaKey","altKey","ctrlKey","shiftKey","Link","_React$Component","_temp","_this","instance","Constructor","TypeError","_classCallCheck","this","_len","args","Array","_key","apply","concat","handleClick","props","onClick","defaultPrevented","button","preventDefault","history","context","router","_this$props","replace","to","push","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_inherits","render","_props","innerRef","obj","keys","indexOf","_objectWithoutProperties","undefined","location","href","createHref","a","createElement","ref","Component","propTypes","func","string","bool","oneOfType","object","isRequired","defaultProps","contextTypes","shape","__webpack_exports__","d","unitLookupKey","formatValue","formatCurrency","unit","lookup","toLowerCase","options","fValue","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","transformReport","getDateRange","getMaxValue","getTooltipContent","getTooltipLabel","getCostRangeString","getUsageRangeString","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0__","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","date_fns_format__WEBPACK_IMPORTED_MODULE_1__","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3__","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","i18next__WEBPACK_IMPORTED_MODULE_5__","utils_computedReport_getComputedReportItems__WEBPACK_IMPORTED_MODULE_6__","utils_formatValue__WEBPACK_IMPORTED_MODULE_7__","report","type","reportItem","reportItemValue","items","idKey","sortKey","sortDirection","computedItems","map","createDatum","reduce","acc","prevValue","y","computedItem","x","id","label","Number","isFloat","parseFloat","toFixed","isInt","name","units","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","getDatumDateRange","setDate","lastDate","getDate","max","forEach","datum","t","formatOptions","toString","count","endDate","month","startDate","year","getTestProps","testIds","data-testid","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","LAYOUT_PROPS","padding","theme_koku","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","chartOverride","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_0__","emotion__WEBPACK_IMPORTED_MODULE_1__","getComputedReportItems","labelKey","sort","getUnsortedComputedReportItems","direction","itemMap","Map","visitDataPoint","dataPoint","values","cluster_alias","clusters","cluster","capacity","cost","total","supplementary","infrastructure","idSuffix","itemLabelKey","String","meta","group_by","query","tagPrefixKey","getItemLabel","account_alias","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","data","from","styles","container","display","justifyContent","height","marginTop","ErrorState","es","error","icon","error_circle_o_icon","title","subTitle","response","status","lock_icon","react_default","EmptyState","EmptyStateIcon","Title","size","EmptyStateBody","chartSkeleton","marginBottom","esm","legendSkeleton","reportSummary","subtitle","fontSize","color","var","ReportSummary","children","detailsLink","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","reportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","ReportSummaryAlt","tabs","Grid","gutter","GridItem","lg","xl","reportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","paddingLeft","whiteSpace","valueContainer","width","wordWrap","ReportSummaryDetails","chartType","computedReportItem","computedReportItemValue","costLabel","requestFormatOptions","requestLabel","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","supplementaryCost","infrastructureCost","hasTotal","hasCost","hasCount","hasSupplementaryCost","hasInfrastructureCost","hasRequest","hasUsage","getCostLayout","Tooltip","content","enableFlip","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","reportSummaryItem","index_esm","ReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","className","Progress","v","ReportSummaryItem","reportSummaryItems_styles_styles","skeleton","ReportSummaryItems","[object Object]","nextProps","otherIndex","findIndex","includes","slice","getItems","chartStyles","currentCostData","fill","stroke","currentInfrastructureCostData","strokeDasharray","itemsPerRow","labels","fontFamily","minWidth","legendColorScale","previousCostData","previousInfrastructureCostData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","costChart_CostChart","super","containerRef","createRef","state","hiddenSeries","Set","initDatum","costKey","setState","series","childName","legendItem","chartUtils","symbol","handleNavToggle","setTimeout","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","legendItemsPerRow","ChartLegend","colorScale","getLegendData","responsive","formatDatumValue","formatDatumOptions","dist_es","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","window","addEventListener","navToggle","insights","chrome","on","prevProps","removeEventListener","domain","maxCurrentInfrastructure","maxCurrentUsage","maxPreviousInfrastructure","maxPreviousUsage","maxValue","Math","ceil","currentInfrastructureDate","get_date_default","currentUsageDate","previousInfrastructureDate","previousUsageDate","adjustContainerHeight","containerHeight","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","chart_styles","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","reportSummaryTrend_styles_styles","ReportSummaryCost","trendChart_styles_chartStyles","previousMonth","currentMonth","trendChart_TrendChart","currentData","previousData","showSupplementaryLabel","showUsageLegendLabel","orientation","maxCurrent","maxPrevious","previousDate","currentDate","ReportSummaryTrend","usageChart_styles_chartStyles","chartContainer","currentRequestData","currentUsageData","previousRequestData","previousUsageData","usageChart_UsageChart","maxCurrentRequest","maxPreviousRequest","currentRequestDate","previousRequestDate","ReportSummaryUsage","LoadingState","binoculars_icon","Spinner","EmptyValueState","minus_icon","getValueForItem","item","array","b","aVal","bVal","getReleasePath","pathName","pathname","split","shift","release","viewSources","NoProvidersState","react_redux_es","getViewSources","dollar_sign_icon","DashboardBase","DashboardWidget","selectWidgets","widgets","widgetId","widget","showHorizontal","xl2","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","tabItems","dashboardWidgetBase_DashboardWidgetBase","activeTabKey","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","awsQuery","order_by","getCostChart","getTrendChart","getUsageChart","currentReport","previousReport","trend","getUnits","titleKey","currentInfrastructureData","previousInfrastructureData","getDetails","getDetailsLabel","requestKey","usageKey","getDetailsLink","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","getSubTitle","getTabs","getTitle","get_month_default","format_default","start_of_month_default","getTab","tabsReport","tabsReportFetchStatus","Tab","eventKey","getTabTitle","getTabItem","availableTabs","topItems","activeTab","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","appNavId","appNavClick","secondaryNav","tabIndex","updateTab","fetchReports","awsCloudDashboardWidget_getIdKeyForTab","mapStateToProps","common","awsCloudDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","reports","selectReport","reportPathsType","reportType","selectReportFetchStatus","mapDispatchToProps","fetchWidgetReports","changeWidgetTab","AwsCloudDashboardWidget","awsCloudDashboard_mapStateToProps","selectCurrentWidgets","awsCloudDashboard_awsCloudDashboard","awsDashboardWidget_getIdKeyForTab","awsDashboardWidget_mapStateToProps","awsDashboard","awsDashboardWidget_mapDispatchToProps","AwsDashboardWidget","awsDashboard_mapStateToProps","awsDashboard_awsDashboard","azureCloudDashboardWidget_getIdKeyForTab","azureCloudDashboardWidget_mapStateToProps","azureCloudDashboard","azureCloudDashboardWidget_mapDispatchToProps","AzureCloudDashboardWidget","azureCloudDashboard_mapStateToProps","azureCloudDashboard_azureCloudDashboard","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpCloudDashboardWidget_getIdKeyForTab","ocpCloudDashboardWidget_mapStateToProps","ocpCloudDashboard","ocpCloudDashboardWidget_mapDispatchToProps","OcpCloudDashboardWidget","ocpCloudDashboard_mapStateToProps","ocpCloudDashboard_ocpCloudDashboard","ocpDashboardWidget_styles_chartStyles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpSupplementaryDashboardWidget_getIdKeyForTab","ocpSupplementaryDashboardWidget_mapStateToProps","ocpSupplementaryDashboard","ocpSupplementaryDashboardWidget_mapDispatchToProps","OcpSupplementaryDashboardWidget","ocpSupplementaryDashboard_mapStateToProps","ocpSupplementaryDashboard_ocpSupplementaryDashboard","ocpUsageDashboardWidget_getIdKeyForTab","ocpUsageDashboardWidget_mapStateToProps","ocpUsageDashboard","ocpUsageDashboardWidget_mapDispatchToProps","OcpUsageDashboardWidget","ocpUsageDashboard_mapStateToProps","ocpUsageDashboard_ocpUsageDashboard","overview_styles_styles","info","marginLeft","verticalAlign","infoIcon","infoTitle","fontWeight","perspective","headerOverride","perspective_styles_styles","perspectiveSelector","perspectiveLabel","Perspective","defaultState","isPerspectiveOpen","getDropDownItems","option","DropdownItem","component","getCurrentLabel","currentItem","onItemClicked","handleSelect","handleToggle","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","overview_getIdKeyForTab","ocpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAzureOptions","infrastructureOcpOptions","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","overview","showPopover","getAvailableTabs","isAwsAvailable","isAzureAvailable","isOcpAvailable","isOcpCloudAvailable","contentRef","getCurrentTab","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","val","TabContent","emptyTab","handlePopoverClick","show","prevState","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState"],"mappings":"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","file":"bafaa77d01f90ba9a1a2.bundle.js","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"invariant\";\nimport { createLocation } from \"history\";\n\nvar isModifiedEvent = function isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n};\n\n/**\n * The public API for rendering a history-aware <a>.\n */\n\nvar Link = function (_React$Component) {\n  _inherits(Link, _React$Component);\n\n  function Link() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Link);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {\n      if (_this.props.onClick) _this.props.onClick(event);\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && // ignore everything but left clicks\n      !_this.props.target && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n\n          var history = _this.context.router.history;\n          var _this$props = _this.props,\n              replace = _this$props.replace,\n              to = _this$props.to;\n\n\n          if (replace) {\n            history.replace(to);\n          } else {\n            history.push(to);\n          }\n        }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Link.prototype.render = function render() {\n    var _props = this.props,\n        replace = _props.replace,\n        to = _props.to,\n        innerRef = _props.innerRef,\n        props = _objectWithoutProperties(_props, [\"replace\", \"to\", \"innerRef\"]); // eslint-disable-line no-unused-vars\n\n    invariant(this.context.router, \"You should not use <Link> outside a <Router>\");\n\n    invariant(to !== undefined, 'You must specify the \"to\" property');\n\n    var history = this.context.router.history;\n\n    var location = typeof to === \"string\" ? createLocation(to, null, null, history.location) : to;\n\n    var href = history.createHref(location);\n    return React.createElement(\"a\", _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));\n  };\n\n  return Link;\n}(React.Component);\n\nLink.propTypes = {\n  onClick: PropTypes.func,\n  target: PropTypes.string,\n  replace: PropTypes.bool,\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  innerRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n};\nLink.defaultProps = {\n  replace: false\n};\nLink.contextTypes = {\n  router: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n      replace: PropTypes.func.isRequired,\n      createHref: PropTypes.func.isRequired\n    }).isRequired\n  }).isRequired\n};\n\n\nexport default Link;","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nimport { unitLookupKey, } from 'utils/formatValue';\nexport function transformReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost', reportItemValue = 'total') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        idKey: key,\n        report,\n        reportItemValue,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key, reportItem));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key, reportItem));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key, reportItem)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date', reportItem = 'cost') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units[reportItem],\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const chartOverride = css `\n  :not(foo) svg {\n    overflow: visible;\n  }\n`;\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedReportItems({ idKey, labelKey = idKey, report, reportItemValue = 'total', sortDirection = 0 /* asc */, sortKey = 'cost', }) {\n    return sort(getUnsortedComputedReportItems({\n        idKey,\n        labelKey,\n        report,\n        reportItemValue,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedReportItems({ report, idKey, labelKey = idKey, reportItemValue = 'total', }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach((value) => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost && value.cost.total ? value.cost.total.value : 0;\n                const supplementary = value.supplementary && value.supplementary.total\n                    ? value.supplementary.total.value\n                    : 0;\n                const infrastructure = value.infrastructure && value.infrastructure[reportItemValue]\n                    ? value.infrastructure[reportItemValue].value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (value.capacity && { capacity: value.capacity.units })), { cost: value.cost && value.cost.total ? value.cost.total.units : 'USD' }), (value.limit && { limit: value.limit.units })), (value.infrastructure &&\n                    value.infrastructure.total && {\n                    infrastructure: value.infrastructure.total.units,\n                })), (value.request && { request: value.request.units })), (value.supplementary &&\n                    value.supplementary.total && {\n                    supplementary: value.supplementary.total.units,\n                })), (value.usage && { usage: value.usage.units }));\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        supplementary,\n                        id,\n                        infrastructure,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign(Object.assign({}, itemMap.get(id)), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, supplementary: itemMap.get(id).supplementary + supplementary, infrastructure: itemMap.get(id).infrastructure + infrastructure, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import { tagKeyPrefix } from 'api/queries/query';\nexport function getItemLabel({ report, labelKey, value }) {\n    let itemLabelKey = String(labelKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagKeyPrefix)) {\n                const tagPrefixKey = tagKeyPrefix + labelKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n","export const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n};\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { ErrorCircleOIcon, LockIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error &&\n        error.response &&\n        (error.response.status === 401 || error.response.status === 403)) {\n        icon = LockIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { style: styles.container },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n};\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummary.styles';\nconst ReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { style: styles.reportSummary },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { style: styles.subtitle }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { style: styles.chartSkeleton, size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { style: styles.legendSkeleton, size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst ReportSummary = translate()(ReportSummaryBase);\nexport { ReportSummary };\n","import { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = {\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { style: styles.reportSummary },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { style: styles.cost },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && React.createElement(\"p\", { style: styles.subtitle }, subTitle)),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { style: styles.chartSkeleton, size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { style: styles.legendSkeleton, size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { style: styles.container },\n                React.createElement(\"div\", { style: styles.tops }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst ReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { ReportSummaryAlt };\n","import { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = {\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: global_spacer_sm.value,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    units: {\n        paddingLeft: global_spacer_xs.value,\n        paddingBottom: global_spacer_sm.value,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n        whiteSpace: 'nowrap',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './reportSummaryDetails.styles';\nconst ReportSummaryDetailsBase = ({ chartType, computedReportItem = 'cost', computedReportItemValue = 'total', costLabel, formatValue, formatOptions, report, requestFormatOptions, requestLabel, showTooltip = false, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let supplementaryCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const hasTotal = report && report.meta && report.meta.total;\n    const hasCost = hasTotal && report.meta.total.cost && report.meta.total.cost.total;\n    const hasCount = hasTotal && report.meta.total.count;\n    const hasSupplementaryCost = hasTotal &&\n        report.meta.total.supplementary &&\n        report.meta.total.supplementary.total &&\n        report.meta.total.supplementary.total.value;\n    const hasInfrastructureCost = hasTotal &&\n        report.meta.total.infrastructure &&\n        report.meta.total.infrastructure[computedReportItemValue] &&\n        report.meta.total.infrastructure[computedReportItemValue].value;\n    const hasRequest = hasTotal && report.meta.total.request;\n    const hasUsage = hasTotal && report.meta.total.usage;\n    if (hasTotal) {\n        cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD', formatOptions);\n        supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost\n            ? report.meta.total.supplementary.total.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(hasInfrastructureCost\n            ? report.meta.total.infrastructure[computedReportItemValue].value\n            : 0, hasInfrastructureCost\n            ? report.meta.total.infrastructure[computedReportItemValue].units\n            : 'USD', formatOptions);\n        request = formatValue(hasRequest ? report.meta.total.request.value : 0, hasRequest ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        if (hasUsage && report.meta.total.usage.value >= 0) {\n            usage = formatValue(hasUsage ? report.meta.total.usage.value : 0, hasUsage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Workaround for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(hasUsage ? report.meta.total.usage : 0, hasCount ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => {\n        let value = cost;\n        if (computedReportItem === \"infrastructure\" /* infrastructure */) {\n            value = infrastructureCost;\n        }\n        else if (computedReportItem === \"supplementary\" /* supplementary */) {\n            value = supplementaryCost;\n        }\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            Boolean(showTooltip) ? (React.createElement(Tooltip, { content: t('dashboard.total_cost_tooltip', {\n                    infrastructureCost,\n                    supplementaryCost,\n                }), enableFlip: true },\n                React.createElement(\"div\", { style: styles.value }, value))) : (React.createElement(\"div\", { style: styles.value }, value)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, costLabel))));\n    };\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasRequest\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            React.createElement(\"div\", { style: styles.value },\n                request,\n                Boolean(showUnits &&\n                    (units || (hasRequest && report.meta.total.request.value >= 0))) && React.createElement(\"span\", { style: styles.units }, unitsLabel)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasUsage ? report.meta.total.usage.units : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            React.createElement(\"div\", { style: styles.value },\n                usage,\n                Boolean(showUnits &&\n                    (units || (hasUsage && report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { style: styles.units }, unitsLabel)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (chartType === \"cost\" /* cost */ ||\n        chartType === \"supplementary\" /* supplementary */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (chartType === \"trend\" /* trend */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else if (chartType === \"usage\" /* usage */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n    else {\n        return null;\n    }\n};\nconst ReportSummaryDetails = translate()(ReportSummaryDetailsBase);\nexport { ReportSummaryDetails };\n","import { global_spacer_md } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const reportSummaryItem = css `\n  :not(:last-child) {\n    margin-bottom: ${global_spacer_md.value};\n  }\n`;\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { reportSummaryItem } from './reportSummaryItem.styles';\nconst ReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: reportSummaryItem },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst ReportSummaryItem = translate()(ReportSummaryItemBase);\nexport { ReportSummaryItem };\n","import { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './reportSummaryItems.styles';\nclass ReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { computedReportItemValue = 'total', idKey, labelKey, report, } = this.props;\n        const computedItems = getComputedReportItems({\n            report,\n            idKey,\n            labelKey,\n            reportItemValue: computedReportItemValue,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst ReportSummaryItems = translate()(ReportSummaryItemsBase);\nexport { ReportSummaryItems, };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        childName: 'previousInfrastructureCost',\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        childName: 'currentInfrastructureCost',\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({}, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { CostChart };\n","import { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = {\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n};\n","import { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryCost = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { ReportSummaryCost };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_label'\n                    : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            // Todo: Leave one legend item visible at all times?\n            // const { hiddenSeries, series } = this.state;\n            // const leaveVisible = hiddenSeries.size === series.length - 1;\n            // if (leaveVisible && !this.isSeriesHidden(props.index)) {\n            //   return;\n            // }\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({}, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { TrendChart };\n","import { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryTrend = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { ReportSummaryTrend };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartContainer: {\n        marginTop: global_spacer_lg.value,\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({}, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { UsageChart };\n","import { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryUsage = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { ReportSummaryUsage };\n","export { ReportSummary } from './reportSummary';\nexport { ReportSummaryAlt } from './reportSummaryAlt';\nexport { ReportSummaryDetails } from './reportSummaryDetails';\nexport { ReportSummaryItem } from './reportSummaryItem';\nexport { ReportSummaryItems } from './reportSummaryItems';\nexport { ReportSummaryCost } from './reportSummaryCost';\nexport { ReportSummaryTrend } from './reportSummaryTrend';\nexport { ReportSummaryUsage } from './reportSummaryUsage';\n","export const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n};\n","import { EmptyState, EmptyStateBody, Spinner, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { style: styles.container },\n        React.createElement(EmptyState, null,\n            React.createElement(Spinner, { size: \"lg\" }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = {\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n};\n","import { MinusIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { style: styles.container },\n        React.createElement(MinusIcon, null)));\n};\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const getReleasePath = () => {\n    const pathName = window.location.pathname.split('/');\n    pathName.shift();\n    let release = '';\n    if (pathName[0] === 'beta') {\n        release = `/beta`;\n    }\n    return release;\n};\n","import { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { getReleasePath } from 'utils/pathname';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            const release = getReleasePath();\n            return (React.createElement(\"a\", Object.assign({ href: `${release}/settings/sources` }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { style: styles.container },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { style: styles.viewSources }, this.getViewSources()))));\n    }\n}\nconst NoProvidersState = translate()(connect()(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.details.showHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformReport, } from 'components/charts/common/chartUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType } = this.props;\n            if (chartType === \"cost\" /* cost */) {\n                return this.getCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"supplementary\" /* supplementary */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, true);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height);\n            }\n            else {\n                return null;\n            }\n        };\n        // This chart displays cost and infrastructure cost\n        this.getCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            return (React.createElement(ReportSummaryCost, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title }));\n        };\n        // This chart displays cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            // Data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: details.units, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab)));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('aws_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus, trend, } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { computedReportItemValue: computedReportItemValue, idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend, } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue =\n                        tabsReport.meta.total[computedReportItem][computedReportItemValue]\n                            .value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem] }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage\n                    ? unitLookupKey(currentReport.meta.total.usage.units)\n                    : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                units = hasCost\n                    ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units)\n                    : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { style: styles.tabs }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            const { details } = this.props;\n            if (details.appNavId) {\n                insights.chrome.appNavClick({\n                    id: details.appNavId,\n                    secondaryNav: true,\n                });\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase, };\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/dashboard/awsDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/dashboard/azureDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 180,\n    containerAltHeight: 275,\n};\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/dashboard/ocpDashboard';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = {\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginBottom: global_spacer_lg.value,\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = event => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = translate()(PerspectiveBase);\nexport { Perspective };\n","import { Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsCloudDashboard from 'pages/dashboard/awsCloudDashboard/awsCloudDashboard';\nimport AwsDashboard from 'pages/dashboard/awsDashboard/awsDashboard';\nimport AzureCloudDashboard from 'pages/dashboard/azureCloudDashboard/azureCloudDashboard';\nimport AzureDashboard from 'pages/dashboard/azureDashboard/azureDashboard';\nimport OcpCloudDashboard from 'pages/dashboard/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/dashboard/ocpDashboard/ocpDashboard';\nimport OcpSupplementaryDashboard from 'pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/dashboard/ocpUsageDashboard/ocpUsageDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nimport { Perspective } from './perspective';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.all', value: 'all' },\n    { label: 'overview.perspective.supplementary', value: 'supplementary' },\n];\n// Infrastructure all cloud options\nconst infrastructureAllCloudOptions = [\n    { label: 'overview.perspective.all_cloud', value: 'all_cloud' },\n];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [\n    { label: 'overview.perspective.aws', value: 'aws' },\n    { label: 'overview.perspective.aws_cloud', value: 'aws_cloud' },\n];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [\n    { label: 'overview.perspective.azure', value: 'azure' },\n    { label: 'overview.perspective.azure_cloud', value: 'azure_cloud' },\n];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [\n    { label: 'overview.perspective.ocp_usage', value: 'ocp_usage' },\n];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            if (isOcpAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            const showOcpOnly = isOcpAvailable &&\n                !(isAwsAvailable || isAzureAvailable || isOcpCloudAvailable);\n            const showInfrastructureOnly = !isOcpAvailable &&\n                (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all_cloud\" /* allCloud */;\n            }\n            if (isAwsAvailable) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable) {\n                return \"azure\" /* azure */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all\" /* all */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (!(isAwsAvailable || isAzureAvailable || isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (isOcpAvailable) {\n                    options.push(...infrastructureAllCloudOptions);\n                }\n                if (isAwsAvailable) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (isAzureAvailable) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (isOcpAvailable) {\n                    options.push(...infrastructureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */\n                ? currentInfrastructurePerspective\n                : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"all_cloud\" /* allCloud */) {\n                    return React.createElement(OcpCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    return React.createElement(AwsDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"aws_cloud\" /* awsFiltered */) {\n                    return React.createElement(AwsCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    return React.createElement(AzureDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"azure_cloud\" /* azureCloud */) {\n                    return React.createElement(AzureCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    return React.createElement(OcpUsageDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpCloudDashboard, null); // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return React.createElement(OcpDashboard, null);\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return React.createElement(OcpSupplementaryDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpDashboard, null); // default\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders } = this.props;\n            return (awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders } = this.props;\n            return (azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders } = this.props;\n            return (ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { awsProviders, azureProviders, ocpProviders } = this.props;\n        if (prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersError, awsProvidersFetchStatus, azureProvidersError, azureProvidersFetchStatus, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = !this.isAwsAvailable() &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { style: styles.info, onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                    React.createElement(\"div\", { style: styles.perspective }, this.getPerspective())))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n"],"sourceRoot":""}