{"version":3,"sources":["webpack://koku-ui/./src/components/charts/trendChart/trendChart.styles.ts","webpack://koku-ui/./src/components/charts/trendChart/trendChart.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummary.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummaryAlt.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummaryDetails.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummaryItem.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummaryItems.tsx","webpack://koku-ui/./src/components/charts/costChart/costChart.styles.ts","webpack://koku-ui/./src/components/charts/costChart/costChart.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummaryCost.tsx","webpack://koku-ui/./src/components/charts/dailyCostChart/dailyCostChart.styles.ts","webpack://koku-ui/./src/components/charts/dailyCostChart/dailyCostChart.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummaryDailyCost.tsx","webpack://koku-ui/./src/components/charts/dailyTrendChart/dailyTrendChart.styles.ts","webpack://koku-ui/./src/components/charts/dailyTrendChart/dailyTrendChart.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummaryDailyTrend.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummaryTrend.tsx","webpack://koku-ui/./src/components/charts/usageChart/usageChart.styles.ts","webpack://koku-ui/./src/components/charts/usageChart/usageChart.tsx","webpack://koku-ui/./src/components/reports/reportSummary/reportSummaryUsage.tsx","webpack://koku-ui/./src/components/state/emptyValueState/emptyValueState.tsx"],"names":["chartStyles","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentMonthData","fill","forecastConeData","strokeWidth","forecastConeDataColorScale","forecastData","forecastDataColorScale","itemsPerRow","previousColorScale","chart_color_black_200","previousMonthData","yAxis","axisLabel","padding","grid","stroke","ticks","tickLabels","fontSize","xAxis","TrendChart","super","arguments","this","containerRef","resizeObserver","noop","navToggle","state","hiddenSeries","Set","width","initDatum","currentData","previousData","showForecast","showSupplementaryLabel","showUsageLegendLabel","props","key","tooltipKey","series","childName","data","legendItem","name","symbol","type","tooltip","style","Object","assign","push","cursorVoronoiContainer","getCursorVoronoiContainer","setState","initResizeObserve","containerElement","current","ResizeObserver","window","handleResize","observe","unobserve","addEventListener","removeEventListener","insights","chrome","on","handleNavToggle","getAdjustedContainerHeight","adjustContainerHeight","height","containerHeight","adjustedContainerHeight","getChart","index","ChartArea","has","y","interpolation","formatDatumValue","formatDatumOptions","CursorVoronoiContainer","createContainer","cursorDimension","labels","datum","mouseFollowTooltips","voronoiDimension","voronoiPadding","bottom","left","right","top","getLegend","legendItemsPerRow","ChartLegend","gutter","orientation","handleLegendClick","setTimeout","clientWidth","prevProps","previousDate","getDate","currentDate","forecastDate","Math","max","getInteractiveLegendEvents","chartNames","isHidden","legendName","onLegendClick","title","domain","ge","endDate","getEndDate","midDate","floor","tooltipTitle","day","x","container","disable","labelComponent","ChartLegendTooltip","legendData","undefined","Title","headingLevel","size","className","ref","Chart","containerComponent","events","getEvents","legendAllowWrap","legendComponent","legendPosition","theme","map","s","ChartAxis","tickValues","dependentAxis","ReportSummary","withTranslation","children","detailsLink","subTitle","status","Card","CardTitle","Boolean","CardBody","Skeleton","CardFooter","ReportSummaryAlt","tabs","Grid","hasGutter","GridItem","xl","ReportSummaryDetails","chartType","computedReportItem","computedReportItemValue","costLabel","formatValue","formatOptions","report","requestFormatOptions","requestLabel","reportType","showTooltip","showUnits","showUsageFirst","t","units","usageFormatOptions","usageLabel","cost","supplementaryCost","infrastructureCost","request","usage","hasTotal","meta","total","hasCost","hasCount","count","hasSupplementaryCost","supplementary","value","hasInfrastructureCost","infrastructure","hasRequest","hasUsage","getCostLayout","showAltHeroFont","altHeroFont","Tooltip","content","enableFlip","getRequestLayout","usageUnits","_units","unitsLabel","getUsageLayout","ReportSummaryItemBase","label","totalValue","lookup","percentVal","Number","toFixed","percentLabel","percent","Progress","ProgressSize","defaultProps","v","ReportSummaryItem","ReportSummaryItemsBase","nextProps","idKey","computedItems","getComputedReportItems","otherIndex","findIndex","i","id","toString","includes","slice","items","getItems","ReportSummaryItems","currentCostData","currentInfrastructureColorScale","chart_color_blue_400","chart_color_blue_300","chart_color_blue_200","chart_color_blue_100","chart_color_blue_500","currentInfrastructureCostData","strokeDasharray","forecastInfrastructureConeData","forecastInfrastructureConeDataColorScale","forecastInfrastructureData","forecastInfrastructureDataColorScale","previousCostData","previousInfrastructureCostData","CostChart","costKey","costInfrastructureKey","costInfrastructureTooltipKey","costTooltipKey","responsive","currentInfrastructureDate","currentCostDate","forecastCostDate","previousInfrastructureDate","previousUsageDate","lastDate","half","_2ndDay","_3rdDay","_4thDay","ReportSummaryCost","chart_color_orange_300","DailyCostChart","initDatumChildName","isLine","isBar","isForecast","ChartBar","alignment","ChartLine","getForecastBarChart","getForecastLineChart","barWidth","isDataHidden","length","ChartGroup","offset","ReportSummaryDailyCost","DailyTrendChart","ReportSummaryDailyTrend","ReportSummaryTrend","chartContainer","marginTop","currentRequestData","currentUsageData","legendColorScale","previousRequestData","previousUsageData","UsageChart","usageKey","usageTooltipKey","requestKey","requestTooltipKey","currentRequestDate","currentUsageDate","previousRequestDate","ReportSummaryUsage","EmptyValueState"],"mappings":"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","file":"fc6284aa50473ea9118b.bundle.js","sourcesContent":["import chart_color_black_200 from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport chart_color_green_100 from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport chart_color_green_200 from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport chart_color_green_400 from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport chart_color_green_500 from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    forecastConeData: {\n        fill: chart_color_green_100.value,\n        strokeWidth: 0,\n    },\n    forecastConeDataColorScale: [chart_color_green_100.value],\n    forecastData: {\n        fill: 'none',\n    },\n    forecastDataColorScale: [chart_color_green_200.value],\n    itemsPerRow: 4,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, forecastData, forecastConeData, previousData, showForecast, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_label'\n                    : 'chart.cost_legend_label';\n            const tooltipKey = showUsageLegendLabel\n                ? 'chart.usage_legend_tooltip'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_tooltip'\n                    : 'chart.cost_legend_tooltip';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, tooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, tooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: forecastData,\n                    legendItem: {\n                        name: getCostRangeString(forecastData, 'chart.cost_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, 'chart.cost_forecast_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastData), { stroke: chartStyles.forecastDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: forecastConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastConeData), { stroke: chartStyles.forecastConeDataColorScale[0] }),\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    if (width < 700) {\n                        adjustedContainerHeight += 25;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 50,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical' }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getEndDate() {\n        const { currentData, forecastData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        const forecastDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, forecastDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Federated modules may not have access to the i18next package\n        let tooltipTitle;\n        if (i18next && i18next.t) {\n            tooltipTitle = datum => i18next.t('chart.day_of_month_title', { day: datum.x });\n        }\n        else {\n            tooltipTitle = datum => `Day ${datum.x}`;\n        }\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: tooltipTitle })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nexport { TrendChart };\n","import './reportSummary.scss';\nimport { Card, CardBody, CardFooter, CardTitle, Title } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nconst ReportSummaryBase = ({ children, detailsLink, title, subTitle, status }) => (React.createElement(Card, { className: \"reportSummary\" },\n    React.createElement(CardTitle, null,\n        React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: \"subtitle\" }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: \"xs\" }),\n        React.createElement(Skeleton, { className: \"chartSkeleton\", size: \"md\" }),\n        React.createElement(Skeleton, { size: \"sm\" }),\n        React.createElement(Skeleton, { className: \"legendSkeleton\", size: \"xs\" }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst ReportSummary = withTranslation()(ReportSummaryBase);\nexport { ReportSummary };\n","import './reportSummaryAlt.scss';\nimport { Card, CardBody, CardFooter, CardTitle, Grid, GridItem, Title } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, tabs, title, }) => (React.createElement(Card, { className: \"reportSummary\" },\n    React.createElement(Grid, { hasGutter: true },\n        React.createElement(GridItem, { xl: 8 },\n            React.createElement(\"div\", { className: \"cost\" },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n                    Boolean(subTitle) && React.createElement(\"p\", { className: \"subtitle\" }, subTitle)),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: \"xs\" }),\n                    React.createElement(Skeleton, { className: \"chartSkeleton\", size: \"md\" }),\n                    React.createElement(Skeleton, { size: \"sm\" }),\n                    React.createElement(Skeleton, { className: \"legendSkeleton\", size: \"xs\" }))) : (children)))),\n        React.createElement(GridItem, { xl: 4 },\n            React.createElement(\"div\", { className: \"tops\" }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink))))))));\nconst ReportSummaryAlt = withTranslation()(OcpCloudReportSummaryAltBase);\nexport { ReportSummaryAlt };\n","import './reportSummaryDetails.scss';\nimport { Tooltip } from '@patternfly/react-core';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nconst ReportSummaryDetailsBase = ({ chartType, computedReportItem = 'cost', computedReportItemValue = 'total', costLabel, formatValue, formatOptions, report, requestFormatOptions, requestLabel, reportType, showTooltip = false, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let supplementaryCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const hasTotal = report && report.meta && report.meta.total;\n    const hasCost = hasTotal && report.meta.total.cost && report.meta.total.cost.total;\n    const hasCount = hasTotal && report.meta.total.count;\n    const hasSupplementaryCost = hasTotal &&\n        report.meta.total.supplementary &&\n        report.meta.total.supplementary.total &&\n        report.meta.total.supplementary.total.value;\n    const hasInfrastructureCost = hasTotal &&\n        report.meta.total.infrastructure &&\n        report.meta.total.infrastructure[computedReportItemValue] &&\n        report.meta.total.infrastructure[computedReportItemValue].value;\n    const hasRequest = hasTotal && report.meta.total.request;\n    const hasUsage = hasTotal && report.meta.total.usage;\n    if (hasTotal) {\n        cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD', formatOptions);\n        supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD', formatOptions);\n        infrastructureCost = formatValue(hasInfrastructureCost ? report.meta.total.infrastructure[computedReportItemValue].value : 0, hasInfrastructureCost ? report.meta.total.infrastructure[computedReportItemValue].units : 'USD', formatOptions);\n        request = formatValue(hasRequest ? report.meta.total.request.value : 0, hasRequest ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        if (hasUsage && report.meta.total.usage.value >= 0) {\n            usage = formatValue(hasUsage ? report.meta.total.usage.value : 0, hasUsage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Workaround for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(hasUsage ? report.meta.total.usage : 0, hasCount ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = (showAltHeroFont = false) => {\n        let value = cost;\n        if (computedReportItem === \"infrastructure\" /* infrastructure */) {\n            value = infrastructureCost;\n        }\n        else if (computedReportItem === \"supplementary\" /* supplementary */) {\n            value = supplementaryCost;\n        }\n        const altHeroFont = showAltHeroFont ? 'Alt' : '';\n        return (React.createElement(\"div\", { className: \"valueContainer\" },\n            showTooltip ? (React.createElement(Tooltip, { content: t('dashboard.total_cost_tooltip', {\n                    infrastructureCost,\n                    supplementaryCost,\n                }), enableFlip: true },\n                React.createElement(\"div\", { className: `value${altHeroFont}` }, value))) : (React.createElement(\"div\", { className: `value${altHeroFont}` }, value)),\n            React.createElement(\"div\", { className: \"text\" },\n                React.createElement(\"div\", null, costLabel))));\n    };\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasRequest ? report.meta.total.request.units : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: \"valueContainer\" },\n            React.createElement(\"span\", { className: \"value\" }, request),\n            Boolean(showUnits && (units || (hasRequest && report.meta.total.request.value >= 0))) && (React.createElement(\"span\", { className: \"units\" }, unitsLabel)),\n            React.createElement(\"div\", { className: \"text\" },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasUsage ? report.meta.total.usage.units : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: \"valueContainer\" },\n            React.createElement(\"span\", { className: \"value\" }, usage),\n            Boolean(showUnits && (units || (hasUsage && report.meta.total.usage.value >= 0))) && (React.createElement(\"span\", { className: \"units\" }, unitsLabel)),\n            React.createElement(\"div\", { className: \"text\" },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (chartType === \"dailyCost\" /* dailyCost */ ||\n        chartType === \"dailyTrend\" /* dailyTrend */ ||\n        chartType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout(reportType === \"cost\" /* cost */));\n    }\n    else if (chartType === \"trend\" /* trend */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout(reportType === \"cost\" /* cost */)));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(reportType === \"cost\" /* cost */),\n            getUsageLayout()));\n    }\n    else if (chartType === \"usage\" /* usage */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n    else {\n        return null;\n    }\n};\nconst ReportSummaryDetails = withTranslation()(ReportSummaryDetailsBase);\nexport { ReportSummaryDetails };\n","import './reportSummaryItem.scss';\nimport { Progress, ProgressSize } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nconst ReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: \"reportSummaryItem\" },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst ReportSummaryItem = withTranslation()(ReportSummaryItemBase);\nexport { ReportSummaryItem };\n","import './reportSummaryItems.scss';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nclass ReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { idKey, report } = this.props;\n        const computedItems = getComputedReportItems({\n            report,\n            idKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [...computedItems.slice(0, otherIndex), ...computedItems.slice(otherIndex + 1), computedItems[otherIndex]];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: \"md\" }),\n                React.createElement(Skeleton, { size: \"md\", className: \"skeleton\" }),\n                React.createElement(Skeleton, { size: \"md\", className: \"skeleton\" }),\n                React.createElement(Skeleton, { size: \"md\", className: \"skeleton\" })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst ReportSummaryItems = withTranslation()(ReportSummaryItemsBase);\nexport { ReportSummaryItems };\n","import { chart_color_black_200 } from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentCostData: {\n        fill: 'none',\n    },\n    currentInfrastructureColorScale: [\n        chart_color_blue_400.value,\n        chart_color_blue_300.value,\n        chart_color_blue_200.value,\n        chart_color_blue_100.value,\n        chart_color_blue_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    forecastConeData: {\n        fill: chart_color_green_100.value,\n        strokeWidth: 0,\n    },\n    forecastConeDataColorScale: [chart_color_green_100.value],\n    forecastData: {\n        fill: 'none',\n    },\n    forecastDataColorScale: [chart_color_green_200.value],\n    forecastInfrastructureConeData: {\n        fill: chart_color_blue_100.value,\n        strokeWidth: 0,\n    },\n    forecastInfrastructureConeDataColorScale: [chart_color_blue_100.value],\n    forecastInfrastructureData: {\n        fill: 'none',\n    },\n    forecastInfrastructureDataColorScale: [chart_color_blue_200.value],\n    previousCostData: {\n        fill: 'none',\n    },\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, forecastConeData, forecastData, forecastInfrastructureConeData, forecastInfrastructureData, previousInfrastructureCostData, previousCostData, showForecast, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            const costInfrastructureTooltipKey = 'chart.cost_infrastructure_legend_tooltip';\n            const costTooltipKey = 'chart.cost_legend_tooltip';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: previousInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousInfrastructureCostData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: currentInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                        symbol: {\n                            fill: chartStyles.currentInfrastructureColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentInfrastructureCostData), { stroke: chartStyles.currentInfrastructureColorScale[1] }),\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: forecastData,\n                    legendItem: {\n                        name: getCostRangeString(forecastData, 'chart.cost_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, 'chart.cost_forecast_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastData), { stroke: chartStyles.forecastDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructure',\n                    data: forecastInfrastructureData,\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureData, 'chart.cost_infrastructure_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureData, 'chart.cost_infrastructure_forecast_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastInfrastructureData), { stroke: chartStyles.forecastInfrastructureDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: forecastConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastConeData), { stroke: chartStyles.forecastConeDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructureCone',\n                    data: forecastInfrastructureConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureConeData, 'chart.cost_infrastructure_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureConeData, 'chart.cost_infrastructure_forecast_cone_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastInfrastructureConeData), { stroke: chartStyles.forecastInfrastructureConeDataColorScale[0] }),\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    if (width > 675 && width < 1175) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width > 450 && width < 675) {\n                        adjustedContainerHeight += 50;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 75;\n                    }\n                }\n                else {\n                    if (width > 450 && width < 725) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 50;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastInfrastructureConeData !== this.props.forecastInfrastructureConeData ||\n            prevProps.forecastInfrastructureData !== this.props.forecastInfrastructureData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, forecastData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentCostDate = currentCostData ? getDate(getDateRange(currentCostData, true, true)[1]) : 0;\n        const forecastCostDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData ? getDate(getDateRange(previousCostData, true, true)[1]) : 0;\n        return currentInfrastructureDate > 0 ||\n            currentCostDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentCostDate, forecastCostDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const lastDate = this.getEndDate();\n        const half = Math.floor(lastDate / 2);\n        const _1stDay = 1;\n        const _2ndDay = _1stDay + Math.floor(half / 2);\n        const _3rdDay = _1stDay + half;\n        const _4thDay = lastDate - Math.floor(half / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            title && (React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title)),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [_1stDay, _2ndDay, _3rdDay, _4thDay, lastDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nexport { CostChart };\n","import './reportSummaryCost.scss';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nconst ReportSummaryCost = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { ReportSummaryCost };\n","import { chart_color_black_200 } from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureColorScale: [\n        chart_color_blue_400.value,\n        chart_color_blue_300.value,\n        chart_color_blue_200.value,\n        chart_color_blue_100.value,\n        chart_color_blue_500.value,\n    ],\n    currentInfrastructureCostData: {\n        strokeDasharray: '3,3',\n    },\n    forecastConeDataColorScale: [chart_color_orange_300.value],\n    forecastDataColorScale: [chart_color_green_200.value],\n    forecastInfrastructureConeDataColorScale: [chart_color_orange_300.value],\n    forecastInfrastructureDataColorScale: [chart_color_blue_200.value],\n    previousInfrastructureCostData: {\n        strokeDasharray: '3,3',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartGroup, ChartLegend, ChartLegendTooltip, ChartLine, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './dailyCostChart.styles';\nclass DailyCostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, forecastConeData, forecastData, forecastInfrastructureConeData, forecastInfrastructureData, previousInfrastructureCostData, previousCostData, showForecast, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            const costInfrastructureTooltipKey = 'chart.cost_infrastructure_legend_tooltip';\n            const costTooltipKey = 'chart.cost_legend_tooltip';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: this.initDatumChildName(previousCostData, 'previousCost'),\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    isLine: true,\n                    style: {\n                        data: {\n                            stroke: chartStyles.previousColorScale[0],\n                        },\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: this.initDatumChildName(currentCostData, 'currentCost'),\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    isBar: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.currentColorScale[0],\n                        },\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: this.initDatumChildName(previousInfrastructureCostData, 'previousInfrastructureCost'),\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    isLine: true,\n                    style: {\n                        data: {\n                            stroke: chartStyles.previousColorScale[1],\n                        },\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: this.initDatumChildName(currentInfrastructureCostData, 'currentInfrastructureCost'),\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                        symbol: {\n                            fill: chartStyles.currentInfrastructureColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false),\n                    },\n                    isBar: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.currentInfrastructureColorScale[1],\n                        },\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: this.initDatumChildName(forecastData, 'forecast'),\n                    legendItem: {\n                        name: getCostRangeString(forecastData, 'chart.cost_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, 'chart.cost_forecast_legend_tooltip', false, false),\n                    },\n                    isBar: true,\n                    isForecast: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                        },\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructure',\n                    data: this.initDatumChildName(forecastInfrastructureData, 'forecastInfrastructure'),\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureData, 'chart.cost_infrastructure_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureData, 'chart.cost_infrastructure_forecast_legend_tooltip', false, false),\n                    },\n                    isBar: true,\n                    isForecast: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastInfrastructureDataColorScale[0],\n                        },\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: this.initDatumChildName(forecastConeData, 'forecastCone'),\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_tooltip', false, false),\n                    },\n                    isForecast: true,\n                    isLine: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                        },\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructureCone',\n                    data: this.initDatumChildName(forecastInfrastructureConeData, 'forecastInfrastructureCone'),\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureConeData, 'chart.cost_infrastructure_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureConeData, 'chart.cost_infrastructure_forecast_cone_legend_tooltip', false, false),\n                    },\n                    isForecast: true,\n                    isLine: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastInfrastructureConeDataColorScale[0],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    if (width > 675 && width < 1175) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width > 450 && width < 675) {\n                        adjustedContainerHeight += 50;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 75;\n                    }\n                }\n                else {\n                    if (width > 450 && width < 725) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 50;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!hiddenSeries.has(index) && !series.isForecast) {\n                if (series.isBar) {\n                    return (React.createElement(ChartBar, { alignment: \"middle\", data: series.data, key: series.childName, name: series.childName, style: series.style }));\n                }\n                else if (series.isLine) {\n                    return React.createElement(ChartLine, { data: series.data, key: series.childName, name: series.childName, style: series.style });\n                }\n            }\n            return null;\n        };\n        this.getForecastBarChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!hiddenSeries.has(index) && series.isForecast && series.isBar) {\n                return (React.createElement(ChartBar, { alignment: \"middle\", data: series.data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        this.getForecastLineChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!hiddenSeries.has(index) && series.isForecast && series.isLine) {\n                return (React.createElement(ChartBar, { alignment: \"middle\", barWidth: 1, data: series.data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastInfrastructureConeData !== this.props.forecastInfrastructureConeData ||\n            prevProps.forecastInfrastructureData !== this.props.forecastInfrastructureData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, forecastData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentCostDate = currentCostData ? getDate(getDateRange(currentCostData, true, true)[1]) : 0;\n        const forecastCostDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData ? getDate(getDateRange(previousCostData, true, true)[1]) : 0;\n        return currentInfrastructureDate > 0 ||\n            currentCostDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentCostDate, forecastCostDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const lastDate = this.getEndDate();\n        const half = Math.floor(lastDate / 2);\n        const _1stDay = 1;\n        const _2ndDay = _1stDay + Math.floor(half / 2);\n        const _3rdDay = _1stDay + half;\n        const _4thDay = lastDate - Math.floor(half / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(React.Fragment, null,\n            title && (React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title)),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 5.5 }, series.map((s, index) => this.getChart(s, index)))),\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 5.5 }, series.map((s, index) => this.getForecastBarChart(s, index)))),\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 5.5 }, series.map((s, index) => this.getForecastLineChart(s, index)))),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [_1stDay, _2ndDay, _3rdDay, _4thDay, lastDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nexport { DailyCostChart };\n","import './reportSummaryDailyCost.scss';\nimport { DailyCostChart } from 'components/charts/dailyCostChart';\nimport React from 'react';\nconst ReportSummaryDailyCost = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(DailyCostChart, Object.assign({}, props))));\nexport { ReportSummaryDailyCost };\n","import { chart_color_black_200 } from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    forecastConeDataColorScale: [chart_color_orange_300.value],\n    forecastDataColorScale: [chart_color_green_200.value],\n    itemsPerRow: 4,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartGroup, ChartLegend, ChartLegendTooltip, ChartLine, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './dailyTrendChart.styles';\nclass DailyTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, forecastData, forecastConeData, previousData, showForecast, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_label'\n                    : 'chart.cost_legend_label';\n            const tooltipKey = showUsageLegendLabel\n                ? 'chart.usage_legend_tooltip'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_tooltip'\n                    : 'chart.cost_legend_tooltip';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: this.initDatumChildName(previousData, 'previousCost'),\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, tooltipKey, false, false, 1),\n                    },\n                    isBar: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.previousColorScale[0],\n                        },\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: this.initDatumChildName(currentData, 'currentCost'),\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, tooltipKey, false, false),\n                    },\n                    isBar: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.currentColorScale[0],\n                        },\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: this.initDatumChildName(forecastData, 'forecast'),\n                    legendItem: {\n                        name: getCostRangeString(forecastData, 'chart.cost_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, 'chart.cost_forecast_legend_tooltip', false, false),\n                    },\n                    isBar: true,\n                    isForecast: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                        },\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: this.initDatumChildName(forecastConeData, 'forecastCone'),\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_tooltip', false, false),\n                    },\n                    isForecast: true,\n                    isLine: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    if (width < 700) {\n                        adjustedContainerHeight += 25;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!series.isForecast) {\n                const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n                if (series.isBar) {\n                    return (React.createElement(ChartBar, { alignment: \"middle\", data: data, key: series.childName, name: series.childName, style: series.style }));\n                }\n                else if (series.isLine) {\n                    return React.createElement(ChartLine, { data: data, key: series.childName, name: series.childName, style: series.style });\n                }\n            }\n            return null;\n        };\n        this.getForecastBarChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (series.isForecast && series.isBar) {\n                const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n                return (React.createElement(ChartBar, { alignment: \"middle\", data: data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        this.getForecastLineChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (series.isForecast && series.isLine) {\n                const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n                return (React.createElement(ChartBar, { alignment: \"middle\", barWidth: 1, data: data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 50,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical' }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getEndDate() {\n        const { currentData, forecastData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        const forecastDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, forecastDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const lastDate = this.getEndDate();\n        const half = Math.floor(lastDate / 2);\n        const _1stDay = 1;\n        const _2ndDay = _1stDay + Math.floor(half / 2);\n        const _3rdDay = _1stDay + half;\n        const _4thDay = lastDate - Math.floor(half / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(React.Fragment, null,\n            title && (React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title)),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 11 }, series.map((s, index) => this.getChart(s, index)))),\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 11 },\n                            React.createElement(ChartBar, { data: [{ y: null }], name: \"forcast_spacer\" }),\n                            series.map((s, index) => this.getForecastBarChart(s, index)))),\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 11 },\n                            React.createElement(ChartBar, { data: [{ y: null }], name: \"forcast_cone_spacer\" }),\n                            series.map((s, index) => this.getForecastLineChart(s, index)))),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [_1stDay, _2ndDay, _3rdDay, _4thDay, lastDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nexport { DailyTrendChart };\n","import './reportSummaryDailyTrend.scss';\nimport { DailyTrendChart } from 'components/charts/dailyTrendChart';\nimport React from 'react';\nconst ReportSummaryDailyTrend = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(DailyTrendChart, Object.assign({}, props))));\nexport { ReportSummaryDailyTrend };\n","import './reportSummaryTrend.scss';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nconst ReportSummaryTrend = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { ReportSummaryTrend };\n","import chart_color_black_200 from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport chart_color_green_100 from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport chart_color_green_200 from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport chart_color_green_400 from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport chart_color_green_500 from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const chartStyles = {\n    chartContainer: {\n        marginTop: global_spacer_lg.value,\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_green_300.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_green_400.value,\n        },\n    },\n    itemsPerRow: 2,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_black_200.value,\n        chart_color_green_400.value,\n        chart_color_black_200.value,\n        chart_color_green_300.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_black_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_black_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getUsageRangeString } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const usageTooltipKey = 'chart.usage_legend_tooltip';\n            const requestKey = 'chart.requests_legend_label';\n            const requestTooltipKey = 'chart.requests_legend_tooltip';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: chartStyles.previousUsageData,\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: chartStyles.currentUsageData,\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[2],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: chartStyles.previousRequestData,\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[3],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: chartStyles.currentRequestData,\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width < 480) {\n                    adjustedContainerHeight += 20;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 300 ? chartStyles.itemsPerRow : 1;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 75,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nexport { UsageChart };\n","import './reportSummaryUsage.scss';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nconst ReportSummaryUsage = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { ReportSummaryUsage };\n","import './emptyValueState.scss';\nimport { MinusIcon } from '@patternfly/react-icons/dist/js/icons/minus-icon';\nimport React from 'react';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: \"emptyValueContainer\" },\n        React.createElement(MinusIcon, null)));\n};\n"],"sourceRoot":""}