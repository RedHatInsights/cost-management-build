{"version":3,"sources":["webpack://koku-ui/./src/pages/details/gcpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/details/gcpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/details/gcpBreakdown/gcpBreakdown.tsx","webpack://koku-ui/./src/pages/details/gcpBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedGcpReportItems.ts","webpack://koku-ui/./src/pages/details/gcpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/details/gcpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/details/gcpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/details/gcpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/details/gcpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/details/gcpDetails/gcpDetails.styles.ts","webpack://koku-ui/./src/pages/details/gcpDetails/gcpDetails.tsx","webpack://koku-ui/./src/pages/details/gcpDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","gcpCostOverview","widgets","CostOverview","withTranslation","connect","gcpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","filterBy","groupBy","newQuery","filter","Object","assign","time_scope_units","time_scope_value","resolution","limit","account","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","instance_type","project","region","service","styles","cost","display","alignItems","costLabel","costValue","marginTop","marginBottom","marginRight","global_spacer_md","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","padding","global_spacer_lg","backgroundColor","global_BackgroundColor_light_100","paddingBottom","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","onGroupByClicked","providersError","this","showContent","meta","count","hasCost","total","style","Title","headingLevel","size","isDisabled","onItemClicked","options","showTags","Boolean","DetailsHeader","emptyState","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","super","columns","rows","buildCostLink","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","toString","id","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","setState","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","showBulkSelect","showExport","showFilter","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","gcpDetails","minHeight","content","paginationContainer","marginLeft","tableContainer","offset","GcpDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","showTimeScope","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","hasCurrentMonthData","result","provider","current_month_data","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"mappings":"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","file":"cc9d16b52ce5ae5bd1a3.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpCostOverviewSelectors } from 'store/costOverview/gcpCostOverview';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpCostOverviewSelectors.selectWidgets(state),\n        widgets: gcpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpHistoricalDataSelectors } from 'store/historicalData/gcpHistoricalData';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpHistoricalDataSelectors.selectWidgets(state),\n        widgets: gcpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/details/components/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.gcpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"gcp\" /* gcp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = queryFromRoute;\n    const filterBy = getGroupByValue(query);\n    const groupBy = getGroupById(query);\n    const newQuery = {\n        filter: Object.assign({ time_scope_units: 'month', time_scope_value: -1, resolution: 'monthly', limit: 3 }, (query && query.filter && query.filter.account && { ['account']: query.filter.account })),\n        filter_by: query ? query.filter_by : undefined,\n        group_by: Object.assign({}, (groupBy && { [groupBy]: filterBy })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { filterBy: filterBy, groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.gcp_details'),\n        filterBy,\n        groupBy,\n        historicalDataComponent: React.createElement(HistoricalData, { filterBy: filterBy, groupBy: groupBy, query: query }),\n        providers,\n        providersFetchStatus,\n        providerType: \"gcp\" /* gcp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"gcp\" /* gcp */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : filterBy,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst GcpBreakdown = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default GcpBreakdown;\n","import GcpBreakdown from './gcpBreakdown';\nexport default GcpBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/details/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst tagReportPathsType = \"gcp\" /* gcp */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.gcp_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('gcp_details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './gcpDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQueryRoute } from 'api/queries/azureQuery';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { breakdownDescKey, tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/details/components/actions/actions';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"gcp\" /* gcp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.buildCostLink = (label, description) => {\n            const { groupBy, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n                    [groupBy]: label,\n                } });\n            return `${paths.gcpDetailsBreakdown}?${getQueryRoute(newQuery)}`;\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('gcp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('gcp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('gcp_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('gcp_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('gcp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('gcp_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = React.createElement(Link, { to: this.buildCostLink(label.toString(), item.id) }, label);\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('gcp_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/gcpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/details/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"gcp\" /* gcp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { t, tagReport } = this.props;\n            const options = [\n                { name: t('filter_by.values.account'), key: 'account' },\n                { name: t('filter_by.values.project'), key: 'project' },\n                { name: t('filter_by.values.service'), key: 'service' },\n                { name: t('filter_by.values.region'), key: 'region' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n    // key_only: true\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    gcpDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { addQueryFilter, getGroupByTagKey, removeQueryFilter } from 'pages/details/common/detailsUtils';\nimport { ExportModal } from 'pages/details/components/export/exportModal';\nimport Loading from 'pages/state/loading';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport NoData from '../../state/noData';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './gcpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"gcp\" /* gcp */;\nclass GcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType, showTimeScope: true }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = () => {\n            const { providers } = this.props;\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.gcp_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empty data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"gcp\" /* gcp */, title: title });\n            }\n            if (!this.hasCurrentMonthData()) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.gcpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(GcpDetails));\n","import GcpDetails from './gcpDetails';\nexport default GcpDetails;\n"],"sourceRoot":""}