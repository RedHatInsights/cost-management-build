{"version":3,"sources":["webpack:///./src/pages/ocpDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsTagView.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpDetails/exportModal.styles.ts","webpack:///./src/pages/ocpDetails/exportModal.tsx","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/pages/ocpDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpDetails/historicalChart.tsx","webpack:///./src/pages/ocpDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpDetails/historicalModal.tsx","webpack:///./src/pages/ocpDetails/noRatesState.styles.ts","webpack:///./src/pages/ocpDetails/noRatesState.tsx","webpack:///./src/pages/ocpDetails/priceListTable.tsx","webpack:///./src/pages/ocpDetails/priceListModal.tsx","webpack:///./src/pages/ocpDetails/detailsActions.tsx","webpack:///./src/pages/ocpDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.tsx","webpack:///./src/pages/ocpDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidget.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpDetails/detailsTable.tsx","webpack:///./src/pages/ocpDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpDetails/ocpDetails.styles.ts","webpack:///./src/pages/ocpDetails/ocpDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","isEqual","obj1","obj2","JSON","stringify","split","join","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","itemsPerRow","labels","fontFamily","esm","minWidth","previousRequestData","previousUsageData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","usageChart_UsageChart","containerRef","createRef","width","initDatum","legendData","legendColorScale","chartUtils","push","symbol","setState","chartDatum","charts","show","colorScale","gutter","onClick","handleLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","legendItemsPerRow","eventHandlers","target","mutation","ChartLegend","events","responsive","formatDatumValue","formatDatumOptions","childName","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","result","trim","containerHeight","title","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","Tooltip","content","enableFlip","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","getCostLayout","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","skeleton","OcpReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","costKey","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","marginLeft","historicalUsageChart_HistoricalUsageChart","previous","previousLegendData","currentLegendData","maxCurrentLimit","maxPreviousLimit","xAxisLabel","yAxisLabel","costValue","costLabelUnit","costLabelDate","header","backgroundColor","info","verticalAlign","infoIcon","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","getDropDownTags","Set","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","onGroupByClicked","showContent","sizes","Popover","aria-label","bodyContent","info_circle_icon","date","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","query","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","ocpReportSummary","_item","DetailsWidgetModal","parentGroupBy","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","groupItem","historicalCostChart_styles_styles","historicalCostChart_HistoricalCostChart","historicalChart_styles_chartStyles","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpReportsActions","HistoricalChart","getSkeleton","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpDashboard","selectCurrentWidgets","HistoricalModal","noRatesState_styles_styles","NoRatesState","money_check_alt_icon","metric","priceListTable","rates","notAvailableText","Table","cells","rows","range_unit","value_unit","range_value","period","Header","Body","priceListModal","priceListProvider","find","p","providerUuid","uuid","priceList","store_priceList","ratesPerProvider","priceListError","priceListStatus","fetch","fetchPriceList","errorState","priceListRates","close","renderContent","detailsActions_tagKey","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isPriceListModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getPriceListModal","handlePriceListModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handlePriceListModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","trunc","limitUnits","requestUnits","cpuDatum","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","summary","viewAllContainer","detailsWidget_reportType","detailsWidget_mapStateToProps","detailsWidget_mapDispatchToProps","DetailsWidget","isDetailsChartModalOpen","currentTab","getSummary","getViewAll","handleDetailsChartModalOpen","button","handleDetailsChartModalClose","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getDerivedCost","getTotalCost","getActions","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpDetails_styles_styles","ocpDetails","tableContainer","ocpDetails_reportType","ocpDetails_tagKey","ocpDetails_baseQuery","ocpDetails_mapStateToProps","ocpDetails_mapDispatchToProps","getFilterFields","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","noProvidersState","loadingState"],"mappings":"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","file":"006e4bad0e75d61a0b77.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpDetails from './ocpDetails';\nexport default hot(module)(OcpDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            if (previousUsageData) {\n                const label = getUsageRangeString(previousUsageData, usageKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentUsageData) {\n                const label = getUsageRangeString(currentUsageData, usageKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousRequestData) {\n                const label = getUsageRangeString(previousRequestData, requestKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentRequestData) {\n                const label = getUsageRangeString(currentRequestData, requestKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousUsageData,\n                            name: 'previousUsage',\n                            show: true,\n                            style: chartStyles.previousUsageData,\n                        },\n                        {\n                            data: currentUsageData,\n                            name: 'currentUsage',\n                            show: true,\n                            style: chartStyles.currentUsageData,\n                        },\n                        {\n                            data: previousRequestData,\n                            name: 'previousRequest',\n                            show: true,\n                            style: chartStyles.previousRequestData,\n                        },\n                        {\n                            data: currentRequestData,\n                            name: 'currentRequest',\n                            show: true,\n                            style: chartStyles.currentRequestData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, responsive: true, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            if (previousCostData) {\n                const label = getCostRangeString(previousCostData, costKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentCostData) {\n                const label = getCostRangeString(currentCostData, costKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousInfrastructureCostData) {\n                const label = getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentInfrastructureCostData) {\n                const label = getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousCostData,\n                            name: 'previousCost',\n                            show: true,\n                            style: chartStyles.previousCostData,\n                        },\n                        {\n                            data: currentCostData,\n                            name: 'currentCost',\n                            show: true,\n                            style: chartStyles.currentCostData,\n                        },\n                        {\n                            data: previousInfrastructureCostData,\n                            name: 'previousInfrastructureCost',\n                            show: true,\n                            style: chartStyles.previousInfrastructureCostData,\n                        },\n                        {\n                            data: currentInfrastructureCostData,\n                            name: 'currentInfrastructureCost',\n                            show: true,\n                            style: chartStyles.currentInfrastructureCostData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: width > 400 ? containerHeight : containerHeight + 75 } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum && chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const previous = [\n                {\n                    data: previousUsageData,\n                    name: 'previousUsage',\n                    show: true,\n                    style: chartStyles.previousUsageData,\n                },\n                {\n                    data: previousRequestData,\n                    name: 'previousRequest',\n                    show: true,\n                    style: chartStyles.previousRequestData,\n                },\n                {\n                    data: previousLimitData,\n                    name: 'previousLimit',\n                    show: true,\n                    style: chartStyles.previousLimitData,\n                },\n            ];\n            const current = [\n                {\n                    data: currentUsageData,\n                    name: 'currentUsage',\n                    show: true,\n                    style: chartStyles.currentUsageData,\n                },\n                {\n                    data: currentRequestData,\n                    name: 'currentRequest',\n                    show: true,\n                    style: chartStyles.currentRequestData,\n                },\n                {\n                    data: currentLimitData,\n                    name: 'currentLimit',\n                    show: true,\n                    style: chartStyles.currentLimitData,\n                },\n            ];\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            if (previousUsageData) {\n                const label = getUsageRangeString(previousUsageData, usageKey, true, true, 1);\n                previousLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (previousRequestData) {\n                const label = getUsageRangeString(previousRequestData, requestKey, true, true, 1);\n                previousLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n            }\n            if (previousLimitData) {\n                const label = getUsageRangeString(previousLimitData, limitKey, true, true, 1);\n                previousLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            const currentLegendData = [];\n            if (currentUsageData) {\n                const label = getUsageRangeString(currentUsageData, usageKey, true, false);\n                currentLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentRequestData) {\n                const label = getUsageRangeString(currentRequestData, requestKey, true, false);\n                currentLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n            }\n            if (currentLimitData) {\n                const label = getUsageRangeString(currentLimitData, limitKey, true, false);\n                currentLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            // Merge current and previous data into one legend row\n            const charts = [];\n            const colorScale = [];\n            const legendData = [];\n            for (let i = 0; i < current.length && previous.length; i++) {\n                charts.push(previous[i]);\n                charts.push(current[i]);\n                legendData.push(previousLegendData[i]);\n                legendData.push(currentLegendData[i]);\n                colorScale.push(chartStyles.previousColorScale[i]);\n                colorScale.push(chartStyles.currentColorScale[i]);\n            }\n            const legend = {\n                colorScale,\n                data: legendData,\n                onClick: this.handleLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 0, height: 25, itemsPerRow: itemsPerRow, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infrastructureCost: {\n        marginTop: global_spacer_xl.value,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { parseQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const today = new Date();\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let derivedCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            derivedCost = formatValue(report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_details.total_cost_tooltip', {\n                            derivedCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"div\", null, t('ocp_details.derived_cost_title')),\n                                    React.createElement(\"div\", null, t('ocp_details.derived_cost_desc')),\n                                    React.createElement(\"div\", { className: css(styles.infrastructureCost) }, t('ocp_details.infrastructure_cost_title')),\n                                    React.createElement(\"div\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, t('since_date', { month: today.getMonth(), date: 1 })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetView } from './detailsWidgetView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.widget_modal_title', {\n                parentGroupBy,\n                name: item.label,\n                groupBy,\n            }) },\n            React.createElement(DetailsWidgetView, { groupBy: parentGroupBy, item: item })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpExportActions, ocpExportSelectors } from 'store/ocpExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpExportSelectors.selectExportError(state),\n        export: ocpExportSelectors.selectExport(state),\n        fetchStatus: ocpExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport { getCostRangeString, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n            const previous = [\n                {\n                    data: previousCostData,\n                    name: 'previousCost',\n                    show: true,\n                    style: chartStyles.previousCostData,\n                },\n                {\n                    data: previousInfrastructureCostData,\n                    name: 'previousInfrastructureCost',\n                    show: true,\n                    style: chartStyles.previousInfrastructureCostData,\n                },\n            ];\n            const current = [\n                {\n                    data: currentCostData,\n                    name: 'currentCost',\n                    show: true,\n                    style: chartStyles.currentCostData,\n                },\n                {\n                    data: currentInfrastructureCostData,\n                    name: 'currentInfrastructureCost',\n                    show: true,\n                    style: chartStyles.currentInfrastructureCostData,\n                },\n            ];\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            if (previousCostData) {\n                const label = getCostRangeString(previousCostData, costKey, true, true, 1);\n                previousLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (previousInfrastructureCostData) {\n                const label = getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1);\n                previousLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n            }\n            const currentLegendData = [];\n            if (currentCostData) {\n                const label = getCostRangeString(currentCostData, costKey, true, false);\n                currentLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentInfrastructureCostData) {\n                const label = getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false);\n                currentLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n            }\n            // Merge current and previous data into one legend row\n            const charts = [];\n            const colorScale = [];\n            const legendData = [];\n            for (let i = 0; i < current.length && previous.length; i++) {\n                charts.push(previous[i]);\n                charts.push(current[i]);\n                legendData.push(previousLegendData[i]);\n                legendData.push(currentLegendData[i]);\n                colorScale.push(chartStyles.previousColorScale[i]);\n                colorScale.push(chartStyles.currentColorScale[i]);\n            }\n            const legend = {\n                colorScale,\n                data: legendData,\n                onClick: this.handleLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 700\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            if (chartDatum && chartDatum.data && chartDatum.data.length) {\n                const eventHandlers = {\n                    onClick: () => {\n                        return [\n                            {\n                                target: 'data',\n                                mutation: props => {\n                                    chartDatum.onClick(props);\n                                    return null;\n                                },\n                            },\n                        ];\n                    },\n                };\n                return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers,\n                        },\n                        {\n                            target: 'labels',\n                            eventHandlers,\n                        },\n                    ], gutter: 0, height: 25, itemsPerRow: itemsPerRow, style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !==\n                this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxCurrentRequest = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxPreviousLimit = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxPreviousRequest = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxPreviousLimit, maxPreviousRequest);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData, } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0\n            ? Math.max(currentRequestDate, previousRequestDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalCostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpReportsActions from 'store/ocpReports/ocpReportsActions';\nimport * as ocpReportsSelectors from 'store/ocpReports/ocpReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { containerHeight: chartStyles.chartContainerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureCostData, title: t('ocp_details.historical.cost_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_details.historical.cpu_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_details.historical.memory_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '50vh',\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, TitleSize, } from '@patternfly/react-core';\nimport { MoneyCheckAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './noRatesState.styles';\nconst NoRatesStateBase = ({ t, cluster }) => {\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: MoneyCheckAltIcon }),\n            React.createElement(Title, { size: TitleSize.lg }, t('no_rates_state.title')),\n            React.createElement(EmptyStateBody, null, t('no_rates_state.desc', { cluster })))));\n};\nexport const NoRatesState = translate()(NoRatesStateBase);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport React from 'react';\nimport { formatCurrency } from 'utils/formatValue';\nfunction getUsageRangeText(metric, t) {\n    return metric.range_value[0] === null && metric.range_value[1] === null\n        ? t('ocp_details.price_list.modal.no_range_set')\n        : `${metric.range_value[0] || ' '} - ${metric.range_value[2] || ' '} ${metric.range_unit}`;\n}\nconst PriceListTable = ({ rates, t }) => {\n    const notAvailableText = t('ocp_details.price_list.modal.not_available');\n    return (React.createElement(Table, { \"aria-label\": \"price-list-table\", cells: [\n            t('ocp_details.price_list.modal.metric'),\n            t('ocp_details.price_list.modal.value'),\n            t('ocp_details.price_list.modal.applied_usage_range'),\n            t('ocp_details.price_list.modal.applied_usage_date_range'),\n        ], rows: rates.map(metric => [\n            t(`ocp_details.price_list.modal.${metric.display}`, {\n                index: metric.index + 1,\n                unit: metric.range_unit,\n            }),\n            metric.value\n                ? formatCurrency(metric.value, metric.value_unit)\n                : notAvailableText,\n            getUsageRangeText(metric, t),\n            t(`ocp_details.price_list.modal.${metric.period}`),\n        ]) },\n        React.createElement(TableHeader, null),\n        React.createElement(TableBody, null)));\n};\nexport default PriceListTable;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { priceListActions, priceListSelectors } from 'store/priceList';\nimport { providersSelectors } from 'store/providers';\nimport { styles as chartStyles } from './historicalChart.styles';\nimport { modalOverride, styles } from './historicalModal.styles';\nimport { NoRatesState } from './noRatesState';\nimport PriceListTable from './priceListTable';\nclass PriceListModalBase extends React.Component {\n    componentDidUpdate() {\n        const { fetch, isOpen, providers, priceListStatus: status, name, } = this.props;\n        if (isOpen && status !== 1 /* inProgress */) {\n            const priceListProvider = providers.data.find(p => p.name === name);\n            fetch(priceListProvider ? priceListProvider.uuid : null);\n        }\n    }\n    renderContent() {\n        const { t, providers, name, priceListStatus, priceListError, priceList, } = this.props;\n        if (priceListStatus !== 2 /* complete */) {\n            return (React.createElement(Skeleton, { className: css(chartStyles.chartSkeleton), size: SkeletonSize.md }));\n        }\n        if (priceListError !== null) {\n            return React.createElement(ErrorState, { error: priceListError });\n        }\n        const priceListProvider = providers.data.find(p => p.name === name);\n        const priceListRates = priceListProvider && priceList[priceListProvider.uuid];\n        return priceListRates ? (React.createElement(PriceListTable, { t: t, rates: priceListRates })) : (React.createElement(NoRatesState, { cluster: name.toString() }));\n    }\n    render() {\n        const { t, isOpen, close, name } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: () => close(false), title: t('ocp_details.price_list.modal.title', { name }) }, this.renderContent()));\n    }\n}\nconst PriceListModal = connect(createMapStateToProps((state, props) => {\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, 'type=OCP');\n    const priceListProvider = providers.data.find(p => p.name === props.name);\n    const providerUuid = priceListProvider ? priceListProvider.uuid : null;\n    return {\n        priceList: priceListSelectors.ratesPerProvider(state, providerUuid),\n        priceListError: priceListSelectors.error(state, providerUuid),\n        priceListStatus: priceListSelectors.status(state, providerUuid),\n        providers,\n    };\n}), {\n    fetch: priceListActions.fetchPriceList,\n})(translate()(PriceListModalBase));\nexport default PriceListModal;\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nimport PriceListModal from './priceListModal';\nconst tagKey = 'or:tag:';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isPriceListModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getPriceListModal = () => {\n            const { item: { label }, } = this.props;\n            return (React.createElement(PriceListModal, { name: label, isOpen: this.state.isPriceListModalOpen, close: this.handlePriceListModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handlePriceListModalClose = (isOpen) => {\n            this.setState({ isPriceListModalOpen: isOpen });\n        };\n        this.handlePriceListModalOpen = () => {\n            this.setState({ isPriceListModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handlePriceListModalClose = this.handlePriceListModalClose.bind(this);\n        this.handlePriceListModalOpen = this.handlePriceListModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: groupBy.includes(tagKey), onClick: this.handlePriceListModalOpen }, t('ocp_details.actions.price_list')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal(),\n            this.getPriceListModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        if (report && report.meta && report.meta.total) {\n            if (report.meta.total.limit !== null) {\n                const limit = Math.trunc(report.meta.total.limit.value);\n                const limitUnits = t(`units.${unitLookupKey(report.meta.total.limit.units)}`);\n                datum.limit = {\n                    legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    value: Math.trunc(limit),\n                };\n            }\n            if (report.meta.total.request !== null) {\n                const request = Math.trunc(report.meta.total.request.value);\n                const requestUnits = t(`units.${unitLookupKey(report.meta.total.request.units)}`);\n                datum.ranges = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        value: Math.trunc(request),\n                    },\n                ];\n            }\n            if (report.meta.total.usage !== null) {\n                const usage = Math.trunc(report.meta.total.usage.value);\n                const usageUnits = t(`units.${unitLookupKey(report.meta.total.usage.units)}`);\n                datum.usage = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        value: Math.trunc(usage),\n                    },\n                ];\n            }\n        }\n        return datum;\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                    ? [\n                        {\n                            tooltip: cpuDatum.limit.tooltip,\n                            y: cpuDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: cpuDatum.usage.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.usage[0].tooltip,\n                            y: cpuDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                    ? [{ name: cpuDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: cpuDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.ranges[0].tooltip,\n                            y: cpuDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                    ? [{ name: cpuDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width })))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                    ? [\n                        {\n                            tooltip: memoryDatum.limit.tooltip,\n                            y: memoryDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                    ? [{ name: memoryDatum.limit.legend }]\n                    : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: memoryDatum.usage.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.usage[0].tooltip,\n                            y: memoryDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                    ? [{ name: memoryDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: memoryDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.ranges[0].tooltip,\n                            y: memoryDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                    ? [{ name: memoryDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    summary: {\n        paddingTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpReportItems } from 'utils/getComputedOcpReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isDetailsChartModalOpen: false,\n        };\n        this.getItems = (currentTab) => {\n            const { report } = this.props;\n            const computedItems = getComputedOcpReportItems({\n                report,\n                idKey: currentTab,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportFetchStatus, t } = this.props;\n            return (React.createElement(React.Fragment, null,\n                t('group_by.details', { groupBy: 'project' }),\n                React.createElement(\"div\", { className: css(styles.summary) },\n                    React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(OcpReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label.toString(), totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost })))),\n                    this.getViewAll())));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, t } = this.props;\n            const { isDetailsChartModalOpen } = this.state;\n            const currentTab = 'project';\n            const computedItems = this.getItems(currentTab);\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleDetailsChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_details.view_all', { value: currentTab })),\n                    React.createElement(DetailsWidgetModal, { groupBy: currentTab, isOpen: isDetailsChartModalOpen, item: item, onClose: this.handleDetailsChartModalClose, parentGroupBy: groupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleDetailsChartModalClose = (isOpen) => {\n            this.setState({ isDetailsChartModalOpen: isOpen });\n        };\n        this.handleDetailsChartModalOpen = event => {\n            this.setState({ isDetailsChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { reportFetchStatus } = this.props;\n        return (React.createElement(\"div\", null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (this.getSummary())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        Boolean(groupBy === 'cluster') && (React.createElement(DetailsWidget, { groupBy: groupBy, item: item })))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst DetailsTableItem = translate()(connect()(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'derived_cost',\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const derivedCost = this.getDerivedCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, InfrastructureCost) },\n                        { title: React.createElement(\"div\", null, derivedCost) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_on_cloud_details.empty_state'))));\n        };\n        this.getDerivedCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.derivedCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.derivedCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('ocp_details.increase_since_date', { date, month, value })\n                        : t('ocp_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('ocp_details.decrease_since_date', { date, month, value })\n                            : t('ocp_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('ocp_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'or:tag:';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.cluster_select'),\n                        placeholder: t('ocp_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.node_select'),\n                        placeholder: t('ocp_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.project_select'),\n                        placeholder: t('ocp_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by project tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.tag_select'),\n                        placeholder: t('ocp_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTagKey ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"sourceRoot":""}