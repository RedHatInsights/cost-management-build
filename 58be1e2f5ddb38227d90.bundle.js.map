{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/historicalExplorerChart/historicalExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalExplorerChart/historicalExplorerChart.tsx","webpack://koku-ui/./src/pages/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/explorer/explorer.tsx","webpack://koku-ui/./src/pages/explorer/index.ts","webpack://koku-ui/./src/pages/overview/perspective.styles.ts","webpack://koku-ui/./src/pages/overview/perspective.tsx"],"names":["getUserAccessQuery","query","stringify","encode","indices","mapStateToProps","state","props","selectWidgets","azureCostOverview","widgets","CostOverview","withTranslation","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","filterBy","groupBy","newQuery","Object","assign","undefined","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","styles","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","cost","display","alignItems","costLabel","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","global_spacer_sm","baseQuery","delta","filter","time_scope_units","time_scope_value","resolution","groupByOptions","label","value","DetailsHeaderBase","onGroupByClicked","providersError","this","showContent","meta","count","hasCost","total","style","Title","headingLevel","size","isDisabled","onItemClicked","options","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","super","columns","rows","buildCostLink","group_by","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","toString","id","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","setState","sortBy","getEmptyState","values","filter_by","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","option","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","showBulkSelect","showExport","showFilter","tagFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","showAggregate","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","hasCurrentMonthData","result","provider","current_month_data","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute","account","cluster","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","HistoricalExplorerChart","containerRef","resizeObserver","noop","navToggle","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","datum","initResizeObserve","containerElement","current","ResizeObserver","window","handleResize","observe","unobserve","addEventListener","removeEventListener","insights","chrome","on","handleNavToggle","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getChart","has","ChartBar","alignment","formatDatumValue","formatDatumOptions","CursorVoronoiContainer","createContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getLegend","ChartLegend","gutter","responsive","handleLegendClick","setTimeout","clientWidth","domain","maxValue","forEach","s","max","y","getInteractiveLegendEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","x","tickValues","i","str","substr","maxChars","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","getDomain","events","getEvents","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartThemeColor","ChartStack","ChartAxis","getTickValues","dependentAxis","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByOcpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureOcpOptions","ocpOptions","getComputedReportItemType","perspective","getDateRange","dateRange","getDateRangeDefault","today","Date","end_date","format","start_date","setMonth","getMonth","startOfMonth","setDate","getDate","getPerspectiveDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","isAwsAvailable","awsProviders","awsProvidersFetchStatus","userAccess","d","type","access","isAzureAvailable","azureProviders","azureProvidersFetchStatus","isGcpAvailable","gcpProviders","gcpsProvidersFetchStatus","isOcpAvailable","ocpProviders","ocpProvidersFetchStatus","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","month","yVal","parseFloat","units","getChartDatums","computedReportItemType","chartDatums","datums","Map","Array","from","padChartDatums","getChartTitle","getGroupBy","daily","groupByOrg","getGroupByOrg","getSkeleton","Skeleton","padDate","chartDatum","formatValue","ExplorerChartConnect","ExplorerChart","withRouter","DateRangeBase","isDateRangeOpen","getDropDownItems","DropdownItem","component","onClick","handleClick","getCurrentLabel","currentItem","handleSelect","handleToggle","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgReportPathsType","orgReportFetchStatus","tagReportFetchStatus","ExplorerFilter","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getDefaultPerspective","gcpProvidersFetchStatus","getPerspective","currentPerspective","_isAwsAvailable","_isAzureAvailable","_isGcpAvailable","_isOcpAvailable","handlePerspectiveClick","onPerspectiveClicked","noProviders","showOrgs","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","userAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","mapIdDate","rowItem","get","set","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","slice","perspectiveSelector","perspectiveLabel","PerspectiveBase","isPerspectiveOpen","Perspective"],"mappings":"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","file":"58be1e2f5ddb38227d90.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { CostOverviewBase } from 'pages/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCostOverviewSelectors } from 'store/costOverview/azureCostOverview';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureHistoricalDataSelectors } from 'store/historicalData/azureHistoricalData';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/details/components/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = queryFromRoute;\n    const filterBy = getGroupByValue(query);\n    const groupBy = getGroupById(query);\n    const newQuery = Object.assign(Object.assign({}, query), { [breakdownDescKey]: undefined });\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { filterBy: filterBy, groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.azure_details'),\n        filterBy,\n        groupBy,\n        historicalDataComponent: React.createElement(HistoricalData, { filterBy: filterBy, groupBy: groupBy }),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: filterBy,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/details/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.azure_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('azure_details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQueryRoute } from 'api/queries/azureQuery';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { breakdownDescKey, tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/details/components/actions/actions';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.buildCostLink = (label, description) => {\n            const { groupBy, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n                    [groupBy]: label,\n                } });\n            return `${paths.azureDetailsBreakdown}?${getQueryRoute(newQuery)}`;\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('azure_details.tag_column_title'),\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('azure_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = React.createElement(Link, { to: this.buildCostLink(label.toString(), item.id) }, label);\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('azure_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/details/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                {\n                    name: t('filter_by.values.subscription_guid'),\n                    key: 'subscription_guid',\n                },\n                { name: t('filter_by.values.service_name'), key: 'service_name' },\n                {\n                    name: t('filter_by.values.resource_location'),\n                    key: 'resource_location',\n                },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { addQueryFilter, getGroupByTagKey, removeQueryFilter } from 'pages/details/common/detailsUtils';\nimport { ExportModal } from 'pages/details/components/export/exportModal';\nimport Loading from 'pages/state/loading';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport NoData from '../../state/noData';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType, showAggregate: true }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = () => {\n            const { providers } = this.props;\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.azure_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!this.hasCurrentMonthData()) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './historicalExplorerChart.styles';\nclass HistoricalExplorerChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!hiddenSeries.has(index)) {\n                return (React.createElement(ChartBar, { alignment: \"start\", data: series.data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    // Returns domain only if max y values are zero\n    getDomain(series, hiddenSeries) {\n        let maxValue = -1;\n        let domain;\n        if (series) {\n            series.forEach((s, index) => {\n                if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                    const max = getMaxValue(s.data);\n                    maxValue = Math.max(maxValue, max);\n                }\n            });\n        }\n        if (maxValue <= 0) {\n            domain = { y: [0, 1] };\n        }\n        return domain;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    // This ensures we show every 3rd tick value, including the first and last value\n    //\n    // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n    getTickValues() {\n        const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n        // Find the datum with the greatest number of values\n        const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n        let datum;\n        allDatums.map(val => {\n            if (!datum || datum.length < val.length) {\n                datum = val;\n            }\n        });\n        const values = [];\n        datum.map(val => {\n            values.push(val.x);\n        });\n        // Prune tick values\n        const tickValues = [];\n        for (let i = 0; i < values.length; i++) {\n            if (i % 3 === 0 && i + 2 < values.length) {\n                tickValues.push(values[i]);\n            }\n        }\n        tickValues.push(values[values.length - 1]);\n        return tickValues;\n    }\n    getTruncatedString(str) {\n        const maxChars = 20;\n        return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues() }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format, startOfMonth } from 'date-fns';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: 'explorer.date_range.current_month_to_date', value: 'current_month_to_date' },\n    { label: 'explorer.date_range.previous_month_to_date', value: 'previous_month_to_date' },\n    { label: 'explorer.date_range.last_thirty_days', value: 'last_thirty_days' },\n    { label: 'explorer.date_range.last_sixy_days', value: 'last_sixy_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure all cloud options\nexport const infrastructureAllCloudOptions = [{ label: 'explorer.perspective.all_cloud', value: 'all_cloud' }];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: 'explorer.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nexport const infrastructureAwsCloudOptions = [{ label: 'explorer.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: 'explorer.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nexport const infrastructureAzureCloudOptions = [{ label: 'explorer.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: 'explorer.perspective.gcp', value: 'gcp' }];\n// Infrastructure Ocp options\nexport const infrastructureOcpOptions = [{ label: 'explorer.perspective.ocp_usage', value: 'ocp_usage' }];\n// Ocp options\nexport const ocpOptions = [\n    { label: 'explorer.perspective.ocp', value: 'ocp' },\n    { label: 'explorer.perspective.ocp_supplementary', value: 'ocp_supplementary' },\n];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"supplementary\" /* supplementary */;\n            break;\n        case \"aws\" /* aws */:\n        case \"all_cloud\" /* allCloud */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = queryFromRoute => {\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const today = new Date();\n    const end_date = format(today, 'yyyy-MM-dd');\n    let start_date;\n    switch (dateRange) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            today.setMonth(today.getMonth() - 1);\n            start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n            break;\n        case \"last_sixy_days\" /* lastSixtyDays */:\n            today.setDate(today.getDate() - 60);\n            start_date = format(today, 'yyyy-MM-dd');\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            today.setDate(today.getDate() - 30);\n            start_date = format(today, 'yyyy-MM-dd');\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n            break;\n    }\n    return {\n        end_date,\n        start_date,\n    };\n};\nexport const getDateRangeDefault = queryFromRoute => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = queryFromRoute => {\n    return queryFromRoute.perspective || \"ocp\" /* ocp */;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"gcp\" /* gcp */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = 'subscription_guid';\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"all_cloud\" /* allCloud */:\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"all_cloud\" /* allCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            result = \"aws_cloud\" /* awsCloud */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            result = \"azure_cloud\" /* azureCloud */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            result = \"ocp_usage\" /* ocpUsage */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            return \"aws\" /* aws */;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            return \"azure\" /* azure */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            return \"ocp\" /* ocp */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\nexport const isAwsAvailable = (awsProviders, awsProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (awsProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"aws\" /* aws */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isAzureAvailable = (azureProviders, azureProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (azureProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"azure\" /* azure */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isGcpAvailable = (gcpProviders, gcpsProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (gcpsProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"gcp\" /* gcp */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                gcpProviders !== undefined &&\n                gcpProviders.meta !== undefined &&\n                gcpProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isOcpAvailable = (ocpProviders, ocpProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (ocpProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"ocp\" /* ocp */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0;\n    }\n    return result;\n};\n","import { Title } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { isFloat, isInt } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalExplorerChart } from 'components/charts/historicalExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatValue } from 'utils/formatValue';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { t } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = t('chart.date', { date: getDate(computedItemDate), month: getMonth(computedItemDate) });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return {\n                x: xVal,\n                y: value === null ? null : yVal,\n                date: computedItem.date,\n                key: computedItem.id,\n                name: computedItem.label || computedItem.id,\n                units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined,\n            };\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            const reportPathsType = getReportPathsType(perspective);\n            const reportType = getReportType(perspective);\n            fetchReport(reportPathsType, reportType, queryString);\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */ } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = 'total';\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getChartTitle = (perspective) => {\n            let result;\n            switch (perspective) {\n                case \"all_cloud\" /* allCloud */:\n                    result = 'explorer.title.all_cloud';\n                    break;\n                case \"aws\" /* aws */:\n                    result = 'explorer.title.aws';\n                    break;\n                case \"aws_cloud\" /* awsCloud */:\n                    result = 'explorer.title.aws_cloud';\n                    break;\n                case \"azure\" /* azure */:\n                    result = 'explorer.title.azure';\n                    break;\n                case \"azure_cloud\" /* azureCloud */:\n                    result = 'explorer.title.azure_cloud';\n                    break;\n                case \"gcp\" /* gcp */:\n                    result = 'explorer.title.gcp';\n                    break;\n                case \"ocp\" /* ocp */:\n                    result = 'explorer.title.ocp';\n                    break;\n                case \"ocp_supplementary\" /* ocpSupplementary */:\n                    result = 'explorer.title.ocp_supplementary';\n                    break;\n                case \"ocp_usage\" /* ocpUsage */:\n                    result = 'explorer.title.ocp_usage';\n                    break;\n                default:\n                    result = undefined;\n                    break;\n            }\n            return result;\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = this.getGroupByOrg();\n            const groupByTagKey = this.getGroupByTagKey();\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getGroupByOrg = () => {\n            const { query } = this.props;\n            let groupByOrg;\n            for (const groupBy of Object.keys(query.group_by)) {\n                if (groupBy === orgUnitIdKey) {\n                    groupByOrg = query.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupByOrg;\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, size: \"md\" }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, size: \"xs\" })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, t } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, t(this.getChartTitle(perspective)))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = withRouter(withTranslation()(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isDateRangeOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isDateRangeOpen: !this.state.isDateRangeOpen,\n            });\n        };\n        this.handleToggle = isDateRangeOpen => {\n            this.setState({\n                isDateRangeOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled } = this.props;\n        const { isDateRangeOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isDateRangeOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst DateRange = withTranslation()(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/details/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getPerspectiveDefault, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, t, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: t(`filter_by.values.${option.label}`),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentDateRange: value });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportPathsType, queryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, queryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgReport, orgReportPathsType, perspective, query, queryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, tagReport } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n    // key_only: true\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    }\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    }\n    return {\n        dateRange,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilter = withRouter(withTranslation()(connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase)));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { GroupBy } from 'pages/details/components/groupBy/groupBy';\nimport { Perspective } from 'pages/overview/perspective';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getPerspectiveDefault, getRouteForQuery, getTagReportPathsType, infrastructureAllCloudOptions, infrastructureAwsCloudOptions, infrastructureAwsOptions, infrastructureAzureCloudOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureOcpOptions, isAwsAvailable, isAzureAvailable, isGcpAvailable, isOcpAvailable, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDefaultPerspective = () => {\n            const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccess, } = this.props;\n            if (perspective) {\n                return perspective;\n            }\n            if (isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess)) {\n                return \"ocp\" /* ocp */;\n            }\n            if (isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess)) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess)) {\n                return \"azure\" /* azure */;\n            }\n            if (isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess)) {\n                return \"gcp\" /* gcp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = (isDisabled) => {\n            const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, userAccess, } = this.props;\n            const { currentPerspective } = this.state;\n            const _isAwsAvailable = isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess);\n            const _isAzureAvailable = isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess);\n            const _isGcpAvailable = isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess);\n            const _isOcpAvailable = isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess);\n            if (!(_isAwsAvailable || _isAzureAvailable || _isGcpAvailable || _isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (_isOcpAvailable) {\n                options.push(...ocpOptions);\n                options.push(...infrastructureAllCloudOptions);\n            }\n            if (_isAwsAvailable) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (_isOcpAvailable && isAwsAvailable) {\n                options.push(...infrastructureAwsCloudOptions);\n            }\n            if (_isGcpAvailable) {\n                options.push(...infrastructureGcpOptions);\n            }\n            if (_isAzureAvailable) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (_isOcpAvailable && isAzureAvailable) {\n                options.push(...infrastructureAzureCloudOptions);\n            }\n            if (_isOcpAvailable) {\n                options.push(...infrastructureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.handlePerspectiveClick = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: { cost: 'desc' }, perspective: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n            });\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.getDefaultPerspective(),\n        });\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, groupBy, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupByClicked, perspective, query, t, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess) &&\n            isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess) &&\n            isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess) &&\n            isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.explorer')),\n                React.createElement(\"div\", { style: styles.perspectiveContainer },\n                    this.getPerspective(noProviders),\n                    React.createElement(\"div\", { style: styles.groupBy },\n                        React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, tagReportPathsType: tagReportPathsType }))),\n                React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, query: query }))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        perspective,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = withRouter(withTranslation()(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrg, getGroupByTagKey } from 'pages/details/common/detailsUtils';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault, getPerspectiveDefault, } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, t, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrg(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg ? t('explorer.org_unit_column_title') : t('explorer.tag_column_title'),\n                    },\n                ]\n                : [\n                    {\n                        cellTransforms: [nowrap],\n                        orderBy: groupById === 'account' && perspective !== \"gcp\" /* gcp */ ? 'account_alias' : groupById,\n                        title: t('explorer.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                ];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push({\n                    cellTransforms: [nowrap],\n                    orderBy: undefined,\n                    title: t('explorer.daily_column_title', { date, month }),\n                    transforms: undefined,\n                });\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n            }\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[computedReportItemType] && item[computedReportItemType].total\n                            ? formatCurrency(item[computedReportItemType].total.value)\n                            : t('explorer.no_data'),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('explorer.empty_state'))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": \"explorer-table\", canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = withTranslation()(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/details/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, selectedItems, } = this.props;\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = withTranslation()(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { addQueryFilter, getGroupByOrg, getGroupByTagKey, removeQueryFilter } from 'pages/details/common/detailsUtils';\nimport { ExportModal } from 'pages/details/components/export/exportModal';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, isAwsAvailable, isAzureAvailable, isGcpAvailable, isOcpAvailable, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrg(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective) }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = (providers) => {\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { perspective, fetchReport, history, location, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, t, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = t('navigation.explorer');\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess) &&\n            isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess) &&\n            isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess) &&\n            isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(this.hasCurrentMonthData(awsProviders) &&\n            this.hasCurrentMonthData(azureProviders) &&\n            this.hasCurrentMonthData(gcpProviders) &&\n            this.hasCurrentMonthData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupByClicked: this.handleGroupByClick, onPerspectiveClicked: this.handlePerspectiveClick }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective) })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","import Explorer from './explorer';\nexport default Explorer;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled, t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n"],"sourceRoot":""}