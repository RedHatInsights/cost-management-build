{"version":3,"file":"4567718a5d4de87eb664.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/state/noData/index.ts","webpack://koku-ui/./src/pages/state/notAvailable/notAvailable.tsx","webpack://koku-ui/./src/pages/state/notAvailable/index.ts","webpack://koku-ui/./src/pages/views/components/resourceTypeahead/resourceSelect.tsx","webpack://koku-ui/./src/pages/views/components/resourceTypeahead/resourceTypeahead.tsx","webpack://koku-ui/./src/pages/views/components/dataToolbar/dataToolbar.styles.ts","webpack://koku-ui/./src/pages/views/components/dataToolbar/tagValue.tsx","webpack://koku-ui/./src/pages/views/components/dataToolbar/dataToolbar.tsx","webpack://koku-ui/./src/pages/views/components/export/exportModal.styles.ts","webpack://koku-ui/./src/pages/views/components/export/exportSubmit.tsx","webpack://koku-ui/./src/pages/views/components/export/exportModal.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.styles.ts","webpack://koku-ui/./src/pages/views/components/groupBy/groupByOrg.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupByTag.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.tsx","webpack://koku-ui/./src/pages/views/details/components/actions/actions.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdown.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tag.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tagView.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagModal.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagLink.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownBase.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterView.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.tsx","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModalView.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.tsx","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/costOverview/costOverviewBase.tsx","webpack://koku-ui/./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataCostChart.tsx","webpack://koku-ui/./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack://koku-ui/./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataBase.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/utils/groupBy.ts","webpack://koku-ui/./src/pages/views/utils/paths.ts","webpack://koku-ui/./src/pages/views/utils/query.ts","webpack://koku-ui/./src/testIds.ts","webpack://koku-ui/./src/utils/equal.ts"],"sourcesContent":["import NoData from './noData';\nexport default NoData;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(Unavailable, null))));\n};\nexport default withRouter(NotAvailable);\n","import NotAvailable from './notAvailable';\nexport default NotAvailable;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { resourceActions, resourceSelectors } from 'store/resources';\nclass ResourceSelectBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            createdOptions: [],\n            isSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getOptions = () => {\n            const { resource, resourceFetchStatus, search } = this.props;\n            const { createdOptions } = this.state;\n            let options = [];\n            if (resource && resource.data && resource.data.length > 0 && resourceFetchStatus !== 1 /* inProgress */) {\n                options = resource.data.map(item => {\n                    const value = !isNaN(search) ? item.value : item.account_alias || item.cluster_alias || item.value;\n                    return {\n                        key: value,\n                        name: value,\n                    };\n                });\n            }\n            if (createdOptions && createdOptions.length) {\n                const moreOptions = createdOptions.map(val => {\n                    return {\n                        key: val,\n                        name: val,\n                    };\n                });\n                options = [...options, ...moreOptions];\n            }\n            return options;\n        };\n        this.getSelectOptions = () => {\n            const options = this.getOptions();\n            return options.map(option => {\n                return React.createElement(SelectOption, { key: option.key, value: option.key });\n            });\n        };\n        this.handleOnCreateOption = value => {\n            const { createdOptions } = this.state;\n            if (value.trim() === '') {\n                return;\n            }\n            let options = [...createdOptions];\n            if (options.length > 4) {\n                options = options.slice(1, options.length);\n            }\n            options.push(value);\n            this.setState({\n                createdOptions: options,\n            });\n        };\n        this.handleOnClear = () => {\n            const { onSearchChanged } = this.props;\n            if (onSearchChanged) {\n                onSearchChanged(undefined);\n            }\n            this.setState({\n                isSelectExpanded: false,\n            });\n        };\n        this.handleOnFilter = event => {\n            if (event === null) {\n                return null;\n            }\n            return this.getSelectOptions();\n        };\n        this.handleOnSelect = (event, value) => {\n            const { onSelect } = this.props;\n            if (value.trim() === '') {\n                return;\n            }\n            if (onSelect) {\n                onSelect(value);\n            }\n            this.setState({\n                isSelectExpanded: !this.state.isSelectExpanded,\n            });\n        };\n        this.handleOnToggle = isOpen => {\n            this.setState({\n                isSelectExpanded: isOpen,\n            });\n        };\n        this.handleOnTypeaheadInputChanged = value => {\n            const { onSearchChanged } = this.props;\n            onSearchChanged(value);\n        };\n        this.handleOnClear = this.handleOnClear.bind(this);\n        this.handleOnCreateOption = this.handleOnCreateOption.bind(this);\n        this.handleOnFilter = this.handleOnFilter.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnTypeaheadInputChanged = this.handleOnTypeaheadInputChanged.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchResource, resourceFetchStatus, resourcePathsType, resourceType, search } = this.props;\n        if (search && prevProps.search !== search && resourceFetchStatus !== 1 /* inProgress */) {\n            const query = {\n                search,\n            };\n            const queryString = getQuery(query);\n            fetchResource(resourcePathsType, resourceType, queryString);\n        }\n    }\n    render() {\n        const { intl, isDisabled, resourceType } = this.props;\n        const { isSelectExpanded } = this.state;\n        const selectOptions = this.getSelectOptions();\n        return (React.createElement(Select, { isCreatable: true, isDisabled: isDisabled, isInputValuePersisted: false, isOpen: isSelectExpanded, onCreateOption: this.handleOnCreateOption, onClear: this.handleOnClear, onFilter: this.handleOnFilter, onSelect: this.handleOnSelect, onToggle: this.handleOnToggle, onTypeaheadInputChanged: this.handleOnTypeaheadInputChanged, placeholderText: intl.formatMessage(messages.FilterByPlaceholder, { value: resourceType }), typeAheadAriaLabel: intl.formatMessage(messages.FilterByInputAriaLabel, { value: resourceType }), variant: SelectVariant.typeahead }, selectOptions));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { resourcePathsType, resourceType, search }) => {\n    const query = {\n        search,\n    };\n    const queryString = getQuery(query);\n    const resource = resourceSelectors.selectResource(state, resourcePathsType, resourceType, queryString);\n    const resourceFetchStatus = resourceSelectors.selectResourceFetchStatus(state, resourcePathsType, resourceType, queryString);\n    return {\n        resource,\n        resourceFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchResource: resourceActions.fetchResource,\n};\nconst ResourceSelect = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ResourceSelectBase));\nexport { ResourceSelect };\n","import React from 'react';\nimport { noop } from 'utils/noop';\nimport { ResourceSelect } from './resourceSelect';\nexport class ResourceTypeahead extends React.Component {\n    constructor(props) {\n        super(props);\n        this.searchTimeout = noop;\n        this.defaultState = {\n        // TBD ...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleOnSearch = (value) => {\n            clearTimeout(this.searchTimeout);\n            // Delay was 750ms, but reduced -- https://issues.redhat.com/browse/COST-1742\n            this.searchTimeout = setTimeout(() => {\n                this.setState({\n                    currentSearch: value,\n                });\n            }, 625);\n        };\n        this.handleOnSelect = (value) => {\n            const { onSelect } = this.props;\n            if (onSelect) {\n                onSelect(value);\n            }\n            this.setState({\n                currentSearch: undefined,\n            });\n        };\n        this.handleOnSearch = this.handleOnSearch.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { isDisabled, resourcePathsType, resourceType } = this.props;\n        const { currentSearch } = this.state;\n        return (React.createElement(ResourceSelect, { isDisabled: isDisabled, onSearchChanged: this.handleOnSearch, onSelect: this.handleOnSelect, resourcePathsType: resourcePathsType, resourceType: resourceType, search: currentSearch }));\n    }\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Button, ButtonVariant, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { getQuery, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nconst tagReportType = \"tag\" /* tag */;\n// If the number of tag keys are greater or equal, then show text input Vs select\n// See https://github.com/project-koku/koku/pull/2069\nconst tagKeyValueLimit = 50;\nclass TagValueBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isTagValueExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.onTagValueChange = value => {\n            this.setState({ tagKeyValueInput: value });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueExpanded: isOpen,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagQueryString, tagReportFetchStatus, tagReportPathsType } = this.props;\n        if (tagReportFetchStatus !== 1 /* inProgress */) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagQueryString, tagReportFetchStatus, tagReportPathsType } = this.props;\n        if ((prevProps.tagQueryString !== tagQueryString || prevProps.tagReportPathsType !== tagReportPathsType) &&\n            tagReportFetchStatus !== 1 /* inProgress */) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    getTagValueOptions() {\n        const { tagKey, tagReport } = this.props;\n        let data = [];\n        if (tagReport && tagReport.data) {\n            data = [...new Set([...tagReport.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (tagKey === tag.key && tag.values) {\n                    options = tag.values.map(val => {\n                        return {\n                            key: val,\n                            name: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { isDisabled, onTagValueInput, onTagValueSelect, selections, tagKeyValue } = this.props;\n        const { isTagValueExpanded } = this.state;\n        const selectOptions = this.getTagValueOptions().map(selectOption => {\n            return React.createElement(SelectOption, { key: selectOption.key, value: selectOption.key });\n        });\n        if (selectOptions.length > tagKeyValueLimit) {\n            return (React.createElement(InputGroup, null,\n                React.createElement(TextInput, { isDisabled: isDisabled, name: \"tagkeyvalue-input\", id: \"tagkeyvalue-input\", type: \"search\", \"aria-label\": intl.formatMessage(messages.FilterByTagValueAriaLabel), onChange: this.onTagValueChange, value: tagKeyValue, placeholder: intl.formatMessage(messages.FilterByTagValueInputPlaceholder), onKeyDown: evt => onTagValueInput(evt) }),\n                React.createElement(Button, { isDisabled: isDisabled, variant: ButtonVariant.control, \"aria-label\": intl.formatMessage(messages.FilterByTagValueButtonAriaLabel), onClick: evt => onTagValueInput(evt) },\n                    React.createElement(SearchIcon, null))));\n        }\n        return (React.createElement(Select, { isDisabled: isDisabled, variant: SelectVariant.checkbox, \"aria-label\": intl.formatMessage(messages.FilterByTagValueAriaLabel), onToggle: this.onTagValueToggle, onSelect: onTagValueSelect, selections: selections, isOpen: isTagValueExpanded, placeholderText: intl.formatMessage(messages.FilterByTagValuePlaceholder) }, selectOptions));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagKey, tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const endDate = query.end_date;\n    const startDate = query.start_date;\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const tagKeyFilter = tagKey\n        ? {\n            key: tagKey,\n        }\n        : {};\n    const tagQuery = endDate && startDate\n        ? {\n            start_date: startDate,\n            end_date: endDate,\n            filter: Object.assign({}, tagKeyFilter),\n        }\n        : {\n            filter: Object.assign({ resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }, tagKeyFilter),\n        };\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery(Object.assign({}, tagQuery));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        endDate,\n        groupBy,\n        groupByValue,\n        startDate,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagValueConnect = connect(mapStateToProps, mapDispatchToProps)(TagValueBase);\nconst TagValue = injectIntl(TagValueConnect);\nexport { TagValue };\n// https://stage.foo.redhat.com:1337/api/cost-management/v1/tags/openshift/?start_date=2021-11-01&end_date=2021-11-08&key=environment&filter[tag:environment]=Development&filter[project]=*\n// https://stage.foo.redhat.com:1337/api/cost-management/v1/reports/openshift/costs/?filter[limit]=10&filter[offset]=0&filter[tag:environment]=Development&group_by[project]=*&end_date=2021-11-08&start_date=2021-11-01\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport './dataToolbar.scss';\nimport { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, DropdownToggleCheckbox, InputGroup, Select, SelectOption, SelectVariant, TextInput, Toolbar, ToolbarContent, ToolbarFilter, ToolbarGroup, ToolbarItem, ToolbarToggleGroup, } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons/dist/esm/icons/export-icon';\nimport { FilterIcon } from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { orgUnitIdKey, orgUnitNameKey, tagKey, tagPrefix } from 'api/queries/query';\nimport { isResourceTypeValid } from 'api/resources/resourceUtils';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport { uniq, uniqBy } from 'lodash';\nimport { ResourceTypeahead } from 'pages/views/components/resourceTypeahead/resourceTypeahead';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './dataToolbar.styles';\nimport { TagValue } from './tagValue';\nconst defaultFilters = {\n    tag: {},\n};\n// Todo: categoryName workaround for https://issues.redhat.com/browse/COST-2094\nexport const categoryPrefix = '_';\nexport class DataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isBulkSelectOpen: false,\n            isCategorySelectOpen: false,\n            isOrgUnitSelectExpanded: false,\n            isTagValueDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n            tagKeyValueInput: '',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy, query } = this.props;\n            if (!categoryOptions) {\n                return 'name';\n            }\n            if (query && query.group_by && query.group_by[orgUnitIdKey]) {\n                return orgUnitIdKey;\n            }\n            for (const option of categoryOptions) {\n                if (groupBy === option.key || (groupBy && groupBy.indexOf(tagPrefix) !== -1 && option.key === tagKey)) {\n                    return option.key;\n                }\n            }\n            return categoryOptions[0].key;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key]) ? [...query.filter_by[key]] : [query.filter_by[key]];\n                    if (key.indexOf(tagPrefix) !== -1) {\n                        filters.tag[key.substring(tagPrefix.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, chip) => {\n            // Todo: workaround for https://github.com/patternfly/patternfly-react/issues/3552\n            // This prevents us from using a localized string, if necessary\n            const _type = type && type.key ? type.key : type;\n            const id = chip && chip.key ? chip.key : chip;\n            // Todo: categoryName workaround for https://issues.redhat.com/browse/COST-2094\n            const filterType = _type && _type.indexOf(categoryPrefix) === 0 ? _type.substring(categoryPrefix.length) : _type;\n            if (filterType) {\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else if (prevState.filters[filterType]) {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType] ? `${tagPrefix}${filterType}` : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        // Bulk select\n        this.getBulkSelect = () => {\n            const { intl, isAllSelected, isBulkSelectDisabled, isDisabled, itemsPerPage, itemsTotal, selectedItems } = this.props;\n            const { isBulkSelectOpen } = this.state;\n            const numSelected = isAllSelected ? itemsTotal : selectedItems ? selectedItems.length : 0;\n            const allSelected = (isAllSelected || numSelected === itemsTotal) && itemsTotal > 0;\n            const anySelected = numSelected > 0;\n            const someChecked = anySelected ? null : false;\n            const isChecked = allSelected ? true : someChecked;\n            const dropdownItems = [\n                React.createElement(DropdownItem, { key: \"item-1\", onClick: () => this.handleOnBulkSelectClicked('none') }, intl.formatMessage(messages.ToolBarBulkSelectNone)),\n                React.createElement(DropdownItem, { key: \"item-2\", onClick: () => this.handleOnBulkSelectClicked('page') }, intl.formatMessage(messages.ToolBarBulkSelectPage, { value: itemsPerPage })),\n                React.createElement(DropdownItem, { key: \"item-3\", onClick: () => this.handleOnBulkSelectClicked('all') }, intl.formatMessage(messages.ToolBarBulkSelectAll, { value: itemsTotal })),\n            ];\n            return (React.createElement(Dropdown, { onSelect: this.handleOnBulkSelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled || isBulkSelectDisabled, splitButtonItems: [\n                        React.createElement(DropdownToggleCheckbox, { id: \"bulk-select\", key: \"bulk-select\", \"aria-label\": intl.formatMessage(anySelected ? messages.ToolBarBulkSelectAriaDeselect : messages.ToolBarBulkSelectAriaSelect), isChecked: isChecked, onClick: () => {\n                                anySelected ? this.handleOnBulkSelectClicked('none') : this.handleOnBulkSelectClicked('all');\n                            } }),\n                    ], onToggle: this.handleOnBulkSelectToggle }, numSelected !== 0 && (React.createElement(React.Fragment, null, intl.formatMessage(messages.Selected, { value: numSelected })))), isOpen: isBulkSelectOpen, dropdownItems: dropdownItems }));\n        };\n        this.handleOnBulkSelectClicked = (action) => {\n            const { onBulkSelected } = this.props;\n            if (onBulkSelected) {\n                onBulkSelected(action);\n            }\n        };\n        this.handleOnBulkSelect = () => {\n            this.setState({\n                isBulkSelectOpen: !this.state.isBulkSelectOpen,\n            });\n        };\n        this.handleOnBulkSelectToggle = isOpen => {\n            this.setState({\n                isBulkSelectOpen: isOpen,\n            });\n        };\n        this.getCategorySelectOptions = () => {\n            const { categoryOptions } = this.props;\n            const options = [];\n            categoryOptions.map(option => {\n                options.push({\n                    toString: () => option.name,\n                    value: option.key,\n                });\n            });\n            return options;\n        };\n        this.handleOnCategorySelect = (event, selection) => {\n            // Todo: categoryName workaround for https://issues.redhat.com/browse/COST-2094\n            const currentCategory = selection.value.indexOf(categoryPrefix) === 0\n                ? selection.value.substring(categoryPrefix.length)\n                : selection.value;\n            this.setState({\n                categoryInput: '',\n                currentCategory,\n                currentTagKey: undefined,\n                isCategorySelectOpen: !this.state.isCategorySelectOpen,\n            });\n        };\n        this.handleOnCategoryToggle = isOpen => {\n            this.setState({\n                isCategorySelectOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = (categoryOption) => {\n            const { intl, isDisabled, resourcePathsType } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            // Todo: categoryName workaround for https://issues.redhat.com/browse/COST-2094\n            const categoryName = {\n                name: categoryOption.name,\n                key: `${categoryPrefix}${categoryOption.key}`,\n            };\n            return (React.createElement(ToolbarFilter, { categoryName: categoryName, chips: filters[categoryOption.key], deleteChip: this.onDelete, key: categoryOption.key, showToolbarItem: currentCategory === categoryOption.key },\n                React.createElement(InputGroup, null, isResourceTypeValid(resourcePathsType, categoryOption.key) ? (React.createElement(ResourceTypeahead, { isDisabled: isDisabled, onSelect: value => this.onCategoryInputSelect(value, categoryOption.key), resourcePathsType: resourcePathsType, resourceType: categoryOption.key })) : (React.createElement(React.Fragment, null,\n                    React.createElement(TextInput, { isDisabled: isDisabled, name: `category-input-${categoryOption.key}`, id: `category-input-${categoryOption.key}`, type: \"search\", \"aria-label\": intl.formatMessage(messages.FilterByInputAriaLabel, { value: categoryOption.key }), onChange: this.handleOnCategoryInputChange, value: categoryInput, placeholder: intl.formatMessage(messages.FilterByPlaceholder, { value: categoryOption.key }), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.key) }),\n                    React.createElement(Button, { isDisabled: isDisabled, variant: ButtonVariant.control, \"aria-label\": intl.formatMessage(messages.FilterByButtonAriaLabel, { value: categoryOption.key }), onClick: evt => this.onCategoryInput(evt, categoryOption.key) },\n                        React.createElement(SearchIcon, null)))))));\n        };\n        this.getDefaultCategoryOptions = () => {\n            const { intl } = this.props;\n            return [{ name: intl.formatMessage(messages.Names, { count: 1 }), key: 'name' }];\n        };\n        this.handleOnCategoryInputChange = (value) => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if ((event && event.key && event.key !== 'Enter') || categoryInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        this.onCategoryInputSelect = (value, key) => {\n            const { currentCategory } = this.state;\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { [currentCategory]: prevFilters && prevFilters.includes(value)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, value]\n                                : [value] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, value);\n            });\n        };\n        // Org unit select\n        this.getOrgUnitSelect = () => {\n            const { intl, isDisabled } = this.props;\n            const { currentCategory, filters, isOrgUnitSelectExpanded } = this.state;\n            const options = this.getOrgUnitOptions().map(option => ({\n                id: option.key,\n                toString: () => option.name,\n                compareTo: value => filters[orgUnitIdKey] ? filters[orgUnitIdKey].find(val => val === value.id) : false,\n            }));\n            const chips = []; // Get selected items as PatternFly's ToolbarChip type\n            const selections = []; // Select options and selections must be same type\n            if (filters[orgUnitIdKey] && Array.isArray(filters[orgUnitIdKey])) {\n                filters[orgUnitIdKey].map(id => {\n                    const option = options.find(val => val.id === id);\n                    if (option) {\n                        selections.push(option);\n                        chips.push({\n                            key: option.id,\n                            node: option.toString(),\n                        });\n                    }\n                });\n            }\n            // Todo: selectOverride is a workaround for https://github.com/patternfly/patternfly-react/issues/4477\n            // and https://github.com/patternfly/patternfly-react/issues/6371\n            return (React.createElement(ToolbarFilter, { categoryName: {\n                    key: orgUnitIdKey,\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                }, chips: chips, deleteChip: this.onDelete, key: orgUnitIdKey, showToolbarItem: currentCategory === orgUnitIdKey },\n                React.createElement(Select, { isDisabled: isDisabled, className: \"selectOverride\", variant: SelectVariant.checkbox, \"aria-label\": intl.formatMessage(messages.FilterByOrgUnitAriaLabel), onToggle: this.handleOnOrgUnitToggle, onSelect: this.handleOnOrgUnitSelect, selections: selections, isOpen: isOrgUnitSelectExpanded, placeholderText: intl.formatMessage(messages.FilterByOrgUnitPlaceholder) }, options.map(option => (React.createElement(SelectOption, { description: option.id, key: option.id, value: option }))))));\n        };\n        this.handleOnOrgUnitSelect = (event, selection) => {\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters[orgUnitIdKey] ? prevState.filters[orgUnitIdKey] : [];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { tag: Object.assign({}, prevState.filters.tag), [orgUnitIdKey]: checked\n                            ? [...prevSelections, selection.id]\n                            : prevSelections.filter(value => value !== selection.id) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(orgUnitIdKey, selection.id);\n                }\n                else {\n                    this.onDelete(orgUnitIdKey, selection.id);\n                }\n            });\n        };\n        this.handleOnOrgUnitToggle = isOpen => {\n            this.setState({\n                isOrgUnitSelectExpanded: isOpen,\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { intl, isDisabled } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded } = this.state;\n            if (currentCategory !== tagKey) {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return React.createElement(SelectOption, { key: selectOption.key, value: selectOption.key });\n            });\n            return (React.createElement(ToolbarItem, null,\n                React.createElement(Select, { isDisabled: isDisabled, variant: SelectVariant.typeahead, typeAheadAriaLabel: intl.formatMessage(messages.FilterByTagKeyAriaLabel), onClear: this.handleOnTagKeyClear, onToggle: this.handleOnTagKeyToggle, onSelect: this.handleOnTagKeySelect, isOpen: isTagKeySelectExpanded, placeholderText: intl.formatMessage(messages.FilterByTagKeyPlaceholder), selections: currentTagKey }, selectOptions)));\n        };\n        this.handleOnTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.handleOnTagKeySelect = (event, selection) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.handleOnTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = (tagKeyOption) => {\n            const { tagReportPathsType } = this.props;\n            const { currentCategory, currentTagKey, filters, tagKeyValueInput } = this.state;\n            return (React.createElement(ToolbarFilter, { categoryName: tagKeyOption, chips: filters.tag[tagKeyOption.key], deleteChip: this.onDelete, key: tagKeyOption.key, showToolbarItem: currentCategory === tagKey && currentTagKey === tagKeyOption.key },\n                React.createElement(TagValue, { onTagValueSelect: this.onTagValueSelect, onTagValueInput: this.onTagValueInput, onTagValueInputChange: this.onTagValueInputChange, selections: filters.tag[tagKeyOption.key] ? filters.tag[tagKeyOption.key] : [], tagKey: currentTagKey, tagKeyValue: tagKeyValueInput, tagReportPathsType: tagReportPathsType })));\n        };\n        this.onTagValueInputChange = value => {\n            this.setState({ tagKeyValueInput: value });\n        };\n        this.onTagValueInput = event => {\n            const { currentTagKey, tagKeyValueInput } = this.state;\n            if ((event.key && event.key !== 'Enter') || tagKeyValueInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey] ? prevState.filters.tag[currentTagKey] : [];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { tag: Object.assign(Object.assign({}, prevState.filters.tag), { [currentTagKey]: [...prevSelections, tagKeyValueInput] }) }),\n                    tagKeyValueInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(`${tagPrefix}${currentTagKey}`, tagKeyValueInput);\n            });\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey] ? prevState.filters.tag[currentTagKey] : [];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { tag: Object.assign(Object.assign({}, prevState.filters.tag), { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagPrefix}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        // Column management\n        this.getColumnManagement = () => {\n            const { intl } = this.props;\n            return (React.createElement(ToolbarItem, null,\n                React.createElement(Button, { onClick: this.handleColumnManagementClicked, variant: ButtonVariant.link }, intl.formatMessage(messages.DetailsColumnManagementTitle))));\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isDisabled, isExportDisabled } = this.props;\n            return (React.createElement(ToolbarItem, { spacer: {\n                    default: 'spacerNone',\n                } },\n                React.createElement(Button, { isDisabled: isDisabled || isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.plain },\n                    React.createElement(ExportIcon, null))));\n        };\n        this.handleColumnManagementClicked = () => {\n            this.props.onColumnManagementClicked();\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { categoryOptions, groupBy, orgReport, query, tagReport } = this.props;\n        if (categoryOptions !== prevProps.categoryOptions ||\n            groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (orgReport && !isEqual(orgReport, prevProps.orgReport)) ||\n            (tagReport && !isEqual(tagReport, prevProps.tagReport))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return categoryOptions !== prevProps.categoryOptions || prevProps.groupBy !== groupBy\n                    ? {\n                        categoryInput: '',\n                        currentCategory: this.getDefaultCategory(),\n                        currentOrgUnit: '',\n                        currentTagKey: '',\n                        tagKeyValueInput: '',\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category select\n    getCategorySelect() {\n        const { categoryOptions, isDisabled } = this.props;\n        const { currentCategory, isCategorySelectOpen } = this.state;\n        if (!categoryOptions) {\n            return null;\n        }\n        const selectOptions = this.getCategorySelectOptions();\n        const selection = selectOptions.find((option) => option.value === currentCategory);\n        return (React.createElement(ToolbarItem, null,\n            React.createElement(Select, { id: \"category-select\", isDisabled: isDisabled, isOpen: isCategorySelectOpen, onSelect: this.handleOnCategorySelect, onToggle: this.handleOnCategoryToggle, selections: selection, toggleIcon: React.createElement(FilterIcon, null), variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option }))))));\n    }\n    getOrgUnitOptions() {\n        const { orgReport } = this.props;\n        let options = [];\n        if (!(orgReport && orgReport.data)) {\n            return options;\n        }\n        // Sort all names first\n        const sortedData = orgReport.data.sort((a, b) => {\n            if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                return -1;\n            }\n            if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                return 1;\n            }\n            return 0;\n        });\n        // Move roots first\n        const roots = sortedData.filter(org => org.level === 0);\n        const filteredOrgs = sortedData.filter(org => org.level !== 0);\n        roots.map(root => {\n            const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n            filteredOrgs.unshift(item);\n        });\n        if (filteredOrgs.length > 0) {\n            options = filteredOrgs.map(org => {\n                return {\n                    key: org[orgUnitIdKey],\n                    name: org[orgUnitNameKey],\n                };\n            });\n        }\n        return options;\n    }\n    getTagKeyOptions() {\n        const { tagReport } = this.props;\n        let data = [];\n        let options = [];\n        if (!(tagReport && tagReport.data)) {\n            return options;\n        }\n        // If the key_only param is used, we have an array of strings\n        let hasTagKeys = false;\n        for (const item of tagReport.data) {\n            if (item.hasOwnProperty('key')) {\n                hasTagKeys = true;\n                break;\n            }\n        }\n        // Workaround for https://github.com/project-koku/koku/issues/1797\n        if (hasTagKeys) {\n            const keepData = tagReport.data.map(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            (_a) => {\n                var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                return keepProps;\n            });\n            data = uniqBy(keepData, 'key');\n        }\n        else {\n            data = uniq(tagReport.data);\n        }\n        if (data.length > 0) {\n            options = data.map(item => {\n                const key = hasTagKeys ? item.key : item;\n                return {\n                    key,\n                    name: key,\n                };\n            });\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, dateRange, pagination, showBulkSelect, showColumnManagement, showExport, showFilter, style, } = this.props;\n        const options = categoryOptions ? categoryOptions : this.getDefaultCategoryOptions();\n        // Todo: clearAllFilters workaround https://github.com/patternfly/patternfly-react/issues/4222\n        return (React.createElement(\"div\", { style: style ? style : styles.toolbarContainer },\n            React.createElement(Toolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(ToolbarContent, null,\n                    showBulkSelect && React.createElement(ToolbarItem, { variant: \"bulk-select\" }, this.getBulkSelect()),\n                    showFilter && (React.createElement(ToolbarToggleGroup, { breakpoint: \"xl\", toggleIcon: React.createElement(FilterIcon, null) },\n                        React.createElement(ToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategorySelect(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            this.getOrgUnitSelect(),\n                            options &&\n                                options\n                                    .filter(option => option.key !== tagKey && option.key !== orgUnitIdKey)\n                                    .map(option => this.getCategoryInput(option))))),\n                    (Boolean(showExport) || Boolean(showColumnManagement)) && (React.createElement(ToolbarGroup, null,\n                        Boolean(showExport) && this.getExportButton(),\n                        Boolean(showColumnManagement) && this.getColumnManagement())),\n                    dateRange && React.createElement(ToolbarGroup, null, dateRange),\n                    React.createElement(ToolbarItem, { alignment: { default: 'alignRight' }, variant: \"pagination\" }, pagination)))));\n    }\n}\nconst DataToolbar = injectIntl(DataToolbarBase);\nexport { DataToolbar };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    alert: {\n        marginBottom: global_spacer_md.var,\n    },\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        marginBottom: global_spacer_md.var,\n    },\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport fileDownload from 'js-file-download';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions, exportSelectors } from 'store/exports';\nimport { getTestProps, testIds } from 'testIds';\nconst reportType = \"cost\" /* cost */;\nexport class ExportSubmitBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            fetchReportClicked: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExport = () => {\n            const { report, reportFetchStatus } = this.props;\n            if (report && reportFetchStatus === 2 /* complete */) {\n                fileDownload(report.data, this.getFileName(), 'text/csv');\n                this.handleClose();\n            }\n        };\n        this.getFileName = () => {\n            const { groupBy, intl, reportPathsType, resolution, timeScope } = this.props;\n            const thisMonth = new Date();\n            const lastMonth = new Date().setMonth(thisMonth.getMonth() - 1);\n            const currentMonth = format(thisMonth, 'MMMM_yyyy');\n            const previousMonth = format(lastMonth - 1, 'MMMM_yyyy');\n            // defaultMessage: '{provider}-{groupBy}-{resolution}-{date}',\n            const fileName = intl.formatMessage(messages.ExportFileName, {\n                provider: reportPathsType,\n                groupBy,\n                resolution,\n                date: timeScope && timeScope === 'previous' ? previousMonth : currentMonth,\n            });\n            return `${fileName}.csv`;\n        };\n        this.handleClose = () => {\n            const { reportError } = this.props;\n            this.setState(Object.assign({}, this.defaultState), () => {\n                if (!reportError) {\n                    this.props.onClose(false);\n                }\n            });\n        };\n        this.handleFetchReport = () => {\n            const { exportReport, queryString, reportPathsType } = this.props;\n            exportReport(reportPathsType, reportType, queryString);\n            this.setState({\n                fetchReportClicked: true,\n            }, () => {\n                this.getExport();\n            });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError } = this.props;\n        const { fetchReportClicked } = this.state;\n        if (prevProps.report !== report && fetchReportClicked) {\n            this.getExport();\n        }\n        if (reportError) {\n            this.props.onError(reportError);\n        }\n    }\n    render() {\n        const { intl, reportFetchStatus } = this.props;\n        return (React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: reportFetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), intl.formatMessage(messages.ExportDownload)));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const { groupBy, isAllItems, items, query, reportPathsType, resolution, timeScope } = props;\n    const getQueryString = () => {\n        const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter: Object.assign({ limit: undefined, offset: undefined, resolution: resolution ? resolution : undefined }, (!query.dateRange && { time_scope_value: timeScope === 'previous' ? -2 : -1 })), filter_by: {}, limit: 0, order_by: undefined, perspective: undefined, dateRange: undefined, delta: undefined });\n        // Store filter_by as an array so we can add to it below\n        if (query.filter_by) {\n            for (const key of Object.keys(query.filter_by)) {\n                if (newQuery.filter_by[key] === undefined) {\n                    newQuery.filter_by[key] = [];\n                }\n                newQuery.filter_by[key].push(query.filter_by[key]);\n            }\n        }\n        if (isAllItems) {\n            // Ensure group_by isn't overridden -- org_unit_id is not unique\n            if (groupBy === orgUnitIdKey) {\n                if (newQuery.filter_by[orgUnitIdKey] === undefined) {\n                    newQuery.filter_by[orgUnitIdKey] = [];\n                }\n                newQuery.filter_by[orgUnitIdKey].push(query.group_by[orgUnitIdKey]);\n            }\n        }\n        else {\n            if (groupBy === orgUnitIdKey) {\n                for (const item of items) {\n                    // Note that type only exists when grouping by org units\n                    const type = item.type === 'organizational_unit' ? orgUnitIdKey : item.type;\n                    if (newQuery.filter_by[type] === undefined) {\n                        newQuery.filter_by[type] = [];\n                    }\n                    newQuery.filter_by[type].push(item.id);\n                }\n            }\n            else {\n                for (const item of items) {\n                    if (newQuery.filter_by[groupBy] === undefined) {\n                        newQuery.filter_by[groupBy] = [];\n                    }\n                    newQuery.filter_by[groupBy].push(item.id);\n                }\n            }\n        }\n        return getQuery(newQuery);\n    };\n    const queryString = getQueryString();\n    const report = exportSelectors.selectExport(state, reportPathsType, reportType, queryString);\n    const reportError = exportSelectors.selectExportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = exportSelectors.selectExportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportSubmitConnect = connect(mapStateToProps, mapDispatchToProps)(ExportSubmitBase);\nconst ExportSubmit = injectIntl(ExportSubmitConnect);\nexport { ExportSubmit };\n","import { Alert, Button, ButtonVariant, Form, FormGroup, Modal, Radio } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { orderBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions } from 'store/exports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './exportModal.styles';\nimport { ExportSubmit } from './exportSubmit';\nconst resolutionOptions = [\n    { label: messages.ExportResolution, value: 'daily' },\n    { label: messages.ExportResolution, value: 'monthly' },\n];\nconst timeScopeOptions = [\n    { label: messages.ExportTimeScope, value: 'current' },\n    { label: messages.ExportTimeScope, value: 'previous' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            error: undefined,\n            timeScope: 'current',\n            resolution: this.props.resolution || 'monthly',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Reset defult state upon close -- see https://issues.redhat.com/browse/COST-1134\n        this.handleClose = () => {\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleError = (error) => {\n            this.setState({ error });\n        };\n        this.handleMonthChange = (_, event) => {\n            this.setState({ timeScope: event.currentTarget.value });\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleMonthChange = this.handleMonthChange.bind(this);\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    render() {\n        const { groupBy, intl, isAllItems, items, query, reportPathsType, showAggregateType = true, showTimeScope = true, } = this.props;\n        const { error, resolution, timeScope } = this.state;\n        let sortedItems = [...items];\n        if (this.props.isOpen) {\n            if (items && items.length === 0 && isAllItems) {\n                sortedItems = [\n                    {\n                        label: intl.formatMessage(messages.ExportAll),\n                    },\n                ];\n            }\n            else {\n                sortedItems = orderBy(sortedItems, ['label'], ['asc']);\n            }\n        }\n        let selectedLabel = intl.formatMessage(messages.ExportSelected, { groupBy });\n        if (groupBy.indexOf(tagPrefix) !== -1) {\n            selectedLabel = intl.formatMessage(messages.ExportSelected, { groupBy: 'tag' });\n        }\n        const thisMonth = new Date();\n        const lastMonth = new Date().setMonth(thisMonth.getMonth() - 1);\n        const currentMonth = format(thisMonth, 'MMMM yyyy');\n        const previousMonth = format(lastMonth - 1, 'MMMM yyyy');\n        return (React.createElement(Modal, { style: styles.modal, isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.ExportTitle), variant: \"small\", actions: [\n                React.createElement(ExportSubmit, { groupBy: groupBy, isAllItems: isAllItems, items: items, key: \"confirm\", timeScope: showTimeScope ? timeScope : undefined, onClose: this.handleClose, onError: this.handleError, query: query, reportPathsType: reportPathsType, resolution: resolution }),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }), intl.formatMessage(messages.Cancel)),\n            ] },\n            error && React.createElement(Alert, { variant: \"danger\", style: styles.alert, title: intl.formatMessage(messages.ExportError) }),\n            React.createElement(\"div\", { style: styles.title },\n                React.createElement(\"span\", null, intl.formatMessage(messages.ExportHeading, { groupBy }))),\n            React.createElement(Form, { style: styles.form },\n                showAggregateType && (React.createElement(FormGroup, { label: intl.formatMessage(messages.ExportAggregateType), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                showTimeScope && (React.createElement(FormGroup, { label: intl.formatMessage(messages.ExportTimeScopeTitle), fieldId: \"timeScope\" },\n                    React.createElement(React.Fragment, null, timeScopeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `timeScope-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, {\n                            date: option.value === 'previous' ? previousMonth : currentMonth,\n                            value: option.value,\n                        }), value: option.value, checked: timeScope === option.value, name: \"timeScope\", onChange: this.handleMonthChange, \"aria-label\": intl.formatMessage(option.label, {\n                            date: option.value === 'previous' ? previousMonth : currentMonth,\n                            value: option.value,\n                        }) })))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportModalConnect = connect(mapStateToProps, mapDispatchToProps)(ExportModalBase);\nconst ExportModal = injectIntl(ExportModalConnect);\nexport { ExportModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { orgUnitIdKey, orgUnitNameKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByOrgBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            for (const key of groupByKeys) {\n                const index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = queryFromRoute.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.getGroupByItems = () => {\n            const { orgReport } = this.props;\n            if (!(orgReport && orgReport.data)) {\n                return [];\n            }\n            // Sort all names first\n            const sortedData = orgReport.data.sort((a, b) => {\n                if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                    return -1;\n                }\n                if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                    return 1;\n                }\n                return 0;\n            });\n            // Move roots first\n            const roots = sortedData.filter(org => org.level === 0);\n            const filteredOrgs = sortedData.filter(org => org.level !== 0);\n            roots.map(root => {\n                const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n                filteredOrgs.unshift(item);\n            });\n            return filteredOrgs.map(org => ({\n                id: org[orgUnitIdKey],\n                toString: () => org[orgUnitNameKey],\n            }));\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection.id,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${orgUnitIdKey}${selection.id}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled = false, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const groupByItems = this.getGroupByItems();\n        const selection = groupByItems.find((item) => item.id === currentItem);\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.FilterByOrgUnitAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.FilterByOrgUnitPlaceholder), selections: selection, variant: SelectVariant.typeahead }, groupByItems.map(item => (React.createElement(SelectOption, { description: item.id, key: item.id, value: item }))))));\n    }\n}\nconst GroupByOrg = injectIntl(GroupByOrgBase);\nexport { GroupByOrg };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { uniq, uniqBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getGroupByItems = () => {\n            const { tagReport } = this.props;\n            if (!(tagReport && tagReport.data)) {\n                return [];\n            }\n            // If the key_only param is used, we have an array of strings\n            let hasTagKeys = false;\n            for (const item of tagReport.data) {\n                if (item.hasOwnProperty('key')) {\n                    hasTagKeys = true;\n                    break;\n                }\n            }\n            // Workaround for https://github.com/project-koku/koku/issues/1797\n            let data = [];\n            if (hasTagKeys) {\n                const keepData = tagReport.data.map(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                (_a) => {\n                    var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                    return keepProps;\n                });\n                data = uniqBy(keepData, 'key');\n            }\n            else {\n                data = uniq(tagReport.data);\n            }\n            return data.map(item => {\n                const tagKey = hasTagKeys ? item.key : item;\n                return React.createElement(SelectOption, { key: item.key, value: tagKey });\n            });\n        };\n        this.getCurrentGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy;\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = key.slice(tagPrefix.length);\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${tagPrefix}${selection}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.FilterByTagKeyAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.FilterByTagKeyPlaceholder), selections: currentItem, variant: SelectVariant.typeahead }, this.getGroupByItems())));\n    }\n}\nconst GroupByTag = injectIntl(GroupByTagBase);\nexport { GroupByTag };\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, parseQuery, tagKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './groupBy.styles';\nimport { GroupByOrg } from './groupByOrg';\nimport { GroupByTag } from './groupByTag';\nconst groupByOrgOptions = [{ label: orgUnitIdKey, value: orgUnitIdKey }];\nconst groupByTagOptions = [{ label: tagKey, value: tagKey }];\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n            isGroupByOrgVisible: false,\n            isGroupByTagVisible: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const { defaultItem } = this.state;\n            const queryFromRoute = parseQuery(location.search);\n            if (!(queryFromRoute && queryFromRoute.group_by)) {\n                return defaultItem;\n            }\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            for (const key of groupByKeys) {\n                let index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = tagKey;\n                    this.setState({\n                        isGroupByTagVisible: true,\n                    });\n                    break;\n                }\n                index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = orgUnitIdKey;\n                    this.setState({\n                        isGroupByOrgVisible: true,\n                    });\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : defaultItem;\n        };\n        this.getGroupBy = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isGroupByOpen } = this.state;\n            const selectOptions = this.getGroupByOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"groupBySelect\", isDisabled: isDisabled, isOpen: isGroupByOpen, onSelect: this.handleGroupBySelected, onToggle: this.handleGroupByToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getGroupByOptions = () => {\n            const { options, orgReport, tagReport, intl } = this.props;\n            const allOptions = [...options];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                allOptions.push(...groupByOrgOptions);\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                allOptions.push(...groupByTagOptions);\n            }\n            return allOptions.map(option => ({\n                toString: () => intl.formatMessage(messages.GroupByValuesTitleCase, { value: option.label, count: 1 }),\n                value: option.value,\n            }));\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            if (selection.value === orgUnitIdKey || selection.value === tagKey) {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: selection.value === orgUnitIdKey,\n                    isGroupByTagVisible: selection.value === tagKey,\n                });\n            }\n            else {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                }, () => {\n                    if (onSelected) {\n                        onSelected(selection.value);\n                    }\n                });\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportFetchStatus, orgReportPathsType, showOrgs, showTags, tagQueryString, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        }, () => {\n            if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgQueryString, orgReportFetchStatus, orgReportPathsType, perspective, showOrgs, showTags, tagQueryString, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            let options;\n            if (prevProps.perspective !== perspective) {\n                options = {\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                };\n            }\n            this.setState(Object.assign({ currentItem: this.getCurrentGroupBy() }, (options ? options : {})), () => {\n                if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                    fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n                }\n                if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n    }\n    render() {\n        const { getIdKeyForGroupBy, groupBy, isDisabled = false, onSelected, orgReport, intl, tagReport } = this.props;\n        const { isGroupByOrgVisible, isGroupByTagVisible } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.groupBySelectorLabel }, intl.formatMessage(messages.GroupByLabel)),\n            this.getGroupBy(),\n            Boolean(isGroupByOrgVisible) && (React.createElement(GroupByOrg, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByOrgOptions, orgReport: orgReport })),\n            Boolean(isGroupByTagVisible) && (React.createElement(GroupByTag, { groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByTagOptions, tagReport: tagReport }))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { endDate, startDate, orgReportPathsType, tagReportPathsType }) => {\n    const tagQuery = endDate && startDate\n        ? {\n            start_date: startDate,\n            end_date: endDate,\n        }\n        : {\n            filter: {\n                resolution: 'monthly',\n                time_scope_units: 'month',\n                time_scope_value: -1,\n            },\n        };\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery(Object.assign(Object.assign({}, tagQuery), { key_only: true }));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    return {\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst GroupByConnect = connect(mapStateToProps, mapDispatchToProps)(GroupByBase);\nconst GroupBy = injectIntl(GroupByConnect);\nexport { GroupBy };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query, reportPathsType } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, redirectToCostModel, history, item: { source_uuid }, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.DetailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], history) }, intl.formatMessage(messages.DetailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport { Actions };\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.GroupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.TagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.TagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.TagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagView = injectIntl(connect()(TagViewBase));\nexport { TagView };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { TagView } from './tagView';\nconst tagReportType = \"tag\" /* tag */;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, query, tagReport, intl } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.TagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagView, { groupBy: groupBy, groupByValue: groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagModalBase));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = \"tag\" /* tag */;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }), count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase));\nexport { TagLink };\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_md.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { breakdownDescKey, breakdownTitleKey, getQueryRoute, orgUnitIdKey } from 'api/queries/query';\nimport { CostType } from 'components/costType/costType';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { TagLink } from 'pages/views/details/components/tag/tagLink';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = () => {\n            const { detailsURL, groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            // Don't want these params when returning to the details page\n            if (newQuery.filter) {\n                newQuery.filter.account = undefined;\n                newQuery[breakdownDescKey] = undefined;\n                newQuery[orgUnitIdKey] = undefined;\n                newQuery[breakdownTitleKey] = undefined;\n            }\n            return `${detailsURL}?${getQueryRoute(newQuery)}`;\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { description, groupBy, query, intl, showCostType = false, tabs, tagReportPathsType, title } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'project' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.BreakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            React.createElement(Link, { to: this.buildDetailsLink() }, intl.formatMessage(messages.BreakdownBackToDetails, {\n                                value: intl.formatMessage(messages.BreakdownBackToTitles, { value: tagReportPathsType }),\n                                groupBy: groupByKey,\n                            }))))),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] },\n                    intl.formatMessage(messages.BreakdownTitle, { value: title }),\n                    description && React.createElement(\"div\", { style: styles.infoDescription }, description),\n                    isBetaFeature() && showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: this.handleCostTypeSelected })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getForDateRangeString(intl.formatMessage(messages.GroupByValuesTitleCase, { value: groupByKey, count: 2 }), messages.BreakdownTotalCostDate, 0)))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst BreakdownHeader = injectIntl(BreakdownHeaderBase);\nexport { BreakdownHeader };\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQueryRoute } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './breakdown.styles';\nimport { BreakdownHeader } from './breakdownHeader';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"cost-overview\" /* costOverview */:\n            return 'cost-overview';\n        case \"historical-data\" /* historicalData */:\n            return 'historical-data';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: \"cost-overview\" /* costOverview */,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: \"historical-data\" /* historicalData */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"cost-overview\" /* costOverview */) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === \"historical-data\" /* historicalData */) {\n                return historicalDataComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"cost-overview\" /* costOverview */) {\n                return intl.formatMessage(messages.BreakdownCostOverviewTitle);\n            }\n            else if (tab === \"historical-data\" /* historicalData */) {\n                return intl.formatMessage(messages.BreakdownHistoricalDataTitle);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { location, fetchReport, queryString, reportPathsType, reportType } = this.props;\n            if (location.search) {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: this.handleCostTypeSelected, query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nexport default injectIntl(BreakdownBase);\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterViewBase extends React.Component {\n    render() {\n        const { item } = this.props;\n        if (!item.clusters) {\n            return null;\n        }\n        return item.clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterView = injectIntl(ClusterViewBase);\nexport { ClusterView, ClusterViewBase };\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './clusterModal.styles';\nimport { ClusterView } from './clusterView';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, intl } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.DetailsClustersModalTitle, { groupBy, name: item.label }), width: '50%' },\n            React.createElement(ClusterView, { item: item })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, report, intl } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        const item = computedItems && computedItems.length ? computedItems[0] : undefined;\n        if (!item) {\n            return null;\n        }\n        for (const cluster of item.clusters) {\n            const prefix = someClusters.length > 0 ? ', ' : '';\n            const clusterString = `${prefix}${cluster}`;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + clusterString.length > maxChars) {\n                    someClusters.push(clusterString\n                        .slice(0, maxChars - charCount)\n                        .trim()\n                        .concat('...'));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            charCount += clusterString.length;\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.cluster_lnk), { href: \"#/\", onClick: this.handleOpen }), intl.formatMessage(messages.DetailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport { Cluster };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 400,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.MarkupTitle);\n        const rawLabel = intl.formatMessage(messages.RawCostTitle);\n        const usageLabel = intl.formatMessage(messages.UsageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 25, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.BreakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.BreakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.BreakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport { CostChart };\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportSummaryItem, ReportSummaryItems } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './summaryModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass SummaryModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.DetailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportGroupBy, reportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalView = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryModalViewBase));\nexport { SummaryModalView };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalView } from './summaryModalView';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.DetailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalView, { reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportSummaryItem, ReportSummaryItems } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { SummaryModal } from 'pages/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { groupBy, query, reportGroupBy, reportPathsType, intl } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), intl.formatMessage(messages.DetailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { groupBy: groupBy, groupByValue: groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== queryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { reportGroupBy, reportFetchStatus, intl } = this.props;\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.BreakdownSummaryTitle, { value: reportGroupBy }))),\n            React.createElement(CardBody, null, reportFetchStatus === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportGroupBy, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        report,\n        reportFetchStatus,\n        reportPathsType,\n        reportType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryBase));\nexport { SummaryCard };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport { getResizeObserver } from 'components/charts/common/chartUtils';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = groupBy === 'cluster' ? this.getChartDatumWithCapacity() : this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { report, intl } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        datum.ranges = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity() {\n        const { report, intl } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n        });\n        datum.ranges = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageCapacity, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageCapacity, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase));\nexport { UsageChart };\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { Cluster } from 'pages/views/details/components/cluster/cluster';\nimport { CostChart } from 'pages/views/details/components/costChart/costChart';\nimport { SummaryCard } from 'pages/views/details/components/summary/summaryCard';\nimport { UsageChart } from 'pages/views/details/components/usageChart/usageChart';\nimport { styles } from 'pages/views/details/ocpDetails/detailsHeader.styles';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, report, intl } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.Clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report }))));\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = () => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.BreakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.BreakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.RawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.RawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.UsageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.UsageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.MarkupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.MarkupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.DocsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.LearnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.CpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.MemoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, groupBy, query } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                if (groupById === groupBy ||\n                    (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                    (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cluster\" /* cluster */:\n                return this.getClusterChart(widget);\n            case \"cost\" /* cost */:\n                return this.getCostChart();\n            case \"cpuUsage\" /* cpuUsage */:\n                return this.getCpuUsageChart(widget);\n            case \"memoryUsage\" /* memoryUsage */:\n                return this.getMemoryUsageChart(widget);\n            case \"summary\" /* reportSummary */:\n                return this.getSummaryCard(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport { CostOverviewBase };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString } from 'components/charts/common/chartDatumUtils';\nimport { getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData } = this.props;\n            const costKey = messages.ChartCostLegendLabel;\n            const costInfrastructureKey = messages.ChartCostInfrastructureLegendLabel;\n            const costInfrastructureTooltipKey = messages.ChartCostInfrastructureLegendTooltip;\n            const costTooltipKey = messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: previousInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousInfrastructureCostData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: currentInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false, 0, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentInfrastructureCostData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 700 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 700\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport { HistoricalCostChart };\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { transformReport } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, 0 /* rolling */, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, 0 /* rolling */, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.CurrencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.HistoricalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.ChartUsageLegendLabel : messages.ChartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.ChartUsageLegendTooltip : messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport { HistoricalTrendChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { transformReport } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl } = this.props;\n        const isCostChart = reportType === \"cost\" /* cost */;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.CurrencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.HistoricalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.HistoricalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getUsageRangeString } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.ChartLimitLegendLabel;\n            const limitTooltipKey = messages.ChartLimitLegendTooltip;\n            const requestKey = messages.ChartRequestsLegendLabel;\n            const requestTooltipKey = messages.ChartRequestsLegendTooltip;\n            const usageKey = messages.ChartUsageLegendLabel;\n            const usageTooltipKey = messages.ChartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.ChartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.ChartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 900 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 900\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport { HistoricalUsageChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { transformReport } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, 1 /* daily */, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, 1 /* daily */, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, 1 /* daily */, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, 1 /* daily */, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, 1 /* daily */, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, 1 /* daily */, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.Units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === \"instance_type\" /* instanceType */ || reportType === \"storage\" /* storage */;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cost\" /* cost */:\n                return this.getCostChart(widget);\n            case \"trend\" /* trend */:\n                return this.getTrendChart(widget);\n            case \"usage\" /* usage */:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport { HistoricalDataBase };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nexport const getGroupById = (query) => {\n    const groupBys = query && query.group_by ? Object.keys(query.group_by) : [];\n    return groupBys.find(key => key !== orgUnitIdKey);\n};\nexport const getGroupByValue = (query) => {\n    const groupById = getGroupById(query);\n    return groupById ? query.group_by[groupById] : undefined;\n};\nexport const getGroupByOrgValue = (query) => {\n    let groupByOrg;\n    if (query && query.group_by) {\n        for (const groupBy of Object.keys(query.group_by)) {\n            if (groupBy === orgUnitIdKey) {\n                groupByOrg = query.group_by[orgUnitIdKey];\n                break;\n            }\n        }\n    }\n    return groupByOrg;\n};\nexport const getGroupByTagKey = (query) => {\n    let groupByTagKey;\n    if (query && query.group_by) {\n        for (const groupBy of Object.keys(query.group_by)) {\n            const tagIndex = groupBy.indexOf(tagPrefix);\n            if (tagIndex !== -1) {\n                groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                break;\n            }\n        }\n    }\n    return groupByTagKey;\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, label, description, groupBy, query, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n            [groupBy]: label,\n        } });\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, orgUnitId, query, title, type, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && orgUnitId && { [orgUnitIdKey]: orgUnitId })), { group_by: {\n            [groupBy]: id,\n        } });\n    if (!newQuery.filter) {\n        newQuery.filter = {};\n    }\n    if (type === 'account') {\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\n","export const addQueryFilter = (query, filterType, filterValue) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    // Filter by * won't generate a new request if group_by * already exists\n    if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n        return;\n    }\n    if (newQuery.filter_by[filterType]) {\n        let found = false;\n        const filters = newQuery.filter_by[filterType];\n        if (!Array.isArray(filters)) {\n            found = filterValue === newQuery.filter_by[filterType];\n        }\n        else {\n            for (const filter of filters) {\n                if (filter === filterValue) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        if (!found) {\n            newQuery.filter_by[filterType] = [newQuery.filter_by[filterType], filterValue];\n        }\n    }\n    else {\n        newQuery.filter_by[filterType] = [filterValue];\n    }\n    return newQuery;\n};\nexport const removeQueryFilter = (query, filterType, filterValue) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    if (filterType === null) {\n        newQuery.filter_by = undefined; // Clear all\n    }\n    else if (filterValue === null) {\n        newQuery.filter_by[filterType] = undefined; // Clear all values\n    }\n    else if (Array.isArray(newQuery.filter_by[filterType])) {\n        const index = newQuery.filter_by[filterType].indexOf(filterValue);\n        if (index > -1) {\n            newQuery.filter_by[filterType] = [\n                ...query.filter_by[filterType].slice(0, index),\n                ...query.filter_by[filterType].slice(index + 1),\n            ];\n        }\n    }\n    else {\n        newQuery.filter_by[filterType] = undefined;\n    }\n    return newQuery;\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return a.split('').sort().join('') === b.split('').sort().join('');\n}\n"],"names":["title","PageHeader","PageHeaderTitle","Main","Unavailable","ResourceSelectBase","constructor","props","super","this","defaultState","createdOptions","isSelectExpanded","state","Object","assign","getOptions","resource","resourceFetchStatus","search","options","data","length","map","item","value","isNaN","account_alias","cluster_alias","key","name","moreOptions","val","getSelectOptions","option","SelectOption","handleOnCreateOption","trim","slice","push","setState","handleOnClear","onSearchChanged","undefined","handleOnFilter","event","handleOnSelect","onSelect","handleOnToggle","isOpen","handleOnTypeaheadInputChanged","bind","componentDidUpdate","prevProps","fetchResource","resourcePathsType","resourceType","query","render","intl","isDisabled","selectOptions","Select","isCreatable","isInputValuePersisted","onCreateOption","onClear","onFilter","onToggle","onTypeaheadInputChanged","placeholderText","formatMessage","messages","typeAheadAriaLabel","variant","SelectVariant","mapStateToProps","queryString","mapDispatchToProps","ResourceSelect","injectIntl","connect","ResourceTypeahead","searchTimeout","noop","handleOnSearch","clearTimeout","setTimeout","currentSearch","styles","export","marginRight","global_spacer_md","toolbarContainer","backgroundColor","global_BackgroundColor_light_100","paddingBottom","paddingTop","marginLeft","global_spacer_lg","tagReportType","TagValueBase","arguments","isTagValueExpanded","onTagValueChange","tagKeyValueInput","onTagValueToggle","componentDidMount","fetchTag","tagQueryString","tagReportFetchStatus","tagReportPathsType","getTagValueOptions","tagKey","tagReport","Set","tag","values","onTagValueInput","onTagValueSelect","selections","tagKeyValue","selectOption","InputGroup","TextInput","id","type","onChange","placeholder","onKeyDown","evt","Button","ButtonVariant","onClick","location","endDate","end_date","startDate","start_date","groupByOrgValue","groupBy","groupByValue","tagKeyFilter","tagQuery","filter","resolution","time_scope_units","time_scope_value","TagValueConnect","TagValue","defaultFilters","categoryPrefix","DataToolbarBase","categoryInput","filters","cloneDeep","isBulkSelectOpen","isCategorySelectOpen","isOrgUnitSelectExpanded","isTagValueDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","group_by","indexOf","getActiveFilters","filter_by","keys","forEach","Array","isArray","substring","onDelete","chip","_type","filterType","prevState","s","_filterType","onFilterRemoved","getBulkSelect","isAllSelected","isBulkSelectDisabled","itemsPerPage","itemsTotal","selectedItems","numSelected","anySelected","isChecked","dropdownItems","DropdownItem","handleOnBulkSelectClicked","Dropdown","handleOnBulkSelect","position","DropdownPosition","toggle","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","handleOnBulkSelectToggle","action","onBulkSelected","getCategorySelectOptions","toString","handleOnCategorySelect","selection","currentCategory","currentTagKey","handleOnCategoryToggle","getCategoryInput","categoryOption","categoryName","ToolbarFilter","chips","deleteChip","showToolbarItem","onCategoryInputSelect","handleOnCategoryInputChange","onCategoryInput","getDefaultCategoryOptions","count","prevFilters","includes","onFilterAdded","getOrgUnitSelect","getOrgUnitOptions","compareTo","find","node","className","handleOnOrgUnitToggle","handleOnOrgUnitSelect","description","checked","target","prevSelections","getTagKeySelect","getTagKeyOptions","ToolbarItem","handleOnTagKeyClear","handleOnTagKeyToggle","handleOnTagKeySelect","getTagValueSelect","tagKeyOption","onTagValueInputChange","getColumnManagement","handleColumnManagementClicked","getExportButton","isExportDisabled","spacer","default","handleExportClicked","onColumnManagementClicked","onExportClicked","orgReport","currentOrgUnit","getCategorySelect","toggleIcon","sortedData","sort","a","b","roots","org","level","filteredOrgs","root","unshift","hasTagKeys","hasOwnProperty","keepData","_a","e","t","p","prototype","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","uniqBy","uniq","dateRange","pagination","showBulkSelect","showColumnManagement","showExport","showFilter","style","Toolbar","clearAllFilters","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarToggleGroup","breakpoint","ToolbarGroup","Boolean","alignment","DataToolbar","alert","marginBottom","form","global_spacer_sm","modal","input","global_spacer_xs","ul","reportType","ExportSubmitBase","stateProps","dispatchProps","fetchReportClicked","getExport","report","reportFetchStatus","getFileName","handleClose","reportPathsType","timeScope","thisMonth","Date","lastMonth","setMonth","getMonth","currentMonth","format","previousMonth","provider","date","reportError","onClose","handleFetchReport","exportReport","onError","testIds","isAllItems","items","newQuery","JSON","parse","stringify","limit","offset","order_by","perspective","delta","getQueryString","ExportSubmitConnect","ExportSubmit","resolutionOptions","label","timeScopeOptions","ExportModalBase","error","handleError","handleMonthChange","_","currentTarget","handleResolutionChange","showAggregateType","showTimeScope","sortedItems","orderBy","selectedLabel","Modal","actions","Alert","Form","FormGroup","fieldId","index","Radio","isValid","groupItem","ExportModalConnect","ExportModal","groupBySelector","display","alignItems","groupBySelectorLabel","whiteSpace","GroupByOrgBase","defaultItem","isGroupByOpen","getCurrentGroupBy","getIdKeyForGroupBy","queryFromRoute","groupByKeys","getGroupByItems","handleGroupByClear","currentItem","handleGroupBySelected","onSelected","handleGroupByToggle","groupByItems","GroupByOrg","GroupByTagBase","GroupByTag","groupByOrgOptions","groupByTagOptions","orgReportType","GroupByBase","isGroupByOrgVisible","isGroupByTagVisible","getGroupBy","getGroupByOptions","allOptions","fetchOrg","orgQueryString","orgReportFetchStatus","orgReportPathsType","showOrgs","showTags","Title","headingLevel","size","key_only","GroupByConnect","GroupBy","DetailsActionsBase","isDropdownOpen","isExportModalOpen","getExportModal","handleExportModalClose","handleExportModalOpen","showPriceListOption","redirectToCostModel","history","source_uuid","component","KebabToggle","isPlain","DetailsActionsConnect","Actions","content","paddingLeft","paddingRight","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","tagLink","tagsContainer","global_spacer_3xl","marginTop","TagViewBase","getDataListItems","result","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","dataListItems","DataList","isCompact","TagView","TagModalBase","getTagValueCount","shouldComponentUpdate","nextProps","account","width","filterByParams","TagModal","TagLinkBase","handleOpen","preventDefault","href","TagLink","cost","global_spacer_xl","costLabel","costValue","textAlign","costLabelDate","costType","header","global_BackgroundColor_100","headerContent","justifyContent","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","BreakdownHeaderBase","buildDetailsLink","detailsURL","groupByKey","getTotalCost","hasCost","meta","total","units","handleCostTypeSelected","onCostTypeSelected","showCostType","filterByAccount","groupByOrg","groupByTag","to","TitleSizes","BreakdownHeader","getIdKeyForTab","tab","BreakdownBase","activeTabKey","getAvailableTabs","contentRef","getRouteForQuery","pathname","getTab","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","ref","getTabItem","costOverviewComponent","historicalDataComponent","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","cost_type","replace","tabIndex","updateReport","fetchReport","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","clustersContainer","height","subTitle","ClusterViewBase","clusters","cluster","ClusterView","ClusterModalBase","ClusterModal","ClusterBase","showAll","charCount","someClusters","allClusters","computedItems","getComputedReportItems","idKey","clusterString","concat","Cluster","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","CostChart","mainContent","SummaryModalViewBase","reportGroupBy","hasTotal","status","_item","formatOptions","totalValue","SummaryModalView","SummaryModalBase","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","handleBulletChartModalOpen","ButtonType","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","SummaryCard","capacity","legendSkeleton","UsageChartBase","containerRef","observer","handleResize","clientWidth","current","getChart","chartDatum","getChartDatumWithCapacity","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasRequest","request","requestUnits","hasCapacity","capacityUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","UsageChart","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","enableFlip","bodyContent","rel","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","usePlaceholder","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","CostOverviewBase","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","initDatum","costKey","costInfrastructureKey","costInfrastructureTooltipKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","HistoricalCostChart","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalTrendChart","HistoricalDataTrendChartBase","isCostChart","Number","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalUsageChart","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTrendChart","getUsageChart","HistoricalDataBase","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","getGroupById","getGroupByValue","getGroupByOrgValue","getGroupByTagKey","groupByTagKey","tagIndex","getBreakdownPath","basePath","getOrgBreakdownPath","orgUnitId","addQueryFilter","filterValue","found","removeQueryFilter","getTestProps","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","cancel_btn","submit_btn","login","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","isEqual","obj1","obj2","split","join"],"sourceRoot":""}