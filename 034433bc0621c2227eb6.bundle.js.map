{"version":3,"sources":["webpack://koku-ui/./src/api/api.ts","webpack://koku-ui/./src/api/costModels.ts","webpack://koku-ui/./src/api/providers.ts","webpack://koku-ui/./src/api/queries/awsQuery.ts","webpack://koku-ui/./src/api/queries/azureQuery.ts","webpack://koku-ui/./src/api/queries/gcpQuery.ts","webpack://koku-ui/./src/api/queries/ibmQuery.ts","webpack://koku-ui/./src/api/queries/ocpCloudQuery.ts","webpack://koku-ui/./src/api/queries/ocpQuery.ts","webpack://koku-ui/./src/api/queries/query.ts","webpack://koku-ui/./src/api/reports/awsOcpReports.ts","webpack://koku-ui/./src/api/reports/awsReports.ts","webpack://koku-ui/./src/api/reports/azureOcpReports.ts","webpack://koku-ui/./src/api/reports/azureReports.ts","webpack://koku-ui/./src/api/reports/gcpOcpReports.ts","webpack://koku-ui/./src/api/reports/gcpReports.ts","webpack://koku-ui/./src/api/reports/ibmReports.ts","webpack://koku-ui/./src/api/reports/ocpCloudReports.ts","webpack://koku-ui/./src/api/reports/ocpReports.ts","webpack://koku-ui/./src/api/resources/awsOcpResource.ts","webpack://koku-ui/./src/api/resources/awsResource.ts","webpack://koku-ui/./src/api/resources/azureOcpResource.ts","webpack://koku-ui/./src/api/resources/azureResource.ts","webpack://koku-ui/./src/api/resources/gcpOcpResource.ts","webpack://koku-ui/./src/api/resources/gcpResource.ts","webpack://koku-ui/./src/api/resources/ibmResource.ts","webpack://koku-ui/./src/api/resources/ocpResource.ts","webpack://koku-ui/./src/api/resources/resourceUtils.ts","webpack://koku-ui/./src/components/i18n/i18nProvider.tsx","webpack://koku-ui/./src/components/i18n/i18init.ts","webpack://koku-ui/./src/pages/state/maintenance/maintenanceState.tsx","webpack://koku-ui/./src/pages/state/maintenance/index.ts","webpack://koku-ui/./src/pages/state/maintenance/maintenance.tsx","webpack://koku-ui/./src/app.tsx","webpack://koku-ui/./src/pages/costModels/createCostModelWizard/parseError.ts","webpack://koku-ui/./src/components/async/asyncComponent/asyncComponent.tsx","webpack://koku-ui/./src/components/async/asyncComponent/index.ts","webpack://koku-ui/./src/components/async/permissionsComponent/permissionsComponent.tsx","webpack://koku-ui/./src/routes.tsx","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/common.ts","webpack://koku-ui/./src/store/costModels/actions.ts","webpack://koku-ui/./src/store/costModels/reducer.ts","webpack://koku-ui/./src/store/costModels/selectors.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardReducer.ts","webpack://koku-ui/./src/store/djangoUtils/pagination.ts","webpack://koku-ui/./src/store/djangoUtils/query.ts","webpack://koku-ui/./src/store/exports/exportCommon.ts","webpack://koku-ui/./src/store/exports/exportSelectors.ts","webpack://koku-ui/./src/store/exports/exportActions.ts","webpack://koku-ui/./src/api/exports/exportUtils.ts","webpack://koku-ui/./src/api/exports/awsExport.ts","webpack://koku-ui/./src/api/exports/awsOcpExport.ts","webpack://koku-ui/./src/api/exports/azureExport.ts","webpack://koku-ui/./src/api/exports/azureOcpExport.ts","webpack://koku-ui/./src/api/exports/gcpExport.ts","webpack://koku-ui/./src/api/exports/gcpOcpExport.ts","webpack://koku-ui/./src/api/exports/ibmExport.ts","webpack://koku-ui/./src/api/exports/ocpCloudExport.ts","webpack://koku-ui/./src/api/exports/ocpExport.ts","webpack://koku-ui/./src/store/exports/exportReducer.ts","webpack://koku-ui/./src/api/forecasts/awsForecast.ts","webpack://koku-ui/./src/api/forecasts/awsOcpForecast.ts","webpack://koku-ui/./src/api/forecasts/azureForecast.ts","webpack://koku-ui/./src/api/forecasts/azureOcpForecast.ts","webpack://koku-ui/./src/api/forecasts/gcpForecast.ts","webpack://koku-ui/./src/api/forecasts/gcpOcpForecast.ts","webpack://koku-ui/./src/api/forecasts/ibmForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpCloudForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpForecast.ts","webpack://koku-ui/./src/store/forecasts/forecastCommon.ts","webpack://koku-ui/./src/store/forecasts/forecastSelectors.ts","webpack://koku-ui/./src/store/forecasts/forecastActions.ts","webpack://koku-ui/./src/api/forecasts/forecastUtils.ts","webpack://koku-ui/./src/store/forecasts/forecastReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpInfrastructureDashboard/ocpInfrastructureDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpInfrastructureDashboard/ocpInfrastructureDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpInfrastructureDashboard/ocpInfrastructureDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpInfrastructureDashboard/ocpInfrastructureDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpInfrastructureDashboard/ocpInfrastructureDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardReducer.ts","webpack://koku-ui/./src/store/priceList/reducer.ts","webpack://koku-ui/./src/store/priceList/actions.ts","webpack://koku-ui/./src/store/ui/uiActions.ts","webpack://koku-ui/./src/store/ui/uiReducer.ts","webpack://koku-ui/./src/store/rootReducer.ts","webpack://koku-ui/./src/store/store.ts","webpack://koku-ui/./src/store/metrics/actions.ts","webpack://koku-ui/./src/api/metrics.ts","webpack://koku-ui/./src/store/metrics/reducer.ts","webpack://koku-ui/./src/store/metrics/selectors.ts","webpack://koku-ui/./src/api/orgs/awsOrgs.ts","webpack://koku-ui/./src/store/orgs/orgCommon.ts","webpack://koku-ui/./src/store/orgs/orgSelectors.ts","webpack://koku-ui/./src/store/orgs/orgActions.ts","webpack://koku-ui/./src/api/orgs/orgUtils.ts","webpack://koku-ui/./src/store/orgs/orgReducer.ts","webpack://koku-ui/./src/store/providers/providersCommon.ts","webpack://koku-ui/./src/store/providers/providersActions.ts","webpack://koku-ui/./src/store/providers/providersReducer.ts","webpack://koku-ui/./src/store/providers/providersSelectors.ts","webpack://koku-ui/./src/store/rbac/actions.ts","webpack://koku-ui/./src/api/rbac.ts","webpack://koku-ui/./src/store/rbac/reducer.ts","webpack://koku-ui/./src/store/rbac/selectors.ts","webpack://koku-ui/./src/api/reports/ocpUsageReports.ts","webpack://koku-ui/./src/store/reports/reportCommon.ts","webpack://koku-ui/./src/store/reports/reportSelectors.ts","webpack://koku-ui/./src/store/reports/reportActions.ts","webpack://koku-ui/./src/api/reports/reportUtils.ts","webpack://koku-ui/./src/store/reports/reportReducer.ts","webpack://koku-ui/./src/store/resources/resourceCommon.ts","webpack://koku-ui/./src/store/resources/resourceSelectors.ts","webpack://koku-ui/./src/store/resources/resourceActions.ts","webpack://koku-ui/./src/store/resources/resourceReducer.ts","webpack://koku-ui/./src/store/sourceSettings/actions.ts","webpack://koku-ui/./src/store/sourceSettings/reducer.ts","webpack://koku-ui/./src/store/sourceSettings/selectors.ts","webpack://koku-ui/./src/api/tags/awsOcpTags.ts","webpack://koku-ui/./src/api/tags/awsTags.ts","webpack://koku-ui/./src/api/tags/azureOcpTags.ts","webpack://koku-ui/./src/api/tags/azureTags.ts","webpack://koku-ui/./src/api/tags/gcpOcpTags.ts","webpack://koku-ui/./src/api/tags/gcpTags.ts","webpack://koku-ui/./src/api/tags/ibmTags.ts","webpack://koku-ui/./src/api/tags/ocpCloudTags.ts","webpack://koku-ui/./src/api/tags/ocpTags.ts","webpack://koku-ui/./src/store/tags/tagCommon.ts","webpack://koku-ui/./src/store/tags/tagSelectors.ts","webpack://koku-ui/./src/store/tags/tagActions.ts","webpack://koku-ui/./src/api/tags/tagUtils.ts","webpack://koku-ui/./src/store/tags/tagReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessCommon.ts","webpack://koku-ui/./src/store/userAccess/userAccessActions.ts","webpack://koku-ui/./src/api/userAccess.ts","webpack://koku-ui/./src/store/userAccess/userAccessReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessSelectors.ts","webpack://koku-ui/./src/utils/getBaseName.ts"],"names":["initApi","version","authInterceptor","reqConfig","Object","assign","headers","fetchCostModels","query","addCostModel","request","updateCostModel","uuid","deleteCostModel","fetchProviders","insights","window","queryString","chrome","auth","getUser","then","getQuery","getQueryRoute","parseQuery","logicalAndPrefix","tagPrefix","breakdownDescKey","breakdownTitleKey","orgUnitIdKey","orgUnitNameKey","tagKey","stringify","filter_by","newQuery","JSON","parse","undefined","key","keys","filter","Array","isArray","push","convertFilterBy","encode","indices","parseKey","val","index","indexOf","substring","length","filterByKey","parseFilterByPrefix","group_by","groupByKey","parseGroupByPrefix","ignoreQueryPrefix","ReportTypePaths","runReport","reportType","path","ResourceTypePaths","isResourceTypeValid","resourcePathsType","resourceType","result","forecast","I18nProvider","render","this","props","locale","I18nextProvider","i18n","children","i18next","use","init","backend","loadPath","fallbackLng","ns","defaultNS","react","useSuspense","MaintenanceStateBase","t","Maintenance","description","Stack","StackItem","href","MaintenanceState","withTranslation","withRouter","Main","App","constructor","super","arguments","state","maintenanceMode","componentDidMount","history","location","identifyApp","pathname","appAction","appNav","on","event","_a","_b","currRoute","routes","includes","navId","domEvent","appPathname","replace","basename","componentDidUpdate","prevProps","scrollTo","componentWillUnmount","route","mapStateToProps","mapDispatchToProps","compose","connect","parseApiError","error","response","data","Error","errors","map","er","source","detail","join","message","asyncComponent","loader","LoadedComponent","Async","isLoading","Comp","default","setState","InactiveSources","Permissions","permissionsComponent","AysncComponent","PermissionsComponent","NotFound","AwsBreakdown","AwsDetails","AzureBreakdown","AzureDetails","Explorer","GcpBreakdown","GcpDetails","IbmBreakdown","IbmDetails","OcpDetails","OcpBreakdown","Overview","CostModelsDetails","CostModel","paths","awsDetails","awsDetailsBreakdown","azureDetails","azureDetailsBreakdown","costModels","explorer","gcpDetails","gcpDetailsBreakdown","ibmDetails","ibmDetailsBreakdown","ocpDetails","ocpDetailsBreakdown","overview","labelKey","component","exact","Routes","Switch","Route","awsCostOverviewStateKey","currrentId","getId","costWidget","id","reportPathsType","type","accountSummaryWidget","reportSummary","reportGroupBy","showWidgetOnGroupBy","regionSummaryWidget","serviceSummaryWidget","defaultState","currentWidgets","widgets","awsCostOverviewReducer","selectAwsCostOverviewState","selectWidgets","selectWidget","selectCurrentWidgets","azureCostOverviewStateKey","azureCostOverviewReducer","selectAzureCostOverviewState","gcpCostOverviewStateKey","projectSummaryWidget","gcpCostOverviewReducer","selectGcpCostOverviewState","ibmCostOverviewStateKey","ibmCostOverviewReducer","selectIbmCostOverviewState","ocpCostOverviewStateKey","clusterWidget","cluster","cpuUsageWidget","usage","showCapacityOnGroupBy","memoryUsageWidget","usePlaceholder","ocpCostOverviewReducer","selectOcpCostOverviewState","awsHistoricalDataStateKey","computeUsageWidget","storageUsageWidget","awsHistoricalDataReducer","selectAwsHistoricalDataState","azureHistoricalDataStateKey","azureHistoricalDataReducer","selectAzureHistoricalDataState","gcpHistoricalDataStateKey","gcpHistoricalDataReducer","selectGcpHistoricalDataState","ibmHistoricalDataStateKey","ibmHistoricalDataReducer","selectIbmHistoricalDataState","ocpHistoricalDataStateKey","ocpHistoricalDataReducer","selectOcpHistoricalDataState","createMapStateToProps","updateFilterToolbar","createAction","selectCostModel","resetCostModel","setCostModelDialog","fetchCostModelsRequest","success","fetchCostModelsSuccess","failure","fetchCostModelsFailure","createAsyncAction","dispatch","res","catch","err","updateCostModelsRequest","updateCostModelsSuccess","updateCostModelsFailure","dialog","name","isOpen","deleteCostModelsRequest","deleteCostModelsSuccess","deleteCostModelsFailure","redirectToCostModelFromSourceUuid","source_uuid","addNotification","title","variant","dismissable","stateKey","status","currentFilterType","currentFilterValue","isDialogOpen","deleteRate","deleteSource","addSource","addRate","updateRate","deleteMarkup","updateMarkup","deleteDistribution","updateDistribution","createWizard","dialogData","update","current","delete","reducer","action","getType","payload","meta","costModelsState","cms","dialogs","stateName","costStatus","costError","costData","costQuery","every","updateProcessing","updateError","updateErr","selected","deleteProcessing","deleteError","awsDashboardStateKey","awsDashboardDefaultFilters","time_scope_units","time_scope_value","resolution","awsDashboardTabFilters","limit","getQueryForWidget","getQueryForWidgetTabs","widget","currentTab","service","tabsFilter","account","region","instance_type","getGroupByForTab","newFilter","selectAwsDashboardState","selectWidgetQueries","previous","tabs","fetchWidgetForecasts","getState","forecastPathsType","forecastType","fetchWidgetReports","availableTabs","setWidgetTab","changeWidgetTab","tab","computeWidget","titleKey","details","costKey","formatOptions","fractionDigits","showUnits","showUsageFirst","showUsageLegendLabel","usageFormatOptions","usageKey","trend","computedReportItem","computedReportItemValue","topItems","chartType","costSummaryWidget","adjustContainerHeight","showHorizontal","viewAllPath","computedForecastItem","dailyTitleKey","databaseWidget","networkWidget","storageWidget","awsDashboardReducer","awsOcpDashboardStateKey","awsOcpDashboardDefaultFilters","awsOcpDashboardTabFilters","selectAwsOcpDashboardState","awsOcpDashboardReducer","azureDashboardStateKey","azureDashboardDefaultFilters","azureDashboardTabFilters","service_name","subscription_guid","resource_location","selectAzureDashboardState","virtualMachineWidget","azureDashboardReducer","azureOcpDashboardStateKey","azureOcpDashboardDefaultFilters","azureOcpDashboardTabFilters","selectAzureOcpDashboardState","azureOcpDashboardReducer","gcpDashboardStateKey","gcpDashboardDefaultFilters","gcpDashboardTabFilters","project","selectGcpDashboardState","gcpDashboardReducer","gcpOcpDashboardStateKey","gcpOcpDashboardDefaultFilters","gcpOcpDashboardTabFilters","selectGcpOcpDashboardState","gcpOcpDashboardReducer","ibmDashboardStateKey","ibmDashboardDefaultFilters","ibmDashboardTabFilters","selectIbmDashboardState","ibmDashboardReducer","ocpCloudDashboardStateKey","ocpCloudDashboardDefaultFilters","ocpCloudDashboardTabFilters","selectOcpCloudDashboardState","defaultFilter","ocpCloudDashboardReducer","ocpDashboardStateKey","ocpDashboardDefaultFilters","ocpDashboardTabFilters","node","selectOcpDashboardState","showTooltip","computedForecastInfrastructureItem","cpuWidget","requestFormatOptions","requestKey","memoryWidget","volumeWidget","ocpDashboardReducer","selectPagination","stateProjector","getPagination","page","perPage","count","urlParams","links","next","URLSearchParams","split","Number","get","first","selectQuery","params","reduce","acc","curr","search","exportStateKey","getExportId","selectExportState","selectExport","byId","selectExportFetchStatus","fetchStatus","selectExportError","fetchExportRequest","fetchExportSuccess","fetchExportFailure","exportReport","report","Date","now","timeRequested","isExportExpired","reportId","Accept","Map","exportReducer","set","ForecastTypePaths","forecastStateKey","getForecastId","selectForecastState","selectForecast","selectForecastFetchStatus","selectForecastError","fetchForecastRequest","fetchForecastSuccess","fetchForecastFailure","fetchForecast","isForecastExpired","forecastId","forecastReducer","showInfrastructureLabel","showSupplementaryLabel","rates","fetchPriceListRequest","fetchPriceListSuccess","fetchPriceListFailure","closeProvidersModal","openProvidersModal","toggleSidebar","isExportModalOpen","isProvidersModalOpen","isSidebarOpen","rootReducer","combineReducers","awsOcpDashboard","awsCostOverview","awsDashboard","awsHistoricalData","azureOcpDashboard","azureCostOverview","azureDashboard","azureHistoricalData","gcpCostOverview","gcpDashboard","gcpOcpDashboard","gcpHistoricalData","ibmCostOverview","ibmDashboard","ibmHistoricalData","metrics","ocpCostOverview","ocpDashboard","ocpCloudDashboard","ocpHistoricalData","providerUuid","providers","rbac","userAccess","notifications","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","middlewares","notificationsMiddleware","configureStore","initialState","enhancer","applyMiddleware","store","createStore","Promise","reject","fetchMetricsRequest","fetchMetricsSuccess","fetchMetricsFailure","fetchMetrics","source_type","fetchRateMetrics","metricsState","metricsPayload","prev","label_metric","label_measurement","maxRate","costTypes","default_cost_type","OrgTypePaths","orgStateKey","getOrgId","orgPathsType","orgType","selectOrgState","selectOrg","selectOrgFetchStatus","selectOrgError","fetchOrgRequest","fetchOrgSuccess","fetchOrgFailure","fetchOrg","orgReport","isOrgExpired","orgId","orgReducer","addProviderKey","awsProvidersQuery","azureProvidersQuery","gcpProvidersQuery","ibmProvidersQuery","ocpProvidersQuery","getReportId","fetchProvidersRequest","fetchProvidersSuccess","fetchProvidersFailure","providersReducer","selectProvidersState","selectAddProviderFetchStatus","selectAddProviderError","selectProviders","providerType","selectProvidersFetchStatus","selectProvidersError","fetchRbacRequest","fetchRbacSuccess","fetchRbacFailure","fetchRbac","async","_insights","getUserPermissions","user","permissions","isOrgAdmin","identity","is_org_admin","getRBAC","selectRbacState","isCostModelWritePermission","costModelPermissions","find","item","permission","startsWith","app","resource","operation","reportStateKey","selectReportState","selectReport","selectReportFetchStatus","selectReportError","fetchReportRequest","fetchReportSuccess","fetchReportFailure","fetchReport","isReportExpired","reportReducer","resourceStateKey","getResourceId","selectResourceState","selectResource","selectResourceFetchStatus","selectResourceError","fetchResourceRequest","fetchResourceSuccess","fetchResourceFailure","fetchResource","isResourceExpired","resourceId","resourceReducer","fetchSourcesRequest","fetchSourcesSuccess","fetchSourcesFailure","fetchSources","sources","sourcesState","srcs","TagTypePaths","tagStateKey","getTagId","tagPathsType","tagType","selectTagState","selectTag","selectTagFetchStatus","selectTagError","fetchTagRequest","fetchTagSuccess","fetchTagFailure","fetchTag","tagReport","isTagExpired","tagId","tagReducer","userAccessKey","allUserAccessQuery","ibmUserAccessQuery","beta","fetchUserAccessRequest","fetchUserAccessSuccess","fetchUserAccessFailure","userAccessReducer","selectUserAccessState","selectUserAccess","selectUserAccessFetchStatus","selectUserAccessError","getBaseName","release","pathName","shift"],"mappings":"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","file":"034433bc0621c2227eb6.bundle.js","sourcesContent":["import { authInterceptor as insightsAuthInterceptor } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport axios from 'axios';\nexport function initApi({ version }) {\n    axios.defaults.baseURL = `/api/cost-management/${version}/`;\n    axios.interceptors.request.use(authInterceptor);\n    axios.interceptors.request.use(insightsAuthInterceptor);\n}\nexport function authInterceptor(reqConfig) {\n    return Object.assign(Object.assign({}, reqConfig), { headers: Object.assign({}, reqConfig.headers) });\n}\n","import axios from 'axios';\nexport function fetchCostModels(query = '') {\n    return axios.get(`cost-models/${query && '?'}${query}`);\n}\nexport function fetchCostModel(uuid) {\n    return axios.get(`cost-models/${uuid}/`);\n}\nexport function addCostModel(request) {\n    return axios.post('cost-models/', request);\n}\nexport function updateCostModel(uuid, request) {\n    return axios.put(`cost-models/${uuid}/`, request);\n}\nexport function deleteCostModel(uuid) {\n    return axios.delete(`cost-models/${uuid}/`);\n}\n","import axios from 'axios';\nexport function fetchProviders(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`sources/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`sources/${queryString}`);\n    }\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import { parse, stringify } from 'qs';\nexport const logicalOrPrefix = 'or:'; // logical OR prefix for group_by\nexport const logicalAndPrefix = 'and:'; // logical AND prefix for group_by\nexport const tagPrefix = 'tag:'; // Tag prefix for group_by\nexport const breakdownDescKey = 'breakdown_desc'; // Used to display a description in the breakdown header\nexport const breakdownGroupByKey = 'breakdown_group_by'; // Used to display a breadcrumb in the breakdown header\nexport const breakdownTitleKey = 'breakdown_title'; // Used to display a title in the breakdown header\nexport const orgUnitIdKey = 'org_unit_id'; // Org unit ID for group_by\nexport const orgUnitNameKey = 'org_unit_name'; // Org unit name for group_by\nexport const tagKey = 'tag'; // Tag key prefix for group_by\n// Converts filter_by props to filter props\nexport function convertFilterBy(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined });\n    for (const key of Object.keys(query.filter_by)) {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        if (newQuery.filter[key]) {\n            if (!Array.isArray(newQuery.filter[key])) {\n                newQuery.filter[key] = newQuery.filter[key] !== '*' ? [newQuery.filter[key]] : [];\n            }\n            newQuery.filter[key].push(query.filter_by[key]);\n        }\n        else {\n            newQuery.filter[key] = query.filter_by[key];\n        }\n    }\n    return newQuery;\n}\n// filter_by props are converted\nexport function getQuery(query) {\n    return stringify(convertFilterBy(query), { encode: false, indices: false });\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return stringify(query, { encode: false, indices: false });\n}\n// Returns given key without logical OR/AND prefix\nfunction parseKey(val) {\n    let key = val;\n    let index = val.indexOf(logicalOrPrefix);\n    if (index !== -1) {\n        key = val.substring(index + logicalOrPrefix.length);\n    }\n    else {\n        index = val.indexOf(logicalAndPrefix);\n        if (index !== -1) {\n            key = val.substring(index + logicalAndPrefix.length);\n        }\n    }\n    return key;\n}\n// Returns query without filter_by prefix\nexport function parseFilterByPrefix(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        const filterByKey = parseKey(key);\n        newQuery.filter_by[filterByKey] = query.filter_by[key];\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function parseGroupByPrefix(query) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        const groupByKey = parseKey(key);\n        newQuery.group_by[groupByKey] = query.group_by[key];\n    }\n    return newQuery;\n}\nexport function parseQuery(query) {\n    const newQuery = parse(query, { ignoreQueryPrefix: true });\n    return parseFilterByPrefix(parseGroupByPrefix(newQuery));\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/aws/costs/',\n    [\"database\" /* database */]: 'reports/aws/costs/',\n    [\"network\" /* network */]: 'reports/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/azure/costs/',\n    [\"database\" /* database */]: 'reports/azure/costs/',\n    [\"network\" /* network */]: 'reports/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\n// Todo: update to use ibm backend apis when they become available\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/all/instance-types/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/all/storage/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/aws-accounts/',\n    [\"region\" /* region */]: 'resource-types/aws-regions/',\n    [\"service\" /* service */]: 'resource-types/aws-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?openshift=true&${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?openshift=true&${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/aws-accounts/',\n    [\"region\" /* region */]: 'resource-types/aws-regions/',\n    [\"service\" /* service */]: 'resource-types/aws-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"resource_location\" /* resourceLocation */]: 'resource-types/azure-regions/',\n    [\"subscription_guid\" /* subscriptionGuid */]: 'resource-types/azure-subscription-guids/',\n    [\"service_name\" /* serviceName */]: 'resource-types/azure-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?openshift=true&${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?openshift=true&${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"resource_location\" /* resourceLocation */]: 'resource-types/azure-regions/',\n    [\"subscription_guid\" /* subscriptionGuid */]: 'resource-types/azure-subscription-guids/',\n    [\"service_name\" /* serviceName */]: 'resource-types/azure-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/gcp-accounts/',\n    [\"project\" /* project */]: 'resource-types/gcp-projects/',\n    [\"region\" /* region */]: 'resource-types/gcp-regions/',\n    [\"service\" /* service */]: 'resource-types/gcp-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/gcp-accounts/',\n    [\"project\" /* project */]: 'resource-types/gcp-projects/',\n    [\"region\" /* region */]: 'resource-types/gcp-regions/',\n    [\"service\" /* service */]: 'resource-types/gcp-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/gcp-accounts/',\n    [\"project\" /* project */]: 'resource-types/gcp-projects/',\n    [\"region\" /* region */]: 'resource-types/gcp-regions/',\n    [\"service\" /* service */]: 'resource-types/gcp-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"cluster\" /* cluster */]: 'resource-types/openshift-clusters/',\n    [\"node\" /* node */]: 'resource-types/openshift-nodes/',\n    [\"project\" /* project */]: 'resource-types/openshift-projects/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import { runResource as runAwsOcpResource } from './awsOcpResource';\nimport { runResource as runAwsResource } from './awsResource';\nimport { runResource as runAzureOcpResource } from './azureOcpResource';\nimport { runResource as runAzureResource } from './azureResource';\nimport { runResource as runGcpOcpResource } from './gcpOcpResource';\nimport { runResource as runGcpResource } from './gcpResource';\nimport { runResource as runIbmResource } from './ibmResource';\nimport { runResource as runOcpResource } from './ocpResource';\n// Temporary check until typeahead is implemented for all filters\nexport function isResourceTypeValid(resourcePathsType, resourceType) {\n    let result = false;\n    if (resourcePathsType === \"aws\" /* aws */ ||\n        resourcePathsType === \"aws_ocp\" /* awsOcp */ ||\n        resourcePathsType === \"azure\" /* azure */ ||\n        resourcePathsType === \"azure_ocp\" /* azureOcp */ ||\n        resourcePathsType === \"gcp\" /* gcp */ ||\n        resourcePathsType === \"ibm\" /* ibm */ ||\n        resourcePathsType === \"ocp\" /* ocp */) {\n        switch (resourceType) {\n            case \"account\" /* account */:\n            case \"cluster\" /* cluster */:\n            case \"node\" /* node */:\n            case \"project\" /* project */:\n            case \"region\" /* region */:\n            case \"resource_location\" /* resourceLocation */:\n            case \"service\" /* service */:\n            case \"service_name\" /* serviceName */:\n            case \"subscription_guid\" /* subscriptionGuid */:\n                result = true;\n                break;\n        }\n    }\n    return result;\n}\nexport function runResource(resourcePathsType, resourceType, query) {\n    let forecast;\n    switch (resourcePathsType) {\n        case \"aws\" /* aws */:\n            forecast = runAwsResource(resourceType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            forecast = runAwsOcpResource(resourceType, query);\n            break;\n        case \"azure\" /* azure */:\n            forecast = runAzureResource(resourceType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            forecast = runAzureOcpResource(resourceType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            forecast = runGcpResource(resourceType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            forecast = runGcpOcpResource(resourceType, query);\n            break;\n        case \"ibm\" /* ibm */:\n            forecast = runIbmResource(resourceType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            forecast = runOcpResource(resourceType, query);\n            break;\n    }\n    return forecast;\n}\n","import { i18nInit } from 'components/i18n';\nimport React from 'react';\nimport { I18nextProvider } from 'react-i18next';\nclass I18nProvider extends React.Component {\n    render() {\n        i18nInit.changeLanguage(this.props.locale);\n        return (React.createElement(I18nextProvider, { i18n: i18nInit },\n            React.createElement(React.Fragment, null, this.props.children)));\n    }\n}\nexport { I18nProvider };\n","import i18next from 'i18next';\nimport XHR from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\nconst appPublicPath = process.env.APP_PUBLIC_PATH || '/insights/platform/cost-management';\n// For props see https://react.i18next.com/legacy-v9/i18next-instance\ni18next\n    .use(XHR)\n    .use(initReactI18next)\n    .init({\n    backend: {\n        loadPath: `${appPublicPath}/locales/{{lng}}.json`,\n    },\n    fallbackLng: 'en',\n    ns: ['default'],\n    defaultNS: 'default',\n    react: {\n        useSuspense: false,\n    },\n});\n// Must re-export -- see https://github.com/i18next/react-i18next/issues/898\nexport { i18next as i18nInit };\n","import { Stack, StackItem } from '@patternfly/react-core';\nimport Maintenance from '@redhat-cloud-services/frontend-components/Maintenance';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass MaintenanceStateBase extends React.Component {\n    render() {\n        const { t } = this.props;\n        return (React.createElement(Maintenance, { description: React.createElement(Stack, null,\n                React.createElement(StackItem, null, t('maintenance.empty_state_desc')),\n                React.createElement(StackItem, null,\n                    t('maintenance.empty_state_info'),\n                    \" \",\n                    React.createElement(\"a\", { href: \"https://status.redhat.com\" }, \"status.redhat.com\"),\n                    \".\"),\n                React.createElement(StackItem, null, t('maintenance.empty_state_thanks'))) }));\n    }\n}\nconst MaintenanceState = withTranslation()(MaintenanceStateBase);\nexport { MaintenanceState };\n","import Maintenance from './maintenance';\nexport default Maintenance;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { MaintenanceState } from './maintenanceState';\nconst Maintenance = () => {\n    return (React.createElement(Main, null,\n        React.createElement(MaintenanceState, null)));\n};\nexport default withRouter(Maintenance);\n","import { I18nProvider } from 'components/i18n';\nimport Maintenance from 'pages/state/maintenance';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { createMapStateToProps } from 'store/common';\nimport { Routes, routes } from './routes';\nexport class App extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Todo: Will Insights provide a flag to enable maintenance mode?\n        // https://docs.google.com/document/d/1VLs7vFczWUzyIpH6EUsTEpJugDsjeuh4a_azs6IJbC0/edit#\n        this.state = { locale: 'en', maintenanceMode: false };\n    }\n    componentDidMount() {\n        const { history, location } = this.props;\n        insights.chrome.init();\n        insights.chrome.identifyApp('cost-management');\n        if (location && location.pathname) {\n            insights.chrome.appAction(location.pathname);\n        }\n        this.appNav = insights.chrome.on('APP_NAVIGATION', event => {\n            var _a, _b;\n            let currRoute = routes.find(({ path }) => path.includes(event.navId));\n            /**\n             * Condition is required until new nav changes are propagated to each environment.\n             * Eventually will be avaiable as a hook value to replace event listening.\n             */\n            if (!currRoute && typeof ((_a = event === null || event === void 0 ? void 0 : event.domEvent) === null || _a === void 0 ? void 0 : _a.href) === 'string') {\n                const appPathname = (_b = event === null || event === void 0 ? void 0 : event.domEvent) === null || _b === void 0 ? void 0 : _b.href.replace(this.props.basename.replace(/^\\/beta\\//, '/'), '/');\n                currRoute = routes.find(({ path }) => path.includes(appPathname));\n            }\n            if (event.domEvent && currRoute) {\n                history.push(currRoute.path);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { location } = this.props;\n        if (location && location.pathname !== prevProps.location.pathname) {\n            window.scrollTo(0, 0);\n            insights.chrome.appAction(location.pathname);\n        }\n    }\n    componentWillUnmount() {\n        this.appNav();\n        insights.chrome.appAction(undefined);\n    }\n    render() {\n        const { maintenanceMode } = this.state;\n        const route = maintenanceMode ? React.createElement(Maintenance, null) : React.createElement(Routes, null);\n        return React.createElement(I18nProvider, { locale: this.state.locale }, route);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = { history };\nexport default compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(App);\n","export const parseApiError = error => {\n    if (error.response && error.response.data) {\n        if (error.response.data.Error) {\n            return error.response.data.Error;\n        }\n        if (error.response.data.errors) {\n            return error.response.data.errors.map(er => `${er.source}: ${er.detail}`).join(', ');\n        }\n    }\n    else if (error.message) {\n        return error.message;\n    }\n    return 'unknown';\n};\n","import React from 'react';\nexport function asyncComponent(loader) {\n    let LoadedComponent = null;\n    class Async extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                isLoading: !LoadedComponent,\n            };\n        }\n        componentDidMount() {\n            if (!this.state.isLoading) {\n                return;\n            }\n            loader().then(Comp => {\n                LoadedComponent = Comp.default ? Comp.default : Comp;\n                this.setState({ isLoading: false });\n            });\n        }\n        render() {\n            const { isLoading } = this.state;\n            return isLoading ? null : React.createElement(LoadedComponent, Object.assign({}, this.props));\n        }\n    }\n    return Async;\n}\n","import { asyncComponent } from './asyncComponent';\nexport default asyncComponent;\n","import asyncComponent from 'components/async/asyncComponent';\nimport React from 'react';\nconst InactiveSources = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/sources/inactiveSources'));\nconst Permissions = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/async/permissionsComponent'));\n// Permissions component wrapper for AsyncComponent\nexport function permissionsComponent(AysncComponent) {\n    class PermissionsComponent extends React.Component {\n        render() {\n            return (React.createElement(Permissions, null,\n                React.createElement(InactiveSources, Object.assign({}, this.props)),\n                React.createElement(AysncComponent, Object.assign({}, this.props))));\n        }\n    }\n    return PermissionsComponent;\n}\n","import { asyncComponent } from 'components/async/asyncComponent/asyncComponent';\nimport { permissionsComponent } from 'components/async/permissionsComponent/permissionsComponent';\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nconst NotFound = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'pages/state/notFound'));\nconst AwsBreakdown = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ 'pages/views/details/awsBreakdown'));\nconst AwsDetails = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ 'pages/views/details/awsDetails'));\nconst AzureBreakdown = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/details/azureBreakdown'));\nconst AzureDetails = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/details/azureDetails'));\nconst Explorer = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/explorer/explorer'));\nconst GcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ 'pages/views/details/gcpBreakdown'));\nconst GcpDetails = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ 'pages/views/details/gcpDetails'));\nconst IbmBreakdown = asyncComponent(() => import(/* webpackChunkName: \"ibm\" */ 'pages/views/details/ibmBreakdown'));\nconst IbmDetails = asyncComponent(() => import(/* webpackChunkName: \"ibm\" */ 'pages/views/details/ibmDetails'));\nconst OcpDetails = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ 'pages/views/details/ocpDetails'));\nconst OcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ 'pages/views/details/ocpBreakdown'));\nconst Overview = asyncComponent(() => import(/* webpackChunkName: \"overview\" */ 'pages/views/overview'));\nconst CostModelsDetails = asyncComponent(() => import(/* webpackChunkName: \"costModels\" */ 'pages/costModels/costModelsDetails'));\n// import(/* webpackChunkName: \"costModels\" */ './pages/costModels/costModelList')\nconst CostModel = asyncComponent(() => import(/* webpackChunkName: \"costModel\" */ 'pages/costModels/costModel'));\n// For syncing with permissions\nconst paths = {\n    awsDetails: '/aws',\n    awsDetailsBreakdown: '/aws/breakdown',\n    azureDetails: '/azure',\n    azureDetailsBreakdown: '/azure/breakdown',\n    costModels: '/cost-models',\n    explorer: '/explorer',\n    gcpDetails: '/gcp',\n    gcpDetailsBreakdown: '/gcp/breakdown',\n    ibmDetails: '/ibm',\n    ibmDetailsBreakdown: '/ibm/breakdown',\n    ocpDetails: '/ocp',\n    ocpDetailsBreakdown: '/ocp/breakdown',\n    overview: '/',\n};\nconst routes = [\n    {\n        path: paths.overview,\n        labelKey: 'cost_management_overview',\n        component: permissionsComponent(Overview),\n        exact: true,\n    },\n    {\n        path: paths.costModels,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModelsDetails),\n        exact: true,\n    },\n    {\n        path: `${paths.costModels}/:uuid`,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModel),\n        exact: true,\n    },\n    {\n        path: paths.awsDetails,\n        labelKey: 'navigation.aws_details',\n        component: permissionsComponent(AwsDetails),\n        exact: true,\n    },\n    {\n        path: paths.awsDetailsBreakdown,\n        labelKey: 'navigation.aws_details_breakdown',\n        component: permissionsComponent(AwsBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.azureDetails,\n        labelKey: 'navigation.azure_details',\n        component: permissionsComponent(AzureDetails),\n        exact: true,\n    },\n    {\n        path: paths.azureDetailsBreakdown,\n        labelKey: 'navigation.azure_details_breakdown',\n        component: permissionsComponent(AzureBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.explorer,\n        labelKey: 'navigation.explorer',\n        component: permissionsComponent(Explorer),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetails,\n        labelKey: 'navigation.gcp_details',\n        component: permissionsComponent(GcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetailsBreakdown,\n        labelKey: 'navigation.gcp_details_breakdown',\n        component: permissionsComponent(GcpBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.ibmDetails,\n        labelKey: 'navigation.ibm_details',\n        component: permissionsComponent(IbmDetails),\n        exact: true,\n    },\n    {\n        path: paths.ibmDetailsBreakdown,\n        labelKey: 'navigation.ibm_details_breakdown',\n        component: permissionsComponent(IbmBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetails,\n        labelKey: 'navigation.ocp_details',\n        component: permissionsComponent(OcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetailsBreakdown,\n        labelKey: 'navigation.ocp_details_breakdown',\n        component: permissionsComponent(OcpBreakdown),\n        exact: true,\n    },\n];\nconst Routes = () => (React.createElement(Switch, null,\n    routes.map(route => (React.createElement(Route, Object.assign({ key: route.path }, route)))),\n    React.createElement(Route, { component: NotFound })));\nexport { paths, Routes, routes };\n","export const awsCostOverviewStateKey = 'awsCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['region', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['region', 'account', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget } from './awsCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function awsCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { awsCostOverviewStateKey } from './awsCostOverviewCommon';\nexport const selectAwsCostOverviewState = (state) => state[awsCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAwsCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsCostOverviewState(state).currentWidgets;\n","export const azureCostOverviewStateKey = 'azureCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'subscription_guid',\n        showWidgetOnGroupBy: ['resource_location', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'resource_location',\n        showWidgetOnGroupBy: ['subscription_guid', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service_name',\n        showWidgetOnGroupBy: ['resource_location', 'subscription_guid', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget, } from './azureCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function azureCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { azureCostOverviewStateKey } from './azureCostOverviewCommon';\nexport const selectAzureCostOverviewState = (state) => state[azureCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAzureCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureCostOverviewState(state).currentWidgets;\n","export const gcpCostOverviewStateKey = 'gcpCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['project', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['account', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'project', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['project', 'region', 'account', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, projectSummaryWidget, regionSummaryWidget, serviceSummaryWidget, } from './gcpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costWidget.id,\n        accountSummaryWidget.id,\n        projectSummaryWidget.id,\n        serviceSummaryWidget.id,\n        regionSummaryWidget.id,\n    ],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function gcpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { gcpCostOverviewStateKey } from './gcpCostOverviewCommon';\nexport const selectGcpCostOverviewState = (state) => state[gcpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectGcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpCostOverviewState(state).currentWidgets;\n","export const ibmCostOverviewStateKey = 'ibmCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['project', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['account', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'project', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['project', 'region', 'account', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, projectSummaryWidget, regionSummaryWidget, serviceSummaryWidget, } from './ibmCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costWidget.id,\n        accountSummaryWidget.id,\n        projectSummaryWidget.id,\n        serviceSummaryWidget.id,\n        regionSummaryWidget.id,\n    ],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function ibmCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { ibmCostOverviewStateKey } from './ibmCostOverviewCommon';\nexport const selectIbmCostOverviewState = (state) => state[ibmCostOverviewStateKey];\nexport const selectWidgets = (state) => selectIbmCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmCostOverviewState(state).currentWidgets;\n","export const ocpCostOverviewStateKey = 'ocpCostOverview';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const clusterWidget = {\n    id: getId(),\n    cluster: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['project'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cluster\" /* cluster */,\n};\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"cpuUsage\" /* cpuUsage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"memoryUsage\" /* memoryUsage */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['cluster'],\n        usePlaceholder: true,\n    },\n    reportType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { clusterWidget, costWidget, cpuUsageWidget, memoryUsageWidget, projectSummaryWidget, } from './ocpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, clusterWidget.id, projectSummaryWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [clusterWidget.id]: clusterWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { ocpCostOverviewStateKey } from './ocpCostOverviewCommon';\nexport const selectOcpCostOverviewState = (state) => state[ocpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectOcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCostOverviewState(state).currentWidgets;\n","export const awsHistoricalDataStateKey = 'awsHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './awsHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function awsHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { awsHistoricalDataStateKey } from './awsHistoricalDataCommon';\nexport const selectAwsHistoricalDataState = (state) => state[awsHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAwsHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsHistoricalDataState(state).currentWidgets;\n","export const azureHistoricalDataStateKey = 'azureHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './azureHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function azureHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { azureHistoricalDataStateKey } from './azureHistoricalDataCommon';\nexport const selectAzureHistoricalDataState = (state) => state[azureHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAzureHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureHistoricalDataState(state).currentWidgets;\n","export const gcpHistoricalDataStateKey = 'gcpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"trend\" /* trend */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    type: \"trend\" /* trend */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './gcpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function gcpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { gcpHistoricalDataStateKey } from './gcpHistoricalDataCommon';\nexport const selectGcpHistoricalDataState = (state) => state[gcpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectGcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpHistoricalDataState(state).currentWidgets;\n","export const ibmHistoricalDataStateKey = 'ibmHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"trend\" /* trend */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"storage\" /* storage */,\n    type: \"trend\" /* trend */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './ibmHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function ibmHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { ibmHistoricalDataStateKey } from './ibmHistoricalDataCommon';\nexport const selectIbmHistoricalDataState = (state) => state[ibmHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectIbmHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmHistoricalDataState(state).currentWidgets;\n","export const ocpHistoricalDataStateKey = 'ocpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"usage\" /* usage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"usage\" /* usage */,\n};\n","import { costWidget, cpuUsageWidget, memoryUsageWidget } from './ocpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { ocpHistoricalDataStateKey } from './ocpHistoricalDataCommon';\nexport const selectOcpHistoricalDataState = (state) => state[ocpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectOcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpHistoricalDataState(state).currentWidgets;\n","export const expirationMS = 30 * 60 * 1000; // 30 minutes\nexport function createMapStateToProps(mapStateToProps) {\n    return mapStateToProps;\n}\nexport function createMapDispatchToProps(mapDispatchToProps) {\n    return mapDispatchToProps;\n}\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { deleteCostModel as apiDeleteCostModel, fetchCostModels as apiGetCostModels, updateCostModel as apiUpdateCostModel, } from 'api/costModels';\nimport i18next from 'i18next';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/costModels/filter')();\nexport const selectCostModel = createAction('select/costModels')();\nexport const resetCostModel = createAction('reset/costModels')();\nexport const setCostModelDialog = createAction('display/costModels/dialog')();\nexport const { request: fetchCostModelsRequest, success: fetchCostModelsSuccess, failure: fetchCostModelsFailure, } = createAsyncAction('fetch/costModels/request', 'fetch/costModels/success', 'fetch/costModels/failure')();\nexport const fetchCostModels = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchCostModelsRequest());\n        return apiGetCostModels(query)\n            .then(res => {\n            dispatch(fetchCostModelsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: updateCostModelsRequest, success: updateCostModelsSuccess, failure: updateCostModelsFailure, } = createAsyncAction('update/costModels/request', 'update/costModels/success', 'update/costModels/failure')();\nexport const updateCostModel = (uuid, request, dialog = null) => {\n    return (dispatch) => {\n        dispatch(updateCostModelsRequest());\n        return apiUpdateCostModel(uuid, request)\n            .then(res => {\n            dispatch(updateCostModelsSuccess(res));\n            if (dialog !== null) {\n                fetchCostModels(`uuid=${uuid}`)(dispatch);\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(updateCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: deleteCostModelsRequest, success: deleteCostModelsSuccess, failure: deleteCostModelsFailure, } = createAsyncAction('delete/costModels/request', 'delete/costModels/success', 'delete/costModels/failure')();\nexport const deleteCostModel = (uuid, dialog = '', history = null) => {\n    return (dispatch) => {\n        dispatch(deleteCostModelsRequest());\n        return apiDeleteCostModel(uuid)\n            .then(() => {\n            dispatch(deleteCostModelsSuccess());\n            dispatch(resetCostModel());\n            fetchCostModels()(dispatch);\n            if (dialog !== null) {\n                if (dialog === 'deleteCostModel' && history) {\n                    history.push('/cost-models');\n                }\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(deleteCostModelsFailure(err));\n        });\n    };\n};\nexport const redirectToCostModelFromSourceUuid = (source_uuid, history) => {\n    return (dispatch) => {\n        return apiGetCostModels(`source_uuid=${source_uuid}`)\n            .then(res => {\n            const uuid = res.data.data[0].uuid;\n            history.push(`/cost-models/${uuid}`);\n        })\n            .catch(() => {\n            dispatch(addNotification({\n                title: i18next.t('cost_models_router.error_title'),\n                description: i18next.t('cost_models_router.server_error'),\n                variant: 'danger',\n                dismissable: true,\n            }));\n        });\n    };\n};\n","import { getType } from 'typesafe-actions';\nimport { deleteCostModelsFailure, deleteCostModelsRequest, deleteCostModelsSuccess, fetchCostModelsFailure, fetchCostModelsRequest, fetchCostModelsSuccess, resetCostModel, selectCostModel, setCostModelDialog, updateCostModelsFailure, updateCostModelsRequest, updateCostModelsSuccess, updateFilterToolbar, } from './actions';\nexport const stateKey = 'costModels';\nexport const defaultState = {\n    costModels: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n    isDialogOpen: {\n        deleteRate: false,\n        deleteSource: false,\n        addSource: false,\n        addRate: false,\n        updateRate: false,\n        deleteCostModel: false,\n        updateCostModel: false,\n        deleteMarkup: false,\n        updateMarkup: false,\n        deleteDistribution: false,\n        updateDistribution: false,\n        createWizard: false,\n    },\n    dialogData: null,\n    update: {\n        error: null,\n        status: 0 /* none */,\n        current: null,\n    },\n    delete: {\n        error: null,\n        status: 0 /* none */,\n    },\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(resetCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: null }) });\n        case getType(selectCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: action.payload }) });\n        case getType(updateCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 1 /* inProgress */ }) });\n        case getType(updateCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { update: {\n                    error: null,\n                    status: 2 /* complete */,\n                    current: action.payload.data,\n                } });\n        case getType(updateCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 2 /* complete */, error: action.payload }) });\n        case getType(fetchCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', status: 2 /* complete */, error: null, costModels: action.payload.data });\n        case getType(fetchCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(deleteCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { delete: Object.assign(Object.assign({}, state.delete), { status: 1 /* inProgress */ }) });\n        case getType(deleteCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    error: null,\n                    status: 2 /* complete */,\n                } });\n        case getType(deleteCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    status: 2 /* complete */,\n                    error: action.payload,\n                } });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        case getType(setCostModelDialog):\n            return Object.assign(Object.assign({}, state), { isDialogOpen: Object.assign(Object.assign({}, state.isDialogOpen), { [action.payload.name]: action.payload.isOpen }), dialogData: action.payload.meta });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const costModelsState = (state) => state[stateKey];\nexport const costModels = (state) => {\n    const cms = costModelsState(state).costModels;\n    if (cms) {\n        return cms.data;\n    }\n    return [];\n};\nexport const isDialogOpen = (state) => {\n    const dialogs = costModelsState(state).isDialogOpen;\n    return (type) => {\n        switch (type) {\n            case 'markup': {\n                const { deleteMarkup, updateMarkup } = dialogs;\n                return { deleteMarkup, updateMarkup };\n            }\n            case 'distribution': {\n                const { deleteDistribution, updateDistribution } = dialogs;\n                return { deleteDistribution, updateDistribution };\n            }\n            case 'costmodel': {\n                const { deleteCostModel, updateCostModel, createWizard } = dialogs;\n                return { deleteCostModel, updateCostModel, createWizard };\n            }\n            case 'sources': {\n                const { deleteSource, addSource } = dialogs;\n                return { deleteSource, addSource };\n            }\n            case 'rate': {\n                const { addRate, updateRate, deleteRate } = dialogs;\n                return { addRate, updateRate, deleteRate };\n            }\n            default:\n                return costModelsState(state).isDialogOpen;\n        }\n    };\n};\nexport const status = (state) => costModelsState(state).status;\nexport const error = (state) => costModelsState(state).error;\nexport const stateName = (state) => {\n    const costStatus = status(state);\n    const costError = error(state);\n    const costData = costModels(state);\n    const costQuery = query(state);\n    if (costStatus !== 2 /* complete */) {\n        return 'loading';\n    }\n    if (costError !== null) {\n        return 'failure';\n    }\n    if (costData.length > 0) {\n        return 'success';\n    }\n    const hasNoFilters = Object.keys(costQuery).every(key => {\n        switch (key) {\n            case 'description':\n            case 'name':\n            case 'source_type':\n                return costQuery[key] === null;\n            default:\n                return true;\n        }\n    });\n    if (hasNoFilters) {\n        return 'empty';\n    }\n    return 'no-match';\n};\nexport const currentFilterValue = (state) => costModelsState(state).currentFilterValue;\nexport const currentFilterType = (state) => costModelsState(state).currentFilterType;\nexport const query = selectQuery((state) => costModelsState(state).costModels, ['ordering', 'name', 'source_type', 'description', 'offset', 'limit']);\nexport const pagination = selectPagination((state) => costModelsState(state).costModels);\nexport const dialogData = (state) => costModelsState(state).dialogData;\nexport const updateProcessing = (state) => costModelsState(state).update.status === 1 /* inProgress */;\nexport const updateError = (state) => {\n    const updateErr = costModelsState(state).update.error;\n    if (updateErr === null) {\n        return '';\n    }\n    return parseApiError(updateErr);\n};\nexport const selected = (state) => {\n    return costModelsState(state).update.current;\n};\nexport const deleteProcessing = (state) => costModelsState(state).delete.status === 1 /* inProgress */;\nexport const deleteError = (state) => {\n    const err = costModelsState(state).delete.error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\n","import { getQuery } from 'api/queries/awsQuery';\nexport const awsDashboardStateKey = 'awsDashboard';\nexport const awsDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsDashboardTabFilters = Object.assign(Object.assign({}, awsDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = awsDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { awsDashboardDefaultFilters, awsDashboardStateKey, awsDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsDashboardCommon';\nexport const selectAwsDashboardState = (state) => state[awsDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'aws_dashboard.compute_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.instanceType,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'aws_dashboard.cost_title',\n    forecastPathsType: \"aws\" /* aws */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.awsDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'aws_dashboard.daily_cost_trend_title',\n        titleKey: 'aws_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './awsDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/awsQuery';\nexport const awsOcpDashboardStateKey = 'awsOcpDashboard';\nexport const awsOcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsOcpDashboardTabFilters = Object.assign(Object.assign({}, awsOcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = awsOcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsOcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { awsOcpDashboardDefaultFilters, awsOcpDashboardStateKey, awsOcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsOcpDashboardCommon';\nexport const selectAwsOcpDashboardState = (state) => state[awsOcpDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsOcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsOcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsOcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsOcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'aws_ocp_dashboard.compute_title',\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.instanceType,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'aws_ocp_dashboard.cost_title',\n    forecastPathsType: \"aws_ocp\" /* awsOcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'aws_ocp_dashboard.daily_cost_trend_title',\n        titleKey: 'aws_ocp_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.services,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonOcpFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonOcpFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.services,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.services,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsOcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './awsOcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsOcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureDashboardStateKey = 'azureDashboard';\nexport const azureDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureDashboardTabFilters = Object.assign(Object.assign({}, azureDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ && widget.tabsFilter && widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureDashboardDefaultFilters, azureDashboardStateKey, azureDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureDashboardCommon';\nexport const selectAzureDashboardState = (state) => state[azureDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'azure_dashboard.cost_title',\n    forecastPathsType: \"azure\" /* azure */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.azureDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'azure_dashboard.daily_cost_trend_title',\n        titleKey: 'azure_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: 'azure_dashboard.compute_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.instanceType,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureOcpDashboardStateKey = 'azureOcpDashboard';\nexport const azureOcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureOcpDashboardTabFilters = Object.assign(Object.assign({}, azureOcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureOcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureOcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ && widget.tabsFilter && widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureOcpDashboardDefaultFilters, azureOcpDashboardStateKey, azureOcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureOcpDashboardCommon';\nexport const selectAzureOcpDashboardState = (state) => state[azureOcpDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureOcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureOcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureOcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureOcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'azure_ocp_dashboard.cost_title',\n    forecastPathsType: \"azure_ocp\" /* azureOcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'azure_ocp_dashboard.daily_cost_trend_title',\n        titleKey: 'azure_ocp_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.service_names,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.service_names,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.service_names,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: 'azure_ocp_dashboard.compute_title',\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.instanceType,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureOcpDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureOcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureOcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/gcpQuery';\nexport const gcpDashboardStateKey = 'gcpDashboard';\nexport const gcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const gcpDashboardTabFilters = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = gcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = gcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { gcpDashboardDefaultFilters, gcpDashboardStateKey, gcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './gcpDashboardCommon';\nexport const selectGcpDashboardState = (state) => state[gcpDashboardStateKey];\nexport const selectWidgets = (state) => selectGcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, gcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './gcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('gcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'gcp_dashboard.compute_title',\n    forecastPathsType: \"gcp\" /* gcp */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.instanceType,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'gcp_dashboard.cost_title',\n    forecastPathsType: \"gcp\" /* gcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.gcpDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'gcp_dashboard.daily_cost_trend_title',\n        titleKey: 'gcp_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './gcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './gcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function gcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/gcpQuery';\nexport const gcpOcpDashboardStateKey = 'gcpOcpDashboard';\nexport const gcpOcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const gcpOcpDashboardTabFilters = Object.assign(Object.assign({}, gcpOcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = gcpOcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = gcpOcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { gcpOcpDashboardDefaultFilters, gcpOcpDashboardStateKey, gcpOcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './gcpOcpDashboardCommon';\nexport const selectGcpOcpDashboardState = (state) => state[gcpOcpDashboardStateKey];\nexport const selectWidgets = (state) => selectGcpOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, gcpOcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, gcpOcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './gcpOcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('gcpOcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'gcp_ocp_dashboard.compute_title',\n    forecastPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.instanceType,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'gcp_ocp_dashboard.cost_title',\n    forecastPathsType: \"gcp_ocp\" /* gcpOcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'gcp_ocp_dashboard.daily_cost_trend_title',\n        titleKey: 'gcp_ocp_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.services,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.services,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.services,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './gcpOcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './gcpOcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function gcpOcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ibmQuery';\nexport const ibmDashboardStateKey = 'ibmDashboard';\nexport const ibmDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ibmDashboardTabFilters = Object.assign(Object.assign({}, ibmDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ibmDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ibmDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ibmDashboardDefaultFilters, ibmDashboardStateKey, ibmDashboardTabFilters, } from './ibmDashboardCommon';\nexport const selectIbmDashboardState = (state) => state[ibmDashboardStateKey];\nexport const selectWidgets = (state) => selectIbmDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, ibmDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ibmDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ibmDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ibmDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'ibm_dashboard.compute_title',\n    forecastPathsType: \"gcp\" /* ibm */,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.instanceType,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ibm_dashboard.cost_title',\n    forecastPathsType: \"gcp\" /* ibm */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.ibmDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ibm_dashboard.daily_cost_trend_title',\n        titleKey: 'ibm_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ibmDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './ibmDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function ibmDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpCloudQuery';\nexport const ocpCloudDashboardStateKey = 'ocpCloudDashboard';\nexport const ocpCloudDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpCloudDashboardTabFilters = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpCloudDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpCloudDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpCloudDashboardDefaultFilters, ocpCloudDashboardStateKey, ocpCloudDashboardTabFilters, } from './ocpCloudDashboardCommon';\nexport const selectOcpCloudDashboardState = (state) => state[ocpCloudDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpCloudDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCloudDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpCloudDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpCloudDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpCloudDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_cloud_dashboard.cost_title',\n    forecastPathsType: \"ocp_cloud\" /* ocpCloud */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_cloud_dashboard.daily_cost_trend_title',\n        titleKey: 'ocp_cloud_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\n// Cloud widgets\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'ocp_cloud_dashboard.compute_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'dashboard.database_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB' +\n            'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'dashboard.network_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway' +\n            'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'dashboard.cumulative_cost_comparison',\n        type: 0 /* rolling */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'dashboard.storage_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'dashboard.daily_usage_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"trend\" /* trend */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpCloudDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './ocpCloudDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function ocpCloudDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpQuery';\nexport const ocpDashboardStateKey = 'ocpDashboard';\nexport const ocpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpDashboardTabFilters = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpDashboardDefaultFilters, ocpDashboardStateKey, ocpDashboardTabFilters, } from './ocpDashboardCommon';\nexport const selectOcpDashboardState = (state) => state[ocpDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_dashboard.cost_title',\n    forecastPathsType: \"ocp\" /* ocp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        showTooltip: true,\n        viewAllPath: paths.ocpDetails,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedForecastInfrastructureItem: \"infrastructure\" /* infrastructure */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_dashboard.daily_cost_trend_title',\n        titleKey: 'ocp_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp.cpu_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp.memory_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp.volume_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","export const selectPagination = (stateProjector) => {\n    return (state) => {\n        return getPagination(stateProjector(state));\n    };\n};\nexport const getPagination = (payload) => {\n    if (payload === null) {\n        return {\n            page: 1,\n            perPage: 1,\n            count: 0,\n        };\n    }\n    let urlParams = null;\n    if (payload.links.next !== null) {\n        urlParams = new URLSearchParams(payload.links.next.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) - limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    if (payload.links.previous !== null) {\n        urlParams = new URLSearchParams(payload.links.previous.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) + limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    urlParams = new URLSearchParams(payload.links.first.split('?')[1]);\n    return {\n        page: 1,\n        perPage: Number(urlParams.get('limit')),\n        count: payload.meta.count,\n    };\n};\n","export const selectQuery = (stateProjector, keys) => {\n    return (state) => {\n        const params = getQuery(stateProjector(state));\n        return keys.reduce((acc, curr) => {\n            return Object.assign(Object.assign({}, acc), { [curr]: params.get(curr) });\n        }, {});\n    };\n};\nconst getQuery = (payload) => {\n    if (payload === null) {\n        return new URLSearchParams();\n    }\n    const [, search] = payload.links.first.split('?');\n    return new URLSearchParams(search);\n};\n","export const exportStateKey = 'export';\nexport function getExportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}-${reportType}--${query}`;\n}\n","import { exportStateKey, getExportId } from './exportCommon';\nexport const selectExportState = (state) => state[exportStateKey];\nexport const selectExport = (state, reportPathsType, reportType, query) => selectExportState(state).byId.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportFetchStatus = (state, reportPathsType, reportType, query) => selectExportState(state).fetchStatus.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportError = (state, reportPathsType, reportType, query) => selectExportState(state).errors.get(getExportId(reportPathsType, reportType, query));\n","import { runExport } from 'api/exports/exportUtils';\nimport { getExportId } from 'store/exports/exportCommon';\nimport { selectExport, selectExportFetchStatus } from 'store/exports/exportSelectors';\nimport { createAction } from 'typesafe-actions';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchExportRequest = createAction('report/request')();\nexport const fetchExportSuccess = createAction('report/success')();\nexport const fetchExportFailure = createAction('report/failure')();\nexport function exportReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isExportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getExportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchExportRequest(meta));\n        runExport(reportPathsType, reportType, query)\n            .then(res => {\n            dispatch(fetchExportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchExportFailure(err, meta));\n        });\n    };\n}\nfunction isExportExpired(state, reportPathsType, reportType, query) {\n    const report = selectExport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectExportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runExport as runAwsExport } from './awsExport';\nimport { runExport as runAwsOcpExport } from './awsOcpExport';\nimport { runExport as runAzureExport } from './azureExport';\nimport { runExport as runAzureOcpExport } from './azureOcpExport';\nimport { runExport as runGcpExport } from './gcpExport';\nimport { runExport as runGcpOcpExport } from './gcpOcpExport';\nimport { runExport as runIbmExport } from './ibmExport';\nimport { runExport as runOcpCloudExport } from './ocpCloudExport';\nimport { runExport as runOcpExport } from './ocpExport';\nexport function runExport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsExport(reportType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            report = runAwsOcpExport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureExport(reportType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            report = runAzureOcpExport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpExport(reportType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            report = runGcpOcpExport(reportType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            report = runIbmExport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudExport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpExport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { ReportTypePaths } from 'api/reports/awsReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/awsOcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/azureReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/azureOcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/gcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/gcpOcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ibmReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpCloudReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchExportFailure, fetchExportRequest, fetchExportSuccess } from './exportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function exportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchExportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchExportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, {\n                    data: action.payload,\n                    timeRequested: Date.now(),\n                }), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchExportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/gcp/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/gcp/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/ibm/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/all/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/costs/',\n    [\"infrastructure\" /* infrastructure */]: 'forecasts/openshift/costs/',\n    [\"supplementary\" /* supplementary */]: 'forecasts/openshift/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","export const forecastStateKey = 'forecast';\nexport function getForecastId(forecastPathsType, forecastType, query) {\n    return `${forecastPathsType}--${forecastType}--${query}`;\n}\n","import { forecastStateKey, getForecastId } from './forecastCommon';\nexport const selectForecastState = (state) => state[forecastStateKey];\nexport const selectForecast = (state, forecastPathsType, forecastType, query) => selectForecastState(state).byId.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastFetchStatus = (state, forecastPathsType, forecastType, query) => selectForecastState(state).fetchStatus.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastError = (state, forecastPathsType, forecastType, query) => selectForecastState(state).errors.get(getForecastId(forecastPathsType, forecastType, query));\n","import { runForecast } from 'api/forecasts/forecastUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getForecastId } from './forecastCommon';\nimport { selectForecast, selectForecastFetchStatus } from './forecastSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchForecastRequest = createAction('forecast/request')();\nexport const fetchForecastSuccess = createAction('forecast/success')();\nexport const fetchForecastFailure = createAction('forecast/failure')();\nexport function fetchForecast(forecastPathsType, forecastType, query) {\n    return (dispatch, getState) => {\n        if (!isForecastExpired(getState(), forecastPathsType, forecastType, query)) {\n            return;\n        }\n        const meta = {\n            forecastId: getForecastId(forecastPathsType, forecastType, query),\n        };\n        dispatch(fetchForecastRequest(meta));\n        runForecast(forecastPathsType, forecastType, query)\n            .then(res => {\n            dispatch(fetchForecastSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchForecastFailure(err, meta));\n        });\n    };\n}\nfunction isForecastExpired(state, forecastPathsType, forecastType, query) {\n    const forecast = selectForecast(state, forecastPathsType, forecastType, query);\n    const fetchStatus = selectForecastFetchStatus(state, forecastPathsType, forecastType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!forecast) {\n        return true;\n    }\n    const now = Date.now();\n    return now > forecast.timeRequested + expirationMS;\n}\n","import { runForecast as runAwsForecast } from './awsForecast';\nimport { runForecast as runAwsOcpForecast } from './awsOcpForecast';\nimport { runForecast as runAzureForecast } from './azureForecast';\nimport { runForecast as runAzureOcpForecast } from './azureOcpForecast';\nimport { runForecast as runGcpForecast } from './gcpForecast';\nimport { runForecast as runGcpOcpForecast } from './gcpOcpForecast';\nimport { runForecast as runIbmForecast } from './ibmForecast';\nimport { runForecast as runOcpCloudForecast } from './ocpCloudForecast';\nimport { runForecast as runOcpForecast } from './ocpForecast';\nexport function runForecast(forecastPathsType, forecastType, query) {\n    let forecast;\n    switch (forecastPathsType) {\n        case \"aws\" /* aws */:\n            forecast = runAwsForecast(forecastType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            forecast = runAwsOcpForecast(forecastType, query);\n            break;\n        case \"azure\" /* azure */:\n            forecast = runAzureForecast(forecastType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            forecast = runAzureOcpForecast(forecastType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            forecast = runGcpForecast(forecastType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            forecast = runGcpOcpForecast(forecastType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            forecast = runIbmForecast(forecastType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            forecast = runOcpForecast(forecastType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            forecast = runOcpCloudForecast(forecastType, query);\n            break;\n    }\n    return forecast;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchForecastFailure, fetchForecastRequest, fetchForecastSuccess } from './forecastActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function forecastReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchForecastRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.forecastId, 1 /* inProgress */) });\n        case getType(fetchForecastSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.forecastId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.forecastId, null) });\n        case getType(fetchForecastFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.forecastId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpQuery';\nexport const ocpInfrastructureDashboardStateKey = 'ocpInfrastructureDashboard';\nexport const ocpInfrastructureDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpInfrastructureDashboardTabFilters = Object.assign(Object.assign({}, ocpInfrastructureDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpInfrastructureDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpInfrastructureDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpInfrastructureDashboardDefaultFilters, ocpInfrastructureDashboardStateKey, ocpInfrastructureDashboardTabFilters, } from './ocpInfrastructureDashboardCommon';\nexport const selectOcpInfrastructureDashboardState = (state) => state[ocpInfrastructureDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpInfrastructureDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpInfrastructureDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpInfrastructureDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpInfrastructureDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpInfrastructureDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpInfrastructureDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_infrastructure_dashboard.cost_title',\n    forecastPathsType: \"ocp\" /* ocp */,\n    forecastType: \"infrastructure\" /* infrastructure */,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    trend: {\n        computedForecastItem: \"infrastructure\" /* infrastructure */,\n        computedReportItem: \"infrastructure\" /* infrastructure */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_infrastructure_dashboard.daily_cost_trend_title',\n        showInfrastructureLabel: true,\n        titleKey: 'ocp_infrastructure_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp.cpu_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"none\" /* none */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpInfrastructureDashboardTab.projects,\n    //   OcpInfrastructureDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp.memory_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpInfrastructureDashboardTab.projects,\n    //   OcpInfrastructureDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp.volume_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"none\" /* none */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpInfrastructureDashboardTab.projects,\n    //   OcpInfrastructureDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpInfrastructureDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpInfrastructureDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpInfrastructureDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpQuery';\nexport const ocpSupplementaryDashboardStateKey = 'ocpSupplementaryDashboard';\nexport const ocpSupplementaryDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpSupplementaryDashboardTabFilters = Object.assign(Object.assign({}, ocpSupplementaryDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpSupplementaryDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpSupplementaryDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpSupplementaryDashboardDefaultFilters, ocpSupplementaryDashboardStateKey, ocpSupplementaryDashboardTabFilters, } from './ocpSupplementaryDashboardCommon';\nexport const selectOcpSupplementaryDashboardState = (state) => state[ocpSupplementaryDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpSupplementaryDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpSupplementaryDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpSupplementaryDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpSupplementaryDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpSupplementaryDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpSupplementaryDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_supplementary_dashboard.cost_title',\n    forecastPathsType: \"ocp\" /* ocp */,\n    forecastType: \"supplementary\" /* supplementary */,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    trend: {\n        computedForecastItem: \"supplementary\" /* supplementary */,\n        computedReportItem: \"supplementary\" /* supplementary */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_supplementary_dashboard.daily_cost_trend_title',\n        showSupplementaryLabel: true,\n        titleKey: 'ocp_supplementary_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp.cpu_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"none\" /* none */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpSupplementaryDashboardTab.projects,\n    //   OcpSupplementaryDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp.memory_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpSupplementaryDashboardTab.projects,\n    //   OcpSupplementaryDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp.volume_usage_and_requests',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"none\" /* none */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpSupplementaryDashboardTab.projects,\n    //   OcpSupplementaryDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpSupplementaryDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpSupplementaryDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpSupplementaryDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpCloudQuery';\nexport const ocpUsageDashboardStateKey = 'ocpUsageDashboard';\nexport const ocpUsageDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpUsageDashboardTabFilters = Object.assign(Object.assign({}, ocpUsageDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpUsageDashboardDefaultFilters) {\n    const query = {\n        filter,\n    };\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpUsageDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpUsageDashboardDefaultFilters, ocpUsageDashboardStateKey, ocpUsageDashboardTabFilters, } from './ocpUsageDashboardCommon';\nexport const selectOcpUsageDashboardState = (state) => state[ocpUsageDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpUsageDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpUsageDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpUsageDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpUsageDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpUsageDashboardSelectors';\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpUsageDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.cost_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'cost',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedReportItem: \"infrastructure\" /* infrastructure */,\n        computedReportItemValue: \"usage\" /* usage */,\n        formatOptions: {},\n        titleKey: 'ocp_usage_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.cpu_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"usage\" /* usage */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.memory_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"usage\" /* usage */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.volume_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp.requests',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'dashboard.usage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp.daily_usage_request_comparison',\n        type: 1 /* daily */,\n    },\n    chartType: \"usage\" /* usage */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpUsageDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpUsageDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpUsageDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchPriceListFailure, fetchPriceListRequest, fetchPriceListSuccess } from './actions';\nexport const stateKey = 'priceList';\nexport const defaultState = {\n    rates: new Map(),\n    error: new Map(),\n    status: new Map(),\n};\nexport function reducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchPriceListRequest):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.payload.providerUuid, 1 /* inProgress */) });\n        case getType(fetchPriceListSuccess):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */), rates: new Map(state.rates).set(action.meta.providerUuid, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), error: new Map(state.error).set(action.meta.providerUuid, null) });\n        case getType(fetchPriceListFailure):\n            return Object.assign(Object.assign({}, state), { error: new Map(state.error).set(action.meta.providerUuid, action.payload), status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */) });\n        default:\n            return state;\n    }\n}\n","import { fetchRate } from 'api/rates';\nimport { expirationMS } from 'store/common';\nimport { createAction } from 'typesafe-actions';\nimport { cachedRates, status } from './selectors';\nexport const fetchPriceListRequest = createAction('priceList/request')();\nexport const fetchPriceListSuccess = createAction('priceList/success')();\nexport const fetchPriceListFailure = createAction('priceList/failure')();\nfunction isExpired(state, meta) {\n    const cachedData = cachedRates(state, meta.providerUuid);\n    const reqStatus = status(state, meta.providerUuid);\n    if (reqStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!cachedData) {\n        return true;\n    }\n    const now = Date.now();\n    return now > cachedData.timeRequested + expirationMS;\n}\nexport function fetchPriceList(providerUuid) {\n    const meta = { providerUuid };\n    return (dispatch, getState) => {\n        if (!isExpired(getState(), meta)) {\n            return;\n        }\n        dispatch(fetchPriceListRequest(meta));\n        return fetchRate(providerUuid)\n            .then(res => {\n            dispatch(fetchPriceListSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchPriceListFailure(err, meta));\n        });\n    };\n}\n","import { createAction } from 'typesafe-actions';\nexport const closeProvidersModal = createAction('ui/close_providers_modal')();\nexport const openProvidersModal = createAction('ui/open_providers_modal')();\nexport const toggleSidebar = createAction('ui/toggle_sidebar')();\n","import { getType } from 'typesafe-actions';\nimport { closeProvidersModal, openProvidersModal, toggleSidebar } from './uiActions';\nexport const defaultState = {\n    isExportModalOpen: false,\n    isProvidersModalOpen: false,\n    isSidebarOpen: false,\n};\nexport const stateKey = 'ui';\nexport function uiReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(closeProvidersModal):\n            return Object.assign(Object.assign({}, state), { isProvidersModalOpen: false });\n        case getType(openProvidersModal):\n            return Object.assign(Object.assign({}, state), { isProvidersModalOpen: true });\n        case getType(toggleSidebar):\n            return Object.assign(Object.assign({}, state), { isSidebarOpen: !state.isSidebarOpen });\n        default:\n            return state;\n    }\n}\n","import { notifications } from '@redhat-cloud-services/frontend-components-notifications';\nimport { combineReducers } from 'redux';\nimport { awsCostOverviewReducer, awsCostOverviewStateKey } from 'store/breakdown/costOverview/awsCostOverview';\nimport { azureCostOverviewReducer, azureCostOverviewStateKey } from 'store/breakdown/costOverview/azureCostOverview';\nimport { gcpCostOverviewReducer, gcpCostOverviewStateKey } from 'store/breakdown/costOverview/gcpCostOverview';\nimport { ibmCostOverviewReducer, ibmCostOverviewStateKey } from 'store/breakdown/costOverview/ibmCostOverview';\nimport { ocpCostOverviewReducer, ocpCostOverviewStateKey } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { awsHistoricalDataReducer, awsHistoricalDataStateKey } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { azureHistoricalDataReducer, azureHistoricalDataStateKey, } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { gcpHistoricalDataReducer, gcpHistoricalDataStateKey } from 'store/breakdown/historicalData/gcpHistoricalData';\nimport { ibmHistoricalDataReducer, ibmHistoricalDataStateKey } from 'store/breakdown/historicalData/ibmHistoricalData';\nimport { ocpHistoricalDataReducer, ocpHistoricalDataStateKey } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { costModelsReducer, costModelsStateKey } from 'store/costModels';\nimport { awsDashboardReducer, awsDashboardStateKey } from 'store/dashboard/awsDashboard';\nimport { awsOcpDashboardReducer, awsOcpDashboardStateKey } from 'store/dashboard/awsOcpDashboard';\nimport { azureDashboardReducer, azureDashboardStateKey } from 'store/dashboard/azureDashboard';\nimport { azureOcpDashboardReducer, azureOcpDashboardStateKey } from 'store/dashboard/azureOcpDashboard';\nimport { gcpDashboardReducer, gcpDashboardStateKey } from 'store/dashboard/gcpDashboard';\nimport { gcpOcpDashboardReducer, gcpOcpDashboardStateKey } from 'store/dashboard/gcpOcpDashboard';\nimport { ibmDashboardReducer, ibmDashboardStateKey } from 'store/dashboard/ibmDashboard';\nimport { ocpCloudDashboardReducer, ocpCloudDashboardStateKey } from 'store/dashboard/ocpCloudDashboard';\nimport { ocpDashboardReducer, ocpDashboardStateKey } from 'store/dashboard/ocpDashboard';\nimport { ocpInfrastructureDashboardReducer, ocpInfrastructureDashboardStateKey, } from 'store/dashboard/ocpInfrastructureDashboard';\nimport { ocpSupplementaryDashboardReducer, ocpSupplementaryDashboardStateKey, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { ocpUsageDashboardReducer, ocpUsageDashboardStateKey } from 'store/dashboard/ocpUsageDashboard';\nimport { exportReducer, exportStateKey } from 'store/exports';\nimport { forecastReducer, forecastStateKey } from 'store/forecasts';\nimport { orgReducer, orgStateKey } from 'store/orgs';\nimport { priceListReducer, priceListStateKey } from 'store/priceList';\nimport { reportReducer, reportStateKey } from 'store/reports';\nimport { resourceReducer, resourceStateKey } from 'store/resources';\nimport { sourcesReducer, sourcesStateKey } from 'store/sourceSettings';\nimport { tagReducer, tagStateKey } from 'store/tags';\nimport { metricsReducer, metricsStateKey } from './metrics';\nimport { providersReducer, providersStateKey } from './providers';\nimport { rbacReducer, rbacStateKey } from './rbac';\nimport { uiReducer, uiStateKey } from './ui';\nimport { userAccessReducer, userAccessStateKey } from './userAccess';\nexport const rootReducer = combineReducers({\n    [awsOcpDashboardStateKey]: awsOcpDashboardReducer,\n    [awsCostOverviewStateKey]: awsCostOverviewReducer,\n    [awsDashboardStateKey]: awsDashboardReducer,\n    [awsHistoricalDataStateKey]: awsHistoricalDataReducer,\n    [azureOcpDashboardStateKey]: azureOcpDashboardReducer,\n    [azureCostOverviewStateKey]: azureCostOverviewReducer,\n    [azureDashboardStateKey]: azureDashboardReducer,\n    [azureHistoricalDataStateKey]: azureHistoricalDataReducer,\n    [costModelsStateKey]: costModelsReducer,\n    [exportStateKey]: exportReducer,\n    [gcpCostOverviewStateKey]: gcpCostOverviewReducer,\n    [gcpDashboardStateKey]: gcpDashboardReducer,\n    [gcpOcpDashboardStateKey]: gcpOcpDashboardReducer,\n    [gcpHistoricalDataStateKey]: gcpHistoricalDataReducer,\n    [ibmCostOverviewStateKey]: ibmCostOverviewReducer,\n    [ibmDashboardStateKey]: ibmDashboardReducer,\n    [ibmHistoricalDataStateKey]: ibmHistoricalDataReducer,\n    [metricsStateKey]: metricsReducer,\n    [ocpCostOverviewStateKey]: ocpCostOverviewReducer,\n    [ocpDashboardStateKey]: ocpDashboardReducer,\n    [ocpCloudDashboardStateKey]: ocpCloudDashboardReducer,\n    [ocpHistoricalDataStateKey]: ocpHistoricalDataReducer,\n    [ocpInfrastructureDashboardStateKey]: ocpInfrastructureDashboardReducer,\n    [ocpSupplementaryDashboardStateKey]: ocpSupplementaryDashboardReducer,\n    [ocpUsageDashboardStateKey]: ocpUsageDashboardReducer,\n    [orgStateKey]: orgReducer,\n    [priceListStateKey]: priceListReducer,\n    [providersStateKey]: providersReducer,\n    [rbacStateKey]: rbacReducer,\n    [reportStateKey]: reportReducer,\n    [forecastStateKey]: forecastReducer,\n    [resourceStateKey]: resourceReducer,\n    [sourcesStateKey]: sourcesReducer,\n    [tagStateKey]: tagReducer,\n    [uiStateKey]: uiReducer,\n    [userAccessStateKey]: userAccessReducer,\n    notifications,\n});\n","import { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications';\nimport axios from 'axios';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './rootReducer';\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ serialize: true })\n    : compose;\nexport const middlewares = [thunk, notificationsMiddleware()];\nexport function configureStore(initialState) {\n    const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n    const store = createStore(rootReducer, initialState, enhancer);\n    axios.interceptors.response.use(null, error => {\n        return Promise.reject(error);\n    });\n    return store;\n}\n","import { fetchRateMetrics } from 'api/metrics';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchMetricsRequest, success: fetchMetricsSuccess, failure: fetchMetricsFailure, } = createAsyncAction('fetch/metrics/request', 'fetch/metrics/success', 'fetch/metrics/failure')();\nexport const fetchMetrics = (source_type = '') => {\n    return (dispatch) => {\n        dispatch(fetchMetricsRequest());\n        return fetchRateMetrics(source_type)\n            .then(res => {\n            dispatch(fetchMetricsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchMetricsFailure(err));\n        });\n    };\n};\n","import axios from 'axios';\nexport function fetchRateMetrics(source_type = '') {\n    const query = source_type ? `?source_type=${source_type}` : '';\n    return axios.get(`metrics/${query}`);\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchMetricsFailure, fetchMetricsRequest, fetchMetricsSuccess } from './actions';\nexport const stateKey = 'metrics';\nexport const defaultState = {\n    error: null,\n    status: 0 /* none */,\n    metrics: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchMetricsSuccess):\n            return {\n                error: null,\n                status: 2 /* complete */,\n                metrics: action.payload.data,\n            };\n        case getType(fetchMetricsFailure):\n            return {\n                status: 2 /* complete */,\n                error: action.payload,\n                metrics: null,\n            };\n        case getType(fetchMetricsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { stateKey } from './reducer';\nexport const metricsState = (state) => state[stateKey];\nexport const status = (state) => metricsState(state).status;\nexport const error = (state) => {\n    const err = metricsState(state).error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\nexport const metrics = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return {};\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        const prev = acc[curr.label_metric] ? Object.assign({}, acc[curr.label_metric]) : {};\n        return Object.assign(Object.assign({}, acc), { [curr.label_metric]: Object.assign(Object.assign({}, prev), { [curr.label_measurement]: curr }) });\n    }, {});\n};\nexport const maxRate = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return 0;\n    }\n    return metricsPayload.data.length;\n};\nexport const costTypes = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return [];\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        if (acc.includes(curr.default_cost_type)) {\n            return acc;\n        }\n        return [curr.default_cost_type, ...acc];\n    }, []);\n};\n","import axios from 'axios';\nexport const OrgTypePaths = {\n    [\"org\" /* org */]: 'organizations/aws/',\n};\nexport function runOrg(orgType, query) {\n    const path = OrgTypePaths[orgType];\n    return axios.get(`${path}?${query}`);\n}\n","export const orgStateKey = 'org';\nexport function getOrgId(orgPathsType, orgType, query) {\n    return `${orgPathsType}--${orgType}--${query}`;\n}\n","import { getOrgId, orgStateKey } from './orgCommon';\nexport const selectOrgState = (state) => state[orgStateKey];\nexport const selectOrg = (state, orgPathsType, orgType, query) => selectOrgState(state).byId.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgFetchStatus = (state, orgPathsType, orgType, query) => selectOrgState(state).fetchStatus.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgError = (state, orgPathsType, orgType, query) => selectOrgState(state).errors.get(getOrgId(orgPathsType, orgType, query));\n","import { runOrg } from 'api/orgs/orgUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getOrgId } from './orgCommon';\nimport { selectOrg, selectOrgFetchStatus } from './orgSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchOrgRequest = createAction('org/request')();\nexport const fetchOrgSuccess = createAction('org/success')();\nexport const fetchOrgFailure = createAction('org/failure')();\nexport function fetchOrg(orgPathsType, orgType, query) {\n    return (dispatch, getState) => {\n        if (!isOrgExpired(getState(), orgPathsType, orgType, query)) {\n            return;\n        }\n        const meta = {\n            orgId: getOrgId(orgPathsType, orgType, query),\n        };\n        dispatch(fetchOrgRequest(meta));\n        runOrg(orgPathsType, orgType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchOrgSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchOrgFailure(err, meta));\n        });\n    };\n}\nfunction isOrgExpired(state, orgPathsType, orgType, query) {\n    const orgReport = selectOrg(state, orgPathsType, orgType, query);\n    const fetchStatus = selectOrgFetchStatus(state, orgPathsType, orgType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!orgReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > orgReport.timeRequested + expirationMS;\n}\n","import { runOrg as runAwsOrg } from './awsOrgs';\nexport function runOrg(orgPathsType, orgType, query) {\n    let orgReport;\n    switch (orgPathsType) {\n        case \"aws\" /* aws */:\n            orgReport = runAwsOrg(orgType, query);\n            break;\n    }\n    return orgReport;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchOrgFailure, fetchOrgRequest, fetchOrgSuccess } from './orgActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function orgReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchOrgRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.orgId, 1 /* inProgress */) });\n        case getType(fetchOrgSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.orgId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.orgId, null) });\n        case getType(fetchOrgFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.orgId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const stateKey = 'providers';\nexport const addProviderKey = 'add-provider';\nexport const awsProvidersQuery = {\n    type: 'AWS',\n};\nexport const azureProvidersQuery = {\n    type: 'AZURE',\n};\nexport const gcpProvidersQuery = {\n    type: 'GCP',\n};\nexport const ibmProvidersQuery = {\n    type: 'IBM',\n};\nexport const ocpProvidersQuery = {\n    type: 'OCP',\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { fetchProviders as apiGetProviders } from 'api/providers';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './providersCommon';\nexport const fetchProvidersRequest = createAction('providers/fetch/request')();\nexport const fetchProvidersSuccess = createAction('providers/fetch/success')();\nexport const fetchProvidersFailure = createAction('providers/fetch/failure')();\nexport function fetchProviders(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchProvidersRequest(meta));\n        return apiGetProviders(query)\n            .then(res => {\n            dispatch(fetchProvidersSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchProvidersFailure(err, meta));\n        });\n    };\n}\nexport const clearProviderFailure = createAction('providers/clear/failure');\n","import { getType } from 'typesafe-actions';\nimport { fetchProvidersFailure, fetchProvidersRequest, fetchProvidersSuccess } from './providersActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function providersReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchProvidersRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchProvidersSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchProvidersFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { addProviderKey, getReportId, stateKey } from './providersCommon';\nexport const selectProvidersState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectProvidersState(state).fetchStatus.get(addProviderKey);\nexport const selectAddProviderError = (state) => selectProvidersState(state).errors.get(addProviderKey);\n// Fetch providers\nexport const selectProviders = (state, providerType, query) => selectProvidersState(state).byId.get(getReportId(providerType, query));\nexport const selectProvidersFetchStatus = (state, providerType, query) => selectProvidersState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectProvidersError = (state, providerType, query) => selectProvidersState(state).errors.get(getReportId(providerType, query));\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { getRBAC } from 'api/rbac';\nimport i18next from 'i18next';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchRbacRequest, success: fetchRbacSuccess, failure: fetchRbacFailure, } = createAsyncAction('fetch/RBAC/request', 'fetch/RBAC/success', 'fetch/RBAC/failure')();\nexport const fetchRbac = () => {\n    return (dispatch) => {\n        dispatch(fetchRbacRequest());\n        return getRBAC()\n            .then(res => {\n            dispatch(fetchRbacSuccess(res));\n        })\n            .catch(err => {\n            dispatch(addNotification({\n                title: i18next.t('rbac.error_title'),\n                description: i18next.t('rbac.error_description'),\n                variant: 'danger',\n                dismissable: true,\n            }));\n            dispatch(fetchRbacFailure(err));\n        });\n    };\n};\n","export async function getRBAC() {\n    const _insights = window.insights;\n    if (_insights &&\n        _insights.chrome &&\n        _insights.chrome.auth &&\n        _insights.chrome.auth.getUser &&\n        _insights.chrome.getUserPermissions) {\n        const user = await _insights.chrome.auth.getUser();\n        const permissions = await _insights.chrome.getUserPermissions();\n        return {\n            isOrgAdmin: user.identity.user.is_org_admin,\n            permissions,\n        };\n    }\n    return { isOrgAdmin: false, permissions: null };\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchRbacFailure, fetchRbacRequest, fetchRbacSuccess } from './actions';\nexport const stateKey = 'RBAC';\nexport const defaultState = {\n    isOrgAdmin: false,\n    permissions: null,\n    status: 0 /* none */,\n    error: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchRbacRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchRbacSuccess):\n            return Object.assign(Object.assign({}, action.payload), { status: 2 /* complete */, error: null });\n        case getType(fetchRbacFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        default:\n            return state;\n    }\n};\n","import { stateKey } from './reducer';\nexport const selectRbacState = (state) => state[stateKey];\nexport const isCostModelWritePermission = (state) => {\n    const { isOrgAdmin, permissions } = selectRbacState(state);\n    if (isOrgAdmin === true) {\n        return true;\n    }\n    if (!permissions) {\n        return false;\n    }\n    const costModelPermissions = permissions.find(item => item.permission.startsWith('cost-management'));\n    if (!costModelPermissions) {\n        return false;\n    }\n    const [app, resource, operation] = costModelPermissions.permission.split(':');\n    if (app === 'cost-management' && resource === '*' && operation === '*') {\n        return true;\n    }\n    if ((resource === 'rate' || resource === 'cost_model') && operation === 'write') {\n        return true;\n    }\n    return false;\n};\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","export const reportStateKey = 'report';\nexport function getReportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}--${reportType}--${query}`;\n}\n","import { getReportId, reportStateKey } from './reportCommon';\nexport const selectReportState = (state) => state[reportStateKey];\nexport const selectReport = (state, reportPathsType, reportType, query) => selectReportState(state).byId.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportFetchStatus = (state, reportPathsType, reportType, query) => selectReportState(state).fetchStatus.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportError = (state, reportPathsType, reportType, query) => selectReportState(state).errors.get(getReportId(reportPathsType, reportType, query));\n","import { runReport } from 'api/reports/reportUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './reportCommon';\nimport { selectReport, selectReportFetchStatus } from './reportSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchReportRequest = createAction('report/request')();\nexport const fetchReportSuccess = createAction('report/success')();\nexport const fetchReportFailure = createAction('report/failure')();\nexport function fetchReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isReportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getReportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchReportRequest(meta));\n        runReport(reportPathsType, reportType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchReportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchReportFailure(err, meta));\n        });\n    };\n}\nfunction isReportExpired(state, reportPathsType, reportType, query) {\n    const report = selectReport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectReportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runReport as runAwsOcpReport } from './awsOcpReports';\nimport { runReport as runAwsReport } from './awsReports';\nimport { runReport as runAzureOcpReport } from './azureOcpReports';\nimport { runReport as runAzureReport } from './azureReports';\nimport { runReport as runGcpOcpReport } from './gcpOcpReports';\nimport { runReport as runGcpReport } from './gcpReports';\nimport { runReport as runIbmReport } from './ibmReports';\nimport { runReport as runOcpCloudReport } from './ocpCloudReports';\nimport { runReport as runOcpReport } from './ocpReports';\nimport { runReport as runOcpUsageReport } from './ocpUsageReports';\nexport function runReport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsReport(reportType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            report = runAwsOcpReport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureReport(reportType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            report = runAzureOcpReport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpReport(reportType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            report = runGcpOcpReport(reportType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            report = runIbmReport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpReport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudReport(reportType, query);\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            report = runOcpUsageReport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchReportFailure, fetchReportRequest, fetchReportSuccess } from './reportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function reportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchReportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchReportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchReportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const resourceStateKey = 'resource';\nexport function getResourceId(resourcePathsType, resourceType, query) {\n    return `${resourcePathsType}--${resourceType}--${query}`;\n}\n","import { getResourceId, resourceStateKey } from './resourceCommon';\nexport const selectResourceState = (state) => state[resourceStateKey];\nexport const selectResource = (state, resourcePathsType, resourceType, query) => selectResourceState(state).byId.get(getResourceId(resourcePathsType, resourceType, query));\nexport const selectResourceFetchStatus = (state, resourcePathsType, resourceType, query) => selectResourceState(state).fetchStatus.get(getResourceId(resourcePathsType, resourceType, query));\nexport const selectResourceError = (state, resourcePathsType, resourceType, query) => selectResourceState(state).errors.get(getResourceId(resourcePathsType, resourceType, query));\n","import { runResource } from 'api/resources/resourceUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getResourceId } from './resourceCommon';\nimport { selectResource, selectResourceFetchStatus } from './resourceSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchResourceRequest = createAction('resource/request')();\nexport const fetchResourceSuccess = createAction('resource/success')();\nexport const fetchResourceFailure = createAction('resource/failure')();\nexport function fetchResource(resourcePathsType, resourceType, query) {\n    return (dispatch, getState) => {\n        if (!isResourceExpired(getState(), resourcePathsType, resourceType, query)) {\n            return;\n        }\n        const meta = {\n            resourceId: getResourceId(resourcePathsType, resourceType, query),\n        };\n        dispatch(fetchResourceRequest(meta));\n        runResource(resourcePathsType, resourceType, query)\n            .then(res => {\n            dispatch(fetchResourceSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchResourceFailure(err, meta));\n        });\n    };\n}\nfunction isResourceExpired(state, resourcePathsType, resourceType, query) {\n    const resource = selectResource(state, resourcePathsType, resourceType, query);\n    const fetchStatus = selectResourceFetchStatus(state, resourcePathsType, resourceType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!resource) {\n        return true;\n    }\n    const now = Date.now();\n    return now > resource.timeRequested + expirationMS;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchResourceFailure, fetchResourceRequest, fetchResourceSuccess } from './resourceActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function resourceReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchResourceRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.resourceId, 1 /* inProgress */) });\n        case getType(fetchResourceSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.resourceId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.resourceId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.resourceId, null) });\n        case getType(fetchResourceFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.resourceId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.resourceId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { fetchProviders as apiGetSources } from 'api/providers';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/source/filter')();\nexport const { request: fetchSourcesRequest, success: fetchSourcesSuccess, failure: fetchSourcesFailure, } = createAsyncAction('fetch/source/request', 'fetch/source/success', 'fetch/source/failure')();\nexport const fetchSources = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchSourcesRequest());\n        return apiGetSources(query)\n            .then(res => {\n            dispatch(fetchSourcesSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchSourcesFailure(err));\n        });\n    };\n};\n","import { getType } from 'typesafe-actions';\nimport { fetchSourcesFailure, fetchSourcesRequest, fetchSourcesSuccess, updateFilterToolbar } from './actions';\nexport const stateKey = 'sources';\nexport const defaultState = {\n    sources: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchSourcesRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchSourcesSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', status: 2 /* complete */, error: null, sources: action.payload.data });\n        case getType(fetchSourcesFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        default:\n            return state;\n    }\n};\n","import { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const sourcesState = (state) => state[stateKey];\nexport const sources = (state) => {\n    const srcs = sourcesState(state).sources;\n    if (srcs) {\n        return srcs.data;\n    }\n    return [];\n};\nexport const status = (state) => sourcesState(state).status;\nexport const error = (state) => sourcesState(state).error;\nexport const currentFilterValue = (state) => sourcesState(state).currentFilterValue;\nexport const currentFilterType = (state) => sourcesState(state).currentFilterType;\nexport const query = selectQuery((state) => sourcesState(state).sources, ['name', 'type', 'offset', 'limit']);\nexport const pagination = selectPagination((state) => sourcesState(state).sources);\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/aws/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/aws/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/azure/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/azure/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/gcp/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/gcp/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/ibm/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/all/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","export const tagStateKey = 'tag';\nexport function getTagId(tagPathsType, tagType, query) {\n    return `${tagPathsType}--${tagType}--${query}`;\n}\n","import { getTagId, tagStateKey } from './tagCommon';\nexport const selectTagState = (state) => state[tagStateKey];\nexport const selectTag = (state, tagPathsType, tagType, query) => selectTagState(state).byId.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagFetchStatus = (state, tagPathsType, tagType, query) => selectTagState(state).fetchStatus.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagError = (state, tagPathsType, tagType, query) => selectTagState(state).errors.get(getTagId(tagPathsType, tagType, query));\n","import { runTag } from 'api/tags/tagUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getTagId } from './tagCommon';\nimport { selectTag, selectTagFetchStatus } from './tagSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchTagRequest = createAction('tag/request')();\nexport const fetchTagSuccess = createAction('tag/success')();\nexport const fetchTagFailure = createAction('tag/failure')();\nexport function fetchTag(tagPathsType, tagType, query) {\n    return (dispatch, getState) => {\n        if (!isTagExpired(getState(), tagPathsType, tagType, query)) {\n            return;\n        }\n        const meta = {\n            tagId: getTagId(tagPathsType, tagType, query),\n        };\n        dispatch(fetchTagRequest(meta));\n        runTag(tagPathsType, tagType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchTagSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchTagFailure(err, meta));\n        });\n    };\n}\nfunction isTagExpired(state, tagPathsType, tagType, query) {\n    const tagReport = selectTag(state, tagPathsType, tagType, query);\n    const fetchStatus = selectTagFetchStatus(state, tagPathsType, tagType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!tagReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > tagReport.timeRequested + expirationMS;\n}\n","import { runTag as runAwsOcpTag } from './awsOcpTags';\nimport { runTag as runAwsTag } from './awsTags';\nimport { runTag as runAzureOcpTag } from './azureOcpTags';\nimport { runTag as runAzureTag } from './azureTags';\nimport { runTag as runGcpOcpTag } from './gcpOcpTags';\nimport { runTag as runGcpTag } from './gcpTags';\nimport { runTag as runIbmTag } from './ibmTags';\nimport { runTag as runOcpCloudTag } from './ocpCloudTags';\nimport { runTag as runOcpTag } from './ocpTags';\nexport function runTag(tagPathsType, tagType, query) {\n    let tagReport;\n    switch (tagPathsType) {\n        case \"aws\" /* aws */:\n            tagReport = runAwsTag(tagType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            tagReport = runAwsOcpTag(tagType, query);\n            break;\n        case \"azure\" /* azure */:\n            tagReport = runAzureTag(tagType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            tagReport = runAzureOcpTag(tagType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            tagReport = runGcpTag(tagType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            tagReport = runGcpOcpTag(tagType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            tagReport = runIbmTag(tagType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            tagReport = runOcpTag(tagType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            tagReport = runOcpCloudTag(tagType, query);\n            break;\n    }\n    return tagReport;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchTagFailure, fetchTagRequest, fetchTagSuccess } from './tagActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function tagReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchTagRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.tagId, 1 /* inProgress */) });\n        case getType(fetchTagSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.tagId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.tagId, null) });\n        case getType(fetchTagFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.tagId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const stateKey = 'userAccess';\nexport const userAccessKey = 'user-access';\nexport const allUserAccessQuery = {\n    type: '',\n};\nexport const awsUserAccessQuery = {\n    type: 'AWS',\n};\nexport const azureUserAccessQuery = {\n    type: 'AZURE',\n};\nexport const costModelUserAccessQuery = {\n    type: 'cost_model',\n};\nexport const ocpUserAccessQuery = {\n    type: 'OCP',\n};\nexport const gcpUserAccessQuery = {\n    type: 'GCP',\n};\nexport const ibmUserAccessQuery = {\n    type: 'IBM',\n    beta: true,\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { fetchUserAccess as apiGetUserAccess } from 'api/userAccess';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './userAccessCommon';\nexport const fetchUserAccessRequest = createAction('userAccess/fetch/request')();\nexport const fetchUserAccessSuccess = createAction('userAccess/fetch/success')();\nexport const fetchUserAccessFailure = createAction('userAccess/fetch/failure')();\nexport function fetchUserAccess(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchUserAccessRequest(meta));\n        return apiGetUserAccess(query)\n            .then(res => {\n            dispatch(fetchUserAccessSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchUserAccessFailure(err, meta));\n        });\n    };\n}\nexport const clearuserAccessFailure = createAction('userAccess/clear/failure');\n","import axios from 'axios';\n// If the user-access API is called without a query parameter, all types are returned in the response\nexport function fetchUserAccess(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`user-access/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`user-access/${queryString}`);\n    }\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchUserAccessFailure, fetchUserAccessRequest, fetchUserAccessSuccess } from './userAccessActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function userAccessReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchUserAccessRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchUserAccessSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchUserAccessFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getReportId, stateKey, userAccessKey } from './userAccessCommon';\nexport const selectUserAccessState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectUserAccessState(state).fetchStatus.get(userAccessKey);\nexport const selectAddProviderError = (state) => selectUserAccessState(state).errors.get(userAccessKey);\n// Fetch userAccess\nexport const selectUserAccess = (state, providerType, query) => selectUserAccessState(state).byId.get(getReportId(providerType, query));\nexport const selectUserAccessFetchStatus = (state, providerType, query) => selectUserAccessState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectUserAccessError = (state, providerType, query) => selectUserAccessState(state).errors.get(getReportId(providerType, query));\n","export const getBaseName = pathname => {\n    let release = '/';\n    const pathName = pathname.split('/');\n    pathName.shift();\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n    if (pathName[1]) {\n        return `${release}${pathName[0]}/${pathName[1]}`;\n    }\n    return `${release}${pathName[0]}`;\n};\n"],"sourceRoot":""}