{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/testIds.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/trendChart/trendChart.styles.ts","webpack:///./src/components/trendChart/trendChart.tsx","webpack:///./src/components/tabs/tabContent.tsx","webpack:///./src/components/tabs/tabItem.styles.ts","webpack:///./src/components/tabs/tabItem.tsx","webpack:///./src/components/tabs/tabNavigation.styles.ts","webpack:///./src/components/tabs/tabNavigation.tsx","webpack:///./src/components/tabs/tabs.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/usageChart/usageChart.styles.ts","webpack:///./src/components/usageChart/usageChart.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/link/link.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/overview/emptyState.styles.ts","webpack:///./src/pages/overview/emptyState.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/components/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/ocpDashboard/index.ts","webpack:///./src/pages/awsDashboard/index.ts","webpack:///./src/pages/overview/index.ts"],"names":["unitLookupKey","unit","split","toLowerCase","formatValue","value","options","lookup","fValue","formatCurrency","formatStorage","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","transformAwsReport","report","type","key","items","idKey","sortKey","sortDirection","computedItems","Object","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_6__","map","i","createDatum","total","reduce","acc","d","prevValue","length","y","transformOcpReport","reportItem","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_7__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","id","label","Number","parseFloat","isInt","name","units","getDateRangeString","datums","firstOfMonth","lastOfMonth","start","end","today","Date","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","monthName","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","startDate","endDate","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_5__","i18next__WEBPACK_IMPORTED_MODULE_4__","t","getTooltipLabel","datum","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__webpack_exports__","getTestProps","data-testid","testIds","details","historical_data_btn","tag_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","empty_state_add_btn","name_input","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","visitDataPoint","dataPoint","values","forEach","capacity","charge","cluster_alias","limit","request","usage","assign","app","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","getIdKeyForGroupBy","groupBy","project","cluster","node","groups","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account_alias","group","account","instance_type","region","service","chartStyles","axis","axisLabel","padding","grid","stroke","ticks","tickLabels","fontSize","colorScale","esm","previousMonth","fill","currentMonth","styles","StyleSheet","create","reportSummaryTrend",":not(foo) svg","overflow","trendChart_TrendChart","react_default","Component","[object Object]","super","arguments","this","containerRef","createRef","state","width","formatDatumValue","formatDatumOptions","props","chartUtils","handleResize","setState","current","clientWidth","nextProps","currentData","previousData","window","addEventListener","removeEventListener","title","height","legendData","push","container","createElement","ChartVoronoiContainer","labels","className","ref","Chart","containerComponent","Boolean","ChartArea","victory_axis","dependentAxis","ChartLegend","theme","ChartTheme","light","blue","TabContent","content","role","tabItem","position","flexGrow","textAlign","cursor","marginBottom","marginTop","tabItemShrink","flexShrink","marginRight","selected","backgroundImage","tabItem_TabItem","handleClick","onSelect","isSelected","isShrink","onClick","aria-selected","tabIndex","tabNavigation_styles_styles","tabNavigation","display","alignItems","tabNavigation_TabNavigation","handleKeyDown","event","includes","tabs","onChange","modifier","newIndex","findIndex","onKeyDown","tab","Tabs","selectedTab","find","reportSummary","subtitle","color","var","OcpReportSummary","es","subTitle","detailsLink","children","status","Card","CardHeader","Title","size","CardBody","CardFooter","ocpReportSummaryDetails_styles_styles","reportSummaryDetails","justifyContent","text","marginLeft","paddingBottom","lineHeight","OcpReportSummaryDetails","reportType","requestLabel","requestValue","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItem","totalValue","percentVal","percentLabel","Progress","sm","defaultProps","v","ocpReportSummaryItems_OcpReportSummaryItems","otherIndex","slice","getItems","OcpReportSummaryTrend","trendChart","currentColorScale","currentRequestData","currentUsageData","previousColorScale","previousRequestData","previousUsageData","usageChart_styles_styles","usageChart_UsageChart","currentRequestLabel","currentUsageLabel","previousRequestLabel","previousUsageLabel","firstRowLegendData","secondRowLegendData","gutter","strokeDasharray","OcpReportSummaryUsage","CastedButton","Button","link_Link","component","Link","variant","getIdKeyForTab","mapStateToProps","common","widgetId","widget","ocpDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","ocpReports","selectReport","selectReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","OcpDashboardWidget","react_redux_es","getTabTitle","getDetailsLinkTitle","buildDetailsLink","ocpQuery","group_by","order_by","renderTab","tabData","topItems","currentTab","ocpReportSummary","handleTabChange","tabId","titleKey","trend","availableTabs","month","get_month_default","format_default","start_of_month_default","count","get_date_default","detailLabel","requestLabelKey","components_link","to","undefined","currentRequestLabelKey","date","currentUsageLabelKey","previousRequestLabelKey","components_tabs","ocpDashboard_mapStateToProps","widgets","selectCurrentWidgets","OcpDashboard","openProvidersModal","ui","Grid","GridItem","xl","lg","card","cardBody","primaryAction","EmptyState","md","dollar_sign_icon","store_providers","selectProviders","results","showAWSTab","showOCPTab","result","providersFetchStatus","selectProvidersFetchStatus","Overview","awsDashboard","addSourceBtn","secondary","AwsReportSummary","awsReportSummaryDetails_styles_styles","AwsReportSummaryDetails","awsReportSummaryItem_styles_styles","AwsReportSummaryItem","awsReportSummaryItems_AwsReportSummaryItems","AwsReportSummaryTrend","awsReports","AwsDashboardWidget","awsQuery","utils_formatValue","context","labelKeyContext","trendTitle","awsDashboard_mapStateToProps","AwsDashboard","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDashboard__WEBPACK_IMPORTED_MODULE_1__","_awsDashboard__WEBPACK_IMPORTED_MODULE_1__","_overview__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"c5dfdd7dc378e0afd28c.bundle.js","sourcesContent":["export const unitLookupKey = unit => unit ? unit.split('-')[0].toLowerCase() : '';\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n            return formatStorage(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatStorage = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d.total, d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'charge') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = true, lastOfMonth = false) {\n    const [start, end] = getDatumDateRange(datums);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    const monthName = format(start, 'MMM');\n    const startDate = getDate(start);\n    const endDate = getDate(end);\n    return `${monthName} ${getDate(start)}${startDate !== endDate ? ` - ${endDate}` : ''}`;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'hrs':\n            case 'gb':\n                return i18next.t(`units.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'MMM D YYYY');\n        return `${date}: ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_btn: 'tag-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'charge', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity;\n                const charge = value.charge;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                const limit = value.limit;\n                const request = value.request;\n                const usage = value.usage;\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        app: value.app,\n                        capacity,\n                        charge,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        id,\n                        label,\n                        limit,\n                        request,\n                        units: value.units || usage ? 'GB' : 'USD',\n                        usage,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { capacity: itemMap[id].capacity + capacity, charge: itemMap[id].charge + charge, limit: itemMap[id].limit + limit, request: itemMap[id].request + request, usage: itemMap[id].usage + usage });\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nconst groups = ['services', 'accounts', 'instance_types', 'regions'];\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'total', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const total = value.total;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        id,\n                        total,\n                        label,\n                        units: value.units,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { total: itemMap[id].total + total });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    axis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    colorScale: [global_success_color_100.value, global_primary_color_100.value],\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartLegend, ChartTheme, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { getDateRangeString, getTooltipContent, getTooltipLabel, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { VictoryAxis } from 'victory';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.currentData || !nextProps.previousData) {\n            return false;\n        }\n        return true;\n    }\n    componentDidMount() {\n        const node = this.containerRef.current;\n        if (node) {\n            this.setState({ width: node.clientWidth });\n        }\n        window.addEventListener('resize', this.handleResize);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { title, currentData, previousData, height } = this.props;\n        const legendData = [];\n        if (previousData && previousData.length) {\n            legendData.push({\n                name: getDateRangeString(previousData, true, true),\n            });\n        }\n        if (currentData && currentData.length) {\n            legendData.push({\n                name: getDateRangeString(currentData),\n            });\n        }\n        const container = React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel });\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryTrend), ref: this.containerRef },\n            React.createElement(\"div\", null,\n                React.createElement(Chart, { containerComponent: container, height: height, width: this.state.width },\n                    Boolean(previousData && previousData.length) && (React.createElement(ChartArea, { style: chartStyles.previousMonth, data: previousData })),\n                    Boolean(currentData && currentData.length) && (React.createElement(ChartArea, { style: chartStyles.currentMonth, data: currentData })),\n                    React.createElement(VictoryAxis, { style: chartStyles.axis }),\n                    React.createElement(VictoryAxis, { dependentAxis: true, style: chartStyles.axis }))),\n            Boolean(legendData && legendData.length) && (React.createElement(ChartLegend, { title: title, theme: ChartTheme.light.blue, colorScale: chartStyles.colorScale, data: legendData, height: 50, width: this.state.width }))));\n    }\n}\nexport { TrendChart };\n","import React from 'react';\nexport const TabContent = ({ data }) => {\n    const content = typeof data.content === 'function' ? data.content(data) : data.content;\n    return React.createElement(\"div\", { role: \"tabpanel\" }, content);\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_primary_color_100, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabItem: {\n        position: 'relative',\n        flexGrow: 1,\n        textAlign: 'center',\n        fontSize: global_FontSize_md.value,\n        padding: global_spacer_sm.value,\n        cursor: 'pointer',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    tabItemShrink: {\n        flexGrow: '0',\n        flexShrink: '2',\n        marginRight: '20px',\n    },\n    selected: {\n        backgroundImage: `linear-gradient(to top, ${global_primary_color_100.value} 2px, transparent 2px)`,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './tabItem.styles';\nclass TabItem extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            const { onSelect, data } = this.props;\n            onSelect(data.id);\n        };\n    }\n    render() {\n        const { data, isSelected, isShrink } = this.props;\n        return (React.createElement(\"div\", { role: \"tab\", onClick: this.handleClick, \"aria-selected\": isSelected, tabIndex: isSelected ? 0 : -1, className: css(styles.tabItem, isSelected && styles.selected, isShrink && styles.tabItemShrink) }, data.label));\n    }\n}\nexport { TabItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '../../../node_modules/@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabNavigation: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginBottom: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { TabItem } from './tabItem';\nimport { styles } from './tabNavigation.styles';\nclass TabNavigation extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleKeyDown = (event) => {\n            if (!['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n                return;\n            }\n            const { selected, tabs, onChange } = this.props;\n            const modifier = event.key === 'ArrowRight' ? 1 : -1;\n            const selectedIndex = tabs.findIndex(t => t.id === selected.id);\n            const newIndex = selectedIndex + modifier;\n            if (newIndex < 0 || newIndex > tabs.length - 1) {\n                return;\n            }\n            onChange(tabs[newIndex].id);\n        };\n    }\n    render() {\n        const { isShrink, tabs, selected, onChange } = this.props;\n        return (React.createElement(\"div\", { role: \"tablist\", className: css(styles.tabNavigation), onKeyDown: this.handleKeyDown }, tabs.map(tab => (React.createElement(TabItem, { isShrink: isShrink, onSelect: onChange, key: tab.id, data: tab, isSelected: tab.id === selected.id })))));\n    }\n}\nexport { TabNavigation };\n","import React from 'react';\nimport { TabContent } from './tabContent';\nimport { TabNavigation } from './tabNavigation';\nconst Tabs = ({ isShrink, selected, tabs, onChange }) => {\n    if (tabs.length === 0) {\n        return React.createElement(\"div\", null, \"No data was found\");\n    }\n    const selectedTab = tabs.find(tab => tab.id === selected);\n    return (React.createElement(\"div\", null,\n        React.createElement(TabNavigation, { isShrink: isShrink, tabs: tabs, selected: selectedTab || tabs[0], onChange: onChange }),\n        React.createElement(TabContent, { data: selectedTab || tabs[0] })));\n};\nexport { Tabs };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginBottom: global_spacer_md.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n        marginRight: global_spacer_sm.value,\n    },\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetails = ({ label, formatValue, formatOptions, report, reportType = \"charge\" /* charge */, requestLabel, }) => {\n    let value = '----';\n    let requestValue = '----';\n    if (report && report.total) {\n        if (reportType === \"charge\" /* charge */) {\n            const units = report.total.units ? report.total.units : 'USD';\n            value = formatValue(report.total.charge, units, formatOptions);\n        }\n        else {\n            const units = report.total.units ? report.total.units : 'GB';\n            value = formatValue(report.total.usage, units, formatOptions);\n            requestValue = formatValue(report.total.request, units, formatOptions);\n        }\n    }\n    return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n        React.createElement(\"div\", { className: css(styles.value) },\n            value,\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, label))),\n        Boolean(reportType !== \"charge\" /* charge */) && (React.createElement(\"div\", { className: css(styles.value) },\n            requestValue,\n            React.createElement(\"div\", { className: css(styles.text) }, requestLabel)))));\n};\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = `${formatValue(value, units, formatOptions)} (${percentVal}%)`;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { OcpReportSummaryItem };\n","import React from 'react';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nclass OcpReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { OcpReportSummaryItems, };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { OcpReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_primary_color_100, global_success_color_100, global_warning_color_100, global_warning_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    axis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    currentColorScale: [\n        global_success_color_100.value,\n        global_primary_color_100.value,\n    ],\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_warning_color_100.value,\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_primary_color_100.value,\n        },\n    },\n    previousColorScale: [\n        global_warning_color_200.value,\n        global_warning_color_100.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_warning_color_200.value,\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_success_color_100.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartLegend, ChartTheme, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { getTooltipContent, getTooltipLabel, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { VictoryAxis } from 'victory';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.currentUsageData ||\n            !nextProps.previousUsageData ||\n            !nextProps.currentRequestData ||\n            !nextProps.previousRequestData) {\n            return false;\n        }\n        return true;\n    }\n    componentDidMount() {\n        const node = this.containerRef.current;\n        if (node) {\n            this.setState({ width: node.clientWidth });\n        }\n        window.addEventListener('resize', this.handleResize);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { currentRequestData, currentRequestLabel, currentUsageData, currentUsageLabel, height, previousRequestData, previousRequestLabel, previousUsageData, previousUsageLabel, title, } = this.props;\n        const firstRowLegendData = [];\n        const secondRowLegendData = [];\n        if (previousUsageData && previousUsageData.length) {\n            firstRowLegendData.push({ name: previousUsageLabel });\n        }\n        if (previousRequestData && previousRequestData.length) {\n            secondRowLegendData.push({ name: previousRequestLabel });\n        }\n        if (currentUsageData && currentUsageData.length) {\n            firstRowLegendData.push({ name: currentUsageLabel });\n        }\n        if (currentRequestData && currentRequestData.length) {\n            secondRowLegendData.push({ name: currentRequestLabel });\n        }\n        const container = React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel });\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryTrend), ref: this.containerRef },\n            React.createElement(\"div\", null,\n                React.createElement(Chart, { containerComponent: container, height: height, width: this.state.width },\n                    Boolean(currentUsageData && currentUsageData.length) && (React.createElement(ChartArea, { style: chartStyles.currentUsageData, data: currentUsageData })),\n                    Boolean(currentRequestData && currentRequestData.length) && (React.createElement(ChartArea, { style: chartStyles.currentRequestData, data: currentRequestData })),\n                    Boolean(previousUsageData && previousUsageData.length) && (React.createElement(ChartArea, { style: chartStyles.previousUsageData, data: previousUsageData })),\n                    Boolean(previousRequestData && previousRequestData.length) && (React.createElement(ChartArea, { style: chartStyles.previousRequestData, data: previousRequestData })),\n                    React.createElement(VictoryAxis, { style: chartStyles.axis }),\n                    React.createElement(VictoryAxis, { dependentAxis: true, style: chartStyles.axis }))),\n            Boolean(firstRowLegendData && firstRowLegendData.length) && (React.createElement(ChartLegend, { title: title, theme: ChartTheme.light.blue, colorScale: chartStyles.currentColorScale, data: firstRowLegendData, gutter: 55, height: 25, width: this.state.width })),\n            Boolean(secondRowLegendData && secondRowLegendData.length) && (React.createElement(ChartLegend, { title: title, theme: ChartTheme.light.blue, colorScale: chartStyles.previousColorScale, data: secondRowLegendData, height: 25, width: this.state.width, style: { data: { strokeDasharray: '5,5' } } }))));\n    }\n}\nexport { UsageChart };\n","import React from 'react';\nimport { UsageChart } from '../usageChart';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(UsageChart, Object.assign({ height: 75 }, props))));\nexport { OcpReportSummaryUsage };\n","import { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nconst CastedButton = Button;\nconst Link = props => (React.createElement(CastedButton, Object.assign({ component: RouterLink, variant: \"link\" }, props)));\nexport { Link };\n","import { getQuery, parseQuery } from 'api/ocpQuery';\nimport { getDateRangeString, transformOcpReport, } from 'components/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { OcpReportSummary, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/ocpReportSummary';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/ocp?${getQuery({\n                group_by: groupBy,\n                order_by: { charge: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { reportType, tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(OcpReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(OcpReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label.toString(), totalValue: reportType === \"charge\" /* charge */\n                    ? tabs.total.charge\n                    : tabs.total.usage, units: tabItem.units, value: reportType === \"charge\" /* charge */\n                    ? tabItem.charge\n                    : tabItem.usage })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('ocp_dashboard.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey);\n        const requestLabel = t(details.requestLabelKey);\n        const detailsLink = reportType === \"charge\" /* charge */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const reportItem = reportType === \"charge\" /* charge */ ? 'charge' : 'usage';\n        const currentUsageData = transformOcpReport(current, trend.type, 'date', reportItem);\n        const previousUsageData = transformOcpReport(previous, trend.type, 'date', reportItem);\n        const currentRequestData = reportType !== \"charge\" /* charge */\n            ? transformOcpReport(current, trend.type, 'date', 'request')\n            : undefined;\n        const previousRequestData = reportType !== \"charge\" /* charge */\n            ? transformOcpReport(previous, trend.type, 'date', 'request')\n            : undefined;\n        const currentRequestLabel = t(trend.currentRequestLabelKey, {\n            date: getDateRangeString(currentRequestData),\n        });\n        const currentUsageLabel = t(trend.currentUsageLabelKey, {\n            date: getDateRangeString(currentUsageData),\n        });\n        const previousRequestLabel = t(trend.previousRequestLabelKey, {\n            date: getDateRangeString(previousRequestData, true, true),\n        });\n        const previousUsageLabel = t(trend.previousUsageLabel, {\n            date: getDateRangeString(previousUsageData, true, true),\n        });\n        return (React.createElement(OcpReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(OcpReportSummaryDetails, { report: current, reportType: reportType, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions, requestLabel: requestLabel }),\n            Boolean(reportType === \"charge\" /* charge */) ? (React.createElement(OcpReportSummaryTrend, { title: t(trend.titleKey), currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousData: previousUsageData })) : (React.createElement(OcpReportSummaryUsage, { currentRequestData: currentRequestData, currentRequestLabel: currentRequestLabel, currentUsageData: currentUsageData, currentUsageLabel: currentUsageLabel, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousRequestData: previousRequestData, previousRequestLabel: previousRequestLabel, previousUsageData: previousUsageData, previousUsageLabel: previousUsageLabel })),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), previous: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { uiActions } from 'store/ui';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ t, openProvidersModal, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200 } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    card: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '75vh',\n        marginTop: '30px',\n    },\n    cardBody: {\n        textAlign: 'center',\n    },\n    primaryAction: {\n        marginTop: '60px',\n    },\n    subtitle: {\n        color: global_Color_200.var,\n        marginTop: '30px',\n    },\n    title: {\n        marginTop: '30px',\n    },\n});\n","import { Card, Grid, GridItem, Title } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyState.styles';\nconst EmptyState = ({ primaryAction, subTitle, title, }) => (React.createElement(\"div\", null,\n    React.createElement(Card, { className: css(styles.card) },\n        React.createElement(\"div\", { className: css(styles.cardBody) },\n            React.createElement(Grid, { gutter: \"lg\" },\n                React.createElement(GridItem, { md: 1, lg: 2 }),\n                React.createElement(GridItem, { md: 10, lg: 8 },\n                    React.createElement(DollarSignIcon, { size: \"xl\" }),\n                    React.createElement(Title, { className: css(styles.title), size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n                    Boolean(primaryAction) && (React.createElement(\"div\", { className: css(styles.primaryAction) }, primaryAction))),\n                React.createElement(GridItem, { md: 1, lg: 2 }))))));\nexport { EmptyState };\n","import { Button, ButtonType, ButtonVariant, Grid, GridItem, Title, TitleSize, } from '@patternfly/react-core';\nimport { Tabs } from 'components/tabs';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport AwsDashboard from '../awsDashboard';\nimport OcpDashboard from '../ocpDashboard';\nimport { EmptyState } from './emptyState';\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            currentTab: \"aws\" /* aws */,\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.renderTab = (tabData) => {\n            const currentTab = tabData.id;\n            if (currentTab === \"aws\" /* aws */) {\n                return React.createElement(AwsDashboard, null);\n            }\n            else {\n                return React.createElement(OcpDashboard, null);\n            }\n        };\n        this.handleTabChange = (tabId) => {\n            this.setState({ currentTab: tabId });\n        };\n    }\n    render() {\n        const { availableTabs, openProvidersModal, providers, providersFetchStatus, t, } = this.props;\n        const { currentTab } = this.state;\n        const addSourceBtn = (React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { onClick: openProvidersModal, type: ButtonType.submit, variant: ButtonVariant.secondary }), t('providers.add_source')));\n        return (React.createElement(\"div\", { className: \"pf-l-page__main-section pf-u-pb-xl pf-u-px-xl\" },\n            React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                React.createElement(Title, { size: TitleSize.lg }, t('overview.title')),\n                addSourceBtn),\n            React.createElement(\"div\", null, Boolean(providers &&\n                providers.count > 0 &&\n                providersFetchStatus === 2 /* complete */) ? (React.createElement(Tabs, { isShrink: Boolean(true), tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })) : (React.createElement(Grid, { gutter: \"lg\" },\n                React.createElement(GridItem, null,\n                    React.createElement(EmptyState, { primaryAction: addSourceBtn, title: t('overview.empty_state_title'), subTitle: t('overview.empty_state_desc') })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const availableTabs = [];\n    const providers = providersSelectors.selectProviders(state);\n    if (providers && providers.results) {\n        let showAWSTab = false;\n        let showOCPTab = false;\n        for (const result of providers.results) {\n            if (result.type === 'AWS') {\n                showAWSTab = true;\n            }\n            else if (result.type === 'OCP') {\n                showOCPTab = true;\n            }\n        }\n        if (showAWSTab) {\n            availableTabs.push(\"aws\" /* aws */);\n        }\n        if (showOCPTab) {\n            availableTabs.push(\"ocp\" /* ocp */);\n        }\n    }\n    return {\n        availableTabs,\n        providers,\n        providersFetchStatus: providersSelectors.selectProvidersFetchStatus(state),\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(OverviewBase));\nexport default Overview;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetails = ({ label, formatValue, formatOptions, report, }) => {\n    let value = '----';\n    if (report) {\n        value = report.total\n            ? formatValue(report.total.value, report.total.units, formatOptions)\n            : 0;\n    }\n    return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n        React.createElement(\"div\", { className: css(styles.value) }, value),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, label))));\n};\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = `${formatValue(value, units, formatOptions)} (${percentVal}%)`;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { AwsReportSummaryItem };\n","import React from 'react';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nclass AwsReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { AwsReportSummaryItems, };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { AwsReportSummaryTrend };\n","import { getQuery, parseQuery } from 'api/awsQuery';\nimport { AwsReportSummary, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/awsReportSummary';\nimport { transformAwsReport } from 'components/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/aws?${getQuery({\n                group_by: groupBy,\n                order_by: { total: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(AwsReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(AwsReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label.toString(), totalValue: tabs.total.value, units: tabItem.units, value: tabItem.total })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('aws_dashboard.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey, {\n            context: details.labelKeyContext,\n        });\n        const detailsLink = reportType === \"cost\" /* cost */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const trendTitle = t(trend.titleKey);\n        const currentData = transformAwsReport(current, trend.type);\n        const previousData = transformAwsReport(previous, trend.type);\n        return (React.createElement(AwsReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(AwsReportSummaryDetails, { report: current, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions }),\n            React.createElement(AwsReportSummaryTrend, { title: trendTitle, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousData: previousData }),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), previous: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { uiActions } from 'store/ui';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ t, openProvidersModal, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { hot } from 'react-hot-loader';\nimport OcpDashboard from './ocpDashboard';\nexport default hot(module)(OcpDashboard);\n","import { hot } from 'react-hot-loader';\nimport AwsDashboard from './awsDashboard';\nexport default hot(module)(AwsDashboard);\n","import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n"],"sourceRoot":""}