{"version":3,"sources":["webpack:///./src/pages/onboardingModal/index.ts","webpack:///./src/testIds.ts","webpack:///./src/pages/onboardingModal/final/loader.tsx","webpack:///./src/pages/onboardingModal/final/index.tsx","webpack:///./src/utils/validators.ts","webpack:///./src/pages/onboardingModal/awsConfigure/form.tsx","webpack:///./src/pages/onboardingModal/awsConfigure/instructions.tsx","webpack:///./src/pages/onboardingModal/awsConfigure/awsConfigure.tsx","webpack:///./src/pages/onboardingModal/awsConfigure/index.ts","webpack:///./src/components/copyClipboard/copyFunc.ts","webpack:///./src/components/copyClipboard/copyClipboard.tsx","webpack:///./src/pages/onboardingModal/configure/instructions.tsx","webpack:///./src/pages/onboardingModal/configure/index.ts","webpack:///./src/pages/onboardingModal/enableAccountAccess/form.tsx","webpack:///./src/pages/onboardingModal/enableAccountAccess/instructions.tsx","webpack:///./src/pages/onboardingModal/enableAccountAccess/enableAccountAccess.tsx","webpack:///./src/pages/onboardingModal/enableAccountAccess/index.ts","webpack:///./src/pages/onboardingModal/iamPolicy/instructions.tsx","webpack:///./src/pages/onboardingModal/iamPolicy/index.ts","webpack:///./src/pages/onboardingModal/iamRole/instructions.tsx","webpack:///./src/pages/onboardingModal/iamRole/index.ts","webpack:///./src/pages/onboardingModal/obtainLogin/instructions.tsx","webpack:///./src/pages/onboardingModal/obtainLogin/index.ts","webpack:///./src/pages/onboardingModal/sourceKind/checkList.tsx","webpack:///./src/pages/onboardingModal/sourceKind/form.tsx","webpack:///./src/pages/onboardingModal/sourceKind/instructions.tsx","webpack:///./src/pages/onboardingModal/sourceKind/sourceKind.tsx","webpack:///./src/pages/onboardingModal/sourceKind/index.tsx","webpack:///./src/pages/onboardingModal/usageCollector/form.tsx","webpack:///./src/pages/onboardingModal/usageCollector/instructions.tsx","webpack:///./src/pages/onboardingModal/usageCollector/usageCollector.tsx","webpack:///./src/pages/onboardingModal/usageCollector/index.ts","webpack:///./src/pages/onboardingModal/wizard/index.ts","webpack:///./src/pages/onboardingModal/wizard/wizard.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_wizard__WEBPACK_IMPORTED_MODULE_1__","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","check_box_3","check_box_4","check_box_5","check_box_all","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","loader","react_default","a","Component","[object Object]","props","super","type","name","clusterId","arn","s3BucketName","bucket","this","provider_resource_name","billing_source_obj","billing_source","addSource","assign","authentication","mH","style","display","verticalAlign","Number","parseFloat","margin","apiStatus","createElement","in_progress_icon","className","width","height","apiErrors","err","errorMessage","response","data","Error","undefined","errors","map","er","detail","join","message","Fragment","times_circle_icon","color","marginTop","marginBottom","Title","size","check_circle_icon","t","Grid","gutter","GridItem","span","renderIcon","react_redux_es","common","state","selectOnboardingName","selectOnboardingType","selectOnboardingClusterID","selectOnboardingArn","selectOnboardingS3BucketName","selectApiErrors","selectApiStatus","es","sourceTypeValidator","value","sourceNameValidator","RegExp","test","ocpClusterIdValidator","awsS3BucketNameValidator","arnValidator","length","indexOf","awsConfigure_form","isValid","onChange","Form","FormGroup","fieldId","label","helperText","helperTextInvalid","TextInput","instructions","List","ListItem","awsConfigure","updateS3BucketName","s3BucketNameValid","_name","event","currentTarget","onboardingModal_awsConfigure","selectOnboardingValidation","copyFunc","text","clipboard","parentElement","el","document","appendChild","select","execCommand","removeChild","CopyClipboardStateless","isCopied","aria-label","ariaLabel","onCopy","isToggle","isExpanded","onExpand","position","Button","onClick","chevron_down_icon","chevron_right_icon","left","isReadOnly","variant","right","ok_icon","paste_icon","copyClipboard_CopyClipboard","wasClicked","expanded","setState","timer","setTimeout","clearTimeout","configure_instructions","configure","enableAccountAccess_form","enableAccountAccess_instructions","enableAccountAccess","updateArn","arnValid","onboardingModal_enableAccountAccess","iamPolicy_instructions","iampolicy","href","target","i18nKey","iamPolicy","iamRole_instructions","iamRole","obtainLogin_instructions","obtainLogin","actionItems","testProps","operator","insights","ansible","epel","oc","SourceKindCheckList","checkedItems","updateCheckItem","checkAll","actionItem","Checkbox","key","isChecked","keys","every","k","defaultProps","checkList","sourceKind_form","updateName","nameValid","updateType","typeValid","FormSelect","FormSelectOption","sourceKind_instructions","sourceKind","checked","updateCheck","Boolean","item","onboardingModal_sourceKind","selectOnboardingSourceKindChecked","updateSourceKindCheckList","checkSourceKindCheckList","usageCollector_form","usageCollector_instructions","korekuta","usageCollector","updateClusterId","clusterIdValid","onboardingModal_usageCollector","updateClusterID","isModalOpen","selectOnboardingModal","isInvalid","selectOnboardingIsInvalid","dirtyMap","selectOnboardingDirty","sourceKindChecked","cancelOnboarding","steps","onboardingModal_final","stepMap","isDirty","dirtyStepMap","src","index","setIndex","actions","isDisabled","Modal","isLarge","title","isOpen","onClose"],"mappings":"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","file":"fdb8ccebb27f955323cf.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport Wizard from './wizard';\nexport default hot(module)(Wizard);\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        check_box_3: 'check-box-3',\n        check_box_4: 'check-box-4',\n        check_box_5: 'check-box-5',\n        check_box_all: 'check-box-all',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import { Grid, GridItem, Title } from '@patternfly/react-core';\nimport { CheckCircleIcon, InProgressIcon, TimesCircleIcon, } from '@patternfly/react-icons';\nimport React from 'react';\nclass Loader extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { type, name, clusterId, arn, s3BucketName: bucket } = this.props;\n        const provider_resource_name = type === 'OCP' ? clusterId : arn;\n        const billing_source_obj = type === 'AWS' ? { billing_source: { bucket } } : null;\n        this.props.addSource(Object.assign({ type,\n            name, authentication: {\n                provider_resource_name,\n            } }, billing_source_obj));\n    }\n    renderIcon() {\n        const mH = '7em';\n        const style = {\n            display: 'block',\n            verticalAlign: `${-0.125 * Number.parseFloat(mH)}em`,\n            margin: 'auto',\n        };\n        if (this.props.apiStatus === 1 /* inProgress */) {\n            return (React.createElement(InProgressIcon, { className: \"in-progress\", style: style, width: mH, height: mH }));\n        }\n        if (this.props.apiErrors) {\n            const err = this.props.apiErrors;\n            let errorMessage = null;\n            if (err.response && err.response.data) {\n                errorMessage = err.response.data.Error;\n                if (!errorMessage && err.response.data.errors !== undefined) {\n                    errorMessage = err.response.data.errors\n                        .map(er => er.detail)\n                        .join(', ');\n                }\n            }\n            else if (err.message) {\n                errorMessage = err.message;\n            }\n            return (React.createElement(React.Fragment, null,\n                React.createElement(TimesCircleIcon, { className: \"popping\", color: \"red\", style: style, width: mH, height: mH }),\n                React.createElement(\"div\", { style: { marginTop: '20px', marginBottom: '20px' } },\n                    React.createElement(Title, { size: \"md\" }, \"Failed adding source\"),\n                    React.createElement(\"div\", null, errorMessage ? errorMessage : 'Something went wrong'))));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(CheckCircleIcon, { className: \"popping\", color: \"green\", style: style, width: mH, height: mH }),\n            React.createElement(\"div\", { style: { marginTop: '20px', marginBottom: '20px' } },\n                React.createElement(Title, { size: \"md\" }, \"Successfully added this source\"))));\n    }\n    render() {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Title, { size: \"xl\" }, this.props.t('onboarding.final.title')),\n            React.createElement(\"br\", null),\n            React.createElement(Grid, { gutter: \"md\" },\n                React.createElement(GridItem, { span: 2 }),\n                React.createElement(GridItem, { span: 8 }, this.renderIcon()),\n                React.createElement(GridItem, { span: 2 }),\n                React.createElement(GridItem, { span: 2 }),\n                React.createElement(GridItem, { span: 8 },\n                    React.createElement(\"div\", null,\n                        \"Source Name: \",\n                        this.props.name),\n                    React.createElement(\"div\", null,\n                        \"Source Type: \",\n                        this.props.type),\n                    this.props.type === 'AWS' && (React.createElement(\"div\", null,\n                        \"S3 Bucket: \",\n                        this.props.s3BucketName)),\n                    this.props.type === 'AWS' && React.createElement(\"div\", null,\n                        \"ARN: \",\n                        this.props.arn),\n                    this.props.type === 'OCP' && (React.createElement(\"div\", null,\n                        \"Cluster ID: \",\n                        this.props.clusterId))),\n                React.createElement(GridItem, { span: 2 }))));\n    }\n}\nexport default Loader;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport Loader from './loader';\nimport './loader.css';\nexport default connect(createMapStateToProps(state => ({\n    name: onboardingSelectors.selectOnboardingName(state),\n    type: onboardingSelectors.selectOnboardingType(state),\n    clusterId: onboardingSelectors.selectOnboardingClusterID(state),\n    arn: onboardingSelectors.selectOnboardingArn(state),\n    s3BucketName: onboardingSelectors.selectOnboardingS3BucketName(state),\n    apiErrors: onboardingSelectors.selectApiErrors(state),\n    apiStatus: onboardingSelectors.selectApiStatus(state),\n})), {\n    addSource: onboardingActions.addSource,\n})(translate()(Loader));\n","export const sourceTypeValidator = (value) => value !== '';\nexport const sourceNameValidator = (value) => new RegExp('^.').test(value);\nexport const ocpClusterIdValidator = (value) => new RegExp('^.').test(value);\nexport const awsS3BucketNameValidator = (value) => new RegExp('^[A-Za-z0-9]+[A-Za-z0-9_-]*$').test(value);\nexport const arnValidator = (value) => {\n    const arnPrefix = 'arn:aws:';\n    if (value.length < arnPrefix.length) {\n        return false;\n    }\n    if (value.length === arnPrefix.length) {\n        return value === arnPrefix;\n    }\n    return value.indexOf(arnPrefix) === 0;\n};\n","import { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport React from 'react';\nimport { getTestProps, testIds } from 'testIds';\nconst S3BucketForm = ({ t, isValid, value, onChange }) => {\n    return (React.createElement(Form, null,\n        React.createElement(FormGroup, { isValid: isValid, fieldId: \"s3_bucket_name\", label: t('onboarding.aws_configure.s3_bucket_name_label'), helperText: t('onboarding.aws_configure.s3_bucket_name_helper_text'), helperTextInvalid: t('onboarding.aws_configure.s3_bucket_name_helper_text_invalid') },\n            React.createElement(TextInput, Object.assign({}, getTestProps(testIds.onboarding.s3_input), { isValid: isValid, id: \"s3_bucket_name\", value: value, onChange: onChange })))));\n};\nexport default S3BucketForm;\n","import { List, ListItem, Title } from '@patternfly/react-core';\nimport React from 'react';\nconst AwsConfigureInstructions = ({ t }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.aws_configure.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.aws_configure.intro')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null, t('onboarding.aws_configure.s3_bucket_account')),\n            React.createElement(ListItem, null,\n                t('onboarding.aws_configure.cost_report'),\n                React.createElement(List, null,\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.report_name')),\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.time_unit')),\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.include')),\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.support')),\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.prefix')))),\n            React.createElement(ListItem, null, t('onboarding.aws_configure.enter_s3_bucket')))));\n};\nexport default AwsConfigureInstructions;\n","import React from 'react';\nimport { awsS3BucketNameValidator } from 'utils/validators';\nimport S3BucketForm from './form';\nimport AwsConfigureInstructions from './instructions';\nconst AwsConfigure = ({ t, s3BucketName, updateS3BucketName, s3BucketNameValid, }) => {\n    const onChange = (_name, event) => {\n        updateS3BucketName(event.currentTarget.value, awsS3BucketNameValidator);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(AwsConfigureInstructions, { t: t }),\n        React.createElement(\"br\", null),\n        React.createElement(\"br\", null),\n        React.createElement(S3BucketForm, { t: t, onChange: onChange, isValid: s3BucketNameValid, value: s3BucketName })));\n};\nexport default AwsConfigure;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport AwsConfigure from './awsConfigure';\nexport default connect(createMapStateToProps(state => ({\n    s3BucketName: onboardingSelectors.selectOnboardingS3BucketName(state),\n    s3BucketNameValid: onboardingSelectors.selectOnboardingValidation(state)\n        .s3BucketNameValid,\n})), {\n    updateS3BucketName: onboardingActions.updateS3BucketName,\n})(translate()(AwsConfigure));\n","const copy = (event, text) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('input');\n    el.value = text;\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n};\nexport default copy;\n","import { Button, TextInput } from '@patternfly/react-core';\nimport { ChevronDownIcon, ChevronRightIcon, OkIcon, PasteIcon, } from '@patternfly/react-icons';\nimport React from 'react';\nimport copyfnc from './copyFunc';\nexport const CopyClipboardStateless = ({ text, isCopied, 'aria-label': ariaLabel, onCopy, isToggle, isExpanded, onExpand, }) => (React.createElement(\"div\", { style: { position: 'relative' } },\n    isToggle && (React.createElement(Button, { style: { width: 48 }, onClick: onExpand }, isExpanded ? React.createElement(ChevronDownIcon, null) : React.createElement(ChevronRightIcon, null))),\n    React.createElement(TextInput, { style: isToggle ? { position: 'absolute', left: '48px' } : null, onChange: () => null, isReadOnly: true, value: text, \"aria-label\": ariaLabel }),\n    React.createElement(Button, { onClick: onCopy, variant: \"primary\", style: { position: 'absolute', right: '1px' } }, isCopied ? React.createElement(OkIcon, null) : React.createElement(PasteIcon, null)),\n    isToggle && isExpanded && React.createElement(\"div\", { className: \"pf-c-form-control\" }, text)));\nexport class CopyClipboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { wasClicked: false, expanded: false };\n    }\n    render() {\n        return (React.createElement(CopyClipboardStateless, { isToggle: this.props.isToggle, isExpanded: this.state.expanded, onExpand: () => {\n                this.setState({ expanded: !this.state.expanded });\n            }, text: this.props.text, isCopied: this.state.wasClicked, \"aria-label\": this.props['aria-label'], onCopy: (event) => {\n                copyfnc(event, this.props.text);\n                this.setState({ wasClicked: true }, () => {\n                    const timer = setTimeout(() => {\n                        this.setState({ wasClicked: false }, () => {\n                            clearTimeout(timer);\n                        });\n                    }, 2000);\n                });\n            } }));\n    }\n}\n","import { Title } from '@patternfly/react-core';\nimport CopyClipboard from 'components/copyClipboard';\nimport React from 'react';\nconst ConfigureInstructions = ({ t }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.configure.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.configure.instructions_text')),\n        React.createElement(\"br\", null),\n        React.createElement(Title, { size: \"md\" }, t('onboarding.configure.edit_contrab_title')),\n        React.createElement(\"div\", null, t('onboarding.configure.edit_contrab')),\n        React.createElement(CopyClipboard, { text: \"contrab -u <username> -e\", \"aria-label\": \"command line to edit contrab\" }),\n        React.createElement(\"br\", null),\n        React.createElement(Title, { size: \"md\" }, t('onboarding.configure.create_entry_title')),\n        React.createElement(\"div\", null, t('onboarding.configure.create_entry')),\n        React.createElement(CopyClipboard, { text: \"*/45 * * * * /path/to/ocp_usage.sh --collect\", \"aria-label\": \"entry to run OCP Usage collector every 45 minutes\" }),\n        React.createElement(\"br\", null),\n        React.createElement(Title, { size: \"md\" }, t('onboarding.configure.note_title')),\n        React.createElement(\"div\", null, t('onboarding.configure.note')),\n        React.createElement(CopyClipboard, { text: \"ocpcollector ALL=(ALL) NOPASSWD: ALL\", \"aria-label\": \"set sudo authority to interact with Red Hat Insights Client\" }),\n        React.createElement(\"br\", null)));\n};\nexport default ConfigureInstructions;\n","import { translate } from 'react-i18next';\nimport ConfigureInstructions from './instructions';\nexport default translate()(ConfigureInstructions);\n","import { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport React from 'react';\nimport { getTestProps, testIds } from 'testIds';\nconst ArnForm = ({ t, isValid, value, onChange }) => {\n    return (React.createElement(Form, null,\n        React.createElement(FormGroup, { isValid: isValid, fieldId: \"arn\", label: t('onboarding.enable_account_access.arn_label'), helperText: t('onboarding.enable_account_access.arn_helper_text'), helperTextInvalid: t('onboarding.enable_account_access.arn_helper_text_invalid') },\n            React.createElement(TextInput, Object.assign({}, getTestProps(testIds.onboarding.arn_input), { isValid: isValid, id: \"arn\", value: value, onChange: onChange })))));\n};\nexport default ArnForm;\n","import { List, ListItem, Title } from '@patternfly/react-core';\nimport React from 'react';\nconst EnableAccountAccessInstructions = ({ t, }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.enable_account_access.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.enable_account_access.intro')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null, t('onboarding.enable_account_access.select_role')),\n            React.createElement(ListItem, null, t('onboarding.enable_account_access.copy_arn')))));\n};\nexport default EnableAccountAccessInstructions;\n","import React from 'react';\nimport { arnValidator } from 'utils/validators';\nimport ArnForm from './form';\nimport EnableAccountAccessInstructions from './instructions';\nconst EnableAccountAccess = ({ t, arn, updateArn, arnValid, }) => {\n    const onChange = (_name, event) => {\n        updateArn(event.currentTarget.value, arnValidator);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(EnableAccountAccessInstructions, { t: t }),\n        React.createElement(\"br\", null),\n        React.createElement(\"br\", null),\n        React.createElement(ArnForm, { t: t, onChange: onChange, isValid: arnValid, value: arn })));\n};\nexport default EnableAccountAccess;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport EnableAccountAccess from './enableAccountAccess';\nexport default connect(createMapStateToProps(state => ({\n    arn: onboardingSelectors.selectOnboardingArn(state),\n    arnValid: onboardingSelectors.selectOnboardingValidation(state).arnValid,\n})), {\n    updateArn: onboardingActions.updateArn,\n})(translate()(EnableAccountAccess));\n","import { List, ListItem, Title } from '@patternfly/react-core';\nimport CopyClipboard from 'components/copyClipboard';\nimport React from 'react';\nimport { Interpolate } from 'react-i18next';\nconst IamPolicyInstructions = ({ t, s3BucketName }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.iam_policy.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.iam_policy.intro')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null,\n                React.createElement(Interpolate, { iampolicy: React.createElement(\"a\", { href: \"https://docs.aws.amazon.com/IAM/latest/UserGuide/console.html\", target: \"_blank\" }, \"AWS Identity Access Management* (IAM) console\"), i18nKey: \"onboarding.iam_policy.sign_in\" })),\n            React.createElement(ListItem, null,\n                t('onboarding.iam_policy.new_policy'),\n                React.createElement(\"br\", null),\n                React.createElement(CopyClipboard, { isToggle: true, text: `{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [{\n        \"Sid\": \"VisualEditor0\",\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:Get*\",\n            \"s3:List*\"\n        ],\n        \"Resource\": [\n            \"arn:aws:s3:::${s3BucketName}\",\n            \"arn:aws:s3:::${s3BucketName}/*\"\n        ]\n    },\n    {\n        \"Sid\": \"VisualEditor1\",\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:ListAllMyBuckets\",\n            \"iam:ListAccountAliases\",\n            \"cur:DescribeReportDefinitions\"\n        ],\n        \"Resource\": \"*\"\n    }]\n}`, \"aria-label\": \"command line to obtain the token\" })),\n            React.createElement(ListItem, null, t('onboarding.iam_policy.complete_process'))),\n        React.createElement(\"br\", null),\n        React.createElement(\"br\", null),\n        React.createElement(\"div\", null,\n            React.createElement(\"b\", null, t('onboarding.iam_policy.donot_close_browser')),\n            t('onboarding.iam_policy.note'))));\n};\nexport default IamPolicyInstructions;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingSelectors } from 'store/onboarding';\nimport IamPolicyInstructions from './instructions';\nexport default connect(createMapStateToProps(state => ({\n    s3BucketName: onboardingSelectors.selectOnboardingS3BucketName(state),\n})), {})(translate()(IamPolicyInstructions));\n","import { List, ListItem, Title } from '@patternfly/react-core';\nimport CopyClipboard from 'components/copyClipboard';\nimport React from 'react';\nconst IamRoleInstructions = ({ t }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.iam_role.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.iam_role.intro')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null, t('onboarding.iam_role.create_new_role')),\n            React.createElement(ListItem, null,\n                t('onboarding.iam_role.paste_account_id'),\n                React.createElement(\"br\", null),\n                React.createElement(CopyClipboard, { text: \"589173575009\", \"aria-label\": \"account id to paste\" })),\n            React.createElement(ListItem, null, t('onboarding.iam_role.attach_permissions')),\n            React.createElement(ListItem, null, t('onboarding.iam_role.complete_process')))));\n};\nexport default IamRoleInstructions;\n","import { translate } from 'react-i18next';\nimport IamRole from './instructions';\nexport default translate()(IamRole);\n","import { List, ListItem, Title } from '@patternfly/react-core';\nimport CopyClipboard from 'components/copyClipboard';\nimport React from 'react';\nconst ObtainLoginInstructions = ({ t }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.obtain_login.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.obtain_login.intro')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null, t('onboarding.obtain_login.obtain_token')),\n            React.createElement(ListItem, null,\n                t('onboarding.obtain_login.run_command'),\n                React.createElement(\"br\", null),\n                React.createElement(CopyClipboard, { text: \"oc serviceaccounts get-token metering-operator > ocp_usage_token\", \"aria-label\": \"command line to obtain the token\" })),\n            React.createElement(ListItem, null, t('onboarding.obtain_login.security')))));\n};\nexport default ObtainLoginInstructions;\n","import { translate } from 'react-i18next';\nimport ObtainLogin from './instructions';\nexport default translate()(ObtainLogin);\n","import { Checkbox } from '@patternfly/react-core';\nimport React from 'react';\nimport { Interpolate } from 'react-i18next';\nimport { getTestProps, testIds } from 'testIds';\nconst actionItems = [\n    {\n        id: 'check-ocp-version',\n        label: React.createElement(Interpolate, { i18nKey: \"onboarding.source_kind.checkbox_1\" }),\n        ariaLabel: 'OCP version 3.11 or newer',\n        testProps: getTestProps(testIds.onboarding.check_box_1),\n    },\n    {\n        id: 'check-operator-metering',\n        label: (React.createElement(Interpolate, { i18nKey: \"onboarding.source_kind.checkbox_2\", operator: React.createElement(\"a\", { target: \"_blank\", href: \"https://github.com/operator-framework/operator-metering/blob/master/Documentation/install-metering.md\" }, \"Operator Metering\") })),\n        ariaLabel: 'Install operator metering',\n        testProps: getTestProps(testIds.onboarding.check_box_2),\n    },\n    {\n        id: 'check-insights-client',\n        label: (React.createElement(Interpolate, { i18nKey: \"onboarding.source_kind.checkbox_3\", insights: React.createElement(\"a\", { target: \"_blank\", href: \"https://access.redhat.com/products/red-hat-insights/#getstarted\" }, \"Red Hat Insights Client\") })),\n        ariaLabel: 'Setup Red Hat Insights Client',\n        testProps: getTestProps(testIds.onboarding.check_box_3),\n    },\n    {\n        id: 'check-ansible-epel',\n        label: (React.createElement(Interpolate, { i18nKey: \"onboarding.source_kind.checkbox_4\", ansible: React.createElement(\"a\", { target: \"_blank\", href: \"https://docs.ansible.com/ansible/2.7/installation_guide/intro_installation.html\" }, \"Ansible\"), epel: React.createElement(\"a\", { target: \"_blank\", href: \"https://fedoraproject.org/wiki/EPEL#Quickstart\" }, \"EPEL repository\") })),\n        ariaLabel: 'Install Ansible and EPEL',\n        testProps: getTestProps(testIds.onboarding.check_box_4),\n    },\n    {\n        id: 'check-oc',\n        label: (React.createElement(Interpolate, { i18nKey: \"onboarding.source_kind.checkbox_5\", oc: React.createElement(\"a\", { target: \"_blank\", href: \"https://docs.openshift.com/container-platform/3.3/cli_reference/get_started_cli.html#cli-linux\" }, \"OCP command-line (oc)\") })),\n        ariaLabel: 'Install OCP command line',\n        testProps: getTestProps(testIds.onboarding.check_box_5),\n    },\n];\nconst SourceKindCheckList = ({ t, checkedItems, updateCheckItem, checkAll, }) => {\n    return (React.createElement(React.Fragment, null,\n        t('onboarding.source_kind.checklist_title'),\n        actionItems.map(actionItem => (React.createElement(Checkbox, Object.assign({}, actionItem.testProps, { key: `checkbox-key-${actionItem.id}`, isChecked: checkedItems[actionItem.id] || false, onChange: updateCheckItem, label: actionItem.label, \"aria-label\": actionItem.ariaLabel, id: actionItem.id })))),\n        React.createElement(Checkbox, Object.assign({}, getTestProps(testIds.onboarding.check_box_all), { key: 'checkbox-all-sourcekind', onChange: checkAll, isChecked: Object.keys(checkedItems).every(k => checkedItems[k]), label: t('onboarding.source_kind.checkbox_6'), \"aria-label\": t('onboarding.source_kind.check them all'), id: \"check-them-all\" }))));\n};\nSourceKindCheckList.defaultProps = {\n    updateCheckItem: () => null,\n    checkAll: () => null,\n};\nexport default SourceKindCheckList;\n","import { Form, FormGroup, FormSelect, FormSelectOption, TextInput, } from '@patternfly/react-core';\nimport React from 'react';\nimport { getTestProps, testIds } from 'testIds';\nconst SourceKindForm = ({ t, name, updateName, nameValid, type, updateType, typeValid, }) => {\n    return (React.createElement(Form, null,\n        React.createElement(FormGroup, { isValid: typeValid, fieldId: \"source_type\", label: t('onboarding.type_label') },\n            React.createElement(FormSelect, Object.assign({}, getTestProps(testIds.onboarding.type_selector), { isValid: typeValid, value: type, id: \"source_type\", onChange: updateType }),\n                React.createElement(FormSelectOption, Object.assign({}, getTestProps(testIds.onboarding.type_opt_non), { label: t('onboarding.select_type_label'), value: \"\" })),\n                React.createElement(FormSelectOption, Object.assign({}, getTestProps(testIds.onboarding.type_opt_aws), { label: \"Amazon Web Services (AWS)\", value: \"AWS\" })),\n                React.createElement(FormSelectOption, Object.assign({}, getTestProps(testIds.onboarding.type_opt_ocp), { label: \"Red Hat OpenShift (RH OCP)\", value: \"OCP\" })))),\n        React.createElement(FormGroup, { isValid: nameValid, helperTextInvalid: t('onboarding.name_helper_invalid_text'), helperText: t('onboarding.name_helper_text'), fieldId: \"source_name\", label: t('onboarding.name_label') },\n            React.createElement(TextInput, Object.assign({}, getTestProps(testIds.onboarding.name_input), { isValid: nameValid, id: \"source_name\", value: name, onChange: updateName })))));\n};\nexport default SourceKindForm;\n","import { Title } from '@patternfly/react-core';\nimport React from 'react';\nconst SourceKindInstructions = ({ t }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.source_kind.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.source_kind.instructions_text')),\n        React.createElement(\"br\", null)));\n};\nexport default SourceKindInstructions;\n","import React from 'react';\nimport { sourceNameValidator, sourceTypeValidator } from 'utils/validators';\nimport SourceKindCheckList from './checkList';\nimport SourceKindForm from './form';\nimport SourceKindInstructions from './instructions';\nconst SourceKind = ({ t, name, updateName, nameValid, type, updateType, typeValid, checked, updateCheck, checkAll, }) => {\n    const updateNameText = (_name, event) => {\n        updateName(event.currentTarget.value, sourceNameValidator);\n    };\n    const updateTypeOption = (event) => {\n        updateType(event, sourceTypeValidator);\n    };\n    const updateCheckItem = (value, event) => {\n        updateCheck({ item: event.currentTarget.id, value });\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(SourceKindInstructions, { t: t }),\n        React.createElement(SourceKindForm, { updateName: updateNameText, updateType: updateTypeOption, name: name, nameValid: nameValid, type: type, typeValid: typeValid, t: t }),\n        React.createElement(\"br\", null),\n        Boolean(type === 'OCP') && (React.createElement(SourceKindCheckList, { t: t, checkedItems: checked, updateCheckItem: updateCheckItem, checkAll: () => {\n                checkAll();\n            } }))));\n};\nexport default SourceKind;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport SourceKind from './sourceKind';\nexport default connect(createMapStateToProps(state => (Object.assign({ name: onboardingSelectors.selectOnboardingName(state), type: onboardingSelectors.selectOnboardingType(state), checked: onboardingSelectors.selectOnboardingSourceKindChecked(state) }, onboardingSelectors.selectOnboardingValidation(state)))), {\n    updateName: onboardingActions.updateName,\n    updateType: onboardingActions.updateType,\n    updateCheck: onboardingActions.updateSourceKindCheckList,\n    checkAll: onboardingActions.checkSourceKindCheckList,\n})(translate()(SourceKind));\n","import { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport React from 'react';\nimport { getTestProps, testIds } from 'testIds';\nconst ClusterForm = ({ t, isValid, value, onChange }) => {\n    return (React.createElement(Form, null,\n        React.createElement(FormGroup, { isValid: isValid, fieldId: \"cluster_id\", label: t('onboarding.korekuta.cluster_id_label') },\n            React.createElement(TextInput, Object.assign({}, getTestProps(testIds.onboarding.clusterid_input), { isValid: isValid, id: \"cluster_id\", value: value, onChange: onChange })))));\n};\nexport default ClusterForm;\n","import { List, ListItem, Title } from '@patternfly/react-core';\nimport React from 'react';\nimport { Interpolate } from 'react-i18next';\nconst UsageCollectorInstructions = ({ t, }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.korekuta.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.korekuta.instructions_text')),\n        React.createElement(\"br\", null),\n        t('onboarding.korekuta.checklist_title'),\n        React.createElement(List, null,\n            React.createElement(ListItem, null,\n                React.createElement(React.Fragment, null,\n                    React.createElement(Interpolate, { i18nKey: \"onboarding.korekuta.download_and_install\", korekuta: React.createElement(\"a\", { href: \"https://koku.readthedocs.io/en/latest/providers.html#download-and-configure-ocp-usage-collector-korekuta\", target: \"_blank\" }, \"OCP Usage Collector\") }),\n                    React.createElement(\"br\", null),\n                    t('onboarding.korekuta.checklist_title'),\n                    React.createElement(\"br\", null),\n                    React.createElement(List, null,\n                        React.createElement(ListItem, null, t('onboarding.korekuta.checkbox_1')),\n                        React.createElement(ListItem, null, t('onboarding.korekuta.checkbox_2')),\n                        React.createElement(ListItem, null, t('onboarding.korekuta.checkbox_3')),\n                        React.createElement(ListItem, null, t('onboarding.korekuta.checkbox_4'))),\n                    React.createElement(\"div\", null, t('onboarding.korekuta.for_example')),\n                    React.createElement(\"br\", null),\n                    React.createElement(\"div\", null, \"# ./ocp_usage.sh --setup -e OCP_API=\\\"https://api.openshift-prod.mycompany.com\\\" -e OCP_METERING_NAMESPACE=\\\"metering\\\" -e OCP_TOKEN_PATH=\\\"/path/to/ocp_usage_token\\\"\"))),\n            React.createElement(ListItem, null, t('onboarding.korekuta.post_installation')))));\n};\nexport default UsageCollectorInstructions;\n","import React from 'react';\nimport { ocpClusterIdValidator } from 'utils/validators';\nimport ClusterIdForm from './form';\nimport Instructions from './instructions';\nconst UsageCollector = ({ t, clusterId, updateClusterId, clusterIdValid, }) => {\n    const onChange = (_name, event) => {\n        updateClusterId(event.currentTarget.value, ocpClusterIdValidator);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Instructions, { t: t }),\n        React.createElement(\"br\", null),\n        React.createElement(\"br\", null),\n        React.createElement(ClusterIdForm, { t: t, onChange: onChange, isValid: clusterIdValid, value: clusterId })));\n};\nexport default UsageCollector;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport UsageCollector from './usageCollector';\nexport default connect(createMapStateToProps(state => ({\n    clusterId: onboardingSelectors.selectOnboardingClusterID(state),\n    clusterIdValid: onboardingSelectors.selectOnboardingValidation(state)\n        .clusterIdValid,\n})), {\n    updateClusterId: onboardingActions.updateClusterID,\n})(translate()(UsageCollector));\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport { WizardBase } from './wizard';\nexport default connect(createMapStateToProps(state => ({\n    isModalOpen: onboardingSelectors.selectOnboardingModal(state),\n    isInvalid: onboardingSelectors.selectOnboardingIsInvalid(state),\n    dirtyMap: onboardingSelectors.selectOnboardingDirty(state),\n    sourceKindChecked: onboardingSelectors.selectOnboardingSourceKindChecked(state),\n    type: onboardingSelectors.selectOnboardingType(state),\n})), {\n    cancelOnboarding: onboardingActions.cancelOnboarding,\n})(translate()(WizardBase));\n","import { Button, Modal } from '@patternfly/react-core';\nimport Final from 'pages/onboardingModal//final';\nimport AwsConfigure from 'pages/onboardingModal/awsConfigure';\nimport Configure from 'pages/onboardingModal/configure';\nimport EnableAccountAccess from 'pages/onboardingModal/enableAccountAccess';\nimport IamPolicy from 'pages/onboardingModal/iamPolicy';\nimport IamRole from 'pages/onboardingModal/iamRole';\nimport ObtainLogin from 'pages/onboardingModal/obtainLogin';\nimport SourceKind from 'pages/onboardingModal/sourceKind';\nimport UsageCollector from 'pages/onboardingModal/usageCollector';\nimport React from 'react';\nimport Merlin from 'react-merlin';\nimport { getTestProps, testIds } from 'testIds';\nconst stepMap = type => {\n    switch (type) {\n        case 'AWS':\n            return [\n                React.createElement(SourceKind, { key: \"source_kind\" }),\n                React.createElement(AwsConfigure, { key: \"aws_configure\" }),\n                React.createElement(IamPolicy, { key: \"aws_iam_policy\" }),\n                React.createElement(IamRole, { key: \"aws_iam_role\" }),\n                React.createElement(EnableAccountAccess, { key: \"enable_account_access\" }),\n                React.createElement(Final, { key: \"aws_final\" }),\n            ];\n        case 'OCP':\n            return [\n                React.createElement(SourceKind, { key: \"source_kind\" }),\n                React.createElement(ObtainLogin, { key: \"obtain_login\" }),\n                React.createElement(UsageCollector, { key: \"usage_collector\" }),\n                React.createElement(Configure, { key: \"configure\" }),\n                React.createElement(Final, { key: \"final\" }),\n            ];\n        default:\n            return [React.createElement(SourceKind, { key: \"source_kind\" })];\n    }\n};\nconst dirtyStepMap = (dirtyMap, sourceKindChecked) => type => {\n    switch (type) {\n        case 'AWS':\n            return [\n                dirtyMap.name && dirtyMap.type,\n                dirtyMap.s3BucketName,\n                true,\n                true,\n                dirtyMap.arn,\n                true,\n            ];\n        case 'OCP':\n            return [\n                dirtyMap.name &&\n                    dirtyMap.type &&\n                    Object.keys(sourceKindChecked).every(k => sourceKindChecked[k]),\n                true,\n                dirtyMap.clusterId,\n                true,\n                true,\n            ];\n        default:\n            return [];\n    }\n};\nexport const WizardBase = ({ t, cancelOnboarding, isModalOpen, isInvalid, dirtyMap, sourceKindChecked, type, }) => {\n    const steps = stepMap(type);\n    const isDirty = dirtyStepMap(dirtyMap, sourceKindChecked)(type);\n    return (React.createElement(Merlin, null, ({ index, setIndex }) => {\n        const actions = [\n            (type === '' || index < steps.length - 1) && (React.createElement(Button, Object.assign({}, getTestProps(testIds.onboarding.btn_cancel), { key: \"wizard_cancel\", variant: \"secondary\", id: \"wizard_cancel_button\", onClick: () => {\n                    setIndex(0);\n                    cancelOnboarding();\n                } }), \"Cancel\")),\n            index > 0 && index < steps.length - 1 && (React.createElement(Button, Object.assign({}, getTestProps(testIds.onboarding.btn_back), { key: \"wizard_back\", variant: \"secondary\", id: \"wizard_back_button\", onClick: () => setIndex(index - 1) }), \"Back\")),\n            type === '' && (React.createElement(Button, { isDisabled: true, key: \"wizard_init_continue\", variant: \"primary\", id: \"wizard_init_button\" }, \"Continue\")),\n            type !== '' && index < steps.length - 1 && (React.createElement(Button, Object.assign({}, getTestProps(testIds.onboarding.btn_continue), { isDisabled: !isDirty[index] || isInvalid, key: \"wizard_continue\", variant: \"primary\", id: \"wizard_continue_button\", onClick: () => {\n                    setIndex(index + 1);\n                } }), index + 2 === steps.length ? 'Finish' : 'Continue')),\n            type !== '' && index + 1 === steps.length && (React.createElement(Button, Object.assign({}, getTestProps(testIds.onboarding.btn_close), { key: \"wizard_close\", variant: \"primary\", id: \"wizard_close_button\", onClick: () => {\n                    setIndex(0);\n                    cancelOnboarding();\n                } }), \"Close\")),\n        ];\n        return (React.createElement(Modal, { style: {\n                height: '700px',\n                width: '800px',\n            }, isLarge: true, title: t('onboarding.wizard.title'), isOpen: isModalOpen, actions: actions, onClose: () => {\n                setIndex(0);\n                cancelOnboarding();\n            } }, steps[index]));\n    }));\n};\n"],"sourceRoot":""}