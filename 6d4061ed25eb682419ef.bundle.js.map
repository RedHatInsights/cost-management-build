{"version":3,"sources":["webpack:///./src/pages/ocpCloudDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTagView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpCloudDetails/exportModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/exportModal.tsx","webpack:///./src/pages/ocpCloudDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalChart.tsx","webpack:///./src/pages/ocpCloudDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsActions.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.tsx","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.styles.ts","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpCloudDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","tags","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getNoDataForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getForDateRangeString","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendItemsPerRow","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","marginLeft","historicalTrendChart_HistoricalTrendChart","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpCloudReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpCloudReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpCloudReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpCloudReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpCloudReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","cloudReportType","meta","total","getCostLayout","Tooltip","content","enableFlip","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","ocpCloudReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpCloudReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpCloudReportSummaryItem","ocpCloudReportSummaryItems_styles_styles","skeleton","OcpCloudReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","ocpCloudReportSummaryTrend_styles_styles","OcpCloudReportSummaryTrend","trendChart","OcpCloudReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","costValue","costLabelUnit","costLabelDate","header","backgroundColor","info","verticalAlign","infoIcon","infoTitle","fontWeight","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpCloudQuery","filter","resolution","time_scope_units","time_scope_value","ocpCloudReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","tag","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","show","onGroupByClicked","showContent","sizes","Popover","aria-label","bodyContent","info_circle_icon","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","val","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","ocpCloudReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpCloudExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpCloudReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpCloudReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalTrendChart","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpCloudDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","freeSpace","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","hasTotal","hasLimit","trunc","limitUnits","hasRequest","requestUnits","hasUsage","hasCapacity","capacityUnits","unusedRequestCapacity","unusedRequestCapacityPercentage","unusedUsageCapacity","unusedUsageCapacityPercentage","TextContent","TextList","dl","TextListItem","dt","dd","percentage","cpuDatum","getChartDatumWithCapacity","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","maxDomain","minDomain","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","getFreeSpace","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","showPercentage","showValue","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsDataToolbar_styles_styles","toolbarContainer","paddingLeft","detailsDataToolbar_tagKey","defaultFilters","DetailsDataToolbar","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","getActiveFilters","filter_by","isArray","onDelete","filterType","prevState","_filterType","onFilterRemoved","onCategoryClick","currentCategory","onCategorySelect","currentTagKey","onCategoryToggle","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","control","search_icon","prevFilters","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","Select","selectConstants","typeahead","onClear","onTagKeyClear","onTagKeyToggle","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","target","prevSelections","getExportButton","isExportDisabled","DataToolbarItem","handleExportClicked","external_link_square_alt_icon","onExportClicked","equal","dropdownConstants","filter_icon","pagination","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","breakpointMods","modifier","detailsToolbar_categoryOptions","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","exportText","ocpCloudDetails_styles_styles","ocpCloudDetails","paginationContainer","tableContainer","ocpCloudDetails_reportType","ocpCloudDetails_tagKey","ocpCloudDetails_baseQuery","ocpCloudDetails_mapStateToProps","ocpCloudDetails_mapDispatchToProps","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","history","found","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"6d4061ed25eb682419ef.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpCloudDetails from './ocpCloudDetails';\nexport default hot(module)(OcpCloudDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummary.styles';\nconst OcpCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpCloudReportSummary = translate()(OcpCloudReportSummaryBase);\nexport { OcpCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpCloudReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { OcpCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryDetails.styles';\nconst OcpCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let markupCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        markupCost = formatValue(report.meta.total.markup_cost ? report.meta.total.markup_cost.value : 0, report.meta.total.markup_cost\n            ? report.meta.total.markup_cost.units\n            : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_cloud_dashboard.total_cost_tooltip', {\n                infrastructureCost,\n                markupCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpCloudReportSummaryDetails = translate()(OcpCloudReportSummaryDetailsBase);\nexport { OcpCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryItem.styles';\nconst OcpCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpCloudReportSummaryItem = translate()(OcpCloudReportSummaryItemBase);\nexport { OcpCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './ocpCloudReportSummaryItems.styles';\nclass OcpCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpCloudReportSummaryItems = translate()(OcpCloudReportSummaryItemsBase);\nexport { OcpCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        childName: 'previousLimit',\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        childName: 'currentLimit',\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { parseQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'project',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(tag => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${tag.key}`, onClick: () => this.handleGroupByClick(`${tagKey}${tag.key}`) }, t('group_by.tag_key', { value: tag.key }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let markupCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            markupCost = formatValue(report.meta.total.markup_cost ? report.meta.total.markup_cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_cloud_details.title')),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_cloud_details.total_cost_tooltip', {\n                            infrastructureCost,\n                            markupCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_cloud_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_cloud_details.markup_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_cloud_details.infrastructure_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_cloud_details.infrastructure_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_cloud_details.markup_title')),\n                                    React.createElement(\"p\", null, t('ocp_cloud_details.markup_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_cloud_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpCloudReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudExportActions, ocpCloudExportSelectors, } from 'store/ocpCloudExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpCloudExportSelectors.selectExportError(state),\n        export: ocpCloudExportSelectors.selectExport(state),\n        fetchStatus: ocpCloudExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpCloudExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpCloudReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpCloudReportsActions from 'store/ocpCloudReports/ocpCloudReportsActions';\nimport * as ocpCloudReportsSelectors from 'store/ocpCloudReports/ocpCloudReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpCloudReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformOcpCloudReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('ocp_cloud_details.historical.cost_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_cloud_details.historical.cpu_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_cloud_details.historical.memory_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/ocpCloudDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_cloud_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_cloud_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_cloud_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_cloud_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    freeSpace: {\n        marginBottom: global_spacer_lg.value,\n        marginLeft: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = t(`units.${unitLookupKey(hasCapacity ? report.meta.total.capacity.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace(report, labelKey) {\n        const { t } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        // Note: Unused won't be negative since Kubernetes doesn't allow requests to exceed capacity -- see #1232\n        const unusedRequestCapacity = capacity - request;\n        const unusedRequestCapacityPercentage = (request / capacity) * 100;\n        const unusedUsageCapacity = capacity - usage;\n        const unusedUsageCapacityPercentage = (usage / capacity) * 100;\n        return (React.createElement(TextContent, { className: css(styles.freeSpace) },\n            React.createElement(TextList, { component: TextListVariants.dl },\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_cloud_details.bullet.${labelKey}_usage_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_cloud_details.bullet.${labelKey}_usage_unused`, {\n                    percentage: formatValue(unusedUsageCapacityPercentage, usageUnits),\n                    value: unusedUsageCapacity,\n                    units: usageUnits,\n                })),\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_cloud_details.bullet.${labelKey}_requests_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_cloud_details.bullet.${labelKey}_requests_unused`, {\n                    percentage: formatValue(unusedRequestCapacityPercentage, requestUnits),\n                    value: unusedRequestCapacity,\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, groupBy, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(cpuReport, 'cpu')\n            : this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(memoryReport, 'memory')\n            : this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                        ? [\n                            {\n                                tooltip: cpuDatum.limit.tooltip,\n                                y: cpuDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value\n                        ? [{ name: cpuDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, maxDomain: !cpuReport ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: cpuDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: cpuDatum.ranges[0].tooltip,\n                                y: cpuDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                        ? [{ name: cpuDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(cpuReport, 'cpu'))))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                        ? [\n                            {\n                                tooltip: memoryDatum.limit.tooltip,\n                                y: memoryDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                        ? [{ name: memoryDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, maxDomain: !memoryReport ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: memoryDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: memoryDatum.ranges[0].tooltip,\n                                y: memoryDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                        ? [{ name: memoryDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(memoryReport, 'memory')))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_cloud_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpCloudReportItems } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedOcpCloudReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(OcpCloudReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_cloud_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (!((groupBy === 'project' || groupBy === 'node') &&\n                    getIdKeyForTab(tab).toString() === 'project')) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top_ocp_cloud', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"projects\" /* projects */,\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_cloud_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_cloud_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_cloud_details.name_column_title', {\n                            groupBy: groupById,\n                        }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpCloudReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return undefined;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                const filterType = type.toLowerCase();\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: t(`filter_by.values.${categoryOption.label}`), chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if (event.key && event.key !== 'Enter') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : [...prevFilters, categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            // Width prop is a workaround for https://github.com/patternfly/patternfly-react/issues/3574\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder'), width: 200 }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions, t } = this.props;\n        const { currentCategory, isCategoryDropdownOpen } = this.state;\n        const index = currentCategory ? currentCategory.indexOf('tag') : -1;\n        const label = index !== -1\n            ? t('filter_by.values.tag')\n            : t(`filter_by.values.${currentCategory}`);\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, t(`filter_by.values.${option.label}`)))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"ocp-cloud-details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            categoryOptions &&\n                                categoryOptions\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        React.createElement(DataToolbarGroup, null, this.getExportButton())),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { getQuery } from 'api/ocpCloudQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { isEqual } from '../../utils/equal';\nconst categoryOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n    { label: 'tag', value: 'tag' },\n];\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { exportText, groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: categoryOptions, exportText: exportText, groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpCloudDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery, } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpCloudDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpCloudDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_cloud_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[filterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[filterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[filterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[filterType] = [\n                        newQuery.filter_by[filterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            if (filterType === null) {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (filterValue === null) {\n                newQuery.filter_by[filterType] = undefined; // Clear all values\n            }\n            else if (Array.isArray(newQuery.filter_by[filterType])) {\n                const index = newQuery.filter_by[filterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[filterType] = [\n                        ...query.filter_by[filterType].slice(0, index),\n                        ...query.filter_by[filterType].slice(index + 1),\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = undefined;\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp-cloud?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpCloudReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpCloudDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpCloudDetails));\n"],"sourceRoot":""}