{"version":3,"sources":["webpack://koku-ui/./src/pages/views/details/gcpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/gcpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/gcpBreakdown/gcpBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/gcpBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedGcpReportItems.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/gcpDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/gcpDetails.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","gcpCostOverview","widgets","CostOverview","withTranslation","connect","gcpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","Object","assign","filter","resolution","time_scope_units","time_scope_value","account","filter_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","instance_type","project","region","service","styles","cost","display","alignItems","costLabel","costValue","marginTop","marginBottom","marginRight","global_spacer_md","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","padding","global_spacer_lg","backgroundColor","global_BackgroundColor_light_100","paddingBottom","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","onGroupByClicked","providersError","this","showContent","meta","count","hasCost","total","style","Title","headingLevel","size","isDisabled","onItemClicked","options","showTags","Boolean","DetailsHeader","emptyState","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","super","columns","rows","buildCostLink","group_by","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","toString","id","desc","push","cells","disableSelection","isOpen","selected","undefined","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","setState","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","showBulkSelect","showExport","showFilter","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","gcpDetails","minHeight","content","paginationContainer","marginLeft","tableContainer","limit","offset","GcpDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","showTimeScope","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"mappings":"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","file":"a34dc455692d4a16935b.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { gcpCostOverviewSelectors } from 'store/breakdown/costOverview/gcpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpCostOverviewSelectors.selectWidgets(state),\n        widgets: gcpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { gcpHistoricalDataSelectors } from 'store/breakdown/historicalData/gcpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpHistoricalDataSelectors.selectWidgets(state),\n        widgets: gcpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.gcpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"gcp\" /* gcp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = queryFromRoute;\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = Object.assign({ filter: Object.assign(Object.assign({ resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }, (query && query.filter && query.filter.account && { ['account']: query.filter.account })), (groupBy && { [groupBy]: groupByValue })) }, (query && query.filter_by && { filter_by: query.filter_by }));\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, groupByValue: groupByValue, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.gcp_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"gcp\" /* gcp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"gcp\" /* gcp */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst GcpBreakdown = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default GcpBreakdown;\n","import GcpBreakdown from './gcpBreakdown';\nexport default GcpBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst tagReportPathsType = \"gcp\" /* gcp */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.gcp_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './gcpDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQueryRoute } from 'api/queries/azureQuery';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { breakdownDescKey, tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"gcp\" /* gcp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.buildCostLink = (label, description) => {\n            const { groupBy, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n                    [groupBy]: label,\n                } });\n            return `${paths.gcpDetailsBreakdown}?${getQueryRoute(newQuery)}`;\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('details.tag_names'),\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = React.createElement(Link, { to: this.buildCostLink(label.toString(), item.id) }, label);\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/gcpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"gcp\" /* gcp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { t, tagReport } = this.props;\n            const options = [\n                { name: t('filter_by.values.account'), key: 'account' },\n                { name: t('filter_by.values.project'), key: 'project' },\n                { name: t('filter_by.values.service'), key: 'service' },\n                { name: t('filter_by.values.region'), key: 'region' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n    // key_only: true\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    gcpDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './gcpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"gcp\" /* gcp */;\nclass GcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType, showTimeScope: true }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.gcp_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empty data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"gcp\" /* gcp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.gcpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(GcpDetails));\n","import GcpDetails from './gcpDetails';\nexport default GcpDetails;\n"],"sourceRoot":""}