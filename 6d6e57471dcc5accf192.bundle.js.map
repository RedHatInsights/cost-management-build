{"version":3,"sources":["webpack:///./src/pages/ocpCloudDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTagView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpCloudDetails/exportModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/exportModal.tsx","webpack:///./src/pages/ocpCloudDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalChart.tsx","webpack:///./src/pages/ocpCloudDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsActions.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.tsx","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.styles.ts","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpCloudDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","_","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","getSinceDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendItemsPerRow","childName","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","marginLeft","historicalTrendChart_HistoricalTrendChart","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpCloudReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","Boolean","Tooltip","content","enableFlip","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpCloudReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpCloudReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpCloudReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpCloudReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","cloudReportType","meta","total","getCostLayout","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","ocpCloudReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpCloudReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpCloudReportSummaryItem","ocpCloudReportSummaryItems_styles_styles","skeleton","OcpCloudReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","ocpCloudReportSummaryTrend_styles_styles","OcpCloudReportSummaryTrend","trendChart","OcpCloudReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","costValue","costLabelUnit","costLabelDate","header","backgroundColor","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpCloudQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpCloudReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","ocpCloudReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpCloudExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpCloudReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpCloudReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalTrendChart","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpCloudDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","trunc","limitUnits","requestUnits","cpuDatum","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","date","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpCloudDetails_styles_styles","ocpCloudDetails","tableContainer","ocpCloudDetails_reportType","ocpCloudDetails_tagKey","ocpCloudDetails_baseQuery","ocpCloudDetails_mapStateToProps","ocpCloudDetails_mapDispatchToProps","getFilterFields","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"6d6e57471dcc5accf192.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpCloudDetails from './ocpCloudDetails';\nexport default hot(module)(OcpCloudDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummary.styles';\nconst OcpCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpCloudReportSummary = translate()(OcpCloudReportSummaryBase);\nexport { OcpCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpCloudReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { OcpCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryDetails.styles';\nconst OcpCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpCloudReportSummaryDetails = translate()(OcpCloudReportSummaryDetailsBase);\nexport { OcpCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryItem.styles';\nconst OcpCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpCloudReportSummaryItem = translate()(OcpCloudReportSummaryItemBase);\nexport { OcpCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './ocpCloudReportSummaryItems.styles';\nclass OcpCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpCloudReportSummaryItems = translate()(OcpCloudReportSummaryItemsBase);\nexport { OcpCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { parseQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_cloud_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('ocp_cloud_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_cloud_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpCloudReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudExportActions, ocpCloudExportSelectors, } from 'store/ocpCloudExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpCloudExportSelectors.selectExportError(state),\n        export: ocpCloudExportSelectors.selectExport(state),\n        fetchStatus: ocpCloudExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpCloudExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpCloudReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpCloudReportsActions from 'store/ocpCloudReports/ocpCloudReportsActions';\nimport * as ocpCloudReportsSelectors from 'store/ocpCloudReports/ocpCloudReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpCloudReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformOcpCloudReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('ocp_cloud_details.historical.cost_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_cloud_details.historical.cpu_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_cloud_details.historical.memory_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/ocpCloudDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_cloud_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_cloud_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_cloud_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_cloud_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        if (report && report.meta && report.meta.total) {\n            if (report.meta.total.limit !== null) {\n                const limit = Math.trunc(report.meta.total.limit.value);\n                const limitUnits = t(`units.${unitLookupKey(report.meta.total.limit.units)}`);\n                datum.limit = {\n                    legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    value: Math.trunc(limit),\n                };\n            }\n            if (report.meta.total.request !== null) {\n                const request = Math.trunc(report.meta.total.request.value);\n                const requestUnits = t(`units.${unitLookupKey(report.meta.total.request.units)}`);\n                datum.ranges = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        value: Math.trunc(request),\n                    },\n                ];\n            }\n            if (report.meta.total.usage !== null) {\n                const usage = Math.trunc(report.meta.total.usage.value);\n                const usageUnits = t(`units.${unitLookupKey(report.meta.total.usage.units)}`);\n                datum.usage = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        value: Math.trunc(usage),\n                    },\n                ];\n            }\n        }\n        return datum;\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                    ? [\n                        {\n                            tooltip: cpuDatum.limit.tooltip,\n                            y: cpuDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: cpuDatum.usage.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.usage[0].tooltip,\n                            y: cpuDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                    ? [{ name: cpuDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: cpuDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.ranges[0].tooltip,\n                            y: cpuDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                    ? [{ name: cpuDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width })))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                    ? [\n                        {\n                            tooltip: memoryDatum.limit.tooltip,\n                            y: memoryDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                    ? [{ name: memoryDatum.limit.legend }]\n                    : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: memoryDatum.usage.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.usage[0].tooltip,\n                            y: memoryDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                    ? [{ name: memoryDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: memoryDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.ranges[0].tooltip,\n                            y: memoryDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                    ? [{ name: memoryDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_cloud_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpCloudReportItems } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedOcpCloudReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(OcpCloudReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_cloud_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (!((groupBy === 'project' || groupBy === 'node') &&\n                    getIdKeyForTab(tab).toString() === 'project')) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top_ocp_cloud', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"projects\" /* projects */,\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_cloud_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_cloud_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_cloud_details.name_column_title', {\n                            groupBy: groupById,\n                        }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpCloudReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('ocp_cloud_details.increase_since_date', {\n                            date,\n                            month,\n                            value,\n                        })\n                        : t('ocp_cloud_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('ocp_cloud_details.decrease_since_date', {\n                                date,\n                                month,\n                                value,\n                            })\n                            : t('ocp_cloud_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('ocp_cloud_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpCloudDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpCloudDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'or:tag:';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpCloudDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.cluster_select'),\n                        placeholder: t('ocp_cloud_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.node_select'),\n                        placeholder: t('ocp_cloud_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.project_select'),\n                        placeholder: t('ocp_cloud_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by project tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.tag_select'),\n                        placeholder: t('ocp_cloud_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTagKey ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_cloud_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp-on-aws?${getQuery(query)}`; // Todo: replace ocp-on-aws with ocp-cloud\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpCloudReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpCloudDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpCloudDetails));\n"],"sourceRoot":""}