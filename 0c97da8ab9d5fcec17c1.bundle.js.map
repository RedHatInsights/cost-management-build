{"version":3,"file":"0c97da8ab9d5fcec17c1.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/views/details/components/breakdown/index.ts","webpack://koku-ui/./src/pages/views/details/ociBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/ociBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/ociBreakdown/ociBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/ociBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedOciReportItems.ts","webpack://koku-ui/./src/pages/views/details/ociDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/ociDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/ociDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/ociDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/ociDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/ociDetails/ociDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/ociDetails/ociDetails.tsx","webpack://koku-ui/./src/pages/views/details/ociDetails/index.ts"],"sourcesContent":["import BreakdownBase from './breakdownBase';\nexport default BreakdownBase;\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ociCostOverviewSelectors } from 'store/breakdown/costOverview/ociCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ociCostOverviewSelectors.selectWidgets(state),\n        widgets: ociCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ociHistoricalDataSelectors } from 'store/breakdown/historicalData/ociHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ociHistoricalDataSelectors.selectWidgets(state),\n        widgets: ociHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ociDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"oci\" /* oci */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.ociDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers: filterProviders(providers, \"oci\" /* oci */),\n        providersError,\n        providersFetchStatus,\n        providerType: \"oci\" /* oci */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"oci\" /* oci */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OciCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OciCost;\n","import OciBreakdown from './ociBreakdown';\nexport default OciBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.payer_tenant_id) {\n        return 'payer_tenant_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.product_service) {\n        return 'product_service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/ociQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport { Currency } from 'pages/components/currency';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOciReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isFeatureVisible } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'payer_tenant_id', value: 'payer_tenant_id' },\n    { label: 'product_service', value: 'product_service' },\n    { label: 'region', value: 'region' },\n];\nconst tagReportPathsType = \"oci\" /* oci */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ociDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isFeatureVisible(\"currency\" /* currency */) && React.createElement(Currency, null),\n                    isFeatureVisible(\"exports\" /* exports */) && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"oci\" /* oci */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './ociDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/ociQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { EmptyFilterState } from 'pages/components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'pages/components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOciReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"oci\" /* oci */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ociDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.ociDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ociQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"oci\" /* oci */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'payer_tenant_id' }),\n                    key: 'payer_tenant_id',\n                },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'product_service' }),\n                    key: 'product_service',\n                },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'region' }),\n                    key: 'region',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"oci\" /* oci */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReportFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    ociDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/ociQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOciReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ociDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        payer_tenant_id: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"oci\" /* oci */;\nclass OciDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.ociDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"oci\" /* oci */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ociDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"oci\" /* oci */),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OciDetails));\n","import OciDetails from './ociDetails';\nexport default OciDetails;\n"],"names":["mapStateToProps","state","props","selectWidgets","ociCostOverview","widgets","CostOverview","injectIntl","connect","ociHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","payer_tenant_id","region","product_service","styles","costValue","marginTop","global_spacer_lg","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","headerContent","display","justifyContent","headerContentLeft","minHeight","headerContentRight","paddingBottom","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","onGroupBySelected","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","options","showTags","Boolean","format","units","DetailsHeader","emptyState","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","ociDetails","content","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","offset","OciDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"sourceRoot":""}