{"version":3,"file":"js/7203.229ce383bec7a6ad37b5.js","mappings":"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","sources":["webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/routes/components/currency/currency.styles.ts","webpack:///./src/routes/components/currency/currency.tsx","webpack:///./src/routes/components/page/noData/noDataState.tsx","webpack:///./src/routes/components/page/noData/noData.tsx","webpack:///./src/routes/components/icons/costIcon/costIcon.tsx","webpack:///./src/routes/components/page/noProviders/noProvidersState.styles.ts","webpack:///./src/routes/components/page/noProviders/noProvidersState.tsx","webpack:///./src/routes/components/page/noProviders/noProviders.tsx","webpack:///./src/routes/components/page/notAvailable/notAvailable.tsx","webpack:///./src/routes/utils/providers.ts","webpack:///./src/routes/utils/query.ts","webpack:///./src/routes/utils/queryNavigate.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currency, isDisabled, showLabel = true } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: showLabel ? 'currencyOverride' : undefined, id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { isLocalStorage = true, onSelect } = this.props;\n            // Set currency units via local storage\n            if (isLocalStorage) {\n                setCurrency(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl, showLabel = true } = this.props;\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            showLabel && (React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.md, style: styles.currencyLabel }, intl.formatMessage(messages.currency))),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport default Currency;\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title, TitleSizes, } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: TitleSizes.lg }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(NoDataStateBase);\nexport { NoDataState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default NoData;\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title, TitleSizes, } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CostIcon } from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case ProviderType.aws:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case ProviderType.azure:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case ProviderType.gcp:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case ProviderType.ibm:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case ProviderType.ocp:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes.lg }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(NoProvidersStateBase);\nexport { NoProvidersState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default NoProviders;\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(Unavailable, null))));\n};\nexport default NotAvailable;\n","// eslint-disable-next-line no-shadow\nvar DataType;\n(function (DataType) {\n    DataType[\"currentMonthData\"] = \"current_month_data\";\n    DataType[\"hasData\"] = \"has_data\";\n    DataType[\"previousMonthData\"] = \"previous_month_data\";\n})(DataType || (DataType = {}));\n// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.currentMonthData);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.hasData);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.previousMonthData);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, DataType.currentMonthData);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, DataType.hasData);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, DataType.previousMonthData);\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { addFilterToQuery, removeFilterFromQuery } from './filter';\nexport const initQuery = (query, reset = false, props = {}) => {\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), props);\n    // Reset pagination\n    if (reset) {\n        if (newQuery.filter && newQuery.filter.offset !== undefined) {\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset: 0 });\n        }\n        if (newQuery.offset !== undefined) {\n            newQuery.offset = 0;\n        }\n    }\n    return newQuery;\n};\nexport const getRouteForQuery = (query, location, reset = false) => {\n    const newQuery = initQuery(query, reset);\n    return `${location.pathname}?${getQueryRoute(newQuery)}`;\n};\nexport const handleOnCurrencySelected = (query) => {\n    return initQuery(query);\n};\nexport const handleOnCostTypeSelected = (query) => {\n    return initQuery(query);\n};\nexport const handleOnCostDistributionSelected = (query) => {\n    return initQuery(query, false, {\n        order_by: undefined, // Clear sort\n    });\n};\nexport const handleOnFilterAdded = (query, filter) => {\n    const newQuery = initQuery(query, true);\n    return addFilterToQuery(newQuery, filter);\n};\nexport const handleOnFilterRemoved = (query, filter) => {\n    const newQuery = initQuery(query, true);\n    return removeFilterFromQuery(newQuery, filter);\n};\nexport const handleOnPerPageSelect = (query, perPage, isLimit = false) => {\n    return initQuery(query, false, Object.assign({}, (isLimit\n        ? {\n            limit: perPage,\n        }\n        : {\n            filter: Object.assign(Object.assign({}, query.filter), { limit: perPage }),\n        })));\n};\nexport const handleOnSetPage = (query, report, pageNumber, isLimit = false) => {\n    let limit = 10;\n    if (report && report.meta) {\n        if (isLimit && report.meta.limit !== undefined) {\n            limit = report.meta.limit;\n        }\n        else if (report.meta.filter && report.meta.filter.limit !== undefined) {\n            limit = report.meta.filter.limit;\n        }\n    }\n    const offset = pageNumber * limit - limit;\n    return initQuery(query, false, Object.assign({}, (isLimit\n        ? {\n            limit,\n            offset,\n        }\n        : {\n            filter: Object.assign(Object.assign({}, query.filter), { limit,\n                offset }),\n        })));\n};\nexport const handleOnSort = (query, sortType, isSortAscending, date = undefined) => {\n    return initQuery(query, false, {\n        order_by: Object.assign({ [sortType]: isSortAscending ? 'asc' : 'desc' }, (date && {\n            date,\n        })),\n    });\n};\n","import * as queryUtils from 'routes/utils/query';\nimport { getRouteForQuery } from './query';\nexport const handleOnCurrencySelected = (query, router) => {\n    const newQuery = queryUtils.handleOnCurrencySelected(query);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true }); // Don't reset pagination\n};\nexport const handleOnCostTypeSelected = (query, router) => {\n    const newQuery = queryUtils.handleOnCostTypeSelected(query);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true }); // Don't reset pagination\n};\nexport const handleOnCostDistributionSelected = (query, router) => {\n    const newQuery = queryUtils.handleOnCostDistributionSelected(query);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true }); // Don't reset pagination\n};\nexport const handleOnFilterAdded = (query, router, filter) => {\n    const newQuery = queryUtils.handleOnFilterAdded(query, filter);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\nexport const handleOnFilterRemoved = (query, router, filter) => {\n    const newQuery = queryUtils.handleOnFilterRemoved(query, filter);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\nexport const handleOnPerPageSelect = (query, router, perPage) => {\n    const newQuery = queryUtils.handleOnPerPageSelect(query, perPage);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\nexport const handleOnSetPage = (query, router, report, pageNumber) => {\n    const newQuery = queryUtils.handleOnSetPage(query, report, pageNumber);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\nexport const handleOnSort = (query, router, sortType, isSortAscending, date = undefined) => {\n    const newQuery = queryUtils.handleOnSort(query, sortType, isSortAscending, date);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\n"],"names":["getProvidersQuery","query","stringify","encode","indices","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","currency","isDisabled","showLabel","props","selectOptions","getSelectOptions","selection","find","option","Select","className","undefined","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","isLocalStorage","setState","render","style","Title","headingLevel","size","TitleSizes","mapStateToProps","CurrencyConnect","connect","injectIntl","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","Button","onClick","window","location","reload","NoDataState","title","PageHeader","PageHeaderTitle","PageSection","src","alt","iconSpacer","marginLeft","viewSources","marginTop","global_spacer_lg","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","titleKey","component","NoProvidersState","Unavailable","DataType","_getOcpProvider","ocpProviders","uuid","result","data","provider","infrastructure","filterProviders","providers","sourceType","filter","source_type","toLowerCase","meta","count","length","_hasData","datumType","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","currentMonthData","hasCloudData","hasData","hasCloudPreviousMonthData","previousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasPreviousMonthData","initQuery","reset","newQuery","JSON","parse","offset","getRouteForQuery","pathname","handleOnCurrencySelected","handleOnCostTypeSelected","handleOnCostDistributionSelected","order_by","handleOnFilterAdded","handleOnFilterRemoved","handleOnPerPageSelect","perPage","isLimit","limit","handleOnSetPage","report","pageNumber","handleOnSort","sortType","isSortAscending","date","router","navigate","replace"],"sourceRoot":""}