{"version":3,"file":"js/ibmDetails.f4d86e43bc3ac52f909d.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_spacer_xs.js","webpack:///./src/routes/components/icons/optimizationIcon/optimizationIcon.tsx","webpack:///./src/routes/state/noOptimizations/noOptimizationsState.tsx","webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx","webpack:///./src/utils/computedReport/getComputedIbmReportItems.ts","webpack:///./src/routes/views/details/ibmDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/ibmDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ibmDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ibmDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ibmDetails/ibmDetails.styles.ts","webpack:///./src/routes/views/details/ibmDetails/ibmDetails.tsx"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);\n\nexport default ExternalLinkAltIcon;","\"use strict\";\nexports.__esModule = true;\nexports.global_spacer_xs = {\n  \"name\": \"--pf-global--spacer--xs\",\n  \"value\": \"0.25rem\",\n  \"var\": \"var(--pf-global--spacer--xs)\"\n};\nexports[\"default\"] = exports.global_spacer_xs;","import './optimizationIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Red_Hat-IT_Optimization-Gray.svg');\nconst OptimizationIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `optimization-icon ${className}`, src: icon, alt: intl.formatMessage(messages.optimizations), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(OptimizationIcon);\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { OptimizationIcon } from 'routes/components/icons/optimizationIcon';\nclass NoOptimizationsStateBase extends React.Component {\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: OptimizationIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(messages.noOptimizationsTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noOptimizationsDesc))));\n    }\n}\nconst NoOptimizationsState = injectIntl(NoOptimizationsStateBase);\nexport { NoOptimizationsState };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, item: { source_uuid }, redirectToCostModel, router, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], router) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingRight: 0,\n    },\n    defaultLabel: {\n        minWidth: '63px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    lastReported: {\n        textAlign: 'right',\n        paddingRight: '40px',\n    },\n    lastReportedColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    managedColumn: {\n        textAlign: 'right',\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import './dataTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { NoOptimizationsState } from 'routes/state/noOptimizations/noOptimizationsState';\nimport { withRouter } from 'utils/router';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl, isOptimizations, router } = this.props;\n            const queryFromRoute = parseQuery(router.location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            if (isOptimizations) {\n                return React.createElement(NoOptimizationsState, null);\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns, router } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(router.location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnRowClick = (event, rowIndex) => {\n            const { onRowClick, rows } = this.props;\n            rows.map(row => (row.selected = false));\n            rows[rowIndex].selected = true;\n            this.setState({ rows }, () => {\n                if (onRowClick) {\n                    onRowClick(event, rowIndex);\n                }\n            });\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isLoading, isOptimizations, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), className: \"tableOverride\", gridBreakPoint: \"grid-2xl\", hasSelectableRowCaption: isOptimizations },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { isSelectable: isOptimizations, isHoverable: isOptimizations, isRowSelected: isOptimizations && row.selected, onRowClick: isOptimizations ? _event => this.handleOnRowClick(_event, rowIndex) : undefined, key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 && !isOptimizations ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    }, style: item.style })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: !isOptimizations && cellIndex === row.cells.length - 1, style: item.style }, item.value))))))))),\n            rows.length === 0 && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(withRouter(DataTable));\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedIbmReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst tagPathsType = TagPathsType.ibm;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { currency, groupBy, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ibmDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagPathsType: tagPathsType })),\n                showContent && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ibm),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = ReportPathsType.ibm;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, intl, isAllSelected, report, selectedItems, router } = this.props;\n            if (!report) {\n                return;\n            }\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}`;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.ibmDetailsBreakdown.path),\n                        description: item.id,\n                        groupBy,\n                        id: item.id,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        showPercentage && item.delta_percent !== null && item.delta_value > 0 && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        showPercentage && item.delta_percent !== null && item.delta_value < 0 && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport || prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ibmQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagType = TagType.tag;\nconst tagPathsType = TagPathsType.ibm;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n        this.updateReport = () => {\n            const { fetchTag, tagQueryString } = this.props;\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            this.updateReport();\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { query, tagReport } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                this.updateReport();\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ibm, selectedItems: selectedItems, showBulkSelect: true, showExcludes: true, showExport: true, showFilter: true, tagReport: tagReport, tagPathsType: tagPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    gcpDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ibmQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedIbmReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ibmDetails.styles';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ibm;\nclass IbmDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, router, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.ibm),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, router, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ibmDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empty data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ibm, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ibmDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign({}, baseQuery), queryFromRoute);\n    const reportQuery = {\n        currency,\n        delta: 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ibm),\n        providersError,\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(IbmDetails)));\n"],"names":["ExternalLinkAltIconConfig","name","height","width","svgPath","yOffset","xOffset","ExternalLinkAltIcon","exports","icon","injectIntl","className","intl","src","alt","formatMessage","messages","NoOptimizationsStateBase","render","this","props","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","NoOptimizationsState","DetailsActionsBase","constructor","stateProps","dispatchProps","super","defaultState","isDropdownOpen","isExportModalOpen","state","Object","assign","getExportModal","groupBy","item","reportPathsType","reportQueryString","count","isOpen","items","onClose","handleExportModalClose","setState","handleExportModalOpen","handleOnSelect","handleOnToggle","bind","isDisabled","showPriceListOption","source_uuid","redirectToCostModel","router","DropdownItem","component","key","onClick","unshift","includes","length","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","mapStateToProps","mapDispatchToProps","costModels","DetailsActionsConnect","connect","styles","costColumn","textAlign","display","justifyContent","paddingRight","defaultLabel","minWidth","emptyState","backgroundColor","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","color","fontSize","lastReported","lastReportedColumn","managedColumn","nameColumn","DataTable","getEmptyState","isOptimizations","queryFromRoute","location","search","filter_by","val","values","filter","showMargin","getSortBy","index","columns","orderBy","direction","order_by","getSortParams","sortBy","onSort","handleOnSort","columnIndex","event","isSelected","rowId","onSelected","rows","newRows","map","row","selected","SortByDirection","handleOnRowClick","rowIndex","onRowClick","isLoading","TableComposable","gridBreakPoint","hasSelectableRowCaption","Thead","Tr","col","Th","value","modifier","sort","isSortable","undefined","style","Tbody","Td","colSpan","Bullseye","Spinner","isSelectable","isHoverable","isRowSelected","_event","cells","cellIndex","dataLabel","isActionCell","select","disable","selectionDisabled","getIdKeyForGroupBy","account","project","region","service","costValue","marginTop","global_spacer_lg","marginBottom","costLabelUnit","global_FontSize_sm","global_Color_100","dateTitle","header","global_BackgroundColor_light_100","padding","headerContent","headerContentLeft","minHeight","headerContentRight","title","paddingBottom","global_spacer_sm","groupByOptions","label","tagPathsType","DetailsHeaderBase","currency","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","hasCost","total","cost","TitleSizes","options","showTags","format","units","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","DetailsTableBase","arguments","initDatum","groupByTagKey","isAllSelected","selectedItems","computedItems","idKey","getTotalCost","monthOverMonth","getMonthOverMonthCost","desc","id","actions","getActions","Link","to","basePath","routes","description","toString","push","find","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","DetailsTable","tagType","DetailsToolbarBase","getCategoryOptions","tagReport","updateReport","fetchTag","tagQueryString","categoryOptions","query","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showExcludes","showExport","showFilter","resolution","time_scope_units","time_scope_value","key_only","limit","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","gcpDetails","content","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","toolbarContainer","baseQuery","offset","exclude","group_by","reportType","IbmDetails","getComputedItems","groupById","isAllItems","getPagination","isBottom","page","trunc","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","action","handleGroupBySelected","groupByKey","newQuery","parse","navigate","replace","newItems","fetchReport","prevState","reportError","noReport","noLocation","providerType","reportQuery","delta"],"sourceRoot":""}