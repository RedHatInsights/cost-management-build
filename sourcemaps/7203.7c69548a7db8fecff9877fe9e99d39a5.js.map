{"version":3,"file":"js/7203.4381ef341840b45aeb5f.js","mappings":"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","sources":["webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/routes/components/currency/currency.styles.ts","webpack:///./src/routes/components/currency/currency.tsx","webpack:///./src/routes/components/page/noData/noDataState.tsx","webpack:///./src/routes/components/page/noData/noData.tsx","webpack:///./src/routes/components/icons/costIcon/costIcon.tsx","webpack:///./src/routes/components/page/noProviders/noProvidersState.styles.ts","webpack:///./src/routes/components/page/noProviders/noProvidersState.tsx","webpack:///./src/routes/components/page/noProviders/noProviders.tsx","webpack:///./src/routes/components/page/notAvailable/notAvailable.tsx","webpack:///./src/routes/utils/providers.ts","webpack:///./src/routes/utils/query.ts","webpack:///./src/routes/utils/queryNavigate.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currency, isDisabled, showLabel = true } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: showLabel ? 'currencyOverride' : undefined, id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { isLocalStorage = true, onSelect } = this.props;\n            // Set currency units via local storage\n            if (isLocalStorage) {\n                setCurrency(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl, showLabel = true } = this.props;\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            showLabel && (React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.md, style: styles.currencyLabel }, intl.formatMessage(messages.currency))),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport default Currency;\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title, TitleSizes, } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: TitleSizes.lg }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(NoDataStateBase);\nexport { NoDataState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default NoData;\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title, TitleSizes, } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CostIcon } from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case ProviderType.aws:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case ProviderType.azure:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case ProviderType.gcp:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case ProviderType.ibm:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case ProviderType.ocp:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes.lg }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(NoProvidersStateBase);\nexport { NoProvidersState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default NoProviders;\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(Unavailable, null))));\n};\nexport default NotAvailable;\n","// eslint-disable-next-line no-shadow\nvar DataType;\n(function (DataType) {\n    DataType[\"currentMonthData\"] = \"current_month_data\";\n    DataType[\"hasData\"] = \"has_data\";\n    DataType[\"previousMonthData\"] = \"previous_month_data\";\n})(DataType || (DataType = {}));\n// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.currentMonthData);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.hasData);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.previousMonthData);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, DataType.currentMonthData);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, DataType.hasData);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, DataType.previousMonthData);\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { addFilterToQuery, removeFilterFromQuery } from './filter';\nexport const initQuery = (query, reset = false, props = {}) => {\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), props);\n    // Reset pagination\n    if (reset) {\n        if (newQuery.filter && newQuery.filter.offset !== undefined) {\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset: 0 });\n        }\n        if (newQuery.offset !== undefined) {\n            newQuery.offset = 0;\n        }\n    }\n    return newQuery;\n};\nexport const getRouteForQuery = (query, location, reset = false) => {\n    const newQuery = initQuery(query, reset);\n    return `${location.pathname}?${getQueryRoute(newQuery)}`;\n};\nexport const handleOnCurrencySelected = (query) => {\n    return initQuery(query);\n};\nexport const handleOnCostTypeSelected = (query) => {\n    return initQuery(query);\n};\nexport const handleOnCostDistributionSelected = (query) => {\n    return initQuery(query, false, {\n        order_by: undefined, // Clear sort\n    });\n};\nexport const handleOnFilterAdded = (query, filter) => {\n    const newQuery = initQuery(query, true);\n    return addFilterToQuery(newQuery, filter);\n};\nexport const handleOnFilterRemoved = (query, filter) => {\n    const newQuery = initQuery(query, true);\n    return removeFilterFromQuery(newQuery, filter);\n};\nexport const handleOnPerPageSelect = (query, perPage, isLimit = false) => {\n    return initQuery(query, false, Object.assign({}, (isLimit\n        ? {\n            limit: perPage,\n        }\n        : {\n            filter: Object.assign(Object.assign({}, query.filter), { limit: perPage }),\n        })));\n};\nexport const handleOnSetPage = (query, report, pageNumber, isLimit = false) => {\n    let limit = 10;\n    if (report && report.meta) {\n        if (isLimit && report.meta.limit !== undefined) {\n            limit = report.meta.limit;\n        }\n        else if (report.meta.filter && report.meta.filter.limit !== undefined) {\n            limit = report.meta.filter.limit;\n        }\n    }\n    const offset = pageNumber * limit - limit;\n    return initQuery(query, false, Object.assign({}, (isLimit\n        ? {\n            limit,\n            offset,\n        }\n        : {\n            filter: Object.assign(Object.assign({}, query.filter), { limit,\n                offset }),\n        })));\n};\nexport const handleOnSort = (query, sortType, isSortAscending, date = undefined) => {\n    return initQuery(query, false, {\n        order_by: Object.assign({ [sortType]: isSortAscending ? 'asc' : 'desc' }, (date && {\n            date,\n        })),\n    });\n};\n","import * as queryUtils from 'routes/utils/query';\nimport { getRouteForQuery } from './query';\nexport const handleOnCurrencySelected = (query, router) => {\n    const newQuery = queryUtils.handleOnCurrencySelected(query);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true }); // Don't reset pagination\n};\nexport const handleOnCostTypeSelected = (query, router) => {\n    const newQuery = queryUtils.handleOnCostTypeSelected(query);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true }); // Don't reset pagination\n};\nexport const handleOnCostDistributionSelected = (query, router) => {\n    const newQuery = queryUtils.handleOnCostDistributionSelected(query);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true }); // Don't reset pagination\n};\nexport const handleOnFilterAdded = (query, router, filter) => {\n    const newQuery = queryUtils.handleOnFilterAdded(query, filter);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\nexport const handleOnFilterRemoved = (query, router, filter) => {\n    const newQuery = queryUtils.handleOnFilterRemoved(query, filter);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\nexport const handleOnPerPageSelect = (query, router, perPage) => {\n    const newQuery = queryUtils.handleOnPerPageSelect(query, perPage);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\nexport const handleOnSetPage = (query, router, report, pageNumber) => {\n    const newQuery = queryUtils.handleOnSetPage(query, report, pageNumber);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\nexport const handleOnSort = (query, router, sortType, isSortAscending, date = undefined) => {\n    const newQuery = queryUtils.handleOnSort(query, sortType, isSortAscending, date);\n    router.navigate(getRouteForQuery(newQuery, router.location), { replace: true });\n};\n"],"names":["getProvidersQuery","query","stringify","encode","indices","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","var","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","currency","isDisabled","showLabel","props","selectOptions","getSelectOptions","selection","find","option","Select","className","undefined","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","single","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","isLocalStorage","setState","render","style","Title","headingLevel","size","TitleSizes","md","mapStateToProps","CurrencyConnect","connect","injectIntl","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","large","EmptyStateIcon","icon","lg","noDataStateTitle","EmptyStateBody","noDataStateDesc","Button","onClick","window","location","reload","noDataStateRefresh","NoDataState","title","PageHeader","PageHeaderTitle","PageSection","src","alt","costManagement","iconSpacer","marginLeft","viewSources","marginTop","global_spacer_lg","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","noProvidersStateOverviewDesc","titleKey","noProvidersStateOverviewTitle","aws","noProvidersStateAwsDesc","noProvidersStateAwsTitle","azure","noProvidersStateAzureDesc","noProvidersStateAzureTitle","gcp","noProvidersStateGcpDesc","noProvidersStateGcpTitle","ibm","noProvidersStateIbmDesc","noProvidersStateIbmTitle","ocp","noProvidersStateOcpDesc","docsAddOcpSources","noProvidersStateOcpAddSources","noProvidersStateOcpTitle","component","noProvidersStateGetStarted","NoProvidersState","Unavailable","DataType","_getOcpProvider","ocpProviders","uuid","result","data","provider","infrastructure","filterProviders","providers","sourceType","filter","source_type","toLowerCase","meta","count","length","_hasData","datumType","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","currentMonthData","hasCloudData","hasData","hasCloudPreviousMonthData","previousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasPreviousMonthData","initQuery","reset","newQuery","JSON","parse","offset","getRouteForQuery","pathname","handleOnCurrencySelected","handleOnCostTypeSelected","handleOnCostDistributionSelected","order_by","handleOnFilterAdded","handleOnFilterRemoved","handleOnPerPageSelect","perPage","isLimit","limit","handleOnSetPage","report","pageNumber","handleOnSort","sortType","isSortAscending","date","router","navigate","replace"],"sourceRoot":""}