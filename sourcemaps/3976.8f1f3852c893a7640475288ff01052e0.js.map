{"version":3,"file":"js/3976.63273241b6fea897bb48.js","mappings":"8QACO,MAAMA,EAAS,CAClBC,QAAS,CACLC,cAAeC,EAAA,SACfC,YAAaD,EAAA,SACbE,aAAcF,EAAA,SACdG,WAAYH,EAAA,W,6JCFb,MAAM,EAAS,CAClBI,gBAAiB,CACbC,WAAYC,EAAA,UAEhBC,eAAgB,CACZC,aAAcR,EAAA,UAElBS,QAAS,CACLC,WAAYC,EAAA,UAEhBC,cAAe,CACXC,YAAaC,EAAA,SACbC,UAAWJ,EAAA,W,eCVnB,MAAMK,UAAuB,cACzBC,cACIC,SAASC,WACTC,KAAKC,iBAAmB,KACpB,MAAM,UAAEC,GAAcF,KAAKG,MACrBC,EAAS,GACf,GAAIF,EACA,IAAK,MAAMG,KAAQH,EAAUI,KACzB,IAAK,MAAMC,KAAOF,EAAKG,OAAQ,CAC3B,MAAMC,EAAK,GAAGJ,EAAKK,OAAOH,IAC1BH,EAAOO,KAAK,kBAAoB,EAAAC,aAAc,CAAE,kBAAmBH,EAAIC,IAAK,GAAGD,UAC3E,kBAAoB,EAAAI,gBAAiB,KACjC,kBAAoB,EAAAC,kBAAmB,CAAEC,cAAe,CAChD,kBAAoB,EAAAC,aAAc,CAAEN,IAAK,GAAGD,WACxC,kBAAoB,OAAQ,CAAEA,GAAIA,GAAMJ,EAAKK,MACjD,kBAAoB,EAAAM,aAAc,CAAEN,IAAK,GAAGD,WAAcF,QAE9E,CAGR,OAAOH,CAAM,CAErB,CACAa,SACI,MAAM,QAAEC,EAAO,aAAEC,EAAY,KAAEC,GAASpB,KAAKG,MACvCkB,EAAgBrB,KAAKC,mBAC3B,OAAQ,kBAAoB,aAAgB,KACxC,kBAAoB,MAAO,KACvB,kBAAoB,OAAQ,CAAEqB,MAAO,mBAA0BF,EAAKG,cAAcC,EAAA,gBAAwB,CAAEC,MAAOP,EAASQ,MAAO,MACvI,kBAAoB,MAAO,CAAEJ,MAAO,kBAChC,kBAAoB,OAAQ,KAAMH,IACtC,kBAAoB,EAAAQ,SAAU,CAAE,aAAcP,EAAKG,cAAcC,EAAA,YAAoBI,WAAW,GAC5F,kBAAoB,EAAAhB,aAAc,CAAE,kBAAmB,YACnD,kBAAoB,EAAAC,gBAAiB,KACjC,kBAAoB,EAAAC,kBAAmB,CAAEC,cAAe,CAChD,kBAAoB,EAAAC,aAAc,CAAEN,IAAK,mBACrC,kBAAoB,OAAQ,CAAED,GAAI,WAAYa,MAAO,mBAA0BF,EAAKG,cAAcC,EAAA,mBACtG,kBAAoB,EAAAR,aAAc,CAAEN,IAAK,qBACrC,kBAAoB,OAAQ,CAAED,GAAI,WAAYa,MAAO,mBAA0BF,EAAKG,cAAcC,EAAA,0BAEtHH,EAAcQ,KAAIxB,GAAQA,KACtC,EAEJ,MAAMyB,GAAa,EAAAC,EAAA,KAAW,IAAAC,UAAA,CAAUpC,ICnClCqC,EAAgB,QACtB,MAAMC,UAAqB,cACvBrC,YAAYM,GACRL,MAAMK,GACNH,KAAKmC,iBAAmB,KACpB,MAAM,UAAEjC,GAAcF,KAAKG,MAC3B,IAAIuB,EAAQ,EACZ,GAAIxB,EACA,IAAK,MAAMG,KAAQH,EAAUI,KACrBD,EAAKG,SACLkB,GAASrB,EAAKG,OAAO4B,QAIjC,OAAOV,CAAK,EAEhB1B,KAAKqC,YAAc,KACfrC,KAAKG,MAAMmC,SAAQ,EAAM,EAE7BtC,KAAKqC,YAAcrC,KAAKqC,YAAYE,KAAKvC,KAC7C,CACAwC,oBACI,MAAM,SAAEC,EAAQ,mBAAEC,EAAkB,eAAEC,GAAmB3C,KAAKG,MAC9DsC,EAASC,EAAoBT,EAAeU,EAChD,CACAC,mBAAmBC,GACf,MAAM,SAAEJ,EAAQ,mBAAEC,EAAkB,eAAEC,GAAmB3C,KAAKG,MAC1D0C,EAAUF,iBAAmBA,GAC7BF,EAASC,EAAoBT,EAAeU,EAEpD,CACAG,sBAAsBC,GAClB,MAAM,aAAE5B,EAAY,OAAE6B,GAAWhD,KAAKG,MACtC,OAAO4C,EAAU5B,eAAiBA,GAAgB4B,EAAUC,SAAWA,CAC3E,CACA/B,SACI,MAAM,QAAEC,EAAO,KAAEE,EAAI,OAAE4B,EAAM,MAAEC,EAAK,UAAE/C,GAAcF,KAAKG,MAEnDgB,EAAe8B,GAASA,EAAMC,QAAUD,EAAMC,OAAOC,QAAUF,EAAMC,OAAOC,QAAUnD,KAAKG,MAAMgB,aACvG,OAAQ,kBAAoB,EAAAiC,MAAO,CAAEJ,OAAQA,EAAQV,QAAStC,KAAKqC,YAAagB,MAAOjC,EAAKG,cAAcC,EAAA,kBAA0B,CAAEC,MAAOzB,KAAKmC,qBAAuBmB,MAAO,OAC5K,kBAAoBxB,EAAY,CAAEZ,QAASA,EAASC,aAAcnB,KAAKG,MAAMoD,gBAAkB,KAAsBpC,EAAcjB,UAAWA,IACtJ,EAEJ,MAAMsD,GAAkB,SAAsB,CAACC,GAASC,SAAQhB,yBAC5D,MAAMiB,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,GAAkB,QAAmBH,GACrCzC,EAAU4C,EAAkB,MAAe,QAAaH,GACxDxC,EAAe2C,IAAoC,QAAgBH,GAEnEI,EAAiBJ,GAAkBA,EAAeK,UAAYL,EAAeK,UAAY,CAAC,EAChG,IAAK,MAAMtD,KAAOuD,OAAOC,KAAKH,IACM,IAA5BrD,EAAIyD,QAAQ,OACZJ,EAAerD,QAAO0D,GAG9B,MAAMnB,EAAQ,CACVC,OAAQ,CACJmB,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBP,UAAWC,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAGT,GAAkBJ,GACrFA,EAAeT,QACfS,EAAeT,OAAOC,SAAW,CAAE,CAAC,GAAG,eAA4BQ,EAAeT,OAAOC,UAAcQ,GACvGA,EAAeT,QACfS,EAAeT,OAAOuB,UAAY,CAAEA,SAAUd,EAAeT,OAAOuB,WAAevD,IAA2C,IAAhCA,EAAQiD,QAAQ,MAAqB,CAAE,CAACjD,GAAUC,KAElJwB,GAAiB,QAASM,GAC1B/C,EAAY,eAAuBuD,EAAOf,EAAoBT,EAAeU,GAC7E+B,EAAuB,0BAAkCjB,EAAOf,EAAoBT,EAAeU,GACzG,MAAO,CACHzB,UACAC,eACAoC,iBAAiB,QAAgBI,GACjCV,QACA/C,YACAwE,uBACA/B,iBACH,IAECgC,EAAqB,CACvBlC,SAAU,SAERmC,GAAW,EAAA7C,EAAA,KAAW,QAAW,IAAAC,SAAQwB,EAAiBmB,EAAzB,CAA6CzC,KCpF9E,EAAgB,QACtB,MAAM2C,UAAoB,cACtBhF,YAAYM,GACRL,MAAMK,GACNH,KAAK8E,aAAe,CAChB9B,QAAQ,GAEZhD,KAAKyD,MAAQQ,OAAOO,OAAO,CAAC,EAAGxE,KAAK8E,cACpC9E,KAAKqC,YAAeW,IAChBhD,KAAK+E,SAAS,CAAE/B,UAAS,EAE7BhD,KAAKgF,WAAaC,IACdjF,KAAK+E,SAAS,CAAE/B,QAAQ,IACxBiC,EAAMC,kBACC,GAEXlF,KAAKqC,YAAcrC,KAAKqC,YAAYE,KAAKvC,MACzCA,KAAKgF,WAAahF,KAAKgF,WAAWzC,KAAKvC,KAC3C,CACAwC,oBACI,MAAM,SAAEC,EAAQ,mBAAEC,EAAkB,eAAEC,GAAmB3C,KAAKG,MAC9DsC,EAASC,EAAoB,EAAeC,EAChD,CACAC,mBAAmBC,GACf,MAAM,SAAEJ,EAAQ,mBAAEC,EAAkB,eAAEC,GAAmB3C,KAAKG,MAC1D0C,EAAUF,iBAAmBA,GAC7BF,EAASC,EAAoB,EAAeC,EAEpD,CACA1B,SACI,MAAM,GAAER,EAAE,UAAEP,EAAS,mBAAEwC,GAAuB1C,KAAKG,OAC7C,OAAE6C,GAAWhD,KAAKyD,MACxB,IAAI/B,EAAQ,EACZ,GAAIxB,EACA,IAAK,MAAMG,KAAQH,EAAUI,KACrBD,EAAKG,SACLkB,GAASrB,EAAKG,OAAO4B,QAIjC,OAAQ,kBAAoB,MAAO,CAAEd,MAAO,gBAAsBb,GAAIA,GAClE0E,QAAQzD,EAAQ,IAAO,kBAAoB,aAAgB,KACvD,kBAAoB,KAAS,MAC7B,kBAAoB,IAAK,CAAE,cAAe,UAAW0D,KAAM,KAAMC,QAASrF,KAAKgF,WAAY1D,MAAO,WAAkBI,IACxH,kBAAoBkD,EAAU,CAAE5B,OAAQA,EAAQV,QAAStC,KAAKqC,YAAaK,mBAAoBA,IACvG,EAEJ,MAAM,GAAkB,SAAsB,CAACe,GAASC,SAAQhB,yBAC5D,MAAMiB,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,GAAkB,QAAmBH,GACrCzC,EAAU4C,EAAkB,MAAe,QAAaH,GACxDxC,EAAe2C,IAAoC,QAAgBH,GAEnEI,EAAiBJ,GAAkBA,EAAeK,UAAYL,EAAeK,UAAY,CAAC,EAChG,IAAK,MAAMtD,KAAOuD,OAAOC,KAAKH,IACM,IAA5BrD,EAAIyD,QAAQ,OACZJ,EAAerD,QAAO0D,GAG9B,MAAMnB,EAAQ,CACVC,OAAQ,CACJmB,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBP,UAAWC,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAGT,GAAkBJ,GACrFA,EAAeT,QACfS,EAAeT,OAAOC,SAAW,CAAE,CAAC,GAAG,eAA4BQ,EAAeT,OAAOC,UAAcQ,GACvGA,EAAeT,QACfS,EAAeT,OAAOuB,UAAY,CAAEA,SAAUd,EAAeT,OAAOuB,WAAevD,IAA2C,IAAhCA,EAAQiD,QAAQ,MAAqB,CAAE,CAACjD,GAAUC,KAElJwB,GAAiB,QAASM,GAGhC,MAAO,CACH/B,UACAC,eACA8B,QACA/C,UANc,eAAuBuD,EAAOf,EAAoB,EAAeC,GAO/E+B,qBANyB,0BAAkCjB,EAAOf,EAAoB,EAAeC,GAOrGA,iBACH,IAEC,EAAqB,CACvBF,SAAU,SAGd,GADgB,EAAAV,EAAA,KAAW,QAAW,IAAAC,SAAQ,EAAiB,EAAzB,CAA6C6C,K,wGC5F5E,MAAM,GAAS,CAClBS,KAAM,CACF3F,UAAW4F,EAAA,QAEfC,UAAW,CACP7F,UAAW8F,GAAA,QAEfC,UAAW,CACP/F,UAAW,EACXP,aAAc,EACduG,UAAW,SAEfC,cAAe,CACXD,UAAW,SAEfE,SAAU,CACNlG,UAAWmG,EAAA,QAEfC,OAAQ,CACJC,gBAAiBC,EAAA,OACjBpH,YAAaD,EAAA,OACbE,aAAcF,EAAA,OACdG,WAAYH,EAAA,QAEhBsH,cAAe,CACXC,QAAS,OACTC,eAAgB,iBAEpBC,mBAAoB,CAChBF,QAAS,QAEbG,gBAAiB,CACbC,MAAOC,EAAA,SACPC,SAAUC,EAAA,UAEdC,KAAM,CACFR,QAAS,QAEbS,IAAK,CACDtH,WAAYV,EAAA,QAEhByE,MAAO,CACH1E,cAAeC,EAAA,OACfG,WAAY0G,GAAA,SC/BpB,MAAMoB,WAAwB,cAC1BhH,cACIC,SAASC,WACTC,KAAK8G,iBAAmB,KACpB,MAAM,WAAEC,EAAU,QAAE7F,EAAO,MAAE+B,GAAUjD,KAAKG,MAC5C,IAAI6G,EAAa9F,EACbO,EAAQ,IAERwB,EAAM,QACN+D,EAAa,KACbvF,EAAQwB,EAAM,OAElB,MAAMgE,EAAWhD,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG0C,KAAKC,MAAMD,KAAKE,UAAUnE,KAAU,CAAEoE,SAAU,CACzF,CAACL,GAAavF,KAUtB,OAPIwF,EAAS/D,SACT+D,EAAS/D,OAAOC,aAAUiB,EAC1B6C,EAAS/D,OAAOuB,cAAWL,EAC3B6C,EAAS,WAAoB7C,EAC7B6C,EAAS,WAAqB7C,EAC9B6C,EAAS,WAAgB7C,GAEtB,GAAG2C,MAAc,QAAcE,IAAW,EAErDjH,KAAKsH,aAAe,KAChB,MAAM,OAAEC,GAAWvH,KAAKG,MAClBqH,EAAUD,GAAUA,EAAOE,MAAQF,EAAOE,KAAKC,OAASH,EAAOE,KAAKC,MAAMpC,MAAQiC,EAAOE,KAAKC,MAAMpC,KAAKoC,MAE/G,OADa,EAAAC,EAAA,IAAeH,EAAUD,EAAOE,KAAKC,MAAMpC,KAAKoC,MAAMjG,MAAQ,EAAG+F,EAAUD,EAAOE,KAAKC,MAAMpC,KAAKoC,MAAME,MAAQ,MAClH,CAEnB,CACA3G,SACI,MAAM,SAAE4E,EAAQ,SAAEgC,EAAQ,YAAEC,EAAW,QAAE5G,EAAO,KAAEE,EAAI,yBAAE2G,EAAwB,mBAAEC,EAAkB,mBAAEC,EAAkB,MAAEhF,EAAK,aAAEiF,GAAe,EAAK,KAAEvB,EAAI,mBAAEjE,EAAkB,MAAEW,GAAWrD,KAAKG,MAC3LgI,EAAkBlF,GAASA,EAAMC,OAASD,EAAMC,OAAOC,aAAUiB,EACjEgE,GAAa,QAAmBnF,GAChCoF,GAAa,QAAiBpF,GAC9BqF,EAAWH,GACD,YAAZjH,GACY,YAAZA,GACY,gBAAZA,GACY,sBAAZA,EAEE8F,EAAamB,EAAkB,UAAYE,EAAa,MAAQD,EAAa,KAAelH,EAClG,OAAQ,kBAAoB,SAAU,CAAEI,MAAO,WAC3C,kBAAoB,MAAO,CAAEA,MAAO,kBAChC,kBAAoB,MAAO,CAAE,aAAcF,EAAKG,cAAcC,EAAA,mCAA2C+G,UAAW,sBAChH,kBAAoB,KAAM,CAAEA,UAAW,yBACnC,kBAAoB,KAAM,CAAEA,UAAW,yBACnC,kBAAoB,OAAQ,CAAEA,UAAW,iCACrC,kBAAoB,KAAe,OACvC,kBAAoB,KAAM,CAAEC,GAAIxI,KAAK8G,oBAAsB1F,EAAKG,cAAcC,EAAA,yBAAiC,CAC3GC,MAAOL,EAAKG,cAAcC,EAAA,wBAAgC,CAAEC,MAAOiB,IACnExB,QAAS8F,QAEzB,kBAAoB,MAAO,CAAE1F,MAAO,uBAA6ByG,GAA4B,kBAAoB,IAAU,CAAEF,SAAUA,EAAUY,SAAUR,MAC/J,kBAAoB,MAAO,CAAE3G,MAAO,kBAChC,kBAAoB,MAAO,CAAEA,MAAO,UAChC,kBAAoB,EAAAoH,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,QACnDzH,EAAKG,cAAcC,EAAA,iBAAyB,CAAEC,MAAO4B,IACrDyE,GAAe,kBAAoB,MAAO,CAAExG,MAAO,oBAA0BwG,IACjFI,GAAiB,kBAAoB,MAAO,CAAE5G,MAAO,aACjD,kBAAoB,IAAU,CAAEmH,SAAUT,EAAoBnC,SAAUA,MAChF,kBAAoB,MAAO,CAAEvE,MAAO,SAChC,kBAAoB,MAAO,CAAEA,MAAO,cAChC,kBAAoB,EAAAoH,MAAO,CAAEC,aAAc,KAAMrH,MAAO,aAAkBsH,KAAM,EAAAC,WAAA,QAC5E,kBAAoB,OAAQ,KAAM7I,KAAKsH,kBAC/C,kBAAoB,MAAO,CAAEhG,MAAO,mBAAwB,QAA4BF,EAAKG,cAAcC,EAAA,yBAAiC,CAAEC,MAAOuF,EAAYtF,MAAO,QAChL,kBAAoB,MAAO,KACvB,kBAAoB,MAAO,CAAEJ,MAAO,SAChCqF,EACA,kBAAoB,MAAO,CAAErF,MAAO,QAAc6D,QAAQmD,IAAa,kBAAoB,EAAS,CAAE7H,GAAI,OAAQiC,mBAAoBA,OACtJ,EAEJ,MAAM,IAAkB,SAAsBe,IACnC,CACHsE,yBAA0Be,EAAA,kCAAqDrF,OAMvF,IAAe,EAAA1B,EAAA,KAAW,IAAAC,SAAQ,GAHP,CAE3B,EAC0B,CAA6C6E,KCtFvE,IAAIkC,IACJ,SAAWA,GACPA,EAA2B,aAAI,gBAC/BA,EAA6B,eAAI,iBACpC,CAHD,CAGGA,KAAiBA,GAAe,CAAC,IAC7B,MAAMC,GAAkBC,IAC3B,OAAQA,GACJ,KAAKF,GAAaG,aACd,MAAO,gBACX,KAAKH,GAAaI,eACd,MAAO,kBACf,EAEJ,MAAMC,WAAsB,cACxBvJ,cACIC,SAASC,WACTC,KAAK8E,aAAe,CAChBuE,aAAc,GAElBrJ,KAAKyD,MAAQQ,OAAOO,OAAO,CAAC,EAAGxE,KAAK8E,cACpC9E,KAAKsJ,iBAAmB,IACE,CAClB,CACIC,WAAY,gBACZN,IAAKF,GAAaG,cAEtB,CACIK,WAAY,gBACZN,IAAKF,GAAaI,iBAK9BnJ,KAAKwJ,OAAS,CAACP,EAAKM,EAAYE,IACpB,kBAAoB,EAAAC,IAAK,CAAEC,SAAUF,EAAO/I,IAAK,GAAGsI,GAAeC,SAAYW,aAAc,OAAOH,IAASI,cAAeN,EAAYlG,MAAO,kBAAoB,EAAAyG,aAAc,KAAM9J,KAAK+J,YAAYd,MAEpNjJ,KAAKgK,cAAiBC,GACXA,EAAcpI,KAAI,CAACtB,EAAKkJ,IACnB,kBAAoB,EAAAS,WAAY,CAAEP,SAAUF,EAAO/I,IAAK,GAAGsI,GAAezI,EAAI0I,kBAAmBxI,GAAI,OAAOgJ,IAASU,IAAK5J,EAAIgJ,YAAcvJ,KAAKoK,WAAW7J,EAAI0I,IAAKQ,MAGrLzJ,KAAKoK,WAAa,CAACnB,EAAKQ,KACpB,MAAM,sBAAEY,EAAqB,wBAAEC,GAA4BtK,KAAKG,OAC1D,aAAEkJ,GAAiBrJ,KAAKyD,MACxB8G,EAAW,kBAAoB,aAAgB,MACrD,GAAIlB,IAAiBI,EACjB,OAAOc,EAEX,MAAMC,EAAaxB,GAAeC,GAClC,OAAIuB,IAAezB,GAAaG,aACrBmB,EAEFG,IAAezB,GAAaI,eAC1BmB,EAGAC,CACX,EAEJvK,KAAKyK,QAAWR,IACZ,MAAM,aAAEZ,GAAiBrJ,KAAKyD,MAC9B,OAAQ,kBAAoB,EAAAiH,KAAM,CAAEC,UAAWtB,EAAcZ,SAAUzI,KAAK4K,gBAAkBX,EAAcpI,KAAI,CAACtB,EAAKkJ,IAAUzJ,KAAKwJ,OAAOjJ,EAAI0I,IAAK1I,EAAIgJ,WAAYE,KAAS,EAElLzJ,KAAK+J,YAAed,IAChB,MAAM,KAAE7H,GAASpB,KAAKG,MACtB,OAAI8I,IAAQF,GAAaG,aACd9H,EAAKG,cAAcC,EAAA,8BAErByH,IAAQF,GAAaI,eACnB/H,EAAKG,cAAcC,EAAA,qCADzB,CAEL,EAEJxB,KAAK4K,eAAiB,CAAC3F,EAAO4F,KAC1B,MAAM,aAAExB,GAAiBrJ,KAAKyD,MAC1B4F,IAAiBwB,GACjB7K,KAAK+E,SAAS,CACVsE,aAAcwB,GAEtB,EAEJ7K,KAAK8K,aAAe,KAChB,MAAM,YAAEC,EAAW,gBAAEC,EAAe,WAAEC,EAAU,kBAAEC,EAAiB,OAAExH,GAAW1D,KAAKG,MACjFuD,EAAOE,SAASC,QAChBkH,EAAYC,EAAiBC,EAAYC,EAC7C,CAER,CACA1I,oBACIxC,KAAK8K,cACT,CACAlI,mBAAmBC,GACf,MAAM,OAAE0E,EAAM,YAAE4D,EAAW,kBAAED,EAAiB,OAAExH,GAAW1D,KAAKG,MAC1D8G,EAAWpE,EAAUqI,oBAAsBA,EAC3CE,GAAY7D,IAAW4D,EACvBE,GAAc3H,EAAOE,SAASC,QAChCoD,GAAYmE,GAAYC,IACxBrL,KAAK8K,cAEb,CACA7J,SACI,MAAM,SAAE4E,EAAQ,SAAEgC,EAAQ,YAAEC,EAAW,WAAEf,EAAU,gBAAEuE,EAAe,QAAEpK,EAAO,UAAEqK,EAAS,qBAAEC,EAAoB,aAAEC,EAAY,MAAExI,EAAK,OAAEsE,EAAM,YAAE4D,EAAW,kBAAEO,EAAiB,OAAEhI,EAAM,aAAEwE,EAAY,mBAAExF,EAAkB,MAAEW,GAAWrD,KAAKG,MACjO8J,EAAgBjK,KAAKsJ,mBAE3B,GAAI6B,EACA,OAAO,kBAAoB,IAAc,CAAE9H,MAAOiI,IAEjD,GAAIE,IAAyB,iBAA0BE,IAAsB,gBAC9E,OAAO,kBAAoB,IAAS,CAAErI,MAAOiI,IAE5C,GAAIE,IAAyB,eAAwBE,IAAsB,cAAsB,CAGlG,GADoBH,GAAaA,EAAU9D,MAAiC,IAAzB8D,EAAU9D,KAAK/F,OAAe8J,IAAyB,cAEtG,OAAO,kBAAoB,IAAa,CAAEC,aAAcA,EAAcpI,MAAOiI,IAEjF,KAAK,QAAoBC,GACrB,OAAO,kBAAoB,IAAQ,CAAElI,MAAOA,GAEpD,CACA,OAAQ,kBAAoB,aAAgB,KACxC,kBAAoB,GAAiB,CAAEwC,SAAUA,EAAUgC,SAAUA,EAAUC,YAAaA,EAAaf,WAAYA,EAAY7F,QAASA,EAAS8G,mBAAoBvG,IAAS,QAAuBwB,EAAOS,EAAQjC,GAAQwG,mBAAoBxG,IAAS,QAAuBwB,EAAOS,EAAQjC,GAAQwB,MAAOA,EAAOsE,OAAQA,EAAQW,aAAcA,EAAcvB,KAAM3G,KAAKyK,QAAQR,GAAgBvH,mBAAoBA,EAAoBW,MAAOA,IACrb,kBAAoB,MAAO,CAAE/B,MAAO7C,EAAOC,SAAWsB,KAAKgK,cAAcC,IACjF,EAEJ,UAAe,EAAAlI,EAAA,KAAW,OAAWqH,I,yICzI9B,MAAM3K,EAAS,CAClBkN,kBAAmB,CACflM,YAAaC,EAAA,SACbC,UAAWJ,EAAA,WCHnB,MAAMqM,UAA2B,cAC7B3K,SACI,MAAM,SAAE4K,EAAW,IAAO7L,KAAKG,MAC/B,OAAwB,IAApB0L,EAASzJ,OACF,KAEJyJ,EAAShK,KAAI,CAACiK,EAASrC,IAAU,kBAAoB,MAAO,CAAE/I,IAAK,WAAW+I,KAAWqC,IACpG,EAEJ,MAAMC,GAAiB,EAAAhK,EAAA,IAAW6J,GCVrB,EAAS,CAClBI,MAAO,CAEHC,OAAQ,QACR3I,MAAO,SAEX4I,SAAU,CACNvM,U,SAAW,SACXgG,UAAW,UCFnB,MAAMwG,UAAyB,cAC3BtM,YAAYM,GACRL,MAAMK,GACNH,KAAKqC,YAAc,KACfrC,KAAKG,MAAMmC,SAAQ,EAAM,EAE7BtC,KAAKqC,YAAcrC,KAAKqC,YAAYE,KAAKvC,KAC7C,CACA8C,sBAAsBC,GAClB,MAAM,SAAE8I,EAAQ,OAAE7I,GAAWhD,KAAKG,MAClC,OAAO4C,EAAU8I,WAAaA,GAAY9I,EAAUC,SAAWA,CACnE,CACA/B,SACI,MAAM,SAAE4K,EAAQ,QAAE3K,EAAO,KAAEE,EAAI,OAAE4B,EAAM,MAAEK,GAAUrD,KAAKG,MACxD,OAAQ,kBAAoB,EAAAiD,MAAO,CAAEmF,UAAW,gBAAiBjH,MAAO,QAAc0B,OAAQA,EAAQV,QAAStC,KAAKqC,YAAagB,MAAOjC,EAAKG,cAAcC,EAAA,4BAAoC,CACvLN,UACAkL,KAAM/I,IACNC,MAAO,OACX,kBAAoByI,EAAgB,CAAEF,SAAUA,IACxD,EAEJ,MAAMQ,GAAe,EAAAtK,EAAA,IAAWoK,GCtBhC,MAAMG,UAAoB,cACtBzM,YAAYM,GACRL,MAAMK,GACNH,KAAK8E,aAAe,CAChB9B,QAAQ,EACRuJ,SAAS,GAEbvM,KAAKyD,MAAQQ,OAAOO,OAAO,CAAC,EAAGxE,KAAK8E,cACpC9E,KAAKqC,YAAeW,IAChBhD,KAAK+E,SAAS,CAAE/B,UAAS,EAE7BhD,KAAKgF,WAAaC,IACdjF,KAAK+E,SAAS,CAAE/B,QAAQ,IACxBiC,EAAMC,kBACC,GAEXlF,KAAKqC,YAAcrC,KAAKqC,YAAYE,KAAKvC,MACzCA,KAAKgF,WAAahF,KAAKgF,WAAWzC,KAAKvC,KAC3C,CACAiB,SACI,MAAM,QAAEC,EAAO,KAAEE,EAAI,OAAEmG,EAAM,MAAElE,GAAUrD,KAAKG,OACxC,OAAE6C,EAAM,QAAEuJ,GAAYvM,KAAKyD,MACjC,IAAI+I,EAAY,EAChB,MACMC,EAAe,GACfC,EAAc,GACdC,GAAgB,EAAAC,EAAA,GAAuB,CACzCrF,SACAsF,MAAO3L,IAGL2K,EAAW,GAUjB,GATAc,EAAc9K,KAAIxB,IACVA,EAAKwL,UACLxL,EAAKwL,SAAShK,KAAIiK,IACTD,EAASiB,SAAShB,IACnBD,EAASlL,KAAKmL,EAClB,GAER,IAEoB,IAApBD,EAASzJ,OACT,OAAO,KAGXyJ,EAASkB,MAAK,CAACC,EAAGC,IACVD,EAAIC,GACI,EAERD,EAAIC,EACG,EAEJ,IAEX,IAAK,MAAMnB,KAAWD,EAAU,CAC5B,MACMqB,EAAgB,GADPT,EAAarK,OAAS,EAAI,KAAO,KACd0J,IAC9BS,EACAE,EAAa9L,KAAKuM,GAEbV,GArCI,KAsCLA,EAAYU,EAAc9K,OAtCrB,GAuCLqK,EAAa9L,KAAKuM,EACbC,MAAM,EAxCN,GAwCoBX,GACpBY,OACAC,OAAO,QAGZZ,EAAa9L,KAAKuM,IAG1BV,GAAaU,EAAc9K,OAC3BsK,EAAY/L,KAAKmL,EACrB,CACA,OAAQ,kBAAoB,MAAO,CAAExK,MAAO7C,EAAOkN,mBAC/CxG,QAAQsH,IAAiBA,EAAa5K,KAAI,CAACiK,EAASrC,IAAU,kBAAoB,OAAQ,CAAE/I,IAAK+I,GAASqC,KAC1G3G,QAAQsH,EAAarK,OAASsK,EAAYtK,SAAY,kBAAoB,IAAK,CAAE,cAAe,cAAegD,KAAM,KAAMC,QAASrF,KAAKgF,YAAc5D,EAAKG,cAAcC,EAAA,sBAA8B,CAAEC,MAAOiL,EAAYtK,OAASqK,EAAarK,UACnP,kBAAoBiK,EAAc,CAAER,SAAUA,EAAU3K,QAASA,EAAS8B,OAAQA,EAAQV,QAAStC,KAAKqC,YAAagB,MAAOA,IACpI,EAEJ,MACA,GADgB,EAAAtB,EAAA,IAAWuK,G,sGCnFpB,MAAMgB,EAAc,CACvBC,YAAa,IACbC,WAAY,IACZtB,SAAU,CACNjN,WAAYC,EAAA,WAGP,EAAS,CAClBuO,cAAe,CACXxB,OAAQ,QACR7M,aAAc0G,EAAA,SACdnG,UAAWD,EAAA,WCMnB,MAAMgO,UAAsB,cACxB7N,cACIC,SAASC,WAETC,KAAK2N,eAAiB,IACVC,IACJ,IAAI,OAAEpN,GAAWoN,EAAIzN,EA1BC,SAAU0N,EAAGC,GAC/C,IAAIC,EAAI,CAAC,EACT,IAAK,IAAIC,KAAKH,EAAO5J,OAAOgK,UAAUC,eAAeC,KAAKN,EAAGG,IAAMF,EAAE3J,QAAQ6J,GAAK,IAC9ED,EAAEC,GAAKH,EAAEG,IACb,GAAS,MAALH,GAAqD,mBAAjC5J,OAAOmK,sBACtB,KAAIC,EAAI,EAAb,IAAgBL,EAAI/J,OAAOmK,sBAAsBP,GAAIQ,EAAIL,EAAE5L,OAAQiM,IAC3DP,EAAE3J,QAAQ6J,EAAEK,IAAM,GAAKpK,OAAOgK,UAAUK,qBAAqBH,KAAKN,EAAGG,EAAEK,MACvEN,EAAEC,EAAEK,IAAMR,EAAEG,EAAEK,IAF4B,CAItD,OAAON,CACX,CAgB6CQ,CAAOX,EAAI,CAAC,WACzC,OAAQ,kBAAoBY,EAAA,GAAYvK,OAAOO,OAAO,CAAC,EAAGrE,EAAO,CAAEmB,MAAO,CAAC,CAAErC,WAAYqO,EAAYpB,SAASjN,YAAc,CAAC,GAAIwP,KAAM,CAACjO,EAAOL,EAAMsJ,OAAQtJ,EAAMsO,QAAU,EAGrLzO,KAAK0O,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAErN,MAAO,gBAAsBgC,MAAOsL,EAAA,OAEhF,CACA3N,SACI,MAAM,KAAEmL,EAAI,OAAE7E,EAAM,kBAAEmE,EAAiB,KAAEtK,GAASpB,KAAKG,MACjDqH,EAAUD,GAAUA,EAAOE,MAAQF,EAAOE,KAAKC,OAASH,EAAOE,KAAKC,MAAMpC,KAC1EuJ,EAAYrH,GAAWD,EAAOE,KAAKC,MAAMpC,KAAKwJ,OAC9CC,EAASvH,GAAWD,EAAOE,KAAKC,MAAMpC,KAAK0J,IAC3CC,EAAWzH,GAAWD,EAAOE,KAAKC,MAAMpC,KAAK4J,MAC7CC,EAAcN,EAAYtH,EAAOE,KAAKC,MAAMpC,KAAKwJ,OAAOlH,MAAQ,MAChEwH,EAAWL,EAASxH,EAAOE,KAAKC,MAAMpC,KAAK0J,IAAIpH,MAAQ,MACvDyH,EAAaJ,EAAW1H,EAAOE,KAAKC,MAAMpC,KAAK4J,MAAMtH,MAAQ,MAC7D0H,EAAcT,EAAYtH,EAAOE,KAAKC,MAAMpC,KAAKwJ,OAAOrN,MAAQ,EAChE8N,EAAWR,EAASxH,EAAOE,KAAKC,MAAMpC,KAAK0J,IAAIvN,MAAQ,EACvD+N,EAAaP,EAAW1H,EAAOE,KAAKC,MAAMpC,KAAK4J,MAAMzN,MAAQ,EAC7DqN,GAAS,EAAAnH,EAAA,IAAekH,EAAYtH,EAAOE,KAAKC,MAAMpC,KAAKwJ,OAAOrN,MAAQ,EAAG0N,GAC7EH,GAAM,EAAArH,EAAA,IAAeoH,EAASxH,EAAOE,KAAKC,MAAMpC,KAAK0J,IAAIvN,MAAQ,EAAG2N,GACpEF,GAAQ,EAAAvH,EAAA,IAAesH,EAAW1H,EAAOE,KAAKC,MAAMpC,KAAK4J,MAAMzN,MAAQ,EAAG4N,GAC1EI,EAAcrO,EAAKG,cAAcC,EAAA,eACjCkO,EAAWtO,EAAKG,cAAcC,EAAA,gBAC9BmO,EAAavO,EAAKG,cAAcC,EAAA,kBAEhCoO,EAAc5P,KAAK2N,iBACnBkC,EAAU,kBAAoBC,EAAA,GAAa,CAAEC,OAAQ,GAAIC,YAAa,EAAGC,eAAgB,kBAAoBL,EAAa,CAAEM,GAAI,GAAIC,WAAY,IAAK3P,OAAQ,CAACwO,EAAKF,EAAQI,KAAWkB,UAAW,KACvM,OAAQ,kBAAoB,MAAO,CAAE9O,MAAO,CAAE2K,OAAQqB,EAAYC,YAAajK,MAAOgK,EAAYE,aAAgB9B,IAAsB,gBAA0B1L,KAAK0O,cAAkB,kBAAoB2B,EAAA,GAAU,CAAEC,SAAUlP,EAAKG,cAAcC,EAAA,8BAAsC+O,UAAWnP,EAAKG,cAAcC,EAAA,+BAAuCgP,wBAAwB,EAAMlQ,KAAM,CAC7X,CAAEmQ,EAAGf,EAAUgB,EAAGnB,EAAU3H,MAAOwH,GACnC,CAAEqB,EAAGhB,EAAaiB,EAAGpB,EAAa1H,MAAOuH,GACzC,CAAEsB,EAAGd,EAAYe,EAAGlB,EAAY5H,MAAOyH,IACxCpD,OAAQqB,EAAYC,YAAaoD,OAAQ,EAAGC,WAAYxP,EAAKG,cAAcC,EAAA,4BAAoC,CAC9G4K,KAAMwE,EAAMH,EACZhP,OAAO,EAAAkG,EAAA,IAAeiJ,EAAMF,EAAGE,EAAMhJ,SACrCiJ,gBAAiBhB,EAAQiB,WAAY,CACrC,CACI1E,KAAMsD,GAEV,CACItD,KAAMqD,GAEV,CACIrD,KAAMuD,IAEXoB,kBAAmB,WAAYC,eAAgB,QAAS5E,KAAMA,EAAM6E,QAAS,CAC5EC,OAAQ,GACRC,KAAM,EACNC,MAAO,IACPC,IAAK,IACNC,WAAYC,EAAA,SAAuBjO,MAAOgK,EAAYE,aACjE,EAEJ,MACA,GADkB,EAAAzL,EAAA,IAAW2L,G,0FChFtB,MAAM,EAAS,CAClB8D,YAAa,CACT7R,U,SAAW,UAEfuM,SAAU,CACNvG,UAAW,UCSbsF,EAAa,SACnB,MAAMwG,UAAgC,cAClC5R,YAAYM,GACRL,MAAMK,EACV,CACAqC,oBACI,MAAM,YAAEuI,EAAW,gBAAEC,EAAe,kBAAEE,GAAsBlL,KAAKG,MACjE4K,EAAYC,EAAiBC,EAAYC,EAC7C,CACAtI,mBAAmBC,GACf,MAAM,YAAEkI,EAAW,gBAAEC,EAAe,kBAAEE,GAAsBlL,KAAKG,MAC7D0C,EAAUqI,oBAAsBA,GAChCH,EAAYC,EAAiBC,EAAYC,EAEjD,CACAjK,SACI,MAAM,KAAEG,EAAI,OAAEmG,EAAM,cAAEmK,EAAa,kBAAEhG,GAAsB1L,KAAKG,MAC1DwR,EAAWpK,GAAUA,EAAOE,MAAQF,EAAOE,KAAKC,MAChDpC,GAAO,EAAAqC,EAAA,IAAegK,EAAWpK,EAAOE,KAAKC,MAAMpC,KAAKoC,MAAMjG,MAAQ,EAAGkQ,EAAWpK,EAAOE,KAAKC,MAAMpC,KAAKoC,MAAME,MAAQ,OAC/H,OAAQ,kBAAoB,aAAgB,KACxC,kBAAoB,MAAO,CAAEtG,MAAO,YAChC,kBAAoB,EAAAoH,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IAAiBzH,EAAKG,cAAcC,EAAA,mBAA2B,CAAEC,MAAO6D,MACnI,kBAAoB,MAAO,CAAEhE,MAAO,eAChC,kBAAoB,KAAoB,CAAEuL,MAAO6E,EAAenK,OAAQA,EAAQqK,OAAQlG,IAAqB,EAAGmG,WAAYA,EAAMhQ,KAAIiQ,GAAU,kBAAoB,KAAmB,CAAEpR,IAAKoR,EAAMrR,GAAIsR,cAAe,CAAC,EAAGC,MAAOF,EAAME,MAAQF,EAAME,MAAMC,WAAa,GAAIC,WAAY3K,EAAOE,KAAKC,MAAMpC,KAAKoC,MAAMjG,MAAOmG,MAAOL,EAAOE,KAAKC,MAAMpC,KAAKoC,MAAME,MAAOnG,MAAOqQ,EAAMxM,KAAKoC,MAAMjG,aAC5Y,EAEJ,MAAM+B,GAAkB,SAAsB,CAACC,GAASoC,WAAUgC,WAAU6J,gBAAe1G,kBAAiBtH,aACxG,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,GAAkB,QAAmBH,GACrCzC,EAAU4C,EAAkB,MAAe,QAAaH,GACxDxC,EAAe2C,IAAoC,QAAgBH,GACnEsD,EAAW,CACb/D,OAAQ,CACJmB,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBP,UAAWC,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAeK,WAAaL,EAAeK,WAAcL,GAC7JA,EAAeT,QACfS,EAAeT,OAAOC,SAAW,CAAE,CAAC,GAAG,eAA4BQ,EAAeT,OAAOC,UAAcQ,GACvGA,EAAeT,QACfS,EAAeT,OAAOuB,UAAY,CAAEA,SAAUd,EAAeT,OAAOuB,WAAevD,GAAW,CAAE,CAACA,QAAUkD,IAAgBlD,GAAW,CAAE,CAACA,GAAUC,IACvJgR,QAASlO,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAewO,SAAWxO,EAAewO,SACvF9K,SAAUpD,OAAOO,OAAO,CAAC,EAAIkN,GAAiB,CAAE,CAACA,GAAgB,OAE/DxG,GAAoB,QAASjH,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAGyC,GAAW,CAAEmL,UAAWvM,EAAUgC,cAGrG,MAAO,CACHN,OAHW,kBAA6B9D,EAAOuH,EAAiBC,EAAYC,GAI5EQ,kBAHsB,6BAAwCjI,EAAOuH,EAAiBC,EAAYC,GAIlGA,oBACH,IAECvG,EAAqB,CACvBoG,YAAa,kBAEXsH,GAAsB,EAAAtQ,EAAA,KAAW,QAAW,IAAAC,SAAQwB,EAAiBmB,EAAzB,CAA6C8M,KClE/F,MAAMa,UAAyB,cAC3BzS,YAAYM,GACRL,MAAMK,GACNH,KAAKqC,YAAc,KACfrC,KAAKG,MAAMmC,SAAQ,EAAM,EAE7BtC,KAAKqC,YAAcrC,KAAKqC,YAAYE,KAAKvC,KAC7C,CACA8C,sBAAsBC,GAClB,MAAM,aAAE5B,EAAY,OAAE6B,GAAWhD,KAAKG,MACtC,OAAO4C,EAAU5B,eAAiBA,GAAgB4B,EAAUC,SAAWA,CAC3E,CACA/B,SACI,MAAM,SAAE4E,EAAQ,SAAEgC,EAAQ,aAAE1G,EAAY,KAAEC,EAAI,OAAE4B,EAAM,cAAE0O,EAAa,gBAAE1G,GAAoBhL,KAAKG,MAChG,OAAQ,kBAAoB,EAAAiD,MAAO,CAAEmF,UAAW,gBAAiBvF,OAAQA,EAAQV,QAAStC,KAAKqC,YAAagB,MAAOjC,EAAKG,cAAcC,EAAA,2BAAmC,CACjKN,QAASwQ,EACTtF,KAAMjL,IACNoR,QAAS,SACb,kBAAoBF,EAAqB,CAAExM,SAAUA,EAAUgC,SAAUA,EAAU6J,cAAeA,EAAe1G,gBAAiBA,IAC1I,EAEJ,MAAMwH,GAAe,EAAAzQ,EAAA,IAAWuQ,GC1BnB,EAAS,CAClBG,KAAM,CAAC,EACP7D,SAAU,CACNjP,UAAWmG,EAAA,UAEf4M,iBAAkB,CACdpT,WAAY,UCSpB,MAAMqT,UAAoB,cACtB9S,cACIC,SAASC,WACTC,KAAKyD,MAAQ,CACTmP,wBAAwB,GAE5B5S,KAAK6S,SAAW,KACZ,MAAM,OAAEtL,EAAM,cAAEmK,GAAkB1R,KAAKG,MAKvC,OAJsB,EAAAyM,EAAA,GAAuB,CACzCrF,SACAsF,MAAO6E,GAES,EAExB1R,KAAK8S,WAAa,KACd,MAAM,OAAEvL,EAAM,cAAEmK,EAAa,kBAAEhG,GAAsB1L,KAAKG,MAC1D,OAAQ,kBAAoB,KAAoB,CAAE0M,MAAO6E,EAAenK,OAAQA,EAAQqK,OAAQlG,IAAqB,EAAGmG,WAAYA,EAAMhQ,KAAIkR,GAAe,kBAAoB,KAAmB,CAAEhB,cAAe,CAAC,EAAGrR,IAAK,GAAGqS,EAAWtS,UAAWuR,MAAOe,EAAWf,MAAQe,EAAWf,MAAMC,gBAAa7N,EAAW8N,WAAY3K,EAAOE,KAAKC,MAAMpC,KAAKoC,MAAMjG,MAAOmG,MAAOL,EAAOE,KAAKC,MAAMpC,KAAKoC,MAAME,MAAOnG,MAAOsR,EAAWzN,KAAKoC,MAAMjG,WAAY,EAElczB,KAAKgT,WAAa,KACd,MAAM,SAAEnN,EAAQ,SAAEgC,EAAQ,QAAE3G,EAAO,KAAEE,EAAI,gBAAEmC,EAAe,MAAEN,EAAK,cAAEyO,EAAa,gBAAE1G,GAAoBhL,KAAKG,OACrG,uBAAEyS,GAA2B5S,KAAKyD,MAQxC,IAAoB,IAPEzD,KAAK6S,WACMI,WAAU5E,IACvC,MAAM5N,EAAK4N,EAAE5N,GACb,GAAIA,GAAa,OAAPA,EACN,MAAc,UAAPA,GAAyB,WAAPA,CAC7B,IAEmB,CAEnB,MAAMU,EAAe8B,GAASA,EAAMC,QAAUD,EAAMC,OAAOC,QAAUF,EAAMC,OAAOC,QAAUnD,KAAKG,MAAMgB,aACvG,OAAQ,kBAAoB,MAAO,CAAEG,MAAO,oBACxC,kBAAoB,EAAA4R,OAAQ,CAAEC,OAAQ,eAAgB9N,QAASrF,KAAKoT,2BAA4BC,KAAM,EAAAC,WAAA,OAAmBf,QAAS,EAAAgB,cAAA,MAAsBnS,EAAKG,cAAcC,EAAA,iBAAyB,CAAEC,MAAOiQ,KAC7M,kBAAoBc,EAAc,CAAE3M,SAAUA,EAAUgC,SAAUA,EAAU3G,QAASA,EAASC,aAAcoC,EAAkB,KAAsBpC,EAAc6B,OAAQ4P,EAAwBtQ,QAAStC,KAAKwT,4BAA6BvQ,MAAOA,EAAOyO,cAAeA,EAAe1G,gBAAiBA,IAClT,CAEI,OAAO,IACX,EAEJhL,KAAKwT,4BAA+BxQ,IAChChD,KAAK+E,SAAS,CAAE6N,uBAAwB5P,GAAS,EAErDhD,KAAKoT,2BAA6BnO,IAC9BjF,KAAK+E,SAAS,CAAE6N,wBAAwB,IACxC3N,EAAMC,gBAAgB,CAE9B,CACA1C,oBACI,MAAM,YAAEuI,EAAW,gBAAEC,EAAe,WAAEC,EAAU,kBAAEC,GAAsBlL,KAAKG,MAC7E4K,EAAYC,EAAiBC,EAAYC,EAC7C,CACAtI,mBAAmBC,GACf,MAAM,SAAEgD,EAAQ,SAAEgC,EAAQ,YAAEkD,EAAW,gBAAEC,EAAe,WAAEC,EAAU,kBAAEC,GAAsBlL,KAAKG,MAC7F0C,EAAUqI,oBAAsBA,GAChCrI,EAAUgD,WAAaA,GACvBhD,EAAUgF,WAAaA,GACvBkD,EAAYC,EAAiBC,EAAYC,EAEjD,CACAjK,SACI,MAAM,KAAEG,EAAI,gBAAEmC,EAAe,cAAEmO,EAAa,kBAAEhG,GAAsB1L,KAAKG,MACnEkD,EAAQjC,EAAKG,cAAcC,EAAA,wBAAgC,CAC7DC,MAAO8B,EAAkB,mBAAoCmO,IAEjE,OAAQ,kBAAoB,EAAA+B,KAAM,CAAEnS,MAAO,QACvC,kBAAoB,EAAAoS,UAAW,KAC3B,kBAAoB,EAAAhL,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IAAiBxF,IAC5E,kBAAoB,EAAAsQ,SAAU,KAAMjI,IAAsB,gBAA0B,kBAAoB,aAAgB,KACpH,kBAAoB,EAAAiD,SAAU,CAAErL,MAAOsL,EAAA,OACvC,kBAAoB,EAAAD,SAAU,CAAErN,MAAO,WAAiBgC,MAAOsL,EAAA,OAC/D,kBAAoB,EAAAD,SAAU,CAAErN,MAAO,WAAiBgC,MAAOsL,EAAA,OAC/D,kBAAoB,EAAAD,SAAU,CAAErN,MAAO,WAAiBgC,MAAOsL,EAAA,QAAyB5O,KAAK8S,cACjG,kBAAoB,EAAAc,WAAY,KAAM5T,KAAKgT,cACnD,EAEJ,MAAM,GAAkB,SAAsB,CAACvP,GAASoC,WAAUgC,WAAU6J,gBAAe1G,kBAAiBC,aAAYvH,aACpH,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,GAAkB,QAAmBH,GACrCzC,EAAU4C,EAAkB,MAAe,QAAaH,GACxDxC,EAAe2C,IAAoC,QAAgBH,GACnEV,EAAQ,CACVC,OAAQ,CACJ2Q,MAAO,EACPxP,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBP,UAAWC,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAeK,WAAaL,EAAeK,WAAcL,GAC7JA,EAAeT,QACfS,EAAeT,OAAOC,SAAW,CAAE,CAAC,GAAG,eAA4BQ,EAAeT,OAAOC,UAAcQ,GACvGA,EAAeT,QACfS,EAAeT,OAAOuB,UAAY,CAAEA,SAAUd,EAAeT,OAAOuB,WAAevD,GAAW,CAAE,CAACA,QAAUkD,IAAgBlD,GAAW,CAAE,CAACA,GAAUC,IACvJgR,QAASlO,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAewO,SAAWxO,EAAewO,SACvF9K,SAAUpD,OAAOO,OAAO,CAAC,EAAIkN,GAAiB,CAAE,CAACA,GAAgB,OAE/DxG,GAAoB,QAASjH,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAGvB,GAAQ,CAAEmP,UAAWvM,EAAUgC,cAGlG,MAAO,CACH3G,UACAC,eACA8B,QACAsE,OANW,kBAA6B9D,EAAOuH,EAAiBC,EAAYC,GAO5EQ,kBANsB,6BAAwCjI,EAAOuH,EAAiBC,EAAYC,GAOlGF,kBACAC,aACAC,oBACH,IAEC,EAAqB,CACvBH,YAAa,kBAGjB,GADoB,EAAAhJ,EAAA,KAAW,QAAW,IAAAC,SAAQ,EAAiB,EAAzB,CAA6C2Q,K,kDC9HhF,MAAM,GAAS,CAClBlF,cAAe,CACXrO,aAAc0G,EAAA,UAElBgO,SAAU,CACN7U,WAAYC,EAAA,UAEhB6U,eAAgB,CACZpU,UAAWmG,EAAA,WCSnB,MAAMkO,WAAuB,cACzBnU,cACIC,SAASC,WACTC,KAAKiU,aAAe,gBACpBjU,KAAKkU,SAAWC,GAAA,EAChBnU,KAAKyD,MAAQ,CACTH,MAAO,GAEXtD,KAAKoU,aAAe,KAChB,MAAM,MAAE9Q,GAAUtD,KAAKyD,OACjB,YAAE4Q,EAAc,GAAMrU,KAAKiU,aAAaK,SAAW,CAAC,EACtDD,IAAgB/Q,GAChBtD,KAAK+E,SAAS,CAAEzB,MAAO+Q,GAC3B,EAEJrU,KAAKuU,SAAW,KACZ,MAAM,QAAErT,EAAO,KAAEkL,EAAI,kBAAEV,EAAiB,OAAEnE,GAAWvH,KAAKG,OACpD,MAAEmD,GAAUtD,KAAKyD,MACjB+Q,EAAaxU,KAAKyU,gBACxB,OAAKlN,GAAsC,IAA5BiN,EAAWtF,MAAM9M,OAGxB,kBAAoB,MAAO,CAAEmG,UAAW,iBAAmBmD,IAAsB,gBAA0B1L,KAAK0O,cAAkB,kBAAoB,aAAgB,KAC1KvJ,QAAoB,YAAZjE,IAA0BlB,KAAK0U,eACvC,kBAAoBC,GAAA,EAAa,CAAEC,4BAA6BJ,EAAWX,MAAMpS,MACvE,CACE,CACIoT,QAASL,EAAWX,MAAMgB,QAC1BnE,EAAG8D,EAAWX,MAAMpS,QAG1B,GAAIqT,kCAAmCN,EAAWX,MAAMpS,MAAQ,CAAC,CAAE2K,KAAMoI,EAAWX,MAAMkB,SAAY,GAAI9I,OAAQjM,KAAKgV,iBAAkBrE,OAAQ,EAAGC,WAAY,GAAGA,EAAMiE,UAAW7D,eAAgB,cAAeiE,kBAAmBjV,KAAKkV,iBAAkBC,UAAWnV,KAAKoV,aAAaZ,GAAc,SAAMpQ,EAAWiR,UAAW,EAAGjJ,KAAMA,EAAM6E,QAAS,CAC9VC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,IAAK,GACNiE,4BAA6Bd,EAAWtF,MAAM9M,OAC3CoS,EAAWtF,MAAMrN,KAAI+O,IACZ,CACHiE,QAASjE,EAAMiE,QACfnE,EAAGE,EAAMnP,UAGf,GAAI8T,kCAAmCf,EAAWtF,MAAM9M,OACxDoS,EAAWtF,MAAMrN,KAAI+O,IACZ,CACHxE,KAAMwE,EAAMmE,WAGlB,GAAIS,qBAAsBhB,EAAWiB,OAAOrT,OAC5C,CACE,CACIyS,QAASL,EAAWiB,OAAO,GAAGZ,QAC9BnE,EAAG8D,EAAWiB,OAAO,GAAGhU,QAG9B,GAAIiU,2BAA4BlB,EAAWiB,OAAOrT,OAAS,CAAC,CAAEgK,KAAMoI,EAAWiB,OAAO,GAAGV,SAAY,GAAIzR,MAAOA,MApCnH,IAoC+H,EAE9ItD,KAAKgV,eAAiB,KAClB,MAAM,QAAE9T,GAAYlB,KAAKG,OACnB,MAAEmD,GAAUtD,KAAKyD,MACvB,MAAgB,YAAZvC,EACOoC,EAAQ,IAAM,IAAMA,EAAQ,IAAM,IAAM,IAGxCA,EAAQ,IAAM,IAAMA,EAAQ,IAAM,IAAM,GACnD,EAEJtD,KAAKkV,eAAiB,KAClB,MAAM,MAAE5R,GAAUtD,KAAKyD,MACvB,OAAOH,EAAQ,IAAM,EAAIA,EAAQ,IAAM,EAAIA,EAAQ,IAAM,EAAI,CAAC,EAElEtD,KAAK0O,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAErN,MAAO,iBAAsBgC,MAAOsL,EAAA,OACpE,kBAAoB,EAAAD,SAAU,CAAErN,MAAO,kBAAuBgC,MAAOsL,EAAA,QAE7E5O,KAAKoV,aAAgBxE,IACjB,IAAI+E,GAAW,EACf,IAAK,MAAMC,KAAShF,EAAM6E,OACtB,GAAIG,EAAMnU,MAAO,CACbkU,GAAW,EACX,KACJ,CAEJ,IAAI1G,GAAW,EACf,IAAK,MAAMC,KAAS0B,EAAM1B,MACtB,GAAIA,EAAMzN,MAAO,CACbwN,GAAW,EACX,KACJ,CAEJ,QAAS2B,EAAMiD,MAAMpS,OAASkU,GAAY1G,EAAS,CAE3D,CACAzM,oBACI,MAAM,YAAEuI,EAAW,gBAAEC,EAAe,WAAEC,EAAU,kBAAEC,GAAsBlL,KAAKG,MAC7E4K,EAAYC,EAAiBC,EAAYC,GACzClL,KAAKkU,UAAW,SAAkBlU,KAAKiU,aAAaK,QAAStU,KAAKoU,aACtE,CACAxR,mBAAmBC,GACf,MAAM,YAAEkI,EAAW,gBAAEC,EAAe,WAAEC,EAAU,kBAAEC,GAAsBlL,KAAKG,MACzE0C,EAAUqI,oBAAsBlL,KAAKG,MAAM+K,mBAC3CH,EAAYC,EAAiBC,EAAYC,EAEjD,CACA2K,uBACQ7V,KAAKkU,UACLlU,KAAKkU,UAEb,CACAO,gBACI,MAAM,QAAEvT,EAAO,OAAEqG,EAAM,KAAEnG,EAAI,WAAE6J,GAAejL,KAAKG,MAC7CyQ,EAAQ,CACViD,MAAO,CAAC,EACR4B,OAAQ,GACRvG,MAAO,IAGLyC,EAAWpK,GAAUA,EAAOE,MAAQF,EAAOE,KAAKC,MAChDoO,EAAWnE,GAAYpK,EAAOE,KAAKC,MAAMmM,OAAqC,OAA5BtM,EAAOE,KAAKC,MAAMmM,MACpEA,EAAQkC,KAAKC,MAAMF,EAAWvO,EAAOE,KAAKC,MAAMmM,MAAMpS,MAAQ,GAC9DwU,EAAa7U,EAAKG,cAAcC,EAAA,QAAgB,CAClDoG,OAAO,QAAekO,EAAWvO,EAAOE,KAAKC,MAAMmM,MAAMjM,WAAQxD,KAcrE,GAZAwM,EAAMiD,MAAQ,CACVkB,OAAQ3T,EAAKG,cAAcC,EAAA,oBAA4B,CACnDC,MAAOoS,EACPjM,MAAOqO,IAEXpB,QAASzT,EAAKG,cAAcC,EAAA,oBAA4B,CACpDC,MAAOoS,EACPjM,MAAOqO,IAEXxU,MAAOsU,KAAKC,MAAMnC,IAGN,YAAZ3S,GAAyB+J,IAAe,WAAmB,CAC3D,MAAMiL,EAAcvE,GAAYpK,EAAOE,KAAKC,MAAMoM,UAA2C,OAA/BvM,EAAOE,KAAKC,MAAMoM,SAC1EA,EAAWiC,KAAKC,MAAME,EAAc3O,EAAOE,KAAKC,MAAMoM,SAASrS,MAAQ,GACvE0U,EAAgB/U,EAAKG,cAAcC,EAAA,QAAgB,CACrDoG,OAAO,QAAesO,EAAc3O,EAAOE,KAAKC,MAAMoM,SAASlM,WAAQxD,KAE3EwM,EAAM6E,OAAS,CACX,CACIV,OAAQ3T,EAAKG,cAAcC,EAAA,uBAA+B,CACtDC,MAAOqS,EACPlM,MAAOuO,IAEXtB,QAASzT,EAAKG,cAAcC,EAAA,uBAA+B,CACvDC,MAAOqS,EACPlM,MAAOuO,IAEX1U,MAAOsU,KAAKC,MAAMlC,IAG9B,CACA,MAAMsC,EAAazE,GAAYpK,EAAOE,KAAKC,MAAM2O,SAAyC,OAA9B9O,EAAOE,KAAKC,MAAM2O,QACxEpH,EAAW0C,GAAYpK,EAAOE,KAAKC,MAAMwH,OAAqC,OAA5B3H,EAAOE,KAAKC,MAAMwH,MACpEmH,EAAUN,KAAKC,MAAMI,EAAa7O,EAAOE,KAAKC,MAAM2O,QAAQ5U,MAAQ,GACpE6U,EAAelV,EAAKG,cAAcC,EAAA,QAAgB,CACpDoG,OAAO,QAAewO,EAAa7O,EAAOE,KAAKC,MAAM2O,QAAQzO,WAAQxD,KAEnE8K,EAAQ6G,KAAKC,MAAM/G,EAAW1H,EAAOE,KAAKC,MAAMwH,MAAMzN,MAAQ,GAC9D4N,EAAajO,EAAKG,cAAcC,EAAA,QAAgB,CAClDoG,OAAO,QAAeqH,EAAW1H,EAAOE,KAAKC,MAAMwH,MAAMtH,WAAQxD,KA0BrE,OAxBAwM,EAAM1B,MAAQ,CACV,CACI6F,OAAQ3T,EAAKG,cAAcC,EAAA,oBAA4B,CACnDC,MAAOyN,EACPtH,MAAOyH,IAEXwF,QAASzT,EAAKG,cAAcC,EAAA,oBAA4B,CACpDC,MAAOyN,EACPtH,MAAOyH,IAEX5N,MAAOsU,KAAKC,MAAM9G,IAEtB,CACI6F,OAAQ3T,EAAKG,cAAcC,EAAA,uBAA+B,CACtDC,MAAO4U,EACPzO,MAAO0O,IAEXzB,QAASzT,EAAKG,cAAcC,EAAA,uBAA+B,CACvDC,MAAO4U,EACPzO,MAAO0O,IAEX7U,MAAOsU,KAAKC,MAAMK,KAGnBzF,CACX,CACA8D,eACI,MAAM,OAAEnN,EAAM,KAAEnG,GAASpB,KAAKG,MACxBwR,EAAWpK,GAAUA,EAAOE,MAAQF,EAAOE,KAAKC,MAChDwO,EAAcvE,GAAYpK,EAAOE,KAAKC,MAAMoM,UAA2C,OAA/BvM,EAAOE,KAAKC,MAAMoM,SAC1EsC,EAAazE,GAAYpK,EAAOE,KAAKC,MAAM2O,SAAyC,OAA9B9O,EAAOE,KAAKC,MAAM2O,QACxEpH,EAAW0C,GAAYpK,EAAOE,KAAKC,MAAMwH,OAAqC,OAA5B3H,EAAOE,KAAKC,MAAMwH,MACpE4E,EAAWiC,KAAKC,MAAME,EAAc3O,EAAOE,KAAKC,MAAMoM,SAASrS,MAAQ,GACvE4U,EAAUN,KAAKC,MAAMI,EAAa7O,EAAOE,KAAKC,MAAM2O,QAAQ5U,MAAQ,GACpE6U,EAAelV,EAAKG,cAAcC,EAAA,QAAgB,CACpDoG,OAAO,QAAewO,EAAa7O,EAAOE,KAAKC,MAAM2O,QAAQzO,WAAQxD,KAEnE8K,EAAQ6G,KAAKC,MAAM/G,EAAW1H,EAAOE,KAAKC,MAAMwH,MAAMzN,MAAQ,GAC9D4N,EAAajO,EAAKG,cAAcC,EAAA,QAAgB,CAClDoG,OAAO,QAAeqH,EAAW1H,EAAOE,KAAKC,MAAMwH,MAAMtH,WAAQxD,KAG/DmS,EAAwBzC,EAAWuC,EACnCG,EAAsB1C,EAAW5E,EACvC,IAAIuH,EAAkCJ,EAAU,EAAKA,EAAUvC,EAAY,IAAM,EAC7E2C,EAAkC,MAClCA,EAAkC,IAAMA,GAE5C,IAAIC,EAAgC5C,EAAW5E,EAASA,EAAQ4E,EAAY,IAAM,EAIlF,OAHI4C,EAAgC,MAChCA,EAAgC,IAAMA,GAElC,kBAAoB,EAAAC,KAAM,CAAEC,WAAW,GAC3C,kBAAoB,EAAAC,SAAU,CAAEC,GAAI,GAAIC,GAAI,GACxC,kBAAoB,MAAO,KAAM3V,EAAKG,cAAcC,EAAA,4BACpD,kBAAoB,MAAO,CAAEF,MAAO,cAAmB,EAAAqG,EAAA,IAAY6O,EAAqBnH,IACxF,kBAAoB,MAAO,KAAMjO,EAAKG,cAAcC,EAAA,qBAA6B,CAC7EwV,YAAY,EAAArP,EAAA,IAAiB+O,EAA+B,CACxDO,sBAAuB,EACvBC,sBAAuB,IAE3BtP,MAAOyH,MAEf,kBAAoB,EAAAwH,SAAU,CAAEC,GAAI,GAAIC,GAAI,GACxC,kBAAoB,MAAO,KAAM3V,EAAKG,cAAcC,EAAA,+BACpD,kBAAoB,MAAO,CAAEF,MAAO,cAAmB,EAAAqG,EAAA,IAAY4O,EAAuBD,IAC1F,kBAAoB,MAAO,KAAMlV,EAAKG,cAAcC,EAAA,qBAA6B,CAC7EwV,YAAY,EAAArP,EAAA,IAAiB8O,EAAiC,CAC1DQ,sBAAuB,EACvBC,sBAAuB,IAE3BtP,MAAO0O,MAEvB,CACArV,SACI,OAAQ,kBAAoB,MAAO,CAAEsH,UAAW,gBAAiB4B,IAAKnK,KAAKiU,cAAgBjU,KAAKuU,WACpG,EAEJ,MAAM,IAAkB,SAAsB,CAAC9Q,GAASuH,kBAAiBC,aAAYvH,aACjF,MAAMC,GAAiB,SAAWD,EAAOE,SAASC,QAC5C3C,GAAU,QAAayC,GACvBxC,GAAe,QAAgBwC,GAC/BV,EAAQ,CACVC,OAAQ,CACJoB,iBAAkB,QAClBC,kBAAmB,EACnBF,WAAY,WAEhBL,UAAWC,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAeK,WAAaL,EAAeK,WAAcL,GAAkBA,EAAeT,QAAU,CAAEuB,SAAUd,EAAeT,OAAOuB,WAAevD,GAAW,CAAE,CAACA,QAAUkD,IACzP+N,QAASlO,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAewO,SAAWxO,EAAewO,SACvF9K,SAAUpD,OAAOO,OAAO,CAAC,EAAItD,GAAW,CAAE,CAACA,GAAUC,KAEnD+J,GAAoB,QAASjH,OAAOO,OAAO,CAAC,EAAGvB,IAGrD,MAAO,CACH/B,UACAqG,OAJW,kBAA6B9D,EAAOuH,EAAiBC,EAAYC,GAK5EQ,kBAJsB,6BAAwCjI,EAAOuH,EAAiBC,EAAYC,GAKlGA,oBACH,IAEC,GAAqB,CACvBH,YAAa,kBAGjB,IADmB,EAAAhJ,EAAA,KAAW,QAAW,IAAAC,SAAQ,GAAiB,GAAzB,CAA6CgS,M,4BCvRtF,MAAMmD,GAAc,cACpB,MAAMC,WAA0B,cAC5BvX,cACIC,SAASC,WAETC,KAAKqX,gBAAmBC,IACpB,MAAM,QAAEpW,EAAO,KAAEE,EAAI,OAAEmG,EAAM,MAAElE,GAAUrD,KAAKG,MAC9C,IAAIoX,GAAa,EACjB,IAAK,MAAMC,KAAaF,EAAOxL,QAAQ2L,oBACnC,GAAID,IAActW,GAAYsW,IAAc,MAA6C,IAAhCtW,EAAQiD,QAAQ,KAAoB,CACzFoT,GAAa,EACb,KACJ,CAEJ,OAAIA,EACQ,kBAAoB,EAAA9D,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAhL,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IAAiBzH,EAAKG,cAAcC,EAAA,cAC/F,kBAAoB,EAAAmS,SAAU,KAC1B,kBAAoB,EAAS,CAAEzS,QAASoW,EAAOxL,QAAQ4F,cAAenK,OAAQA,EAAQlE,MAAOA,MAG9F8T,EAEA,EAGfnX,KAAK0X,aAAgBJ,IACjB,MAAM,OAAE/P,EAAM,KAAEnG,GAASpB,KAAKG,MAC9B,OAAQ,kBAAoB,EAAAsT,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAhL,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IACnDzH,EAAKG,cAAcC,EAAA,+BACnB,kBAAoB,EAAAmW,QAAS,CAAE,aAAcvW,EAAKG,cAAcC,EAAA,mCAA2CoW,YAAY,EAAMC,YAAa,kBAAoB,aAAgB,KACtK,kBAAoB,IAAK,CAAEvW,MAAO,gBAAoBF,EAAKG,cAAcC,EAAA,iBACzE,kBAAoB,IAAK,KAAMJ,EAAKG,cAAcC,EAAA,uBAClD,kBAAoB,KAAM,MAC1B,kBAAoB,IAAK,CAAEF,MAAO,gBAAoBF,EAAKG,cAAcC,EAAA,mBACzE,kBAAoB,IAAK,KAAMJ,EAAKG,cAAcC,EAAA,yBAClD,kBAAoB,KAAM,MAC1B,kBAAoB,IAAK,CAAEF,MAAO,gBAAoBF,EAAKG,cAAcC,EAAA,gBACzE,kBAAoB,IAAK,KAAMJ,EAAKG,cAAcC,EAAA,sBAClD,kBAAoB,KAAM,MAC1B,kBAAoB,IAAK,CAAE4D,KAAMhE,EAAKG,cAAcC,EAAA,4BAAoCsW,IAAK,aAAcC,OAAQ,UAAY3W,EAAKG,cAAcC,EAAA,gBACtJ,kBAAoB,EAAA0R,OAAQ,CAAEX,QAAS,EAAAgB,cAAA,OACnC,kBAAoB,KAA4B,CAAEjS,MAAO,gBACzE,kBAAoB,EAAAqS,SAAU,KAC1B,kBAAoB,EAAW,CAAEvH,KAAMkL,EAAOU,UAAWzQ,OAAQA,KAAY,EAGzFvH,KAAKiY,iBAAoBX,IACrB,MAAM,KAAElW,GAASpB,KAAKG,MACtB,OAAQ,kBAAoB,EAAAsT,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAhL,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IAAiBzH,EAAKG,cAAcC,EAAA,cAC/F,kBAAoB,EAAAmS,SAAU,KAC1B,kBAAoB,GAAY,CAAEvH,KAAMkL,EAAOU,UAAWhN,gBAAiBsM,EAAOtM,gBAAiBC,WAAYqM,EAAOrM,cAAgB,EAGlJjL,KAAKkY,oBAAuBZ,IACxB,MAAM,KAAElW,GAASpB,KAAKG,MACtB,OAAQ,kBAAoB,EAAAsT,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAhL,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IAAiBzH,EAAKG,cAAcC,EAAA,iBAC/F,kBAAoB,EAAAmS,SAAU,KAC1B,kBAAoB,GAAY,CAAEvH,KAAMkL,EAAOU,UAAWhN,gBAAiBsM,EAAOtM,gBAAiBC,WAAYqM,EAAOrM,cAAgB,EAGlJjL,KAAKmY,eAAkBb,IACnB,MAAM,SAAEzR,EAAQ,SAAEgC,EAAQ,QAAE3G,EAAO,gBAAEqC,EAAe,MAAEN,GAAUjD,KAAKG,MACrE,IAAIoX,GAAa,EACjB,GAAID,EAAOc,cAAcX,oBACrB,IAAK,MAAMD,KAAaF,EAAOc,cAAcX,oBACzC,GAAID,IAActW,GACb+B,GAASA,EAAMoE,UAAYpE,EAAMoE,SAAS,OAC1CmQ,IAAc,KAAatW,IAA2C,IAAhCA,EAAQiD,QAAQ,KAAoB,CAC3EoT,GAAa,EACb,KACJ,CAGR,IAAKA,GAAcD,EAAOc,cAAcC,qBACpC,IAAK,MAAMC,KAAchB,EAAOc,cAAcC,qBAC1C,GAAI9U,GAAmB+U,IAAe,KAAqB,CACvDf,GAAa,EACb,KACJ,CAGR,OAAIA,EACQ,kBAAoB,EAAa,CAAE1R,SAAUA,EAAUgC,SAAUA,EAAUtE,gBAAiBA,EAAiBmO,cAAe4F,EAAOc,cAAc1G,cAAe1G,gBAAiBsM,EAAOtM,gBAAiBC,WAAYqM,EAAOrM,aAE/NqM,EAAOc,cAAcG,eACnBpB,GAEJ,IAAI,EAGfnX,KAAKwY,oBAAuBlB,IACxB,MAAM,KAAElW,GAASpB,KAAKG,MACtB,OAAQ,kBAAoB,EAAAsT,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAhL,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IAAiBzH,EAAKG,cAAcC,EAAA,iBAC/F,kBAAoB,EAAAmS,SAAU,KAC1B,kBAAoB,GAAY,CAAEvH,KAAMkL,EAAOU,UAAWhN,gBAAiBsM,EAAOtM,gBAAiBC,WAAYqM,EAAOrM,cAAgB,EAGlJjL,KAAKyY,kBAAoB,KACrB,MAAM,cAAEC,EAAa,QAAEC,GAAY3Y,KAAKG,MAClCyY,EAAiB,GACvBD,EAAQ9W,KAAIgX,IACR,MAAMvB,EAASoB,EAAcG,GACvBC,EAAiB9Y,KAAK+Y,aAAazB,GAClB,OAAnBwB,GACAF,EAAejY,KAAKmY,EACxB,IAEJ,MAAME,EAAOjD,KAAKkD,MAAML,EAAexW,OAAS,GAAMwW,EAAexW,OAAS,EACxE8W,EAAoB,GACpBC,EAAqB,GAC3B,IAAK,IAAI9K,EAAI,EAAGA,EAAI2K,EAAM3K,IAClBuK,EAAevK,KAAO8I,IACtB+B,EAAkBvY,KAAKiY,EAAevK,IAEtCA,EAAI2K,EAAOJ,EAAexW,QACtBwW,EAAevK,EAAI2K,KAAU7B,IAC7BgC,EAAmBxY,KAAKiY,EAAevK,EAAI2K,IAIvD,MAAO,CAAEE,oBAAmBC,qBAAoB,CAExD,CAEAJ,aAAazB,GACT,OAAQA,EAAOjE,MACX,KAAK,aACD,OAAOrT,KAAKqX,gBAAgBC,GAChC,KAAK,UACD,OAAOtX,KAAK0X,aAAaJ,GAC7B,KAAK,cACD,OAAOtX,KAAKiY,iBAAiBX,GACjC,KAAK,iBACD,OAAOtX,KAAKkY,oBAAoBZ,GACpC,KAAK,mBACD,OAAOtX,KAAKmY,eAAeb,GAC/B,KAAK,iBACD,OAAOtX,KAAKwY,oBAAoBlB,GACpC,QACI,OAAO,KAEnB,CACArW,SAEI,MAAM,kBAAEiY,EAAiB,mBAAEC,GAAuBnZ,KAAKyY,oBACvD,OAAQ,kBAAoB,EAAA9B,KAAM,CAAEC,WAAW,GAC3C,kBAAoB,EAAAC,SAAU,CAAEE,GAAI,GAAIqC,GAAI,GACxC,kBAAoB,EAAAzC,KAAM,CAAEC,WAAW,GAAQsC,EAAkBrX,KAAI,CAACyV,EAAQ7N,IACnE,kBAAoB,EAAAoN,SAAU,CAAEnW,IAAK,UAAU+I,KAAW6N,OAEzE,kBAAoB,EAAAT,SAAU,CAAEE,GAAI,GAAIqC,GAAI,GACxC,kBAAoB,EAAAzC,KAAM,CAAEC,WAAW,GAAQuC,EAAmBtX,KAAI,CAACyV,EAAQ7N,IACpE,kBAAoB,EAAAoN,SAAU,CAAEnW,IAAK,UAAU+I,KAAW6N,OAEjF,EAEJ,MACA,IADyB,EAAAvV,EAAA,IAAWqV,G,8YCtK7B,MAAM9J,EAAc,CACvB+L,oBAAqB,CACjBC,KAAM,QAGVC,kBAAmB,CACfC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJC,8BAA+B,CAC3BP,KAAM,OACNQ,gBAAiB,OAErBC,gBAAiB,CACbT,KAAM,QAEVtJ,YAAa,EACbgK,qBAAsB,CAClBV,KAAM,QAGVW,mBAAoB,CAChBC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJC,+BAAgC,CAC5BjB,KAAM,OACNQ,gBAAiB,OAErBU,iBAAkB,CACdlB,KAAM,QAEVmB,MAAO,CACHC,UAAW,CACPzJ,QAAS,IAEb0J,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,QAEZE,WAAY,CACRrU,SAAU,IAGlBsU,MAAO,CACHL,UAAW,CACPzJ,QAAS,IAEb0J,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,UAIPnc,EAAS,CAClBuc,MAAO,CACHrb,UAAWJ,EAAA,UAEf8D,MAAO,CACH/D,WAAY,IAAMV,EAAA,WCpE1B,MAAMqc,UAAgC,cAClCpb,cACIC,SAASC,WACTC,KAAKiU,aAAe,gBACpBjU,KAAKkU,SAAWC,EAAA,EAChBnU,KAAKyD,MAAQ,CACTyX,aAAc,IAAIC,IAClB7X,MAAO,GAEXtD,KAAKob,UAAY,KACb,MAAM,gBAAErB,EAAe,iBAAES,GAAqBxa,KAAKG,MAC7Ckb,EAAU7Z,EAAA,uBACV8Z,EAAiB9Z,EAAA,yBAEjB+Z,EAAS,CACX,CACIC,UAAW,eACXlb,KAAMka,EACNiB,WAAY,CACRrP,MAAM,QAAmBoO,EAAkBa,GAAS,GAAM,EAAM,EAAG7Z,EAAA,8BACnEka,OAAQ,CACJpC,KAAMhM,EAAY2M,mBAAmB,GACrC5G,KAAM,SAEVwB,SAAS,QAAoB2F,EAAkBc,GAAgB,GAAO,EAAO,IAEjFha,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG8I,EAAYkN,kBAAmB,CAAEI,OAAQtN,EAAY2M,mBAAmB,OAGtH,CACIuB,UAAW,cACXlb,KAAMyZ,EACN0B,WAAY,CACRrP,MAAM,QAAmB2N,EAAiBsB,GAAS,GAAM,EAAO,EAAG7Z,EAAA,8BACnEka,OAAQ,CACJpC,KAAMhM,EAAYiM,kBAAkB,GACpClG,KAAM,SAEVwB,SAAS,QAAoBkF,EAAiBuB,GAAgB,GAAO,IAEzEha,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG8I,EAAYyM,iBAAkB,CAAEa,OAAQtN,EAAYiM,kBAAkB,QAIlHoC,EAAyB3b,KAAK4b,4BACpC5b,KAAK+E,SAAS,CAAE4W,yBAAwBJ,UAAS,EAErDvb,KAAKuU,SAAW,CAACgH,EAAQ9R,KACrB,MAAM,aAAEyR,GAAiBlb,KAAKyD,MAC9B,OAAQ,kBAAoBoY,EAAA,EAAW,CAAEvb,KAAO4a,EAAaY,IAAIrS,GAAuB,CAAC,CAAEiH,EAAG,OAApB6K,EAAOjb,KAAsByb,cAAe,YAAarb,IAAK6a,EAAOC,UAAWpP,KAAMmP,EAAOC,UAAWla,MAAOia,EAAOja,OAAS,EAG7MtB,KAAK4b,0BAA4B,KAC7B,MAAM,UAAEI,EAAS,cAAEjK,GAAkB/R,KAAKG,MAEpC8b,GAAyB,OAAgB,UAAW,UAC1D,OAAQ,kBAAoBA,EAAwB,CAAEC,gBAAiB,IAAKvL,OAAQ,EAAGC,YAAY,QAAgBA,EAAOoL,EAAWjK,GAAgBoK,qBAAqB,EAAMC,iBAAkB,IAAKC,eAAgB,CAC/MnL,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,IACJ,EAEbrR,KAAKsc,UAAY,KACb,MAAM,kBAAErH,EAAiB,KAAE7I,EAAO,IAAOpM,KAAKG,OACxC,aAAE+a,EAAY,OAAEK,EAAM,MAAEjY,GAAUtD,KAAKyD,MACvCuM,EAAciF,IAAwC3R,EAAQ,IAAMgK,EAAY0C,YAAc,GACpG,OAAQ,kBAAoBF,EAAA,GAAa,CAAExP,MAAM,QAAcib,EAAQL,GAAejP,OAAQ,GAAI8D,OAAQ,GAAIC,YAAaA,EAAa5D,KAAM,GAAGA,YAAiB,EAGtKpM,KAAKuc,kBAAqB9S,IACtB,MAAMyR,GAAe,QAAiBlb,KAAKyD,MAAM8X,OAAQvb,KAAKyD,MAAMyX,aAAczR,GAClFzJ,KAAK+E,SAAS,CAAEmW,gBAAe,EAEnClb,KAAKoU,aAAe,KAChB,MAAM,MAAE9Q,GAAUtD,KAAKyD,OACjB,YAAE4Q,EAAc,GAAMrU,KAAKiU,aAAaK,SAAW,CAAC,EACtDD,IAAgB/Q,GAChBtD,KAAK+E,SAAS,CAAEzB,MAAO+Q,GAC3B,CAER,CACA7R,oBACIxC,KAAKob,YACLpb,KAAKkU,UAAW,QAAkBlU,KAAKiU,aAAaK,QAAStU,KAAKoU,aACtE,CACAxR,mBAAmBC,GACXA,EAAUkX,kBAAoB/Z,KAAKG,MAAM4Z,iBACzClX,EAAUgX,gCAAkC7Z,KAAKG,MAAM0Z,+BACvDhX,EAAU2X,mBAAqBxa,KAAKG,MAAMqa,kBAC1C3X,EAAU0X,iCAAmCva,KAAKG,MAAMoa,gCACxDva,KAAKob,WAEb,CACAvF,uBACQ7V,KAAKkU,UACLlU,KAAKkU,UAEb,CACAsI,aACI,MAAM,8BAAE3C,EAA6B,+BAAEU,GAAmCva,KAAKG,MACzEsc,EAAqB5C,GACrB,EAAA6C,EAAA,IAAQ,QAAa7C,GAA+B,GAAM,GAAM,IAChE,EACA8C,EAAsBpC,GACtB,EAAAmC,EAAA,IAAQ,QAAanC,GAAgC,GAAM,GAAM,IACjE,EACN,OAAOkC,EAAqB,GAAKE,EAAsB,EAAI5G,KAAK6G,IAAIH,EAAoBE,GAAuB,EACnH,CAEAE,YACI,MAAM,KAAEzQ,EAAO,IAAOpM,KAAKG,OACrB,aAAE+a,EAAY,OAAEK,GAAWvb,KAAKyD,MAChCrD,GAAS,OAA2B,CACtC0c,YAAY,QAAcvB,GAC1BwB,SAAUtT,IAAS,QAAeyR,EAAczR,GAChDuT,WAAY,GAAG5Q,WACf6Q,cAAe9c,GAASH,KAAKuc,kBAAkBpc,EAAMsJ,SAEzD,OAAOrJ,CACX,CACAa,SACI,MAAM,sBAAEic,EAAqB,OAAEjR,EAAM,gBAAEkR,EAAkBlR,EAAM,KAAE7K,EAAI,KAAEgL,EAAI,QAAE6E,EAAU,CACnFC,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,GACR,MAAEhO,EAAK,WAAE+Z,EAAU,WAAEC,GAAgBrd,KAAKG,OACrC,uBAAEwb,EAAsB,aAAET,EAAY,OAAEK,EAAM,MAAEjY,GAAUtD,KAAKyD,MAC/D6Z,GAAS,IAAAC,IAAUhC,EAAQL,GAC3BsC,EAAUxd,KAAKwc,aACfiB,EAAU1H,KAAKkD,MAAMuE,EAAU,GAC/BE,EAA0BR,GAC1B5Z,EAAQ,IACJ6Z,EAAkB,GAEtBA,EAEAQ,EAAYhC,EACZ,iBAAmBA,EAAwB,CACzCiC,UAAU,QAAgBrC,EAAQL,GAClCjL,eAAiB,kBAAoB4N,EAAA,EAAoB,CAAE/M,YAAY,QAAcyK,EAAQL,GAAc,GAAO7X,MAAOuN,GAASxP,EAAKG,cAAcC,EAAA,qBAA6B,CAAEsc,IAAKlN,EAAMH,aAEjMrM,EACN,OAAQ,kBAAoB,MAAO,CAAEmE,UAAW,gBAAiB4B,IAAKnK,KAAKiU,cACvE,kBAAoB,EAAAvL,MAAO,CAAEC,aAAc,KAAMrH,MAAO7C,EAAO4E,MAAOuF,KAAM,EAAAC,WAAA,IAAiBxF,GAC7F,kBAAoB,MAAO,CAAE/B,MAAO2C,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG/F,EAAOuc,OAAQ,CAAE/O,OAAQyR,KACzF,kBAAoB,MAAO,CAAEpc,MAAO,CAAE2K,SAAQ3I,SAAS,cAAe,4BAClE,kBAAoBya,EAAA,EAAO,CAAEC,mBAAoBL,EAAWL,OAAQA,EAAQW,OAAQje,KAAK6c,YAAa5Q,OAAQA,EAAQ4E,gBAAiB7Q,KAAKsc,YAAaxL,YAAY,QAAcyK,EAAQL,GAAelK,eAAgB,SAAU5E,KAAMA,EAAM6E,QAASA,EAASiN,MAAO,IAAY5a,MAAOA,GACxRiY,GACIA,EAAO1Z,KAAI,CAACgM,EAAGpE,IACJzJ,KAAKuU,SAAS1G,EAAGpE,KAEhC,kBAAoB0U,EAAAC,EAAW,CAAEpM,MAAOoL,EAAY9b,MAAOgM,EAAYyN,MAAOsD,WAAY,CAAC,EAAGZ,EAASD,KACvG,kBAAoBW,EAAAC,EAAW,CAAEE,eAAe,EAAMtM,MAAOqL,EAAY/b,MAAOgM,EAAYmN,WAChH,EAEJ,MACA,GAD4B,EAAA1Y,EAAA,IAAWkZ,G,0FCxKhC,MAIM,EAAS,CAClBsD,eAAgB,CACZjf,WAAYV,EAAA,UAEhB6O,cAAe,CACXxB,OAAQ,QACR7M,aAAc0G,EAAA,SACdnG,UAAWD,EAAA,UAEf8e,UAAW,CACPpf,aAAcG,EAAA,SACdI,UAAWJ,EAAA,UAEfwU,eAAgB,CACZpU,UAAWmG,EAAA,UAEf2Y,WAAY,CACRrf,aAAcG,EAAA,SACdI,UAAWJ,EAAA,UAEfmf,WAAY,CACR/e,UAAWJ,EAAA,WCdnB,MAAMof,UAAoC,cACtC9e,cACIC,SAASC,WACTC,KAAK0O,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAErN,MAAO,gBAAsBgC,MAAOsL,EAAA,OACpE,kBAAoB,EAAAD,SAAU,CAAErN,MAAO,iBAAuBgC,MAAOsL,EAAA,OAEjF,CACApM,oBACI,MAAM,YAAEuI,EAAW,mBAAE6T,EAAkB,oBAAEC,EAAmB,gBAAE7T,EAAe,WAAEC,GAAejL,KAAKG,MACnG4K,EAAYC,EAAiBC,EAAY2T,GACzC7T,EAAYC,EAAiBC,EAAY4T,EAC7C,CACAjc,mBAAmBC,GACf,MAAM,YAAEkI,EAAW,SAAElF,EAAQ,SAAEgC,EAAQ,mBAAE+W,EAAkB,oBAAEC,EAAmB,gBAAE7T,EAAe,WAAEC,GAAejL,KAAKG,MACnH0C,EAAU+b,qBAAuBA,GACjC/b,EAAUgD,WAAaA,GACvBhD,EAAUgF,WAAaA,GACvBkD,EAAYC,EAAiBC,EAAY2T,GAEzC/b,EAAUgc,sBAAwBA,GAClChc,EAAUgD,WAAaA,GACvBhD,EAAUgF,WAAaA,GACvBkD,EAAYC,EAAiBC,EAAY4T,EAEjD,CACA5d,SACI,MAAM,UAAE+W,EAAS,cAAE8G,EAAa,yBAAEC,EAAwB,eAAEC,EAAc,0BAAEC,EAAyB,KAAE7d,GAASpB,KAAKG,MAE/G+e,GAAc,QAAgBJ,EAAe,gBAAsB,OAAQ,QAC3EjF,GAAgC,QAAgBiF,EAAe,gBAAsB,OAAQ,kBAE7FK,GAAe,QAAgBH,EAAgB,gBAAsB,OAAQ,QAC7EzE,GAAiC,QAAgByE,EAAgB,gBAAsB,OAAQ,kBAC/FI,EAAYN,GAAiBA,EAAcrX,MAAQqX,EAAcrX,KAAKC,OAASoX,EAAcrX,KAAKC,MAAMpC,KACxGwZ,EAAcrX,KAAKC,MAAMpC,KAAKoC,MAAME,MACpC,MACAyX,EAAOje,EAAKG,cAAcC,EAAA,gBAAwB,CAAEoG,MAAOwX,IACjE,OAAQ,kBAAoB,MAAO,CAAE9d,MAAO,kBACxC,kBAAoB,MAAO,CAAEA,MAAO,aAAoByd,IAA6B,iBACjFE,IAA8B,gBAA0Bjf,KAAK0O,cAAkB,kBAAoB,EAAqB,CAAEwO,uBAAuB,EAAMC,gBAAiB,IAAuCpD,gBAAiBmF,EAAarF,8BAA+BA,EAA+B9H,cAAe,CAAC,EAAGiK,UAAWrU,EAAA,GAAasE,ODnDrV,ICmDsXG,KAAM4L,EAAWwC,iBAAkB2E,EAAc5E,+BAAgCA,EAAgC6C,WAAYhc,EAAKG,cAAcC,EAAA,kCAA0C6b,WAAYjc,EAAKG,cAAcC,EAAA,2BAAmC,CAC/mBoG,MAAOyX,OAEvB,EAEJ,MAAM7b,GAAkB,SAAsB,CAACC,GAASoC,WAAUgC,WAAUmD,kBAAiBC,aAAYvH,aACrG,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5C3C,GAAU,QAAayC,GACvBxC,GAAe,QAAgBwC,GAC/B2b,EAAY,CACdtb,UAAWC,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAeK,WAAaL,EAAeK,WAAcL,GAAkBA,EAAeT,QAAU,CAAEuB,SAAUd,EAAeT,OAAOuB,WAAevD,GAAW,CAAE,CAACA,QAAUkD,IACzP+N,QAASlO,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAewO,SAAWxO,EAAewO,SACvF9K,SAAUpD,OAAOO,OAAO,CAAC,EAAItD,GAAW,CAAE,CAACA,GAAUC,KAEnDoe,EAAetb,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG8a,GAAY,CAAEpc,OAAQ,CACnEmB,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBqa,GAAqB,QAAS3a,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG+a,GAAe,CAAEnN,UAAWvM,EAAUgC,cACpG2X,EAAgBvb,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG8a,GAAY,CAAEpc,OAAQ,CACpEmB,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBsa,GAAsB,QAAS5a,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAGgb,GAAgB,CAAEpN,UAAWvM,EAAUgC,cAO5G,MAAO,CACH0X,eACAX,qBACAE,cARkB,kBAA6Brb,EAAOuH,EAAiBC,EAAY2T,GASnFG,yBAR6B,6BAAwCtb,EAAOuH,EAAiBC,EAAY2T,GASzGY,gBACAX,sBACAG,eATmB,kBAA6Bvb,EAAOuH,EAAiBC,EAAY4T,GAUpFI,0BAT8B,6BAAwCxb,EAAOuH,EAAiBC,EAAY4T,GAU7G,IAECla,EAAqB,CACvBoG,YAAa,kBAEX0U,GAA0B,EAAA1d,EAAA,KAAW,QAAW,IAAAC,SAAQwB,EAAiBmB,EAAzB,CAA6Cga,KC1FtF,EAAc,CAEvBpF,kBAAmB,CACfC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJ8F,iBAAkB,CACdpG,KAAM,QAEVtJ,YAAa,EAEbiK,mBAAoB,CAChBC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJqF,kBAAmB,CACfrG,KAAM,QAEVmB,MAAO,CACHC,UAAW,CACPzJ,QAAS,IAEb0J,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,QAEZE,WAAY,CACRrU,SAAU,IAGlBsU,MAAO,CACHL,UAAW,CACPzJ,QAAS,IAEb0J,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,UAIP,GAAS,CAClBI,MAAO,CACHrb,UAAWJ,EAAA,UAEf8D,MAAO,CACH/D,WAAY,IAAMV,EAAA,WCvD1B,MAAMghB,WAAiC,cACnC/f,cACIC,SAASC,WACTC,KAAKiU,aAAe,gBACpBjU,KAAKkU,SAAWC,EAAA,EAChBnU,KAAKyD,MAAQ,CACTyX,aAAc,IAAIC,IAClB7X,MAAO,GAEXtD,KAAKob,UAAY,KACb,MAAM,YAAE8D,EAAW,aAAEC,EAAY,qBAAEU,GAAuB,GAAU7f,KAAKG,MACnEO,EAAMmf,EAAuBre,EAAA,wBAAiCA,EAAA,uBAC9Dse,EAAaD,EAAuBre,EAAA,0BAAmCA,EAAA,yBAEvE+Z,EAAS,CACX,CACIC,UAAW,eACXlb,KAAM6e,EACN1D,WAAY,CACRrP,MAAM,QAAmB+S,EAAcze,GAAK,GAAM,EAAM,EAAGc,EAAA,+BAC3Dka,OAAQ,CACJpC,KAAM,wBACNjG,KAAM,SAEVwB,SAAS,QAAoBsK,EAAcW,GAAY,GAAO,EAAO,IAEzExe,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,qBAAgC,CAAEoW,OAAQ,4BAGxF,CACIY,UAAW,cACXlb,KAAM4e,EACNzD,WAAY,CACRrP,MAAM,QAAmB8S,EAAaxe,GAAK,GAAM,EAAO,EAAGc,EAAA,+BAC3Dka,OAAQ,CACJpC,KAAM,uBACNjG,KAAM,SAEVwB,SAAS,QAAoBqK,EAAaY,GAAY,GAAO,IAEjExe,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,oBAA+B,CAAEoW,OAAQ,4BAIrFe,EAAyB3b,KAAK4b,4BACpC5b,KAAK+E,SAAS,CAAE4W,yBAAwBJ,UAAS,EAErDvb,KAAKuU,SAAW,CAACgH,EAAQ9R,KACrB,MAAM,aAAEyR,GAAiBlb,KAAKyD,MAC9B,OAAQ,kBAAoBoY,EAAA,EAAW,CAAEvb,KAAO4a,EAAaY,IAAIrS,GAAuB,CAAC,CAAEiH,EAAG,OAApB6K,EAAOjb,KAAsByb,cAAe,YAAarb,IAAK6a,EAAOC,UAAWpP,KAAMmP,EAAOC,UAAWla,MAAOia,EAAOja,OAAS,EAG7MtB,KAAK4b,0BAA4B,KAC7B,MAAM,UAAEI,EAAS,cAAEjK,GAAkB/R,KAAKG,MAEpC8b,GAAyB,OAAgB,UAAW,UAC1D,OAAQ,kBAAoBA,EAAwB,CAAEC,gBAAiB,IAAKvL,OAAQ,EAAGC,YAAY,QAAgBA,EAAOoL,EAAWjK,GAAgBoK,qBAAqB,EAAMC,iBAAkB,IAAKC,eAAgB,CAC/MnL,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,IACJ,EAEbrR,KAAKsc,UAAY,KACb,MAAM,kBAAErH,EAAiB,KAAE7I,EAAO,IAAOpM,KAAKG,OACxC,aAAE+a,EAAY,OAAEK,GAAWvb,KAAKyD,MACtC,OAAQ,kBAAoBqM,EAAA,GAAa,CAAExP,MAAM,QAAcib,EAAQL,GAAejP,OAAQ,GAAI8D,OAAQ,GAAIC,YAAaiF,EAAmB7I,KAAM,GAAGA,YAAiB,EAG5KpM,KAAKuc,kBAAqB9S,IACtB,MAAMyR,GAAe,QAAiBlb,KAAKyD,MAAM8X,OAAQvb,KAAKyD,MAAMyX,aAAczR,GAClFzJ,KAAK+E,SAAS,CAAEmW,gBAAe,EAEnClb,KAAKoU,aAAe,KAChB,MAAM,MAAE9Q,GAAUtD,KAAKyD,OACjB,YAAE4Q,EAAc,GAAMrU,KAAKiU,aAAaK,SAAW,CAAC,EACtDD,IAAgB/Q,GAChBtD,KAAK+E,SAAS,CAAEzB,MAAO+Q,GAC3B,CAER,CACA7R,oBACIxC,KAAKob,YACLpb,KAAKkU,UAAW,QAAkBlU,KAAKiU,aAAaK,QAAStU,KAAKoU,aACtE,CACAxR,mBAAmBC,GACXA,EAAUqc,cAAgBlf,KAAKG,MAAM+e,aAAerc,EAAUsc,eAAiBnf,KAAKG,MAAMgf,cAC1Fnf,KAAKob,WAEb,CACAvF,uBACQ7V,KAAKkU,UACLlU,KAAKkU,UAEb,CACAsI,aACI,MAAM,YAAE0C,EAAW,aAAEC,GAAiBnf,KAAKG,MACrC4f,EAAeZ,GAAe,EAAAzC,EAAA,IAAQ,QAAayC,GAAc,GAAM,GAAM,IAAM,EACnFa,EAAcd,GAAc,EAAAxC,EAAA,IAAQ,QAAawC,GAAa,GAAM,GAAM,IAAM,EACtF,OAAOc,EAAc,GAAKD,EAAe,EAAIhK,KAAK6G,IAAIoD,EAAaD,GAAgB,EACvF,CAEAlD,YACI,MAAM,KAAEzQ,EAAO,IAAOpM,KAAKG,OACrB,aAAE+a,EAAY,OAAEK,GAAWvb,KAAKyD,MAChCrD,GAAS,OAA2B,CACtC0c,YAAY,QAAcvB,GAC1BwB,SAAUtT,IAAS,QAAeyR,EAAczR,GAChDuT,WAAY,GAAG5Q,WACf6Q,cAAe9c,GAASH,KAAKuc,kBAAkBpc,EAAMsJ,SAEzD,OAAOrJ,CACX,CACAa,SACI,MAAM,OAAEgL,EAAM,gBAAEkR,EAAkBlR,EAAM,KAAE7K,EAAI,KAAEgL,EAAI,QAAE6E,EAAU,CAC5DC,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,GACR,MAAEhO,EAAK,WAAE+Z,EAAU,WAAEC,GAAgBrd,KAAKG,OACrC,uBAAEwb,EAAsB,aAAET,EAAY,OAAEK,EAAM,MAAEjY,GAAUtD,KAAKyD,MAC/D6Z,GAAS,IAAAC,IAAUhC,EAAQL,GAC3BsC,EAAUxd,KAAKwc,aACfiB,EAAU1H,KAAKkD,MAAMuE,EAAU,GAE/BG,EAAYhC,EACZ,iBAAmBA,EAAwB,CACzCiC,UAAU,QAAgBrC,EAAQL,GAClCjL,eAAiB,kBAAoB4N,EAAA,EAAoB,CAAE/M,YAAY,QAAcyK,EAAQL,GAAc,GAAO7X,MAAOuN,GAASxP,EAAKG,cAAcC,EAAA,qBAA6B,CAAEsc,IAAKlN,EAAMH,aAEjMrM,EACN,OAAQ,kBAAoB,MAAO,CAAEmE,UAAW,gBAAiB4B,IAAKnK,KAAKiU,cACvE,kBAAoB,EAAAvL,MAAO,CAAEC,aAAc,KAAMrH,MAAO,SAAcsH,KAAM,EAAAC,WAAA,IAAiBxF,GAC7F,kBAAoB,MAAO,CAAE/B,MAAO2C,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,UAAe,CAAEyH,OAAQkR,KACzF,kBAAoB,MAAO,CAAE7b,MAAO,CAAE2K,SAAQ3I,SAAS,cAAe,4BAClE,kBAAoBya,EAAA,EAAO,CAAEC,mBAAoBL,EAAWL,OAAQA,EAAQW,OAAQje,KAAK6c,YAAa5Q,OAAQA,EAAQ4E,gBAAiB7Q,KAAKsc,YAAaxL,YAAY,QAAcyK,EAAQL,GAAelK,eAAgB,SAAU5E,KAAMA,EAAM6E,QAASA,EAASiN,MAAO,IAAY5a,MAAOA,GACxRiY,GACIA,EAAO1Z,KAAI,CAACgM,EAAGpE,IACJzJ,KAAKuU,SAAS1G,EAAGpE,KAEhC,kBAAoB0U,EAAAC,EAAW,CAAEpM,MAAOoL,EAAY9b,MAAO,QAAmB+c,WAAY,CAAC,EAAGZ,EAASD,KACvG,kBAAoBW,EAAAC,EAAW,CAAEE,eAAe,EAAMtM,MAAOqL,EAAY/b,MAAO,aACpG,EAEJ,MACA,IAD6B,EAAAS,EAAA,IAAW6d,I,gBC7IxC,MAAMK,WAAqC,cACvCpgB,cACIC,SAASC,WACTC,KAAK0O,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAErN,MAAO,gBAAsBgC,MAAOsL,EAAA,OACpE,kBAAoB,EAAAD,SAAU,CAAErN,MAAO,iBAAuBgC,MAAOsL,EAAA,OAEjF,CACApM,oBACI,MAAM,YAAEuI,EAAW,mBAAE6T,EAAkB,oBAAEC,EAAmB,gBAAE7T,EAAe,WAAEC,GAAejL,KAAKG,MACnG4K,EAAYC,EAAiBC,EAAY2T,GACzC7T,EAAYC,EAAiBC,EAAY4T,EAC7C,CACAjc,mBAAmBC,GACf,MAAM,YAAEkI,EAAW,SAAElF,EAAQ,SAAEgC,EAAQ,mBAAE+W,EAAkB,oBAAEC,EAAmB,gBAAE7T,EAAe,WAAEC,GAAejL,KAAKG,MACnH0C,EAAU+b,qBAAuBA,GACjC/b,EAAUgD,WAAaA,GACvBhD,EAAUgF,WAAaA,GACvBkD,EAAYC,EAAiBC,EAAY2T,GAEzC/b,EAAUgc,sBAAwBA,GAClChc,EAAUgD,WAAaA,GACvBhD,EAAUgF,WAAaA,GACvBkD,EAAYC,EAAiBC,EAAY4T,EAEjD,CACA5d,SACI,MAAM,UAAE+W,EAAS,cAAE8G,EAAa,yBAAEC,EAAwB,eAAEC,EAAc,0BAAEC,EAAyB,WAAEhU,EAAU,KAAE7J,GAAUpB,KAAKG,MAC5H+f,EAAcjV,IAAe,SAE7BiU,GAAc,QAAgBJ,EAAeoB,EAAc,gBAAuB,aAAmB,OAAQA,EAAc,OAAS,SACpIf,GAAe,QAAgBH,EAAgBkB,EAAc,gBAAuB,aAAmB,OAAQA,EAAc,OAAS,SACtId,EAAYN,GAAiBA,EAAcrX,MAAQqX,EAAcrX,KAAKC,OAASoX,EAAcrX,KAAKC,MAAMpC,KACxGwZ,EAAcrX,KAAKC,MAAMpC,KAAKoC,MAAME,MACpC,MACAyH,EAAayP,GAAiBA,EAAcrX,MAAQqX,EAAcrX,KAAKC,OAASoX,EAAcrX,KAAKC,MAAMwH,MACzG4P,EAAcrX,KAAKC,MAAMwH,MAAMtH,WAC/BxD,EACN,IAAIiZ,EACJ,GAAI6C,EAAa,CACb,MAAMtY,EAAQxG,EAAKG,cAAcC,EAAA,gBAAwB,CAAEoG,MAAOwX,IAClE/B,EAAajc,EAAKG,cAAcC,EAAA,2BAAmC,CAAEoG,SACzE,MACK,GAAIyH,GAAc8Q,OAAOC,MAAMD,OAAOrB,EAAcrX,KAAKC,MAAMwH,MAAMtH,QACtEyV,EAAajc,EAAKG,cAAcC,EAAA,QAAgB,CAAEoG,OAAO,QAAeyH,SAEvE,CACD,MAAMzH,EAAQxG,EAAKG,cAAcC,EAAA,4BAAoC,CAAEC,MAAOwJ,IAC9EoS,EAAajc,EAAKG,cAAcC,EAAA,QAAgB,CAAEoG,OAAO,QAAeA,IAC5E,CACA,OAAQ,kBAAoB,MAAO,CAAEtG,MAAO,kBACxC,kBAAoB,MAAO,CAAEA,MAAO,cAAqByd,IAA6B,iBAClFE,IAA8B,gBAA0Bjf,KAAK0O,cAAkB,kBAAoB,GAAsB,CAAEyO,gBAAiB,IAAuC+B,YAAaA,EAAanN,cAAe,CAAC,EAAGiK,UAAWrU,EAAA,GAAasE,OJjEvP,IIiEwRG,KAAM4L,EAAWmH,aAAcA,EAAcvX,MAAOsY,EAAcd,EAAY/P,EAAY+N,WAAYhc,EAAKG,cAAcC,EAAA,kCAA0C6b,WAAYA,KACpd,EAEJ,MAAM,IAAkB,SAAsB,CAAC5Z,GAASoC,WAAUgC,WAAUmD,kBAAiBC,aAAYvH,aACrG,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,GAAkB,QAAmBH,GACrCzC,EAAU4C,EAAkB,OAAe,QAAaH,GACxDxC,EAAe2C,IAAoC,QAAgBH,GACnE2b,EAAY,CACdtb,UAAWC,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAeK,WAAaL,EAAeK,WAAcL,GAC/IA,EAAeT,QACfS,EAAeT,OAAOC,SAAW,CAAE,CAAC,GAAG,gBAA4BQ,EAAeT,OAAOC,UAAcQ,GACvGA,EAAeT,QACfS,EAAeT,OAAOuB,UAAY,CAAEA,SAAUd,EAAeT,OAAOuB,WAAevD,GAAW,CAAE,CAACA,QAAUkD,IAC/G+N,QAASlO,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAewO,SAAWxO,EAAewO,SACvF9K,SAAUpD,OAAOO,OAAO,CAAC,EAAItD,GAAW,CAAE,CAACA,GAAUC,KAEnDoe,EAAetb,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG8a,GAAY,CAAEpc,OAAQ,CACnEmB,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBqa,GAAqB,QAAS3a,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG+a,GAAe,CAAEnN,UAAWvM,EAAUgC,cACpG2X,EAAgBvb,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG8a,GAAY,CAAEpc,OAAQ,CACpEmB,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBsa,GAAsB,QAAS5a,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAGgb,GAAgB,CAAEpN,UAAWvM,EAAUgC,cAO5G,MAAO,CACH0X,eACAX,qBACAE,cARkB,kBAA6Brb,EAAOuH,EAAiBC,EAAY2T,GASnFG,yBAR6B,6BAAwCtb,EAAOuH,EAAiBC,EAAY2T,GASzGY,gBACAX,sBACAG,eATmB,kBAA6Bvb,EAAOuH,EAAiBC,EAAY4T,GAUpFI,0BAT8B,6BAAwCxb,EAAOuH,EAAiBC,EAAY4T,GAU7G,IAEC,GAAqB,CACvB9T,YAAa,kBAEXsV,IAA2B,EAAAte,EAAA,KAAW,QAAW,IAAAC,SAAQ,GAAiB,GAAzB,CAA6Cie,MC3GvF,GAAc,CACvB5G,oBAAqB,CACjBC,KAAM,QAGVC,kBAAmB,CACfC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJ0G,iBAAkB,CACdhH,KAAM,QAEViH,mBAAoB,CAChBjH,KAAM,OACNQ,gBAAiB,OAErB0G,iBAAkB,CACdlH,KAAM,QAEVtJ,YAAa,EACbgK,qBAAsB,CAClBV,KAAM,QAGVW,mBAAoB,CAChBC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJmG,kBAAmB,CACfnH,KAAM,QAEVoH,oBAAqB,CACjBpH,KAAM,OACNQ,gBAAiB,OAErB6G,kBAAmB,CACfrH,KAAM,QAEVmB,MAAO,CACHC,UAAW,CACPzJ,QAAS,IAEb0J,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,QAEZE,WAAY,CACRrU,SAAU,IAGlBsU,MAAO,CACHL,UAAW,CACPzJ,QAAS,IAEb0J,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,UAIP,GAAS,CAClBI,MAAO,CACHrb,UAAWJ,EAAA,UAEf8D,MAAO,CACH/D,WAAY,IAAMV,EAAA,WC1E1B,MAAMgiB,WAAiC,cACnC/gB,cACIC,SAASC,WACTC,KAAKiU,aAAe,gBACpBjU,KAAKkU,SAAWC,EAAA,EAChBnU,KAAKyD,MAAQ,CACTyX,aAAc,IAAIC,IAClB7X,MAAO,GAEXtD,KAAKob,UAAY,KACb,MAAM,iBAAEkF,EAAgB,mBAAEC,EAAkB,iBAAEC,EAAgB,kBAAEC,EAAiB,oBAAEC,EAAmB,kBAAEC,GAAuB3gB,KAAKG,MAC9H0gB,EAAWrf,EAAA,wBACXsf,EAAkBtf,EAAA,0BAClBuf,EAAavf,EAAA,2BACbwf,EAAoBxf,EAAA,6BACpByf,EAAWzf,EAAA,wBACX0f,EAAkB1f,EAAA,0BAElB+Z,EAAS,CACX,CACIC,UAAW,gBACXlb,KAAMqgB,EACNlF,WAAY,CACRrP,MAAM,QAAoBuU,EAAmBM,GAAU,GAAM,EAAM,EAAGzf,EAAA,+BACtEka,OAAQ,CACJpC,KAAM,yBACNjG,KAAM,SAEVwB,SAAS,QAAqB8L,EAAmBO,GAAiB,GAAO,EAAO,IAEpF5f,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,sBAAgC,CAAEoW,OAAQ,6BAGxF,CACIY,UAAW,eACXlb,KAAMkgB,EACN/E,WAAY,CACRrP,MAAM,QAAoBoU,EAAkBS,GAAU,GAAM,EAAO,EAAGzf,EAAA,+BACtEka,OAAQ,CACJpC,KAAM,wBACNjG,KAAM,SAEVwB,SAAS,QAAqB2L,EAAkBU,GAAiB,GAAO,IAE5E5f,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,qBAA+B,CAAEoW,OAAQ,4BAGvF,CACIY,UAAW,kBACXlb,KAAMogB,EACNjF,WAAY,CACRrP,MAAM,QAAoBsU,EAAqBK,GAAY,GAAM,EAAM,EAAGvf,EAAA,kCAC1Eka,OAAQ,CACJpC,KAAM,yBACNjG,KAAM,QAEVwB,SAAS,QAAqB6L,EAAqBM,GAAmB,GAAO,EAAO,IAExF1f,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,wBAAkC,CAAEoW,OAAQ,6BAG1F,CACIY,UAAW,iBACXlb,KAAMigB,EACN9E,WAAY,CACRrP,MAAM,QAAoBmU,EAAoBQ,GAAY,GAAM,EAAO,EAAGvf,EAAA,kCAC1Eka,OAAQ,CACJpC,KAAM,wBACNjG,KAAM,QAEVwB,SAAS,QAAqB0L,EAAoBS,GAAmB,GAAO,IAEhF1f,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,uBAAiC,CAAEoW,OAAQ,4BAGzF,CACIY,UAAW,gBACXlb,KAAMmgB,EACNhF,WAAY,CACRrP,MAAM,QAAoBqU,EAAmBI,GAAU,GAAM,EAAM,EAAGrf,EAAA,+BACtEka,OAAQ,CACJpC,KAAM,yBACNjG,KAAM,SAEVwB,SAAS,QAAqB4L,EAAmBK,GAAiB,GAAO,EAAO,IAEpFxf,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,sBAAgC,CAAEoW,OAAQ,6BAGxF,CACIY,UAAW,eACXlb,KAAMggB,EACN7E,WAAY,CACRrP,MAAM,QAAoBkU,EAAkBO,GAAU,GAAM,EAAO,EAAGrf,EAAA,+BACtEka,OAAQ,CACJpC,KAAM,wBACNjG,KAAM,SAEVwB,SAAS,QAAqByL,EAAkBQ,GAAiB,GAAO,IAE5Exf,MAAO,CACHhB,KAAM2D,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,qBAA+B,CAAEoW,OAAQ,6BAIrFe,EAAyB3b,KAAK4b,4BACpC5b,KAAK+E,SAAS,CAAE4W,yBAAwBJ,UAAS,EAErDvb,KAAKuU,SAAW,CAACgH,EAAQ9R,KACrB,MAAM,aAAEyR,GAAiBlb,KAAKyD,MAC9B,OAAQ,kBAAoBoY,EAAA,EAAW,CAAEvb,KAAO4a,EAAaY,IAAIrS,GAAuB,CAAC,CAAEiH,EAAG,OAApB6K,EAAOjb,KAAsByb,cAAe,YAAarb,IAAK6a,EAAOC,UAAWpP,KAAMmP,EAAOC,UAAWla,MAAOia,EAAOja,OAAS,EAG7MtB,KAAK4b,0BAA4B,KAC7B,MAAM,UAAEI,EAAS,cAAEjK,GAAkB/R,KAAKG,MAEpC8b,GAAyB,OAAgB,UAAW,UAC1D,OAAQ,kBAAoBA,EAAwB,CAAEC,gBAAiB,IAAKvL,OAAQ,EAAGC,YAAY,QAAgBA,EAAOoL,EAAWjK,GAAgBoK,qBAAqB,EAAMC,iBAAkB,IAAKC,eAAgB,CAC/MnL,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,IACJ,EAEbrR,KAAKsc,UAAY,KACb,MAAM,kBAAErH,EAAiB,KAAE7I,EAAO,IAAOpM,KAAKG,OACxC,aAAE+a,EAAY,OAAEK,EAAM,MAAEjY,GAAUtD,KAAKyD,MACvCuM,EAAciF,IAAwC3R,EAAQ,IAAM,eAA0B,GACpG,OAAQ,kBAAoBwM,EAAA,GAAa,CAAExP,MAAM,QAAcib,EAAQL,GAAejP,OAAQ,GAAI8D,OAAQ,GAAIC,YAAaA,EAAa5D,KAAM,GAAGA,YAAiB,EAGtKpM,KAAKuc,kBAAqB9S,IACtB,MAAMyR,GAAe,QAAiBlb,KAAKyD,MAAM8X,OAAQvb,KAAKyD,MAAMyX,aAAczR,GAClFzJ,KAAK+E,SAAS,CAAEmW,gBAAe,EAEnClb,KAAKoU,aAAe,KAChB,MAAM,MAAE9Q,GAAUtD,KAAKyD,OACjB,YAAE4Q,EAAc,GAAMrU,KAAKiU,aAAaK,SAAW,CAAC,EACtDD,IAAgB/Q,GAChBtD,KAAK+E,SAAS,CAAEzB,MAAO+Q,GAC3B,CAER,CACA7R,oBACIxC,KAAKob,YACLpb,KAAKkU,UAAW,QAAkBlU,KAAKiU,aAAaK,QAAStU,KAAKoU,aACtE,CACAxR,mBAAmBC,GACXA,EAAUyd,mBAAqBtgB,KAAKG,MAAMmgB,kBAC1Czd,EAAU0d,qBAAuBvgB,KAAKG,MAAMogB,oBAC5C1d,EAAU2d,mBAAqBxgB,KAAKG,MAAMqgB,kBAC1C3d,EAAU4d,oBAAsBzgB,KAAKG,MAAMsgB,mBAC3C5d,EAAU6d,sBAAwB1gB,KAAKG,MAAMugB,qBAC7C7d,EAAU8d,oBAAsB3gB,KAAKG,MAAMwgB,mBAC3C3gB,KAAKob,WAEb,CACAvF,uBACQ7V,KAAKkU,UACLlU,KAAKkU,UAEb,CACAsI,aACI,MAAM,mBAAE+D,EAAkB,iBAAEC,EAAgB,oBAAEE,EAAmB,kBAAEC,GAAsB3gB,KAAKG,MACxFsc,EAAqB8D,GAAqB,EAAA7D,EAAA,IAAQ,QAAa6D,GAAoB,GAAM,GAAM,IAAM,EACrGY,EAAmBX,GAAmB,EAAA9D,EAAA,IAAQ,QAAa8D,GAAkB,GAAM,GAAM,IAAM,EAC/F7D,EAAsB+D,GAAsB,EAAAhE,EAAA,IAAQ,QAAagE,GAAqB,GAAM,GAAM,IAAM,EACxGU,EAAoBT,GAAoB,EAAAjE,EAAA,IAAQ,QAAaiE,GAAmB,GAAM,GAAM,IAAM,EACxG,OAAOlE,EAAqB,GAAK0E,EAAmB,GAAKxE,EAAsB,GAAKyE,EAAoB,EAClGrL,KAAK6G,IAAIH,EAAoB0E,EAAkBxE,EAAqByE,GACpE,EACV,CAEAvE,YACI,MAAM,KAAEzQ,EAAO,IAAOpM,KAAKG,OACrB,aAAE+a,EAAY,OAAEK,GAAWvb,KAAKyD,MAChCrD,GAAS,OAA2B,CACtC0c,YAAY,QAAcvB,GAC1BwB,SAAUtT,IAAS,QAAeyR,EAAczR,GAChDuT,WAAY,GAAG5Q,WACf6Q,cAAe9c,GAASH,KAAKuc,kBAAkBpc,EAAMsJ,SAEzD,OAAOrJ,CACX,CACAa,SACI,MAAM,sBAAEic,EAAqB,OAAEjR,EAAM,gBAAEkR,EAAkBlR,EAAM,KAAE7K,EAAI,KAAEgL,EAAI,QAAE6E,EAAU,CACnFC,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,GACR,MAAEhO,EAAK,WAAE+Z,EAAU,WAAEC,GAAgBrd,KAAKG,OACrC,uBAAEwb,EAAsB,aAAET,EAAY,OAAEK,EAAM,MAAEjY,GAAUtD,KAAKyD,MAC/D6Z,GAAS,IAAAC,IAAUhC,EAAQL,GAC3BsC,EAAUxd,KAAKwc,aACfiB,EAAU1H,KAAKkD,MAAMuE,EAAU,GAC/BE,EAA0BR,GAC1B5Z,EAAQ,IACJ6Z,EAAkB,GAEtBA,EAEAQ,EAAYhC,EACZ,iBAAmBA,EAAwB,CACzCiC,UAAU,QAAgBrC,EAAQL,GAClCjL,eAAiB,kBAAoB4N,EAAA,EAAoB,CAAE/M,YAAY,QAAcyK,EAAQL,GAAc,GAAO7X,MAAOuN,GAASxP,EAAKG,cAAcC,EAAA,qBAA6B,CAAEsc,IAAKlN,EAAMH,aAEjMrM,EACN,OAAQ,kBAAoB,MAAO,CAAEmE,UAAW,gBAAiB4B,IAAKnK,KAAKiU,cACvE,kBAAoB,EAAAvL,MAAO,CAAEC,aAAc,KAAMrH,MAAO,SAAcsH,KAAM,EAAAC,WAAA,IAAiBxF,GAC7F,kBAAoB,MAAO,CAAE/B,MAAO2C,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG,UAAe,CAAEyH,OAAQyR,KACzF,kBAAoB,MAAO,CAAEpc,MAAO,CAAE2K,SAAQ3I,SAAS,cAAe,4BAClE,kBAAoBya,EAAA,EAAO,CAAEC,mBAAoBL,EAAWL,OAAQA,EAAQW,OAAQje,KAAK6c,YAAa5Q,OAAQA,EAAQ4E,gBAAiB7Q,KAAKsc,YAAaxL,YAAY,QAAcyK,EAAQL,GAAelK,eAAgB,SAAU5E,KAAMA,EAAM6E,QAASA,EAASiN,MAAO,IAAY5a,MAAOA,GACxRiY,GACIA,EAAO1Z,KAAI,CAACgM,EAAGpE,IACJzJ,KAAKuU,SAAS1G,EAAGpE,KAEhC,kBAAoB0U,EAAAC,EAAW,CAAEpM,MAAOoL,EAAY9b,MAAO,SAAmB+c,WAAY,CAAC,EAAGZ,EAASD,KACvG,kBAAoBW,EAAAC,EAAW,CAAEE,eAAe,EAAMtM,MAAOqL,EAAY/b,MAAO,cACpG,EAEJ,MACA,IAD6B,EAAAS,EAAA,IAAW6e,IC7NxC,MAAMS,WAAqC,cACvCxhB,cACIC,SAASC,WACTC,KAAK0O,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAErN,MAAO,gBAAsBgC,MAAOsL,EAAA,OACpE,kBAAoB,EAAAD,SAAU,CAAErN,MAAO,iBAAuBgC,MAAOsL,EAAA,OAEjF,CACApM,oBACI,MAAM,YAAEuI,EAAW,mBAAE6T,EAAkB,oBAAEC,EAAmB,gBAAE7T,EAAe,WAAEC,GAAejL,KAAKG,MACnG4K,EAAYC,EAAiBC,EAAY2T,GACzC7T,EAAYC,EAAiBC,EAAY4T,EAC7C,CACAjc,mBAAmBC,GACf,MAAM,YAAEkI,EAAW,mBAAE6T,EAAkB,oBAAEC,EAAmB,gBAAE7T,EAAe,WAAEC,GAAejL,KAAKG,MAC/F0C,EAAU+b,qBAAuBA,GACjC7T,EAAYC,EAAiBC,EAAY2T,GAEzC/b,EAAUgc,sBAAwBA,GAClC9T,EAAYC,EAAiBC,EAAY4T,EAEjD,CACA5d,SACI,MAAM,UAAE+W,EAAS,cAAE8G,EAAa,yBAAEC,EAAwB,eAAEC,EAAc,0BAAEC,EAAyB,KAAE7d,GAASpB,KAAKG,MAE/GmgB,GAAmB,QAAgBxB,EAAe,aAAmB,OAAQ,SAC7EyB,GAAqB,QAAgBzB,EAAe,aAAmB,OAAQ,WAC/E0B,GAAmB,QAAgB1B,EAAe,aAAmB,OAAQ,SAE7E2B,GAAoB,QAAgBzB,EAAgB,aAAmB,OAAQ,SAC/E0B,GAAsB,QAAgB1B,EAAgB,aAAmB,OAAQ,WACjF2B,GAAoB,QAAgB3B,EAAgB,aAAmB,OAAQ,SAC/E3P,EAAayP,GAAiBA,EAAcrX,MAAQqX,EAAcrX,KAAKC,OAASoX,EAAcrX,KAAKC,MAAMwH,MACzG4P,EAAcrX,KAAKC,MAAMwH,MAAMtH,MAC/B,GACN,OAAQ,kBAAoB,MAAO,CAAEtG,MAAO,kBACxC,kBAAoB,MAAO,CAAEA,MAAO,cAAqByd,IAA6B,iBAClFE,IAA8B,gBAA0Bjf,KAAK0O,cAAkB,kBAAoB,GAAsB,CAAEwO,uBAAuB,EAAMC,gBPjD9I,IOiDiMmD,iBAAkBA,EAAkBC,mBAAoBA,EAAoBC,iBAAkBA,EAAkBxE,UAAWrU,EAAA,GAAaoK,cAAe,CAAC,EAAG9F,OPlDrW,IOkDsYG,KAAM4L,EAAWyI,kBAAmBA,EAAmBC,oBAAqBA,EAAqBC,kBAAmBA,EAAmBvD,WAAYhc,EAAKG,cAAcC,EAAA,kCAA0C6b,WAAYjc,EAAKG,cAAcC,EAAA,QAAgB,CAAEoG,OAAO,QAAeyH,QAC1qB,EAEJ,MAAM,IAAkB,SAAsB,CAAC5L,GAASuH,kBAAiBC,aAAYvH,aACjF,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,GAAkB,QAAmBH,GACrCzC,GAAU,QAAayC,GACvBxC,GAAe,QAAgBwC,GAE/B2d,EAAYrW,IAAe,kBAA2BA,IAAe,YACrEqU,EAAY,CACdtb,UAAWC,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAeK,WAAaL,EAAeK,WAAcL,GAC7JA,EAAeT,QACfS,EAAeT,OAAOC,SAAW,CAAE,CAAC,GAAG,gBAA4BQ,EAAeT,OAAOC,UAAcQ,GACvGA,EAAeT,QACfS,EAAeT,OAAOuB,UAAY,CAAEA,SAAUd,EAAeT,OAAOuB,WAAevD,GAAW,CAAE,CAACA,QAAUkD,IAAgBN,GAAmBwd,GAAa,CAAE,CAAC,OAAexd,IACjLqO,QAASlO,OAAOO,OAAO,CAAC,EAAIb,GAAkBA,EAAewO,SAAWxO,EAAewO,SACvF9K,SAAUpD,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAIV,IAAoBwd,GAAa,CAAE,CAAC,OAAexd,IAAsB5C,IAAY4C,GAAmB,CAAE,CAAC5C,GAAUC,KAG9Joe,EAAetb,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG8a,GAAY,CAAEpc,OAAQ,CACnEmB,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBqa,GAAqB,QAASW,GAC9BT,EAAgB,kBAA6Brb,EAAOuH,EAAiBC,EAAY2T,GACjFG,EAA2B,6BAAwCtb,EAAOuH,EAAiBC,EAAY2T,GAEvGY,EAAgBvb,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAG8a,GAAY,CAAEpc,OAAQ,CACpEmB,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBsa,GAAsB,QAASW,GAGrC,MAAO,CACHD,eACAX,qBACAE,gBACAC,2BACAS,gBACAX,sBACAG,eATmB,kBAA6Bvb,EAAOuH,EAAiBC,EAAY4T,GAUpFI,0BAT8B,6BAAwCxb,EAAOuH,EAAiBC,EAAY4T,GAU7G,IAEC,GAAqB,CACvB9T,YAAa,kBAEXwW,IAA2B,EAAAxf,EAAA,KAAW,QAAW,IAAAC,SAAQ,GAAiB,GAAzB,CAA6Cqf,MCjGpG,MAAMG,WAA4B,cAC9B3hB,cACIC,SAASC,WACTC,KAAKyhB,YAAc,CAACzW,EAAiBC,IAC7BD,IAAoB,UACbC,IAAe,iBAA0B,kBAAoBA,EAEjEA,IAAe,iBAA0B,gBAAkBA,EAGtEjL,KAAK0X,aAAgBJ,IACjB,MAAM,SAAEzR,EAAQ,SAAEgC,EAAQ,KAAEzG,GAASpB,KAAKG,MAC1C,OAAQ,kBAAoB,EAAAsT,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAhL,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IAAiBzH,EAAKG,cAAcC,EAAA,uBAA+B,CACtHC,MAAOzB,KAAKyhB,YAAYnK,EAAOtM,gBAAiBsM,EAAOrM,gBAE/D,kBAAoB,EAAA0I,SAAU,KAC1B,kBAAoB8L,EAAyB,CAAEzH,UAAWV,EAAOU,UAAWnS,SAAUA,EAAUgC,SAAUA,EAAUmD,gBAAiBsM,EAAOtM,gBAAiBC,WAAYqM,EAAOrM,cAAgB,EAG5MjL,KAAK0hB,cAAiBpK,IAClB,MAAM,SAAEzR,EAAQ,SAAEgC,EAAQ,KAAEzG,GAASpB,KAAKG,MAC1C,OAAQ,kBAAoB,EAAAsT,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAhL,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IAAiBzH,EAAKG,cAAcC,EAAA,uBAA+B,CACtHC,MAAOzB,KAAKyhB,YAAYnK,EAAOtM,gBAAiBsM,EAAOrM,gBAE/D,kBAAoB,EAAA0I,SAAU,KAC1B,kBAAoB0M,GAA0B,CAAErI,UAAWV,EAAOU,UAAWnS,SAAUA,EAAUgC,SAAUA,EAAUmD,gBAAiBsM,EAAOtM,gBAAiBC,WAAYqM,EAAOrM,cAAgB,EAG7MjL,KAAK2hB,cAAiBrK,IAClB,MAAM,KAAElW,GAASpB,KAAKG,MACtB,OAAQ,kBAAoB,EAAAsT,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAhL,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAC,WAAA,IAAiBzH,EAAKG,cAAcC,EAAA,uBAA+B,CACtHC,MAAOzB,KAAKyhB,YAAYnK,EAAOtM,gBAAiBsM,EAAOrM,gBAE/D,kBAAoB,EAAA0I,SAAU,KAC1B,kBAAoB4N,GAA0B,CAAEvJ,UAAWV,EAAOU,UAAWhN,gBAAiBsM,EAAOtM,gBAAiBC,WAAYqM,EAAOrM,cAAgB,CAEzK,CAEA8N,aAAazB,GACT,OAAQA,EAAOjE,MACX,KAAK,SACD,OAAOrT,KAAK0X,aAAaJ,GAC7B,KAAK,UACD,OAAOtX,KAAK0hB,cAAcpK,GAC9B,KAAK,UACD,OAAOtX,KAAK2hB,cAAcrK,GAC9B,QACI,OAAO,KAEnB,CACArW,SACI,MAAM,cAAEyX,EAAa,QAAEC,GAAY3Y,KAAKG,MACxC,OAAQ,kBAAoB,EAAAwW,KAAM,CAAEC,WAAW,GAAQ+B,EAAQ9W,KAAIgX,IAC/D,MAAMvB,EAASoB,EAAcG,GAC7B,OAAO,kBAAoB,EAAAhC,SAAU,CAAEnW,IAAK,UAAUmY,KAAc7Y,KAAK+Y,aAAazB,GAAQ,IAEtG,EAEJ,MACA,IAD2B,EAAAvV,EAAA,IAAWyf,G,yGCnE/B,MAAM/iB,EAAS,CAClBiH,UAAW,CACP/F,UAAW,SACXP,aAAc,GAElBwiB,cAAe,CACXnb,SAAU,WACVF,MAAO,UAEXsb,UAAW,CACPlc,UAAW,OAEfI,OAAQ,CACJC,gBAAiB,SACjBiL,QAAS,UAEb/K,cAAe,CACXC,QAAS,OACTC,eAAgB,iBAEpB0b,kBAAmB,CACf3b,QAAS,OACT4b,UAAW,QAEf1b,mBAAoB,CAChBF,QAAS,QAEb6b,KAAM,CACFC,cAAe,UAEnBC,SAAU,CACNzb,SAAU,YAEd0b,UAAW,CACPljB,WAAY,QAEhBoE,MAAO,CACH1E,cAAe,U,gFCxChB,MAAMyjB,EAAmB,EAAGC,WAAUva,cAAa5G,UAAST,KAAI8C,kBAAiBG,SAAQL,YAC5F,MAAMM,GAAiB,QAAWD,EAAOE,SAASC,QAC5CoD,EAAWhD,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAGb,GAAkBmE,GAAeA,IAAgBzE,GAAS,CAAE,CAAC,MAAmByE,IAAkBzE,GAAS,CAAE,CAAC,MAAoBA,IAAW,CAAEgE,SAAU,CAC9N,CAACnG,GAAUqC,EAAkB,IAAM9C,KAQ3C,OANI8C,IACK0D,EAAS/D,SACV+D,EAAS/D,OAAS,CAAC,GAEvB+D,EAAS/D,OAAOuB,SAAW,MAExB,GAAG4d,MAAY,QAAcpb,IAAW,EAEtCqb,EAAsB,EAAGD,WAAUva,cAAa5G,UAASkH,aAAY3H,KAAIiD,SAAQL,QAAOgQ,WACjG,MAAM1P,GAAiB,QAAWD,EAAOE,SAASC,QAC5CoD,EAAWhD,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAOP,OAAOO,OAAO,CAAC,EAAGb,GAAkBmE,GAAeA,IAAgBzE,GAAS,CAAE,CAAC,MAAmByE,IAAkBzE,GAAS,CAAE,CAAC,MAAoBA,IAAY+E,GAAc,CAAE,CAAC,MAAeA,IAAgB,CAAEf,SAAU,CAC7R,CAACnG,GAAUT,KAgBnB,MAda,YAAT4S,GACKpM,EAAS/D,SACV+D,EAAS/D,OAAS,CAAC,GAEvB+D,EAAS/D,OAAOC,QAAU1C,EAC1BwG,EAASI,SAAW,CAChB,CAAC,MAAee,IAGN,wBAATiL,IACLpM,EAASI,SAAW,CAChB,CAAC,MAAe5G,IAGjB,GAAG4hB,MAAY,QAAcpb,IAAW,EAEtC1D,EAAmBI,GACrBA,GAAkBA,EAAeT,QAAUS,EAAeT,OAAOuB,WAAa,I","sources":["webpack:///./src/routes/views/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/views/details/components/tag/tag.styles.ts","webpack:///./src/routes/views/details/components/tag/tagContent.tsx","webpack:///./src/routes/views/details/components/tag/tagModal.tsx","webpack:///./src/routes/views/details/components/tag/tagLink.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/views/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.tsx","webpack:///./src/routes/views/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/views/details/components/costChart/costChart.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.tsx","webpack:///./src/routes/views/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryCard.tsx","webpack:///./src/routes/views/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/views/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/views/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/views/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/utils/paths.ts"],"sourcesContent":["import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { isPlatformCosts } from 'routes/views/utils/paths';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { TagContent } from './tagContent';\nconst tagReportType = TagType.tag;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, intl, isOpen, query, tagReport } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: this.props.isPlatformCosts ? platformCategoryKey : groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryFromRoute && queryFromRoute.filter_by ? queryFromRoute.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(query);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        isPlatformCosts: isPlatformCosts(queryFromRoute),\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagModalBase)));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = TagType.tag;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", { \"data-testid\": \"tag-lnk\", href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }, count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryFromRoute && queryFromRoute.filter_by ? queryFromRoute.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(query);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase)));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { getQueryRoute } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { TagLink } from 'routes/views/details/components/tag';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getTotalCostDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'utils/props';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = () => {\n            const { detailsURL, groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            // Don't want these params when returning to the details page\n            if (newQuery.filter) {\n                newQuery.filter.account = undefined;\n                newQuery.filter.category = undefined;\n                newQuery[breakdownDescKey] = undefined;\n                newQuery[breakdownTitleKey] = undefined;\n                newQuery[orgUnitIdKey] = undefined;\n            }\n            return `${detailsURL}?${getQueryRoute(newQuery)}`;\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costType, currency, description, groupBy, intl, isCurrencyFeatureEnabled, onCostTypeSelected, onCurrencySelected, query, showCostType = false, tabs, tagReportPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'project' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            React.createElement(Link, { to: this.buildDetailsLink() }, intl.formatMessage(messages.breakdownBackToDetails, {\n                                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagReportPathsType }),\n                                groupBy: groupByKey,\n                            }))))),\n                React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getTotalCostDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }))))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { handleCostTypeSelected, handleCurrencySelected } from 'routes/views/utils/handles';\nimport { hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { FetchStatus } from 'store/common';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\n// eslint-disable-next-line no-shadow\nvar BreakdownTab;\n(function (BreakdownTab) {\n    BreakdownTab[\"costOverview\"] = \"cost-overview\";\n    BreakdownTab[\"historicalData\"] = \"historical-data\";\n})(BreakdownTab || (BreakdownTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case BreakdownTab.costOverview:\n            return 'cost-overview';\n        case BreakdownTab.historicalData:\n            return 'historical-data';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.costOverview,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.historicalData,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === BreakdownTab.costOverview) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === BreakdownTab.historicalData) {\n                return historicalDataComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === BreakdownTab.costOverview) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === BreakdownTab.historicalData) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString, router } = this.props;\n            if (router.location.search) {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, currency, description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, router, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress && reportFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.complete && reportFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === FetchStatus.complete;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: value => handleCostTypeSelected(query, router, value), onCurrencySelected: value => handleCurrencySelected(query, router, value), query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nexport default injectIntl(withRouter(BreakdownBase));\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { clusters = [] } = this.props;\n        if (clusters.length === 0) {\n            return null;\n        }\n        return clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { clusters, isOpen } = this.props;\n        return nextProps.clusters !== clusters || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { clusters, groupBy, intl, isOpen, title } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, {\n                groupBy,\n                name: title,\n            }), width: '50%' },\n            React.createElement(ClusterContent, { clusters: clusters })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, intl, report, title } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        // Get clusters from all projects -- see https://issues.redhat.com/browse/COST-3371\n        const clusters = [];\n        computedItems.map(item => {\n            if (item.clusters) {\n                item.clusters.map(cluster => {\n                    if (!clusters.includes(cluster)) {\n                        clusters.push(cluster);\n                    }\n                });\n            }\n        });\n        if (clusters.length === 0) {\n            return null;\n        }\n        // Sort clusters from multiple projects\n        clusters.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n        for (const cluster of clusters) {\n            const prefix = someClusters.length > 0 ? ', ' : '';\n            const clusterString = `${prefix}${cluster}`;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + clusterString.length > maxChars) {\n                    someClusters.push(clusterString\n                        .slice(0, maxChars - charCount)\n                        .trim()\n                        .concat('...'));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            charCount += clusterString.length;\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", { \"data-testid\": \"cluster-lnk\", href: \"#/\", onClick: this.handleOpen }, intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { clusters: clusters, groupBy: groupBy, isOpen: isOpen, onClose: this.handleClose, title: title })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 475,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 80, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.breakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.breakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.breakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { logicalAndPrefix, orgUnitIdKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './summaryModal.styles';\nconst reportType = ReportType.cost;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase)));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { costType, currency, groupBy, intl, isPlatformCosts, query, reportGroupBy, reportPathsType } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, { ouiaId: \"view-all-btn\", onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }, intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costType: costType, currency: currency, groupBy: groupBy, groupByValue: isPlatformCosts ? platformCategoryKey : groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { intl, isPlatformCosts, reportGroupBy, reportFetchStatus } = this.props;\n        const title = intl.formatMessage(messages.breakdownSummaryTitle, {\n            value: isPlatformCosts ? platformCategoryKey.toLowerCase() : reportGroupBy,\n        });\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, title)),\n            React.createElement(CardBody, null, reportFetchStatus === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const query = {\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        report,\n        reportFetchStatus,\n        reportPathsType,\n        reportType,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryBase)));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== this.props.reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, report, intl, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || reportType === ReportType.volume) {\n            const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n            const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute && queryFromRoute.filter && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(Object.assign({}, query));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase)));\nexport default UsageChart;\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Cluster } from 'routes/views/details/components/cluster';\nimport { CostChart } from 'routes/views/details/components/costChart';\nimport { SummaryCard } from 'routes/views/details/components/summary';\nimport { UsageChart } from 'routes/views/details/components/usageChart';\nimport { styles } from 'routes/views/details/ocpDetails/detailsHeader.styles';\nimport { CostOverviewWidgetType } from 'store/breakdown/costOverview/common/costOverviewCommon';\nimport { orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, intl, report, title } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report, title: title }))));\n            }\n            else {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.breakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.breakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, currency, groupBy, isPlatformCosts, query } = this.props;\n            let showWidget = false;\n            if (widget.reportSummary.showWidgetOnGroupBy) {\n                for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                    if (groupById === groupBy ||\n                        (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                        (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (!showWidget && widget.reportSummary.showWidgetOnCategory) {\n                for (const categoryId of widget.reportSummary.showWidgetOnCategory) {\n                    if (isPlatformCosts && categoryId === platformCategoryKey) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, currency: currency, isPlatformCosts: isPlatformCosts, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case CostOverviewWidgetType.cluster:\n                return this.getClusterChart(widget);\n            case CostOverviewWidgetType.cost:\n                return this.getCostChart(widget);\n            case CostOverviewWidgetType.cpuUsage:\n                return this.getCpuUsageChart(widget);\n            case CostOverviewWidgetType.memoryUsage:\n                return this.getMemoryUsageChart(widget);\n            case CostOverviewWidgetType.reportSummary:\n                return this.getSummaryCard(widget);\n            case CostOverviewWidgetType.volumeUsage:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 725 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 725\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/views/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, DatumType.cumulative, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, DatumType.cumulative, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, DatumType.cumulative, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, DatumType.cumulative, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute && queryFromRoute.filter && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(Object.assign(Object.assign({}, currentQuery), { cost_type: costType, currency }));\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(Object.assign(Object.assign({}, previousQuery), { cost_type: costType, currency }));\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase)));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip, getDateRange, } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, orgUnitIdKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === ReportType.cost;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(Object.assign(Object.assign({}, currentQuery), { cost_type: costType, currency }));\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(Object.assign(Object.assign({}, previousQuery), { cost_type: costType, currency }));\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase)));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 925 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 925\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, orgUnitIdKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, DatumType.rolling, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, DatumType.rolling, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, DatumType.rolling, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, DatumType.rolling, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, DatumType.rolling, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, DatumType.rolling, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === ReportType.instanceType || reportType === ReportType.storage;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase)));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataWidgetType } from 'store/breakdown/historicalData/common/historicalDataCommon';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === ReportPathsType.azure) {\n                return reportType === ReportType.instanceType ? 'virtual_machine' : reportType;\n            }\n            return reportType === ReportType.instanceType ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case HistoricalDataWidgetType.cost:\n                return this.getCostChart(widget);\n            case HistoricalDataWidgetType.trend:\n                return this.getTrendChart(widget);\n            case HistoricalDataWidgetType.usage:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nexport const getBreakdownPath = ({ basePath, description, groupBy, id, isPlatformCosts, router, title, }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), { group_by: {\n            [groupBy]: isPlatformCosts ? '*' : id, // Use ID here -- see https://github.com/project-koku/koku-ui/pull/2821\n        } });\n    if (isPlatformCosts) {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        newQuery.filter.category = platformCategoryKey;\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, router, title, type, }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && { [orgUnitIdKey]: groupByOrg })), { group_by: {\n            [groupBy]: id, // This may be overridden below\n        } });\n    if (type === 'account') {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const isPlatformCosts = (queryFromRoute) => {\n    return queryFromRoute && queryFromRoute.filter && queryFromRoute.filter.category === platformCategoryKey;\n};\n"],"names":["styles","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","marginBottom","tagLink","marginLeft","global_spacer_sm","tagsContainer","marginRight","global_spacer_3xl","marginTop","TagContentBase","constructor","super","arguments","this","getDataListItems","tagReport","props","result","item","data","val","values","id","key","push","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","render","groupBy","groupByValue","intl","dataListItems","style","formatMessage","messages","value","count","DataList","isCompact","map","TagContent","injectIntl","connect","tagReportType","TagModalBase","getTagValueCount","length","handleClose","onClose","bind","componentDidMount","fetchTag","tagReportPathsType","tagQueryString","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","isOpen","query","filter","account","Modal","title","width","isPlatformCosts","mapStateToProps","state","router","queryFromRoute","location","search","groupByOrgValue","filterByParams","filter_by","Object","keys","indexOf","undefined","resolution","time_scope_units","time_scope_value","assign","category","tagReportFetchStatus","mapDispatchToProps","TagModal","TagLinkBase","defaultState","setState","handleOpen","event","preventDefault","Boolean","href","onClick","cost","global_spacer_xl","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","global_spacer_md","header","backgroundColor","global_BackgroundColor_100","headerContent","display","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeader","buildDetailsLink","detailsURL","groupByKey","newQuery","JSON","parse","stringify","group_by","getTotalCost","report","hasCost","meta","total","format","units","currency","description","isCurrencyFeatureEnabled","onCostTypeSelected","onCurrencySelected","showCostType","filterByAccount","groupByOrg","groupByTag","showTags","className","to","onSelect","Title","headingLevel","size","TitleSizes","featureFlags","BreakdownTab","getIdKeyForTab","tab","costOverview","historicalData","BreakdownBase","activeTabKey","getAvailableTabs","contentRef","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","ref","getTabItem","costOverviewComponent","historicalDataComponent","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","updateReport","fetchReport","reportPathsType","reportType","reportQueryString","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","name","ClusterModal","ClusterBase","showAll","charCount","someClusters","allClusters","computedItems","getComputedReportItems","idKey","includes","sort","a","b","clusterString","slice","trim","concat","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","items","_item","formatOptions","label","toString","totalValue","exclude","cost_type","SummaryModalContent","SummaryModalBase","variant","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","ouiaId","handleBulletChartModalOpen","type","ButtonType","ButtonVariant","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","limit","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasCapacity","capacityUnits","hasRequest","request","requestUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","enableFlip","bodyContent","rel","target","chartName","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","showWidgetOnCategory","categoryId","usePlaceholder","getVolumeUsageChart","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","getTrendChart","getUsageChart","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","getBreakdownPath","basePath","getOrgBreakdownPath"],"sourceRoot":""}