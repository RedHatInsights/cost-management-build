{"version":3,"file":"js/azureDetails.1670422978554.76b98ffa495c44698341.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/minus-icon.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_spacer_xs.js","webpack:///./src/routes/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/computedReport/getComputedAzureReportItems.ts","webpack:///./src/routes/views/details/azureDetails/azureDetails.styles.ts","webpack:///./src/routes/views/details/azureDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/azureDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/azureDetails/detailsTable.tsx","webpack:///./src/routes/views/details/azureDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/azureDetails/azureDetails.tsx","webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx","webpack:///./src/routes/views/utils/paths.ts"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);\n\nexport default ExternalLinkAltIcon;","import { createIcon } from '../createIcon';\n\nexport const MinusIconConfig = {\n  name: 'MinusIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const MinusIcon = createIcon(MinusIconConfig);\n\nexport default MinusIcon;","\"use strict\";\nexports.__esModule = true;\nexports.global_spacer_xs = {\n  \"name\": \"--pf-global--spacer--xs\",\n  \"value\": \"0.25rem\",\n  \"var\": \"var(--pf-global--spacer--xs)\"\n};\nexports[\"default\"] = exports.global_spacer_xs;","import './emptyValueState.scss';\nimport { MinusIcon } from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport React from 'react';\nconst EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: \"emptyValueContainer\" },\n        React.createElement(MinusIcon, null)));\n};\nexport default EmptyValueState;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = TagPathsType.azure;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.azureDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.azure),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = ReportPathsType.azure;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, intl, isAllSelected, report, selectedItems, router } = this.props;\n            if (!report) {\n                return;\n            }\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const isDisabled = label === `no-${groupBy}` || label === `no-${groupByTagKey}`;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy,\n                        router,\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport || prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.azure;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.azure, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReportFetchStatus,\n        tagReport,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { withRouter } from 'utils/router';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.azure;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { intl, query, router, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.azure),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, router, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, query, reportQueryString, router } = this.props;\n            if (!router.location.search) {\n                router.navigate(getRouteForQuery({\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }, router.location), {\n                    replace: true,\n                });\n            }\n            else {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.azureDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.azure, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.azure),\n        providersError,\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(AzureDetails)));\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { withRouter } from 'utils/router';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, item: { source_uuid }, redirectToCostModel, router, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], router) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n    },\n    defaultLabel: {\n        minWidth: '63px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { withRouter } from 'utils/router';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl, router } = this.props;\n            const queryFromRoute = parseQuery(router.location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns, router } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(router.location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isLoading, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), gridBreakPoint: \"grid-2xl\" },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    } })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: cellIndex === row.cells.length - 1 }, item.value))))))))),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(withRouter(DataTable));\n","import { getQueryRoute, platformCategory } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, description, groupBy, isPlatformCosts, label, router, }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== label && { [breakdownDescKey]: description })), (isPlatformCosts && { [breakdownTitleKey]: label })), { group_by: {\n            [groupBy]: isPlatformCosts ? '*' : label,\n        } });\n    if (isPlatformCosts) {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        newQuery.filter.category = platformCategory;\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, router, title, type, }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && { [orgUnitIdKey]: groupByOrg })), { group_by: {\n            [groupBy]: id, // This may be overridden below\n        } });\n    if (type === 'account') {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const isPlatformCosts = (queryFromRoute) => {\n    return queryFromRoute && queryFromRoute.filter && queryFromRoute.filter.category === platformCategory;\n};\n"],"names":["ExternalLinkAltIconConfig","name","height","width","svgPath","yOffset","xOffset","ExternalLinkAltIcon","MinusIconConfig","MinusIcon","exports","className","getIdKeyForGroupBy","groupBy","subscription_guid","resource_location","service_name","styles","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","padding","headerContent","display","justifyContent","headerContentLeft","headerContentRight","title","global_spacer_sm","groupByOptions","label","value","tagReportPathsType","DetailsHeaderBase","render","currency","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","intl","this","props","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","formatMessage","messages","onSelect","isDisabled","onSelected","options","showTags","Boolean","format","units","mapStateToProps","state","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","injectIntl","connect","reportPathsType","DetailsTableBase","constructor","super","arguments","columns","rows","initDatum","groupByTagKey","isAllSelected","selectedItems","router","computedItems","idKey","Object","assign","orderBy","length","isSortable","map","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","desc","id","actions","getActions","to","basePath","toString","description","push","cells","isOpen","selected","undefined","find","val","selectionDisabled","setState","reportQueryString","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","key","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","tagReportType","DetailsToolbarBase","defaultState","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","filter","resolution","time_scope_units","time_scope_value","key_only","limit","mapDispatchToProps","DetailsToolbarConnect","DetailsToolbar","baseQuery","delta","offset","exclude","filter_by","group_by","order_by","reportType","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","groupById","getExportModal","items","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","newQuery","parse","navigate","location","replace","isSelected","newItems","updateReport","fetchReport","search","bind","prevState","reportError","noReport","noLocation","providerType","queryFromRoute","DetailsActionsBase","isDropdownOpen","handleOnSelect","handleOnToggle","showPriceListOption","source_uuid","redirectToCostModel","DropdownItem","component","onClick","unshift","includes","Dropdown","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","costModels","DetailsActionsConnect","costColumn","defaultLabel","minWidth","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","nameColumn","DataTable","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","getSortBy","direction","getSortParams","sortBy","handleOnSort","columnIndex","rowId","newRows","row","SortByDirection","TableComposable","gridBreakPoint","Thead","Tr","col","Th","modifier","sort","Tbody","Td","colSpan","Bullseye","Spinner","rowIndex","cellIndex","dataLabel","select","disable","_event","isActionCell","getBreakdownPath","isPlatformCosts","category","getOrgBreakdownPath","groupByOrg","type","account"],"sourceRoot":""}