{"version":3,"file":"js/overview.1670340193891.e4903cce512c04107c95.js","mappings":"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","sources":["webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/routes/components/currency/currency.styles.ts","webpack:///./src/routes/components/currency/currency.tsx","webpack:///./src/routes/state/noData/noDataState.tsx","webpack:///./src/routes/state/noData/noData.tsx","webpack:///./src/routes/components/icons/costIcon/costIcon.tsx","webpack:///./src/routes/state/noProviders/noProvidersState.styles.ts","webpack:///./src/routes/state/noProviders/noProvidersState.tsx","webpack:///./src/routes/state/noProviders/noProviders.tsx","webpack:///./src/routes/views/components/perspective/perspective.styles.ts","webpack:///./src/routes/views/components/perspective/perspectiveSelect.tsx","webpack:///./src/routes/views/components/perspective/perspective.tsx","webpack:///./src/routes/views/overview/components/dashboardBase.tsx","webpack:///./src/routes/views/overview/components/chartComparison.tsx","webpack:///./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack:///./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack:///./src/routes/views/overview/overview.styles.ts","webpack:///./src/routes/views/overview/overview.tsx","webpack:///./src/api/queries/overviewQuery.ts","webpack:///./src/routes/views/utils/providers.ts","webpack:///./src/utils/dates.ts","webpack:///./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currency, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: \"currencyOverride\", id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCurrency(selection.value); // Set currency units via local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.currency)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport default Currency;\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(NoDataStateBase);\nexport { NoDataState };\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default NoData;\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CostIcon } from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case ProviderType.aws:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case ProviderType.azure:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case ProviderType.gcp:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case ProviderType.ibm:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case ProviderType.ocp:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(NoProvidersStateBase);\nexport { NoProvidersState };\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default NoProviders;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveSelectBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.perspective)),\n            this.getSelect()));\n    }\n}\nconst PerspectiveSelect = injectIntl(PerspectiveSelectBase);\nexport { PerspectiveSelect };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, isOciFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci && isOciFeatureEnabled) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst Perspective = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isOciFeatureEnabled, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    if (isInfrastructureTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n                isOciFeatureEnabled,\n            }));\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n            isOciFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nexport default Perspective;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, currency, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency })))));\n    }))));\nexport default DashboardBase;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ComputedReportItemType, DatumType, transformForecast, transformForecastCone, transformReport, } from 'routes/views/components/charts/common/chartDatum';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { DashboardChartType } from 'store/dashboard/common/dashboardCommon';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\n// eslint-disable-next-line no-shadow\nvar Comparison;\n(function (Comparison) {\n    Comparison[\"cumulative\"] = \"cumulative\";\n    Comparison[\"daily\"] = \"daily\";\n})(Comparison || (Comparison = {}));\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: Comparison.cumulative,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === DashboardChartType.dailyTrend) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.dailyCost) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === DashboardChartType.trend) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.usage) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: Comparison.daily },\n                { label: cumulativeTitle, value: Comparison.cumulative, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === DatumType.cumulative) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === ComputedReportItemType.usage) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType || prevProps.currency !== currency) {\n            fetchReports(widgetId);\n            if (trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport default DashboardWidgetBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, AwsDashboardTab } from 'store/dashboard/awsDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsDashboardTab.services:\n            return 'service';\n        case AwsDashboardTab.accounts:\n            return 'account';\n        case AwsDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { costType: getCostType(), getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors, AwsOcpDashboardTab } from 'store/dashboard/awsOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsOcpDashboardTab.services:\n            return 'service';\n        case AwsOcpDashboardTab.accounts:\n            return 'account';\n        case AwsOcpDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), (featureFlagsSelectors.selectIsCostTypeFeatureEnabled(state) && { costType: getCostType() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, AzureDashboardTab } from 'store/dashboard/azureDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureDashboardTab.service_names:\n            return 'service_name';\n        case AzureDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, AzureOcpDashboardTab, } from 'store/dashboard/azureOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureOcpDashboardTab.service_names:\n            return 'service_name';\n        case AzureOcpDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureOcpDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors, GcpDashboardTab } from 'store/dashboard/gcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpDashboardTab.regions:\n            return 'region';\n        case GcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors, GcpOcpDashboardTab } from 'store/dashboard/gcpOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpOcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpOcpDashboardTab.regions:\n            return 'region';\n        case GcpOcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors, IbmDashboardTab } from 'store/dashboard/ibmDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case IbmDashboardTab.services:\n            return 'service';\n        case IbmDashboardTab.projects:\n            return 'project';\n        case IbmDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, OcpCloudDashboardTab, } from 'store/dashboard/ocpCloudDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpCloudDashboardTab.accounts:\n            return 'account';\n        case OcpCloudDashboardTab.regions:\n            return 'region';\n        case OcpCloudDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, OcpDashboardTab } from 'store/dashboard/ocpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpDashboardTab.clusters:\n            return 'cluster';\n        case OcpDashboardTab.nodes:\n            return 'node';\n        case OcpDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors, OciDashboardTab } from 'store/dashboard/ociDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OciDashboardTab.product_services:\n            return 'product_service';\n        case OciDashboardTab.payer_tenant_ids:\n            return 'payer_tenant_id';\n        case OciDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport { getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { UserAccessType } from 'api/userAccess';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { Loading } from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { AwsDashboard } from 'routes/views/overview/awsDashboard';\nimport { AwsOcpDashboard } from 'routes/views/overview/awsOcpDashboard';\nimport { AzureDashboard } from 'routes/views/overview/azureDashboard';\nimport { AzureOcpDashboard } from 'routes/views/overview/azureOcpDashboard';\nimport { GcpDashboard } from 'routes/views/overview/gcpDashboard';\nimport { GcpOcpDashboard } from 'routes/views/overview/gcpOcpDashboard';\nimport { IbmDashboard } from 'routes/views/overview/ibmDashboard';\nimport { OcpCloudDashboard } from 'routes/views/overview/ocpCloudDashboard';\nimport { OcpDashboard } from 'routes/views/overview/ocpDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getCostType } from 'utils/costType';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { getCurrency } from 'utils/localStorage';\nimport { withRouter } from 'utils/router';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { OciDashboard } from './ociDashboard';\nimport { styles } from './overview.styles';\n// eslint-disable-next-line no-shadow\nvar InfrastructurePerspective;\n(function (InfrastructurePerspective) {\n    InfrastructurePerspective[\"aws\"] = \"aws\";\n    InfrastructurePerspective[\"awsOcp\"] = \"aws_ocp\";\n    InfrastructurePerspective[\"azure\"] = \"azure\";\n    InfrastructurePerspective[\"azureOcp\"] = \"azure_ocp\";\n    InfrastructurePerspective[\"gcp\"] = \"gcp\";\n    InfrastructurePerspective[\"gcpOcp\"] = \"gcp_ocp\";\n    InfrastructurePerspective[\"ibm\"] = \"ibm\";\n    InfrastructurePerspective[\"ibmOcp\"] = \"ibm_ocp\";\n    InfrastructurePerspective[\"oci\"] = \"oci\";\n    InfrastructurePerspective[\"ocpCloud\"] = \"ocp_cloud\";\n})(InfrastructurePerspective || (InfrastructurePerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OcpPerspective;\n(function (OcpPerspective) {\n    OcpPerspective[\"ocp\"] = \"ocp\";\n})(OcpPerspective || (OcpPerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OverviewTab;\n(function (OverviewTab) {\n    OverviewTab[\"infrastructure\"] = \"infrastructure\";\n    OverviewTab[\"ocp\"] = \"ocp\";\n})(OverviewTab || (OverviewTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OverviewTab.infrastructure:\n            return 'infrastructure';\n        case OverviewTab.ocp:\n            return 'ocp';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: OverviewTab.ocp,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: OverviewTab.infrastructure,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType, isCostTypeFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === InfrastructurePerspective.aws ||\n                (currentItem === InfrastructurePerspective.awsOcp && isCostTypeFeatureEnabled)) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrency = () => {\n            const { currency } = this.props;\n            return React.createElement(Currency, { onSelect: this.handleCurrencySelected, currency: currency });\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = hasOcp && !(hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud);\n            const showInfrastructureOnly = !hasOcp && (hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud);\n            if (showOcpOnly) {\n                return OverviewTab.ocp;\n            }\n            else if (showInfrastructureOnly) {\n                return OverviewTab.infrastructure;\n            }\n            else {\n                return activeTabKey === 0 ? OverviewTab.ocp : OverviewTab.infrastructure;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case InfrastructurePerspective.aws:\n                case InfrastructurePerspective.awsOcp:\n                case InfrastructurePerspective.azure:\n                case InfrastructurePerspective.oci:\n                case InfrastructurePerspective.azureOcp:\n                case InfrastructurePerspective.gcp:\n                case InfrastructurePerspective.gcpOcp:\n                case InfrastructurePerspective.ibm:\n                case InfrastructurePerspective.ibmOcp:\n                case InfrastructurePerspective.ocpCloud:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return InfrastructurePerspective.ocpCloud;\n            }\n            if (this.isAwsAvailable()) {\n                return InfrastructurePerspective.aws;\n            }\n            if (this.isAzureAvailable()) {\n                return InfrastructurePerspective.azure;\n            }\n            if (this.isOciAvailable()) {\n                return InfrastructurePerspective.oci;\n            }\n            if (this.isGcpAvailable()) {\n                return InfrastructurePerspective.gcp;\n            }\n            if (this.isIbmAvailable()) {\n                return InfrastructurePerspective.ibm;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case OcpPerspective.ocp:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return OcpPerspective.ocp;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled, isOciFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp)) {\n                return null;\n            }\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: this.getCurrentTab() === OverviewTab.infrastructure, isOciFeatureEnabled: isOciFeatureEnabled, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { router } = this.props;\n            return `${router.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === OverviewTab.infrastructure) {\n                if (currentInfrastructurePerspective === InfrastructurePerspective.ocpCloud) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.aws) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.awsOcp) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azure) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azureOcp) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcp) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcpOcp) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.ibm) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.oci) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.ocp) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === OcpPerspective.ocp) {\n                    return hasData ? React.createElement(OcpDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === OverviewTab.infrastructure) {\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === OverviewTab.ocp) {\n                return intl.formatMessage(messages.openShift);\n            }\n        };\n        this.handleCostTypeSelected = () => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handleCurrencySelected = () => {\n            const { router, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { query, router } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === OverviewTab.infrastructure && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === OverviewTab.ocp && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { query, router } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isCurrencyFeatureEnabled, isIbmFeatureEnabled, isOciFeatureEnabled, userAccessFetchStatus, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === FetchStatus.complete &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable();\n        const isLoading = providersFetchStatus === FetchStatus.inProgress || userAccessFetchStatus === FetchStatus.inProgress;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    isOciFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && this.getCurrency())),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const perspective = queryFromRoute.perspective;\n    const isCurrencyFeatureEnabled = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state);\n    const currency = isCurrencyFeatureEnabled ? getCurrency() : undefined;\n    const isCostTypeFeatureEnabled = featureFlagsSelectors.selectIsCostTypeFeatureEnabled(state);\n    const costType = perspective === InfrastructurePerspective.aws ||\n        (perspective === InfrastructurePerspective.awsOcp && isCostTypeFeatureEnabled)\n        ? getCostType()\n        : undefined;\n    const query = Object.assign({ tabKey }, (perspective && { perspective }));\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, UserAccessType.all, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, UserAccessType.all, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, UserAccessType.all, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, ProviderType.aws),\n        azureProviders: filterProviders(providers, ProviderType.azure),\n        gcpProviders: filterProviders(providers, ProviderType.gcp),\n        ibmProviders: filterProviders(providers, ProviderType.ibm),\n        isCostTypeFeatureEnabled,\n        isCurrencyFeatureEnabled,\n        isFINsightsFeatureEnabled: featureFlagsSelectors.selectIsFINsightsFeatureEnabled(state),\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        isOciFeatureEnabled: featureFlagsSelectors.selectIsOciFeatureEnabled(state),\n        ociProviders: filterProviders(providers, ProviderType.oci),\n        ocpProviders: filterProviders(providers, ProviderType.ocp),\n        costType,\n        currency,\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OverviewBase)));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","// eslint-disable-next-line no-shadow\nvar DataType;\n(function (DataType) {\n    DataType[\"currentMonthData\"] = \"current_month_data\";\n    DataType[\"hasData\"] = \"has_data\";\n    DataType[\"previousMonthData\"] = \"previous_month_data\";\n})(DataType || (DataType = {}));\n// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.currentMonthData);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.hasData);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.previousMonthData);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, DataType.currentMonthData);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, DataType.hasData);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, DataType.previousMonthData);\n};\n","import { intl } from 'components/i18n';\nimport { endOfMonth, format, startOfMonth } from 'date-fns';\nimport messages from 'locales/messages';\nexport const formatDate = (date, isFormatted = true) => {\n    return date && isFormatted ? format(date, 'yyyy-MM-dd') : date;\n};\nexport const formatStartEndDate = (startDate, endDate, isFormatted = true) => {\n    return {\n        end_date: formatDate(endDate, isFormatted),\n        start_date: formatDate(startDate, isFormatted),\n    };\n};\nexport const getToday = (hrs = 0, min = 0, sec = 0, ms = 0) => {\n    const today = new Date();\n    today.setHours(hrs);\n    today.setMinutes(min);\n    today.setSeconds(sec);\n    today.setMilliseconds(ms);\n    return today;\n};\nexport const getNoDataForDateRangeString = (message = messages.noDataForDate, offset = 1) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(1);\n    if (offset) {\n        startDate.setMonth(startDate.getMonth() - offset);\n        endDate.setMonth(endDate.getMonth() - offset);\n    }\n    const dateRange = intl.formatDateTimeRange(startDate, endDate, {\n        day: 'numeric',\n        month: 'long',\n    });\n    return intl.formatMessage(message, { dateRange });\n};\nexport const getForDateRangeString = (value, message = messages.forDate, offset = 1) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(1);\n    if (offset) {\n        startDate.setMonth(startDate.getMonth() - offset);\n        endDate.setMonth(endDate.getMonth() - offset);\n    }\n    const dateRange = intl.formatDateTimeRange(startDate, endDate, {\n        day: 'numeric',\n        month: 'long',\n    });\n    return intl.formatMessage(message, { dateRange, value });\n};\nexport const getSinceDateRangeString = (message = messages.sinceDate) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(1);\n    const dateRange = intl.formatDateTimeRange(startDate, endDate, {\n        day: 'numeric',\n        month: 'long',\n    });\n    return intl.formatMessage(message, { dateRange });\n};\nexport const getTotalCostDateRangeString = (value, message = messages.breakdownTotalCostDate) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(1);\n    const dateRange = intl.formatDateTimeRange(startDate, endDate, {\n        day: 'numeric',\n        month: 'long',\n    });\n    return intl.formatMessage(message, { dateRange, value });\n};\nexport const getMonthDate = (offset, isFormatted = true) => {\n    const today = getToday();\n    if (offset) {\n        today.setDate(1); // Required to obtain correct month\n        today.setMonth(today.getMonth() - offset);\n    }\n    return formatStartEndDate(startOfMonth(today), offset ? endOfMonth(today) : today, isFormatted);\n};\nexport const getCurrentMonthDate = (isFormatted = true) => {\n    return getMonthDate(0, isFormatted);\n};\n// Returns offset + 1 days, including today's date. See https://issues.redhat.com/browse/COST-1117\nexport const getLastDaysDate = (offset, isFormatted = true) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(startDate.getDate() - offset);\n    return formatStartEndDate(startDate, endDate, isFormatted);\n};\n// Returns 31 days, including today's date\nexport const getLast30DaysDate = (isFormatted = true) => {\n    return getLastDaysDate(30, isFormatted);\n};\n// Returns 61 days, including today's date\nexport const getLast60DaysDate = (isFormatted = true) => {\n    return getLastDaysDate(60, isFormatted);\n};\n// Returns 91 days, including today's date\nexport const getLast90DaysDate = (isFormatted = true) => {\n    return getLastDaysDate(90, isFormatted);\n};\n","import { UserAccessType } from 'api/userAccess';\nconst hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.aws);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.azure);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.oci);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.cost_model);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.gcp);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, UserAccessType.gcp) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ocp);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n"],"names":["getProvidersQuery","query","stringify","encode","indices","getUserAccessQuery","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","currency","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CurrencyConnect","connect","injectIntl","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","Button","onClick","window","location","reload","NoDataState","title","PageHeader","PageHeaderTitle","Main","src","alt","iconSpacer","marginLeft","viewSources","marginTop","global_spacer_lg","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","titleKey","component","NoProvidersState","perspectiveSelector","perspectiveLabel","perspectiveOptionLabel","PerspectiveSelectBase","currentItem","length","onSelected","PerspectiveSelect","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","isOciFeatureEnabled","hasOcp","hasOcpCloud","isInfrastructureTab","undefined","costType","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","default","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","Comparison","DashboardWidgetBase","activeTabKey","currentComparison","cumulative","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","getFormattedUnits","cumulativeTitle","dailyTitleKey","daily","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","type","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","componentDidUpdate","prevProps","widget","awsDashboard","queries","featureFlags","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","ociDashboard","OciDashboardWidget","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","headerContent","justifyContent","headerContentLeft","headerContentRight","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","InfrastructurePerspective","OcpPerspective","OverviewTab","ocp","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","getCostType","isCostTypeFeatureEnabled","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","awsOcp","handleCostTypeSelected","getCurrency","handleCurrencySelected","showInfrastructureOnly","getDefaultInfrastructurePerspective","perspective","azure","oci","azureOcp","gcp","gcpOcp","ibm","ibmOcp","ocpCloud","getDefaultOcpPerspective","ocpProviders","userAccess","getPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getRouteForQuery","router","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","emptyTab","noData","hasData","newQuery","JSON","parse","navigate","replace","tabKey","providers","providersFetchStatus","isCurrencyFeatureEnabled","userAccessFetchStatus","noProviders","isLoading","TitleSizes","Popover","enableFlip","bodyContent","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","providersQueryString","providersError","userAccessQueryString","userAccessError","isFINsightsFeatureEnabled","DataType","_getOcpProvider","uuid","result","provider","filterProviders","sourceType","source_type","toLowerCase","_hasData","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","currentMonthData","hasCloudData","hasCloudPreviousMonthData","previousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasPreviousMonthData","formatDate","isFormatted","formatStartEndDate","startDate","endDate","end_date","start_date","getToday","hrs","min","sec","ms","today","setHours","setMinutes","setSeconds","setMilliseconds","getNoDataForDateRangeString","message","offset","setDate","setMonth","dateRange","day","month","getForDateRangeString","getSinceDateRangeString","getTotalCostDateRangeString","getCurrentMonthDate","getMonthDate","getLastDaysDate","getDate","getLast30DaysDate","getLast60DaysDate","getLast90DaysDate","hasAccess","userAccessType","Array","isArray","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasOciAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess"],"sourceRoot":""}