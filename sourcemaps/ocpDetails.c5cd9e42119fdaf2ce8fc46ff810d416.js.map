{"version":3,"file":"js/ocpDetails.af39508de382a84f2f66.js","mappings":"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","sources":["webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsOptimization.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.tsx"],"sourcesContent":["import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { CostDistribution } from 'routes/views/components/costDistribution';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { costDistribution, currency, groupBy, isCostDistributionFeatureEnabled, isExportsFeatureEnabled, onCostDistributionSelected, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const showCostDistribution = groupBy === 'project' && report && report.meta && report.meta.distributed_overhead === true;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost[reportItemValue];\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost[reportItemValue].value : 0, hasCost ? report.meta.total.cost[reportItemValue].units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagPathsType: tagPathsType }),\n                    showCostDistribution && isCostDistributionFeatureEnabled && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected })))),\n                showContent && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCostDistributionFeatureEnabled: featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { getQuery } from 'api/queries/query';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { formatPath } from 'utils/paths';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = RosPathsType.recommendations;\nconst reportType = RosType.ros;\nclass DetailsOptimization extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.getBreakdownLink = count => {\n            const { project, router } = this.props;\n            if (count === 0 || project === undefined) {\n                return count;\n            }\n            return (React.createElement(Link, { to: getBreakdownPath({\n                    basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                    groupBy: 'project',\n                    id: project,\n                    isOptimizationsTab: true,\n                    router,\n                    title: project,\n                }) }, count));\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        // Todo: Add link to breakdown page\n        return React.createElement(\"span\", null, this.getBreakdownLink(count));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const reportQuery = {\n        project, // project filter\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DetailsOptimization));\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { classificationDefault, classificationPlatform, classificationUnallocated, noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport DetailsOptimization from './detailsOptimization';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { costDistribution, groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, isRosFeatureEnabled, report, router, selectedItems, } = this.props;\n            if (!report) {\n                return;\n            }\n            const isGroupByProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                    },\n                    Object.assign({ orderBy: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: false })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const isOverheadCosts = costDistribution === ComputedReportItemValueType.distributed &&\n                    ((item.cost.platformDistributed && item.cost.platformDistributed.value > 0) ||\n                        (item.cost.workerUnallocatedDistributed && item.cost.workerUnallocatedDistributed.value > 0));\n                const isPlatformCosts = item.classification === classificationPlatform;\n                const isUnallocatedCosts = item.classification === classificationUnallocated;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}` || isUnallocatedCosts;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                        description: item.id,\n                        id: item.id,\n                        isPlatformCosts,\n                        groupBy,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !isGroupByProject,\n                            value: item.classification === classificationDefault ? (React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default))) : isOverheadCosts ? (React.createElement(Tooltip, { content: intl.formatMessage(messages.overheadDesc), enableFlip: true },\n                                React.createElement(Label, { variant: \"outline\", color: \"orange\" }, intl.formatMessage(messages.overhead)))) : (React.createElement(\"span\", { style: styles.defaultLabel })),\n                        },\n                        {\n                            hidden: !(isGroupByProject && isRosFeatureEnabled),\n                            value: !isPlatformCosts && !isDisabled && React.createElement(DetailsOptimization, { project: label }),\n                        },\n                        { value: monthOverMonth, id: DetailsTableColumnIds.monthOverMonth },\n                        {\n                            value: InfrastructureCost,\n                            id: DetailsTableColumnIds.infrastructure,\n                            style: styles.managedColumn,\n                        },\n                        {\n                            value: supplementaryCost,\n                            id: DetailsTableColumnIds.supplementary,\n                            style: styles.managedColumn,\n                        },\n                        { value: cost, style: styles.managedColumn },\n                        { value: actions },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.ocp, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { costDistribution, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const value = formatCurrency(Math.abs(item.cost[reportItemValue].value - item.delta_value), item.cost[reportItemValue].units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        showPercentage && item.delta_percent !== null && item.delta_value > 0 && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        showPercentage && item.delta_percent !== null && item.delta_value < 0 && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost[reportItemValue].value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost[reportItemValue].value, item.cost[reportItemValue].units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { costDistribution, hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.costDistribution !== costDistribution ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagType = TagType.tag;\nconst tagPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n        this.updateReport = () => {\n            const { fetchTag, tagQueryString } = this.props;\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            this.updateReport();\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { query, tagReport } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                this.updateReport();\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExcludes: true, showExport: true, showFilter: true, showPlatformCosts: groupBy === 'project', tagReport: tagReport, tagPathsType: tagPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100vh',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupById, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCostDistributionSelected, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostDistribution, getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    exclude: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { costDistribution, isRosFeatureEnabled, query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { costDistribution: costDistribution, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, isRosFeatureEnabled: isRosFeatureEnabled, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: undefined, category: undefined, delta: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router, } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { costDistribution: costDistribution, currency: currency, groupBy: groupById, onCostDistributionSelected: value => handleCostDistributionSelected(query, router, value), onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = queryFromRoute.group_by ? getGroupById(queryFromRoute) : getGroupById(baseQuery);\n    const isCostDistributionFeatureEnabled = featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state);\n    const costDistribution = groupBy === 'project' && isCostDistributionFeatureEnabled ? getCostDistribution() : undefined;\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign(Object.assign({}, baseQuery), (costDistribution === ComputedReportItemValueType.distributed && {\n        order_by: {\n            distributed_cost: 'desc',\n        },\n    })), queryFromRoute);\n    const reportQuery = {\n        category: query.category,\n        currency,\n        delta: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costDistribution,\n        currency,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OcpDetails)));\n"],"names":["styles","costDistribution","display","marginLeft","costValue","marginTop","marginBottom","costLabelUnit","fontSize","color","dateTitle","textAlign","header","backgroundColor","padding","headerContent","justifyContent","headerContentLeft","minHeight","headerContentRight","info","verticalAlign","infoIcon","infoTitle","fontWeight","title","paddingBottom","getIdKeyForGroupBy","groupBy","project","cluster","node","groupByOptions","label","value","tagPathsType","DetailsHeaderBase","constructor","super","arguments","this","defaultState","state","Object","assign","render","currency","isCostDistributionFeatureEnabled","isExportsFeatureEnabled","onCostDistributionSelected","onCurrencySelected","onGroupBySelected","providers","providersError","report","intl","props","showContent","meta","count","showCostDistribution","distributed_overhead","cost","supplementaryCost","infrastructureCost","reportItemValue","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","style","Title","headingLevel","size","TitleSizes","formatMessage","messages","onSelect","isDisabled","onSelected","options","showTags","Tooltip","content","enableFlip","mapStateToProps","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","injectIntl","connect","reportPathsType","reportType","DetailsOptimization","updateReport","fetchReport","reportQueryString","getBreakdownLink","router","undefined","Link","to","basePath","routes","id","isOptimizationsTab","componentDidMount","reportQuery","reportError","reportFetchStatus","mapDispatchToProps","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","groupByTagKey","hiddenColumns","isAllSelected","isRosFeatureEnabled","selectedItems","isGroupByProject","computedItems","idKey","name","hidden","orderBy","length","isSortable","map","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","isOverheadCosts","platformDistributed","workerUnallocatedDistributed","isPlatformCosts","classification","isUnallocatedCosts","desc","actions","getActions","description","toString","push","cells","Label","variant","selected","find","val","selectionDisabled","filteredColumns","filter","column","has","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","setState","providerType","showPriceListOption","percentValue","toFixed","key","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","tagType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","onPlatformCostsChanged","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExcludes","showExport","showFilter","showPlatformCosts","resolution","time_scope_units","time_scope_value","key_only","limit","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","global_spacer_lg","paddingTop","ocpDetails","paginationContainer","marginRight","global_BackgroundColor_light_100","global_spacer_md","tableContainer","toolbarContainer","baseQuery","offset","filter_by","exclude","group_by","order_by","defaultColumnOptions","OcpDetails","stateProps","dispatchProps","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","option","isOpen","onClose","handleColumnManagementModalClose","onSave","handleColumnManagementModalSave","getComputedItems","groupById","getExportModal","items","isAllItems","handleExportModalClose","getPagination","isBottom","page","trunc","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handlePlatformCostsChanged","action","handleGroupBySelected","groupByKey","newQuery","parse","category","delta","navigate","location","replace","checked","isSelected","newItems","bind","prevState","noReport","noLocation","search","queryFromRoute","distributed_cost"],"sourceRoot":""}