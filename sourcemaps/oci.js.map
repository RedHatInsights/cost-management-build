{"version":3,"file":"js/oci.1667332042846.ae4fa54c1d984c6f3331.js","mappings":"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","sources":["webpack:///./src/routes/views/details/ociBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/ociBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/ociBreakdown/ociBreakdown.tsx","webpack:///./src/utils/computedReport/getComputedOciReportItems.ts","webpack:///./src/routes/views/details/ociDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/ociDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ociDetails/detailsTable.styles.ts","webpack:///./src/routes/views/details/ociDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ociDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ociDetails/ociDetails.styles.ts","webpack:///./src/routes/views/details/ociDetails/ociDetails.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ociCostOverviewSelectors } from 'store/breakdown/costOverview/ociCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ociCostOverviewSelectors.selectWidgets(state),\n        widgets: ociCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ociHistoricalDataSelectors } from 'store/breakdown/historicalData/ociHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ociHistoricalDataSelectors.selectWidgets(state),\n        widgets: ociHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ociDetails;\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.oci;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, newQuery), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { currency: currency, groupBy: groupBy, report: report }),\n        currency,\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.ociDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.oci),\n        providersError,\n        providersFetchStatus,\n        providerType: ProviderType.oci,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: TagPathsType.oci,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OciCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OciCost;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.payer_tenant_id) {\n        return 'payer_tenant_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.product_service) {\n        return 'product_service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery } from 'api/queries/ociQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOciReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'payer_tenant_id', value: 'payer_tenant_id' },\n    { label: 'product_service', value: 'product_service' },\n    { label: 'region', value: 'region' },\n];\nconst tagReportPathsType = TagPathsType.oci;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ociDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.oci),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './ociDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/ociQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOciReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = ReportPathsType.oci;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ociDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.ociDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ociQuery';\nimport { tagKey } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.oci;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'payer_tenant_id' }),\n                    key: 'payer_tenant_id',\n                },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'product_service' }),\n                    key: 'product_service',\n                },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'region' }),\n                    key: 'region',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.oci, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReportFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    ociDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ociQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getRouteForQuery, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/history';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOciReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ociDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        payer_tenant_id: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.oci;\nclass OciDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { history, intl, query, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(history, query, perPage), onSetPage: (event, pageNumber) => handleSetPage(history, query, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.oci),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { history, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(history, query, sortType, isSortAscending), query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { history, query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(history, query, filter), onFilterRemoved: filter => handleFilterRemoved(history, query, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, history, location, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, history, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.ociDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.oci, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ociDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(history, query, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.oci),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OciDetails));\n"],"names":["mapStateToProps","state","props","selectWidgets","ociCostOverview","widgets","CostOverview","injectIntl","connect","ociHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","currency","featureFlags","undefined","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","exclude","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","payer_tenant_id","region","product_service","styles","costValue","marginTop","global_spacer_lg","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","headerContent","display","justifyContent","headerContentLeft","minHeight","headerContentRight","paddingBottom","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","onSelect","isDisabled","onSelected","options","showTags","Boolean","format","units","DetailsHeader","emptyState","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","sortBy","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","ociDetails","content","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","offset","OciDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","history","page","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","parse","replace","newItems","updateReport","prevState","noReport","noLocation","queryFromRoute"],"sourceRoot":""}