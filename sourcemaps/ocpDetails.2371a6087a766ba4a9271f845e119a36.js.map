{"version":3,"file":"js/ocpDetails.e12f3baf63b762172069.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_FontSize_md.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_FontSize_xs.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_disabled_color_100.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_spacer_3xl.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_spacer_xs.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Unavailable/Unavailable.js","webpack:///./src/routes/components/icons/optimizationIcon/optimizationIcon.tsx","webpack:///./src/routes/state/noOptimizations/noOptimizationsState.tsx","webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/columnManagement/columnManagementModal.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsOptimization.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.tsx","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);\n\nexport default ExternalLinkAltIcon;","\"use strict\";\nexports.__esModule = true;\nexports.global_FontSize_md = {\n  \"name\": \"--pf-global--FontSize--md\",\n  \"value\": \"1rem\",\n  \"var\": \"var(--pf-global--FontSize--md)\"\n};\nexports[\"default\"] = exports.global_FontSize_md;","\"use strict\";\nexports.__esModule = true;\nexports.global_FontSize_xs = {\n  \"name\": \"--pf-global--FontSize--xs\",\n  \"value\": \"0.75rem\",\n  \"var\": \"var(--pf-global--FontSize--xs)\"\n};\nexports[\"default\"] = exports.global_FontSize_xs;","\"use strict\";\nexports.__esModule = true;\nexports.global_disabled_color_100 = {\n  \"name\": \"--pf-global--disabled-color--100\",\n  \"value\": \"#6a6e73\",\n  \"var\": \"var(--pf-global--disabled-color--100)\"\n};\nexports[\"default\"] = exports.global_disabled_color_100;","\"use strict\";\nexports.__esModule = true;\nexports.global_spacer_3xl = {\n  \"name\": \"--pf-global--spacer--3xl\",\n  \"value\": \"4rem\",\n  \"var\": \"var(--pf-global--spacer--3xl)\"\n};\nexports[\"default\"] = exports.global_spacer_3xl;","\"use strict\";\nexports.__esModule = true;\nexports.global_spacer_xs = {\n  \"name\": \"--pf-global--spacer--xs\",\n  \"value\": \"0.25rem\",\n  \"var\": \"var(--pf-global--spacer--xs)\"\n};\nexports[\"default\"] = exports.global_spacer_xs;","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport '../Unavailable/Unavailable.css';\nvar Unavailable = function () {\n    return (_jsxs(EmptyState, __assign({ variant: EmptyStateVariant.large, className: \"ins-c-empty-state__unavailable pf-m-redhat-font\" }, { children: [_jsx(EmptyStateIcon, { icon: ExclamationCircleIcon }), _jsx(Title, __assign({ headingLevel: \"h5\", size: \"lg\" }, { children: \"This page is temporarily unavailable\" })), _jsxs(EmptyStateBody, { children: [\"Try refreshing the page. If the problem persists, contact your organization administrator or visit our\", _jsxs(\"a\", __assign({ href: \"https://status.redhat.com/\", target: \"_blank\", rel: \"noopener noreferrer\" }, { children: [' ', \"status page\"] })), ' ', \"for known outages.\"] })] })));\n};\nexport default Unavailable;\n//# sourceMappingURL=Unavailable.js.map","import './optimizationIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Red_Hat-IT_Optimization-Gray.svg');\nconst OptimizationIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `optimization-icon ${className}`, src: icon, alt: intl.formatMessage(messages.optimizations), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(OptimizationIcon);\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title, TitleSizes, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { OptimizationIcon } from 'routes/components/icons/optimizationIcon';\nclass NoOptimizationsStateBase extends React.Component {\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: OptimizationIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes.lg }, intl.formatMessage(messages.noOptimizationsTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noOptimizationsDesc))));\n    }\n}\nconst NoOptimizationsState = injectIntl(NoOptimizationsStateBase);\nexport { NoOptimizationsState };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, item: { source_uuid }, redirectToCostModel, router, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], router) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.manageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.selectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.manageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.manageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": `${option.value}Label`, isChecked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: `${option.value}Label`, key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport default ColumnManagementModal;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingRight: 0,\n    },\n    defaultLabel: {\n        minWidth: '50px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    lastItem: {\n        textAlign: 'right',\n        paddingRight: '3.8rem',\n    },\n    lastItemColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    managedColumn: {\n        textAlign: 'right',\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import './dataTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, TableVariant, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { NoOptimizationsState } from 'routes/state/noOptimizations/noOptimizationsState';\nimport { withRouter } from 'utils/router';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl, isOptimizations, router } = this.props;\n            const queryFromRoute = parseQuery(router.location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            if (isOptimizations) {\n                return React.createElement(NoOptimizationsState, null);\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns, router } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(router.location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnRowClick = (event, rowIndex) => {\n            const { onRowClick, rows } = this.props;\n            rows.map(row => (row.selected = false));\n            rows[rowIndex].selected = true;\n            this.setState({ rows }, () => {\n                if (onRowClick) {\n                    onRowClick(event, rowIndex);\n                }\n            });\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isActionsCell = false, isLoading, isOptimizations, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), className: \"tableOverride\", gridBreakPoint: \"grid-2xl\", hasSelectableRowCaption: isOptimizations, variant: TableVariant.compact },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { isSelectable: isOptimizations, isHoverable: isOptimizations, isRowSelected: isOptimizations && row.selected, onRowClick: isOptimizations ? _event => this.handleOnRowClick(_event, rowIndex) : undefined, key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 && !isOptimizations ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    }, style: item.style })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: isActionsCell && cellIndex === row.cells.length - 1, style: item.style }, item.value))))))))),\n            rows.length === 0 && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(withRouter(DataTable));\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { CostDistribution } from 'routes/views/components/costDistribution';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { costDistribution, currency, groupBy, isCostDistributionFeatureEnabled, isExportsFeatureEnabled, onCostDistributionSelected, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const showCostDistribution = groupBy === 'project' && report && report.meta && report.meta.distributed_overhead === true;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost[reportItemValue];\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost[reportItemValue].value : 0, hasCost ? report.meta.total.cost[reportItemValue].units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagPathsType: tagPathsType }),\n                    showCostDistribution && isCostDistributionFeatureEnabled && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected })))),\n                showContent && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCostDistributionFeatureEnabled: featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { getQuery } from 'api/queries/query';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { formatPath } from 'utils/paths';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = RosPathsType.recommendations;\nconst reportType = RosType.ros;\nclass DetailsOptimization extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.getBreakdownLink = count => {\n            const { project, router } = this.props;\n            if (count === 0 || project === undefined) {\n                return count;\n            }\n            return (React.createElement(Link, { to: getBreakdownPath({\n                    basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                    groupBy: 'project',\n                    id: project,\n                    isOptimizationsTab: true,\n                    router,\n                    title: project,\n                }) }, count));\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        // Todo: Add link to breakdown page\n        return React.createElement(\"span\", null, this.getBreakdownLink(count));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const reportQuery = {\n        project, // project filter\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DetailsOptimization));\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { classificationDefault, classificationPlatform, classificationUnallocated, noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport DetailsOptimization from './detailsOptimization';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { costDistribution, groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, isRosFeatureEnabled, report, router, selectedItems, } = this.props;\n            if (!report) {\n                return;\n            }\n            const isGroupByProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                    },\n                    Object.assign({ orderBy: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: false })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const isOverheadCosts = costDistribution === ComputedReportItemValueType.distributed &&\n                    ((item.cost.platformDistributed && item.cost.platformDistributed.value > 0) ||\n                        (item.cost.workerUnallocatedDistributed && item.cost.workerUnallocatedDistributed.value > 0));\n                const isPlatformCosts = item.classification === classificationPlatform;\n                const isUnallocatedCosts = item.classification === classificationUnallocated;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}` || isUnallocatedCosts;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                        description: item.id,\n                        id: item.id,\n                        isPlatformCosts,\n                        groupBy,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !isGroupByProject,\n                            value: item.classification === classificationDefault ? (React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default))) : isOverheadCosts ? (React.createElement(Tooltip, { content: intl.formatMessage(messages.overheadDesc), enableFlip: true },\n                                React.createElement(Label, { variant: \"outline\", color: \"orange\" }, intl.formatMessage(messages.overhead)))) : (React.createElement(\"span\", { style: styles.defaultLabel })),\n                        },\n                        {\n                            hidden: !(isGroupByProject && isRosFeatureEnabled),\n                            value: !isPlatformCosts && !isDisabled && React.createElement(DetailsOptimization, { project: label }),\n                        },\n                        { value: monthOverMonth, id: DetailsTableColumnIds.monthOverMonth },\n                        {\n                            value: InfrastructureCost,\n                            id: DetailsTableColumnIds.infrastructure,\n                            style: styles.managedColumn,\n                        },\n                        {\n                            value: supplementaryCost,\n                            id: DetailsTableColumnIds.supplementary,\n                            style: styles.managedColumn,\n                        },\n                        { value: cost, style: styles.managedColumn },\n                        { value: actions },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.ocp, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { costDistribution, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const value = formatCurrency(Math.abs(item.cost[reportItemValue].value - item.delta_value), item.cost[reportItemValue].units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        showPercentage && item.delta_percent !== null && item.delta_value > 0 && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        showPercentage && item.delta_percent !== null && item.delta_value < 0 && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost[reportItemValue].value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost[reportItemValue].value, item.cost[reportItemValue].units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { costDistribution, hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.costDistribution !== costDistribution ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isActionsCell: true, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagType = TagType.tag;\nconst tagPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n        this.updateReport = () => {\n            const { fetchTag, tagQueryString } = this.props;\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            this.updateReport();\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { query, tagReport } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                this.updateReport();\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExcludes: true, showExport: true, showFilter: true, showPlatformCosts: groupBy === 'project', tagReport: tagReport, tagPathsType: tagPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100vh',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupById, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleOnCostDistributionSelected, handleOnCurrencySelected, handleOnFilterAdded, handleOnFilterRemoved, handleOnPerPageSelect, handleOnSetPage, handleOnSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostDistribution, getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    exclude: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handleOnPerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleOnSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { costDistribution, isRosFeatureEnabled, query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { costDistribution: costDistribution, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, isRosFeatureEnabled: isRosFeatureEnabled, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleOnSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleOnFilterAdded(query, router, filter), onFilterRemoved: filter => handleOnFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: undefined, category: undefined, delta: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router, } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { costDistribution: costDistribution, currency: currency, groupBy: groupById, onCostDistributionSelected: value => handleOnCostDistributionSelected(query, router, value), onCurrencySelected: value => handleOnCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = queryFromRoute.group_by ? getGroupById(queryFromRoute) : getGroupById(baseQuery);\n    const isCostDistributionFeatureEnabled = featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state);\n    const costDistribution = groupBy === 'project' && isCostDistributionFeatureEnabled ? getCostDistribution() : undefined;\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign(Object.assign({}, baseQuery), (costDistribution === ComputedReportItemValueType.distributed && {\n        order_by: {\n            distributed_cost: 'desc',\n        },\n    })), queryFromRoute);\n    const reportQuery = {\n        category: query.category,\n        currency,\n        delta: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costDistribution,\n        currency,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OcpDetails)));\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n"],"names":["ExternalLinkAltIconConfig","name","height","width","svgPath","yOffset","xOffset","ExternalLinkAltIcon","exports","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","EmptyState","variant","EmptyStateVariant","className","children","EmptyStateIcon","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","href","target","rel","injectIntl","intl","src","alt","formatMessage","messages","NoOptimizationsStateBase","render","props","TitleSizes","NoOptimizationsState","DetailsActionsBase","constructor","stateProps","dispatchProps","super","defaultState","isDropdownOpen","isExportModalOpen","state","getExportModal","groupBy","item","reportPathsType","reportQueryString","count","isOpen","items","onClose","handleExportModalClose","setState","handleExportModalOpen","handleOnSelect","handleOnToggle","bind","isDisabled","showPriceListOption","source_uuid","redirectToCostModel","router","DropdownItem","component","key","onClick","unshift","includes","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","mapStateToProps","mapDispatchToProps","costModels","DetailsActionsConnect","connect","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","getHidden","result","delete","isHidden","has","handleChange","checked","event","id","handleClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","Modal","description","TextContent","Text","TextVariants","Button","isInline","title","ModalVariant","actions","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","isChecked","onChange","DataListItemCells","dataListCells","DataListCell","label","ColumnManagementModalConnect","styles","costColumn","textAlign","display","justifyContent","paddingRight","defaultLabel","minWidth","emptyState","backgroundColor","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","color","fontSize","lastItem","lastItemColumn","managedColumn","nameColumn","DataTable","getEmptyState","isOptimizations","queryFromRoute","location","search","filter_by","val","values","filter","showMargin","getSortBy","index","columns","orderBy","direction","order_by","getSortParams","sortBy","onSort","handleOnSort","columnIndex","isSelected","rowId","onSelected","rows","newRows","row","selected","SortByDirection","handleOnRowClick","rowIndex","onRowClick","isActionsCell","isLoading","TableComposable","gridBreakPoint","hasSelectableRowCaption","TableVariant","Thead","Tr","col","Th","modifier","sort","isSortable","undefined","style","Tbody","Td","colSpan","Bullseye","Spinner","isSelectable","isHoverable","isRowSelected","_event","cells","cellIndex","dataLabel","isActionCell","select","disable","selectionDisabled","costDistribution","marginLeft","costValue","marginTop","marginBottom","costLabelUnit","dateTitle","header","padding","headerContent","headerContentLeft","minHeight","headerContentRight","info","verticalAlign","infoIcon","infoTitle","fontWeight","paddingBottom","groupByOptions","tagPathsType","DetailsHeaderBase","currency","isCostDistributionFeatureEnabled","isExportsFeatureEnabled","onCostDistributionSelected","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","showCostDistribution","distributed_overhead","cost","supplementaryCost","infrastructureCost","reportItemValue","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","getIdKeyForGroupBy","showTags","Tooltip","content","enableFlip","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","reportType","DetailsOptimization","updateReport","fetchReport","getBreakdownLink","project","Link","to","basePath","routes","isOptimizationsTab","componentDidMount","reportQuery","reportError","reportFetchStatus","DetailsTableColumnIds","DetailsTableBase","initDatum","groupByTagKey","isAllSelected","isRosFeatureEnabled","selectedItems","isGroupByProject","computedItems","idKey","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","isOverheadCosts","platformDistributed","workerUnallocatedDistributed","isPlatformCosts","classification","isUnallocatedCosts","desc","getActions","toString","push","Label","find","filteredColumns","column","filteredRows","_a","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","cell","providerType","percentValue","toFixed","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","currentReport","data","JSON","stringify","DetailsTable","tagType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","onPlatformCostsChanged","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExcludes","showExport","showFilter","showPlatformCosts","resolution","time_scope_units","time_scope_value","key_only","limit","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","global_spacer_lg","ocpDetails","paginationContainer","marginRight","global_BackgroundColor_light_100","global_spacer_md","tableContainer","toolbarContainer","baseQuery","offset","exclude","group_by","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","groupById","isAllItems","getPagination","isBottom","page","trunc","Pagination","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handlePlatformCostsChanged","action","handleGroupBySelected","groupByKey","newQuery","parse","category","delta","navigate","replace","newItems","prevState","noReport","noLocation","distributed_cost","cluster","node"],"sourceRoot":""}