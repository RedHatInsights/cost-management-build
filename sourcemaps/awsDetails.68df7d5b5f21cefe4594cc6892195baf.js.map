{"version":3,"file":"js/awsDetails.f4d86e43bc3ac52f909d.js","mappings":"sJAEO,MAAMA,EAA4B,CACvCC,KAAM,sBACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,0VACTC,QAAS,EACTC,QAAS,GAGEC,GAAsB,QAAWP,GAE9C,G,gBCXAQ,EAAQ,GAAmB,CACzB,KAAQ,0BACR,MAAS,UACT,IAAO,gCAETA,EAAA,GAAqBA,EAAQ,E,4FCH7B,MAAMC,EAAO,EAAQ,OAIrB,GAAe,EAAAC,EAAA,KAHU,EAAGC,YAAWC,UAC3B,kBAAoB,MAAO,CAAED,UAAW,qBAAqBA,IAAaE,IAAKJ,EAAMK,IAAKF,EAAKG,cAAcC,EAAA,iBAAyB,cAAe,WCDjK,MAAMC,UAAiC,cACnCC,SACI,MAAM,KAAEN,GAASO,KAAKC,MACtB,OAAQ,kBAAoB,EAAAC,WAAY,CAAEC,QAAS,EAAAC,kBAAA,MAAyBZ,UAAW,oBACnF,kBAAoB,EAAAa,eAAgB,CAAEf,KAAM,IAC5C,kBAAoB,EAAAgB,MAAO,CAAEC,aAAc,KAAMC,KAAM,MAAQf,EAAKG,cAAcC,EAAA,yBAClF,kBAAoB,EAAAY,eAAgB,KAAMhB,EAAKG,cAAcC,EAAA,wBACrE,EAEJ,MAAMa,GAAuB,EAAAnB,EAAA,IAAWO,E,oVCdjC,SAASa,EAAmBC,EAAU,CAAC,GAC1C,OAAIA,EAAQC,QACD,UAEPD,EAAQE,aACD,eAEPF,EAAQG,YACD,cAEPH,EAAQI,OACD,SAEPJ,EAAQK,QACD,UAEJ,MACX,C,gFCdO,MAAMC,EAAS,CAClBC,WAAY,CACRC,UAAW,QAEfC,QAAS,CACLC,cAAeC,EAAA,SACfC,WAAYD,EAAA,UAEhBE,oBAAqB,CACjBC,WAAYH,EAAA,SACZI,YAAaJ,EAAA,UAEjBK,WAAY,CACRC,gBAAiBC,EAAA,SACjBR,cAAeS,EAAA,SACfP,WAAYO,EAAA,UAEhBC,eAAgB,CACZN,WAAYH,EAAA,SACZI,YAAaJ,EAAA,UAEjBU,iBAAkB,CACdP,WAAYH,EAAA,SACZI,YAAaJ,EAAA,W,kJCpBd,MAAM,EAAS,CAClBW,cAAe,CACXC,SAAUC,EAAA,SACVC,MAAOC,EAAA,QAEXC,SAAU,CACNC,QAAS,OACTd,WAAYK,EAAA,QAEhBU,UAAW,CACPC,UAAWnB,EAAA,OACXoB,aAAc,GAElBC,UAAW,CACPC,UAAW,OAEfC,OAAQ,CACJjB,gBAAiBC,EAAA,OACjBiB,QAASxB,EAAA,QAEbyB,cAAe,CACXR,QAAS,OACTS,eAAgB,iBAEpBC,kBAAmB,CACfV,QAAS,OACTpB,UAAW,QAEf+B,mBAAoB,CAChBX,QAAS,QAEbY,MAAO,CACH9B,cAAe+B,EAAA,SChBjBC,EAAiB,CACnB,CAAEC,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,SAAUC,MAAO,WAExBC,EAAe,QACfC,EAAoB,QACpBC,EAAe,QACrB,MAAMC,UAA0B,cAC5BC,cACIC,SAASC,WACT/D,KAAKgE,uBAA0BR,IAC3B,MAAM,mBAAES,GAAuBjE,KAAKC,MAChCgE,GACAA,EAAmBT,EACvB,CAER,CACAzD,SACI,MAAM,SAAEwC,EAAQ,SAAE2B,EAAQ,QAAEtD,EAAO,wBAAEuD,EAAuB,mBAAEC,EAAkB,kBAAEC,EAAiB,UAAEC,EAAS,eAAEC,EAAc,OAAEC,EAAM,KAAE/E,GAAUO,KAAKC,MACjJwE,EAAcD,IAAWD,GAAkBD,GAAaA,EAAUI,MAAQJ,EAAUI,KAAKC,MAAQ,EACjGC,EAAUJ,GAAUA,EAAOE,MAAQF,EAAOE,KAAKG,OAASL,EAAOE,KAAKG,MAAMC,MAAQN,EAAOE,KAAKG,MAAMC,KAAKD,MAC/G,OAAQ,kBAAoB,SAAU,CAAEE,MAAO,UAC3C,kBAAoB,MAAO,CAAEA,MAAO,iBAChC,kBAAoB,EAAAzE,MAAO,CAAEC,aAAc,KAAMwE,MAAO,QAAcvE,KAAM,EAAAwE,WAAA,QAAqBvF,EAAKG,cAAcC,EAAA,oBACpH,kBAAoB,MAAO,CAAEkF,MAAO,sBAChC,kBAAoB,IAAU,CAAEb,SAAUA,EAAUe,SAAUb,IAC9DD,GAA2B,kBAAoB,KAAa,QACpE,kBAAoB,MAAO,CAAEY,MAAO,iBAChC,kBAAoB,MAAO,CAAEA,MAAO,qBAChC,kBAAoB,IAAS,CAAEpE,mBAAoBA,EAAoBC,QAASA,EAASsE,YAAaT,EAAaU,WAAYd,EAAmBe,QAAS9B,EAAgBG,aAAcA,EAAcC,kBAAmBA,EAAmB2B,oBAAoB,EAAMC,UAAU,EAAMC,UAAU,EAAM5B,aAAcA,IACrT,kBAAoB,MAAO,CAAEoB,MAAO,YAChC,kBAAoB,IAAU,CAAExC,SAAUA,EAAU0C,SAAUjF,KAAKgE,2BAC3ES,GAAgB,kBAAoB,MAAO,KACvC,kBAAoB,EAAAnE,MAAO,CAAEC,aAAc,KAAMwE,MAAO,YAAkBvE,KAAM,EAAAwE,WAAA,SAAqB,EAAAQ,EAAA,IAAeZ,EAAUJ,EAAOE,KAAKG,MAAMC,KAAKD,MAAMrB,MAAQ,EAAGoB,EAAUJ,EAAOE,KAAKG,MAAMC,KAAKD,MAAMY,MAAQ,QACrN,kBAAoB,MAAO,CAAEV,MAAO,cAAoB,aACxE,EAGJ,MAAMW,GAAkB,SAAsB,CAACC,EAAO1F,KAClD,MAAM2F,GAAuB,OAAkB,MACzCtB,EAAY,qBAAmCqB,EAAO,QAAkBC,GACxErB,EAAiB,0BAAwCoB,EAAO,QAAkBC,GAClFC,EAAuB,gCAA8CF,EAAO,QAAkBC,GACpG,MAAO,CACHzB,wBAAyB2B,EAAA,iCAAoDH,GAC7ErB,WAAW,QAAgBA,EAAW,SACtCC,iBACAsB,uBACAD,uBACH,IAECG,IAAgB,EAAAxG,EAAA,KAAW,IAAAyG,SAAQN,EAAiB,CAAC,EAA1B,CAA6B9B,I,oGCxD9D,MAAMqC,GAAkB,QACxB,MAAMC,WAAyB,cAC3BrC,cACIC,SAASC,WACT/D,KAAK2F,MAAQ,CACTQ,QAAS,GACTC,KAAM,IAEVpG,KAAKqG,UAAY,KACb,MAAM,QAAEzF,EAAO,oBAAE0F,EAAmB,WAAEC,EAAU,cAAEC,EAAa,KAAE/G,EAAI,cAAEgH,EAAa,OAAEjC,EAAM,OAAEkC,EAAM,cAAEC,GAAmB3G,KAAKC,MAC9H,IAAKuE,EACD,OAEJ,MAAM4B,EAAO,GACPQ,GAAgB,OAA+B,CACjDpC,SACAqC,MAAQP,GAEFE,IAEID,EACI,eACA3F,KAEZuF,EAAUG,GAAuBE,GAAiBD,EAClD,CACE,CACIzH,KAAM,IAEV,CACIA,KAAMwH,EACA7G,EAAKG,cAAcC,EAAA,qBACnB0G,EACI9G,EAAKG,cAAcC,EAAA,QAAgB,CAAE8E,MAAO,IAC5ClF,EAAKG,cAAcC,EAAA,aAEjC,CACIf,KAAMW,EAAKG,cAAcC,EAAA,yBAE7BiH,OAAOC,OAAO,CAAEC,QAAS,OAAQlI,KAAMW,EAAKG,cAAcC,EAAA,QAAgBkF,MAAO,iBAAsB6B,EAAcK,QAAU,CAAEC,YAAY,IAC7I,CACIpI,KAAM,KAGZ,CACE,CACIA,KAAM,IAEVgI,OAAOC,OAAO,CAAEC,QAAqB,YAAZpG,EAAwB,gBAAkBA,EAAS9B,KAAMW,EAAKG,cAAcC,EAAA,uBAA+B,CAAE2D,MAAO5C,KAAegG,EAAcK,QAAU,CAAEC,YAAY,IAClM,CACIpI,KAAMW,EAAKG,cAAcC,EAAA,yBAE7BiH,OAAOC,OAAO,CAAEC,QAAS,OAAQlI,KAAMW,EAAKG,cAAcC,EAAA,QAAgBkF,MAAO,iBAAsB6B,EAAcK,QAAU,CAAEC,YAAY,IAC7I,CACIpI,KAAM,KAGlB8H,EAAcO,KAAI,CAACC,EAAMC,KACrB,MAAMvC,EAAO9E,KAAKsH,aAAaF,EAAMC,GAC/BE,EAAiBvH,KAAKwH,sBAAsBJ,EAAMC,GAClD9D,EAAQ6D,GAAQA,EAAK7D,OAAwB,OAAf6D,EAAK7D,MAAiB6D,EAAK7D,MAAQ,GACjE2B,EAAa3B,IAAU,GAAG,OAAW3C,KACvC2C,IAAU,GAAG,OAAW+C,KACxB/C,IAAU,GAAG,OAAWiD,IACtBiB,EAAOL,EAAKM,IAAMN,EAAKM,KAAON,EAAK7D,MAAQ,kBAAoB,MAAO,CAAEwB,MAAO,sBAA0BqC,EAAKM,IAAM,KACpHC,EAAU3H,KAAK4H,WAAWR,EAAMlC,GAChCpG,EAAOoG,EAAa3B,EAAS,kBAAoB,GAAAsE,KAAM,CAAEC,IAAI,QAAoB,CAC/EC,UAAU,SAAWC,GAAA,4BACrBC,YAAab,EAAKM,GAClB9G,UACA2F,aACAmB,GAAIN,EAAKM,GACThB,SACAtD,MAAOgE,EAAK7D,MACZ2E,KAAMd,EAAKc,QACT3E,GACV6C,EAAK+B,KAAK,CACNC,MAAO,CACH,CAAC,EACD,CACI5E,MAAQ,kBAAoB,MAAO,KAC/B1E,EACA2I,IAER,CAAEjE,MAAO,kBAAoB,MAAO,KAAM+D,IAC1C,CAAE/D,MAAO,kBAAoB,MAAO,KAAMsB,GAAOC,MAAO,oBACxD,CAAEvB,MAAO,kBAAoB,MAAO,KAAMmE,KAE9CP,OACAiB,SAAU5B,GAAkBE,QAAmE2B,IAAlD3B,EAAc4B,MAAKC,GAAOA,EAAId,KAAON,EAAKM,KACvFe,kBAAmBvD,GACrB,IAENlF,KAAK0I,SAAS,CACVvC,UACAC,QACF,EAENpG,KAAK4H,WAAa,CAACR,EAAMlC,GAAa,KAClC,MAAM,QAAEtE,EAAO,kBAAE+H,GAAsB3I,KAAKC,MAC5C,OAAQ,kBAAoB,KAAS,CAAEW,QAASA,EAASsE,WAAYA,EAAYkC,KAAMA,EAAMnB,gBAAiBA,GAAiB0C,kBAAmBA,GAAqB,EAE3K3I,KAAKwH,sBAAwB,CAACJ,EAAMC,KAChC,MAAM,KAAE5H,GAASO,KAAKC,MAChBuD,GAAQ,EAAAgC,EAAA,IAAeoD,KAAKC,IAAIzB,EAAKtC,KAAKD,MAAMrB,MAAQ4D,EAAK0B,aAAc1B,EAAKtC,KAAKD,MAAMY,OAC3FsD,EAAoC,OAAvB3B,EAAK4B,eAAyB,EAAAxD,EAAA,IAAiBoD,KAAKC,IAAIzB,EAAK4B,gBAAkB,EAC5FC,IAAkC,IAAfF,GAAmC,SAAfA,GACvCG,EAAmC,OAAvB9B,EAAK4B,cACvB,IAAIG,EAUJ,OATIF,IACAE,EAAe,eACY,OAAvB/B,EAAK4B,eAA0B5B,EAAK0B,YAAc,IAClDK,GAAgB,aAEO,OAAvB/B,EAAK4B,eAA0B5B,EAAK0B,YAAc,IAClDK,GAAgB,cAGnBD,EAIO,kBAAoB,MAAO,CAAE1J,UAAW,0BAC5C,kBAAoB,MAAO,CAAEA,UAAW2J,EAAcC,IAAK,yBAAyB/B,KAChF4B,EAAiBxJ,EAAKG,cAAcC,EAAA,UAAkB,CAAE2D,MAAOuF,IAAgB,kBAAoB,KAAiB,MACpHE,GAAyC,OAAvB7B,EAAK4B,eAA0B5B,EAAK0B,YAAc,GAAM,kBAAoB,OAAQ,CAAEtJ,UAAW,gBAAiBuF,MAAO,eAAkBqE,IAAK,yBAAyB/B,MAC3L4B,GAAyC,OAAvB7B,EAAK4B,eAA0B5B,EAAK0B,YAAc,GAAM,kBAAoB,OAAQ,CAAEtJ,UAAW,kBAAmBuF,MAAO+B,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG,gBAAmB,oBAAuBqC,IAAK,yBAAyB/B,OACzP,kBAAoB,MAAO,CAAEtC,MAAO,qBAAwBqE,IAAK,yBAAyB/B,MAAW,OAAsB7D,MARxH,SASX,EAEJxD,KAAKsH,aAAe,CAACF,EAAMC,KACvB,MAAM,OAAE7C,EAAM,KAAE/E,GAASO,KAAKC,MACxB6E,EAAON,GAAUA,EAAOE,MAAQF,EAAOE,KAAKG,OAASL,EAAOE,KAAKG,MAAMC,MAAQN,EAAOE,KAAKG,MAAMC,KAAKD,MACtGL,EAAOE,KAAKG,MAAMC,KAAKD,MAAMrB,MAC7B,EACA6F,EAAwB,IAATvE,EAAaA,EAAKwE,QAAQ,IAAOlC,EAAKtC,KAAKD,MAAMrB,MAAQsB,EAAQ,KAAKwE,QAAQ,GACnG,OAAQ,kBAAoB,aAAgB,MACxC,EAAA9D,EAAA,IAAe4B,EAAKtC,KAAKD,MAAMrB,MAAO4D,EAAKtC,KAAKD,MAAMY,OACtD,kBAAoB,MAAO,CAAEV,MAAO,qBAAwBqE,IAAK,cAAc/B,KAAW5H,EAAKG,cAAcC,EAAA,gBAAwB,CAAE2D,MAAO6F,KAAkB,CAE5K,CACAE,oBACIvJ,KAAKqG,WACT,CACAmD,mBAAmBC,GACf,MAAM,OAAEjF,EAAM,cAAEmC,GAAkB3G,KAAKC,MACjCyJ,EAAgBlF,GAAUA,EAAOmF,KAAOC,KAAKC,UAAUrF,EAAOmF,MAAQ,IACrDF,EAAUjF,QAAUiF,EAAUjF,OAAOmF,KAAOC,KAAKC,UAAUJ,EAAUjF,OAAOmF,MAAQ,MACpFD,GAAiBD,EAAU9C,gBAAkBA,GAChE3G,KAAKqG,WAEb,CACAtG,SACI,MAAM,UAAE+J,EAAS,WAAE3E,EAAU,OAAE4E,EAAM,cAAEpD,GAAkB3G,KAAKC,OACxD,QAAEkG,EAAO,KAAEC,GAASpG,KAAK2F,MAC/B,OAAQ,kBAAoB,KAAW,CAAEQ,QAASA,EAAS2D,UAAWA,EAAW3E,WAAYA,EAAY4E,OAAQA,EAAQ3D,KAAMA,EAAMO,cAAeA,GACxJ,EAEJ,MAAMqD,IAAe,EAAAzK,EAAA,KAAW,OAAW2G,K,2EChK3C,MAAM,GAAe,QACf+D,GAAU,QACV,GAAoB,QACpBC,GAAe,iBACf,GAAe,QACfC,GAAU,QACT,MAAMC,WAA2B,cACpCvG,cACIC,SAASC,WACT/D,KAAKqK,aAAe,CAAC,EACrBrK,KAAK2F,MAAQmB,OAAOC,OAAO,CAAC,EAAG/G,KAAKqK,cACpCrK,KAAKsK,mBAAqB,KACtB,MAAM,KAAE7K,EAAI,+BAAE8K,EAA8B,UAAEC,EAAS,eAAEC,EAAc,UAAEC,GAAc1K,KAAKC,MACtFmF,EAAU,CACZ,CAAEtG,KAAMW,EAAKG,cAAcC,EAAA,iBAAyB,CAAE2D,MAAO,YAAc4F,IAAK,WAChF,CAAEtK,KAAMW,EAAKG,cAAcC,EAAA,iBAAyB,CAAE2D,MAAO,YAAc4F,IAAK,WAChF,CAAEtK,KAAMW,EAAKG,cAAcC,EAAA,iBAAyB,CAAE2D,MAAO,WAAa4F,IAAK,WAiBnF,OAfIoB,GAAaA,EAAUb,MAAQa,EAAUb,KAAK1C,QAC9C7B,EAAQ+C,KAAK,CACTrJ,KAAMW,EAAKG,cAAcC,EAAA,iBAAyB,CAAE2D,MAAO,gBAC3D4F,IAAK,OAGTsB,GAAaA,EAAUf,MAAQe,EAAUf,KAAK1C,QAC9C7B,EAAQ+C,KAAK,CAAErJ,KAAMW,EAAKG,cAAcC,EAAA,iBAAyB,CAAE2D,MAAO,OAAW4F,IAAK,OAE1FqB,GAAkBA,EAAed,MAAQc,EAAed,KAAK1C,QAAUsD,GACvEnF,EAAQ+C,KAAK,CACTrJ,KAAMW,EAAKG,cAAcC,EAAA,iBAAyB,CAAE2D,MAAO,OAC3D4F,IAAK,OAGNhE,EAAQuF,MAAK,CAACC,EAAGC,IAChBD,EAAE9L,KAAO+L,EAAE/L,MACH,EAER8L,EAAE9L,KAAO+L,EAAE/L,KACJ,EAEJ,GACT,EAENkB,KAAK8K,aAAe,KAChB,MAAM,SAAEC,EAAQ,cAAEC,EAAa,SAAEC,EAAQ,+BAAEV,EAA8B,eAAEW,EAAc,oBAAEC,EAAmB,eAAEC,GAAoBpL,KAAKC,MACzI8K,EAAS,GAAcd,GAASiB,GAC5BX,GACAS,EAAc,GAAmBd,GAAciB,GAEnDF,EAAS,GAAcd,GAASiB,EAAe,CAEvD,CACA7B,oBACIvJ,KAAK0I,SAAS,CACV2C,gBAAiBrL,KAAKsK,uBACvB,KACCtK,KAAK8K,cAAc,GAE3B,CACAtB,mBAAmBC,GACf,MAAM,UAAEe,EAAS,MAAEc,EAAK,eAAEb,EAAc,UAAEC,GAAc1K,KAAKC,OACxD,QAAQuK,EAAWf,EAAUe,aAC7B,QAAQC,EAAgBhB,EAAUgB,kBAClC,QAAQC,EAAWjB,EAAUiB,WAOzBY,KAAU,QAAQA,EAAO7B,EAAU6B,QACxCtL,KAAK8K,eAPL9K,KAAK0I,SAAS,CACV2C,gBAAiBrL,KAAKsK,uBACvB,KACCtK,KAAK8K,cAAc,GAM/B,CACA/K,SACI,MAAM,QAAEa,EAAO,cAAE6F,EAAa,qBAAE8E,EAAoB,WAAErG,EAAU,iBAAEsG,EAAgB,aAAEC,EAAY,WAAEC,EAAU,eAAEC,EAAc,gBAAEC,EAAe,cAAEC,EAAa,gBAAEC,EAAe,UAAEtB,EAAS,WAAE5I,EAAU,MAAE0J,EAAK,eAAEb,EAAc,cAAE9D,EAAa,UAAE+D,GAAe1K,KAAKC,OAC1P,gBAAEoL,GAAoBrL,KAAK2F,MACjC,OAAQ,kBAAoB,KAAa,CAAE0F,gBAAiBA,EAAiBzK,QAASA,EAAS6F,cAAeA,EAAevB,WAAYA,EAAYqG,qBAAsBA,EAAsBC,iBAAkBA,EAAkBC,aAAcA,EAAcC,WAAYA,EAAYC,eAAgBA,EAAgBC,gBAAiBA,EAAiBC,cAAeA,EAAeC,gBAAiBA,EAAiBtB,UAAWA,EAAW5I,WAAYA,EAAY0J,MAAOA,EAAO5H,kBAAmB,GAAmB+G,eAAgBA,EAAgB9D,cAAeA,EAAeoF,gBAAgB,EAAMC,cAAc,EAAMC,YAAY,EAAMC,YAAY,EAAMvI,aAAc,GAAc+G,UAAWA,GACprB,EAGJ,MAAM,IAAkB,SAAsB,CAAC/E,EAAO1F,KAGlD,MAAMkM,EAAY,CACdC,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBC,UAAU,EACVC,MAAO,KAELtB,GAAsB,SAAS,CACjCqB,UAAU,IAER/B,EAAiB,qBAAiC9E,EAAO,GAAmBuE,GAAciB,GAC1FuB,EAA4B,gCAA4C/G,EAAO,GAAmBuE,GAAciB,GAChHC,GAAiB,SAAStE,OAAOC,OAAO,CAAC,EAAGoF,IAC5CzB,EAAY,gBAAuB/E,EAAO,GAAcwE,GAASiB,GACjEuB,EAAuB,2BAAkChH,EAAO,GAAcwE,GAASiB,GACvFF,GAAiB,SAASpE,OAAOC,OAAO,CAAC,EAAGoF,IAC5C3B,EAAY,gBAAuB7E,EAAO,GAAcsE,GAASiB,GACjE0B,EAAuB,2BAAkCjH,EAAO,GAAcsE,GAASiB,GAC7F,MAAO,CACHX,+BAAgCzE,EAAA,wCAA2DH,GAC3F6E,YACAoC,uBACA1B,iBACAT,iBACAiC,4BACAvB,sBACAT,YACAiC,uBACAvB,iBACH,IAECyB,GAAqB,CACvB9B,SAAU,SACVC,cAAe,SACfC,SAAU,UAER6B,IAAwB,IAAA9G,SAAQ,GAAiB6G,GAAzB,CAA6CzC,IACrE2C,IAAiB,EAAAxN,EAAA,IAAWuN,IC5G5BX,GAAY,CACdC,OAAQ,CACJK,MAAO,GACPO,OAAQ,GAEZC,QAAS,CAAC,EACVC,UAAW,CAAC,EACZC,SAAU,CACNtM,QAAS,KAEbuM,SAAU,CACNtI,KAAM,SAGRuI,GAAa,SACb,GAAkB,QACxB,MAAMC,WAAmB,cACrBzJ,YAAY0J,EAAYC,GACpB1J,MAAMyJ,EAAYC,GAClBxN,KAAKqK,aAAe,CAChBlE,QAAS,GACTM,eAAe,EACfgH,mBAAmB,EACnBrH,KAAM,GACNO,cAAe,IAEnB3G,KAAK2F,MAAQmB,OAAOC,OAAO,CAAC,EAAG/G,KAAKqK,cACpCrK,KAAK0N,iBAAmB,KACpB,MAAM,MAAEpC,EAAK,OAAE9G,GAAWxE,KAAKC,MACzB0N,EAAYhN,EAAmB2K,EAAM6B,UAErCvM,GADgB,QAAiB0K,IACNqC,EACjC,OAAO,OAA+B,CAClCnJ,SACAqC,MAAOjG,IAAY,KAAe,eAAiBA,GACrD,EAENZ,KAAK4N,eAAkBhH,IACnB,MAAM,MAAE0E,EAAK,OAAE9G,EAAM,kBAAEmE,GAAsB3I,KAAKC,OAC5C,cAAEwG,EAAa,kBAAEgH,EAAiB,cAAE9G,GAAkB3G,KAAK2F,MAC3DgI,EAAYhN,EAAmB2K,EAAM6B,UACrC7G,GAAsB,QAAuBgF,GAC7C9E,GAAgB,QAAiB8E,GACjCI,EAAalH,GAAUA,EAAOE,KAAOF,EAAOE,KAAKC,MAAQ,EAEzDkJ,EAAQ,GAMd,OALAlH,EAAcQ,KAAIC,IACRA,EAAK7D,QAAU,GAAG,OAAWoK,KAAevG,EAAK7D,QAAU,GAAG,OAAWiD,KAC3EqH,EAAM1F,KAAKf,EACf,IAEI,kBAAoB,IAAa,CAAEzC,MAAO8B,EAAgBiF,EAAamC,EAAM5G,OAAQ6G,YAAarH,GAAiBE,EAAcM,SAAWyE,IAAe9E,EAAcK,OAAS,EAAGrG,QAAS0F,EAC5L,GAAG,OAAoBA,IACvBE,EACI,GAAG,MAAYA,IACfmH,EAAWI,OAAQN,EAAmBI,MAAOA,EAAOG,QAAShO,KAAKiO,uBAAwBhI,gBAAiB,GAAiB0C,kBAAmBA,GAAqB,EAEtL3I,KAAKkO,cAAgB,CAAChJ,GAAa,EAAOiJ,GAAW,KACjD,MAAM,KAAE1O,EAAI,MAAE6L,EAAK,OAAE5E,EAAM,OAAElC,GAAWxE,KAAKC,MACvC0E,EAAQH,GAAUA,EAAOE,KAAOF,EAAOE,KAAKC,MAAQ,EACpD8H,EAAQjI,GAAUA,EAAOE,MAAQF,EAAOE,KAAK0H,QAAU5H,EAAOE,KAAK0H,OAAOK,MAC1EjI,EAAOE,KAAK0H,OAAOK,MACnBN,GAAUC,OAAOK,MACjBO,EAASxI,GAAUA,EAAOE,MAAQF,EAAOE,KAAK0H,QAAU5H,EAAOE,KAAK0H,OAAOY,OAC3ExI,EAAOE,KAAK0H,OAAOY,OACnBb,GAAUC,OAAOY,OACjBoB,EAAOxF,KAAKyF,MAAMrB,EAASP,EAAQ,GACzC,OAAQ,kBAAoB,EAAA6B,WAAY,CAAEC,WAAYJ,EAAUjJ,WAAYA,EAAYsJ,UAAW7J,EAAO8J,gBAAiB,CAACC,EAAOC,KAAY,QAAoBrD,EAAO5E,EAAQiI,GAAUC,UAAW,CAACF,EAAOG,KAAe,QAAcvD,EAAO5E,EAAQlC,EAAQqK,GAAaT,KAAMA,EAAMO,QAASlC,EAAOqC,OAAQ,CAC5SC,gBAAiBtP,EAAKG,cAAcC,EAAA,kBAA0B,CAC1DuD,MAAO3D,EAAKG,cAAcC,EAAA,OAC1BmP,UAAWb,EAAW,SAAW,SAEtChO,QAASgO,EAAW,EAAAc,kBAAA,OAA2B,EAAAA,kBAAA,IAAuBC,SAAU,sBAAqBf,EAAW,UAAY,KAAQ,EAE/InO,KAAKmP,SAAW,KACZ,MAAM,MAAE7D,EAAK,OAAE9G,EAAM,kBAAE4K,EAAiB,kBAAEzG,EAAiB,OAAEjC,GAAW1G,KAAKC,OACvE,cAAEwG,EAAa,cAAEE,GAAkB3G,KAAK2F,MACxCgI,EAAYhN,EAAmB2K,EAAM6B,UACrC7G,GAAsB,QAAuBgF,GAC7C9E,GAAgB,QAAiB8E,GACjC/E,GAAa,QAAmB+E,GACtC,OAAQ,kBAAoBtB,GAAc,CAAEpJ,QAAS0F,EAC3C,GAAG,OAAoBA,IACvBE,EACI,GAAG,MAAYA,IACfmH,EAAWrH,oBAAqBA,EAAqBE,cAAeA,EAAeD,WAAYA,EAAYE,cAAeA,EAAeqD,UAAWsF,IAAsB,gBAAwBjK,WAAYnF,KAAKqP,eAAgBtF,OAAQ,CAACuF,EAAUC,KAAoB,QAAWjE,EAAO5E,EAAQ4I,EAAUC,GAAkB/K,OAAQA,EAAQmE,kBAAmBA,EAAmBhC,cAAeA,GAAiB,EAExa3G,KAAKwP,WAAc5I,IACf,MAAM,MAAE0E,EAAK,OAAE5E,EAAM,OAAElC,GAAWxE,KAAKC,OACjC,cAAEwG,EAAa,cAAEE,GAAkB3G,KAAK2F,MACxCgI,EAAYhN,EAAmB2K,EAAM6B,UACrC7G,GAAsB,QAAuBgF,GAC7C9E,GAAgB,QAAiB8E,GACjCpG,EAAsC,IAAzB0B,EAAcK,OAC3ByE,EAAalH,GAAUA,EAAOE,KAAOF,EAAOE,KAAKC,MAAQ,EAC/D,OAAQ,kBAAoBoI,GAAgB,CAAEnM,QAAS0F,EAC7C,GAAG,OAAoBA,IACvBE,EACI,GAAG,MAAYA,IACfmH,EAAWlH,cAAeA,EAAevB,WAAYA,EAAYsG,iBAAkBtG,IAAgBuB,GAA0C,IAAzBE,EAAcM,OAAewE,aAAc7E,EAAcK,OAAQyE,WAAYA,EAAYC,eAAgB3L,KAAKyP,mBAAoB7D,gBAAiB5L,KAAK0P,sBAAuB7D,cAAeO,IAAU,QAAkBd,EAAO5E,EAAQ0F,GAASN,gBAAiBM,IAAU,QAAoBd,EAAO5E,EAAQ0F,GAASxK,WAAY5B,KAAKkO,cAAchJ,GAAaoG,MAAOA,EAAO3E,cAAeA,GAAiB,EAEzhB3G,KAAKyP,mBAAsBE,IACvB,MAAM,cAAElJ,GAAkBzG,KAAK2F,MAChB,SAAXgK,EACA3P,KAAK0I,SAAS,CAAEjC,eAAe,EAAOE,cAAe,KAErC,SAAXgJ,EACL3P,KAAK0I,SAAS,CACVjC,eAAe,EACfE,cAAe3G,KAAK0N,qBAGR,QAAXiC,GACL3P,KAAK0I,SAAS,CAAEjC,eAAgBA,EAAeE,cAAe,IAClE,EAEJ3G,KAAKiO,uBAA0BF,IAC3B/N,KAAK0I,SAAS,CAAE+E,kBAAmBM,GAAS,EAEhD/N,KAAK0P,sBAAwB,KACzB1P,KAAK0I,SAAS,CAAE+E,mBAAmB,GAAO,EAE9CzN,KAAK4P,sBAAwBhP,IACzB,MAAM,MAAE0K,EAAK,OAAE5E,GAAW1G,KAAKC,MAC/B,IAAI4P,EAAajP,EACb4C,EAAQ,KAGG,KADD5C,GAAWA,EAAQkP,QAAQ,SAErCD,EAAa,eAAuB,EAAG,aACvCrM,EAAQ5C,EAAQmP,MAAM,cAE1B,MAAMC,EAAWlJ,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG6C,KAAKqG,MAAMrG,KAAKC,UAAUyB,KAAU,CAEjF6B,SAAU,CACN,CAAC0C,GAAarM,GACf4J,SAAU,CAAEtI,KAAM,UACzB9E,KAAK0I,SAAS,CAAEjC,eAAe,EAAOE,cAAe,KAAM,KACvDD,EAAOwJ,UAAS,OAAiBF,EAAUtJ,EAAOyJ,UAAU,GAAO,CAAEC,SAAS,GAAO,GACvF,EAENpQ,KAAKqP,eAAiB,CAACxB,EAAOwC,GAAa,KACvC,MAAM,cAAE5J,EAAa,cAAEE,GAAkB3G,KAAK2F,MAC9C,IAAI2K,EAAW,IAAK7J,EAAgBzG,KAAK0N,mBAAqB/G,GAC1DkH,GAASA,EAAM5G,OAAS,IACpBoJ,EACAxC,EAAM1G,KAAIC,GAAQkJ,EAASnI,KAAKf,KAGhCyG,EAAM1G,KAAIC,IACNkJ,EAAWA,EAASlE,QAAO5D,GAAOA,EAAId,KAAON,EAAKM,IAAG,KAIjE1H,KAAK0I,SAAS,CAAEjC,eAAe,EAAOE,cAAe2J,GAAW,EAEpEtQ,KAAK8K,aAAe,KAChB,MAAM,YAAEyF,EAAW,kBAAE5H,GAAsB3I,KAAKC,MAChDsQ,EAAY,GAAiBlD,GAAY1E,EAAkB,EAE/D3I,KAAKyP,mBAAqBzP,KAAKyP,mBAAmBe,KAAKxQ,MACvDA,KAAKiO,uBAAyBjO,KAAKiO,uBAAuBuC,KAAKxQ,MAC/DA,KAAK0P,sBAAwB1P,KAAK0P,sBAAsBc,KAAKxQ,MAC7DA,KAAKqP,eAAiBrP,KAAKqP,eAAemB,KAAKxQ,KACnD,CACAuJ,oBACIvJ,KAAK8K,cACT,CACAtB,mBAAmBC,EAAWgH,GAC1B,MAAM,OAAEjM,EAAM,YAAEkM,EAAW,kBAAE/H,EAAiB,OAAEjC,GAAW1G,KAAKC,OAC1D,cAAE0G,GAAkB3G,KAAK2F,MACzBqK,EAAWvG,EAAUd,oBAAsBA,EAC3CgI,GAAYnM,IAAWkM,EACvBE,GAAclK,EAAOyJ,SAASU,OAC9BP,EAAWG,EAAU9J,gBAAkBA,GACzCqJ,GAAYW,GAAYC,GAAcN,IACtCtQ,KAAK8K,cAEb,CACA/K,SACI,MAAM,SAAEwC,EAAQ,SAAE2B,EAAQ,KAAEzE,EAAI,UAAE6E,EAAS,qBAAEuB,EAAoB,MAAEyF,EAAK,OAAE9G,EAAM,YAAEkM,EAAW,kBAAEtB,EAAiB,OAAE1I,GAAY1G,KAAKC,MAC7H2G,EAAgB5G,KAAK0N,mBACrBC,EAAYhN,EAAmB2K,EAAM6B,UACrCjI,EAAsC,IAAzB0B,EAAcK,OAC3B7D,EAAQ3D,EAAKG,cAAcC,EAAA,mBAEjC,GAAI6Q,EACA,OAAO,kBAAoB,IAAc,CAAEtN,MAAOA,IAEjD,GAAIyC,IAAyB,gBAC9B,OAAO,kBAAoB,IAAS,CAAEzC,MAAOA,IAE5C,GAAIyC,IAAyB,cAAsB,CAGpD,GADoBvB,GAAaA,EAAUI,MAAiC,IAAzBJ,EAAUI,KAAKC,MAE9D,OAAO,kBAAoB,IAAa,CAAEmM,aAAc,QAAkB1N,MAAOA,IAErF,KAAK,QAAoBkB,GACrB,OAAO,kBAAoB,IAAQ,CAAElB,MAAOA,GAEpD,CACA,OAAQ,kBAAoB,MAAO,CAAE2B,MAAO7D,EAAOC,YAC/C,kBAAoB4E,GAAe,CAAExD,SAAUA,EAAU2B,SAAUA,EAAUtD,QAAS+M,EAAW1J,mBAAoBT,IAAS,QAAuB8H,EAAO5E,EAAQlD,GAAQY,mBAAoBZ,IAAS,QAAuB8H,EAAO5E,EAAQlD,GAAQa,kBAAmBrE,KAAK4P,sBAAuBpL,OAAQA,IAC9S,kBAAoB,MAAO,CAAEO,MAAO7D,EAAOG,SACvC,kBAAoB,MAAO,CAAE0D,MAAO7D,EAAOe,kBAAoBjC,KAAKwP,WAAW5I,IAC/E5G,KAAK4N,eAAehH,GACpBwI,IAAsB,gBAA0B,kBAAoB,IAAS,MAAU,kBAAoB,aAAgB,KACvH,kBAAoB,MAAO,CAAErK,MAAO7D,EAAOc,gBAAkBhC,KAAKmP,YAClE,kBAAoB,MAAO,CAAEpK,MAAO7D,EAAOO,qBACvC,kBAAoB,MAAO,CAAEsD,MAAO7D,EAAOU,YAAc5B,KAAKkO,cAAchJ,GAAY,OAC5G,EAGJ,MAAM,IAAkB,SAAsB,CAACS,GAASe,aACpD,MAAMqK,GAAiB,QAAWrK,EAAOyJ,SAASU,QAC5CtO,GAAW,UACX2B,GAAW,UACXoH,EAAQxE,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGoF,IAAY4E,GACpDC,EAAc,CAChBC,UAAW1O,EACX2B,WACAgN,MAAO,OACPjE,QAAS3B,EAAM2B,QACfb,OAAQtF,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGuE,EAAMc,QAAS,CAAEC,WAAY,UAAWC,iBAAkB,QAASC,kBAAmB,IAC9HW,UAAWpG,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGuE,EAAM4B,WAAa5B,EAAM4B,WAChE5B,EAAM4B,UAAU,OAAiB,CACjC,CAAC,GAAG,OAAkB,QAAiB5B,EAAM4B,UAAU,MACvD,CAAC,WAAe5E,IAEpB6E,SAAU7B,EAAM6B,SAChBC,SAAU9B,EAAM8B,UAEdzE,GAAoB,QAASqI,GAC7BxM,EAAS,kBAA6BmB,EAAO,GAAiB0H,GAAY1E,GAC1E+H,EAAc,uBAAkC/K,EAAO,GAAiB0H,GAAY1E,GACpFyG,EAAoB,6BAAwCzJ,EAAO,GAAiB0H,GAAY1E,GAChG/C,GAAuB,OAAkB,MACzCtB,EAAY,qBAAmCqB,EAAO,QAAkBC,GACxErB,EAAiB,0BAAwCoB,EAAO,QAAkBC,GAClFC,EAAuB,gCAA8CF,EAAO,QAAkBC,GACpG,MAAO,CACHrD,WACA2B,WACAI,WAAW,QAAgBA,EAAW,SACtCC,iBACAsB,uBACAyF,QACA9G,SACAkM,cACAtB,oBACAzG,oBACH,IAEC,GAAqB,CACvB4H,YAAa,kBAEjB,IAAe,EAAAhR,EAAA,KAAW,QAAW,IAAAyG,SAAQ,GAAiB,GAAzB,CAA6CsH,K,4JCtRlF,MAAM6D,UAA2B,cAC7BtN,YAAY0J,EAAYC,GACpB1J,MAAMyJ,EAAYC,GAClBxN,KAAKqK,aAAe,CAChB+G,gBAAgB,EAChB3D,mBAAmB,GAEvBzN,KAAK2F,MAAQmB,OAAOC,OAAO,CAAC,EAAG/G,KAAKqK,cACpCrK,KAAK4N,eAAiB,KAClB,MAAM,QAAEhN,EAAO,KAAEwG,EAAI,gBAAEnB,EAAe,kBAAE0C,GAAsB3I,KAAKC,OAC7D,kBAAEwN,GAAsBzN,KAAK2F,MACnC,OAAQ,kBAAoB,IAAa,CAAEhB,MAAO,EAAG/D,QAASA,EAASmN,OAAQN,EAAmBI,MAAO,CAACzG,GAAO4G,QAAShO,KAAKiO,uBAAwBhI,gBAAiBA,EAAiB0C,kBAAmBA,GAAqB,EAErO3I,KAAKiO,uBAA0BF,IAC3B/N,KAAK0I,SAAS,CAAE+E,kBAAmBM,GAAS,EAEhD/N,KAAK0P,sBAAwB,KACzB1P,KAAK0I,SAAS,CAAE+E,mBAAmB,GAAO,EAE9CzN,KAAKqR,eAAiB,KAClB,MAAM,eAAED,GAAmBpR,KAAK2F,MAChC3F,KAAK0I,SAAS,CACV0I,gBAAiBA,GACnB,EAENpR,KAAKsR,eAAkBF,IACnBpR,KAAK0I,SAAS,CAAE0I,kBAAiB,EAErCpR,KAAKiO,uBAAyBjO,KAAKiO,uBAAuBuC,KAAKxQ,MAC/DA,KAAK0P,sBAAwB1P,KAAK0P,sBAAsBc,KAAKxQ,MAC7DA,KAAKsR,eAAiBtR,KAAKsR,eAAed,KAAKxQ,MAC/CA,KAAKqR,eAAiBrR,KAAKqR,eAAeb,KAAKxQ,KACnD,CACAD,SACI,MAAM,QAAEa,EAAO,WAAEsE,EAAU,oBAAEqM,EAAmB,KAAE9R,EAAM2H,MAAM,YAAEoK,GAAa,oBAAEC,EAAmB,OAAE/K,GAAY1G,KAAKC,MAE/G4N,EAAQ,CACV,kBAAoB,EAAA6D,aAAc,CAAEC,UAAW,SAAUzM,WAAYA,EAAYkE,IAAK,gBAAiBwI,QAAS5R,KAAK0P,uBAAyBjQ,EAAKG,cAAcC,EAAA,0BAKrK,OAHI0R,GACA1D,EAAMgE,QAAQ,kBAAoB,EAAAH,aAAc,CAAEC,UAAW,SAAUvI,IAAK,oBAAqBlE,WAAYA,GAActE,EAAQkR,SAAS,MAAqC,IAAvBN,EAAYvK,OAAc2K,QAAS,IAAMH,EAAoBD,EAAY,GAAI9K,IAAWjH,EAAKG,cAAcC,EAAA,6BAEjQ,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAkS,SAAU,CAAE9M,SAAUjF,KAAKqR,eAAgBW,OAAQ,kBAAoB,EAAAC,YAAa,CAAEC,SAAUlS,KAAKsR,iBAAmBvD,OAAQ/N,KAAK2F,MAAMyL,eAAgBe,SAAS,EAAMC,SAAU,QAASC,cAAexE,IAChO7N,KAAK4N,iBACb,EAGJ,MAAMlI,GAAkB,SAAsB,CAACC,EAAO1F,KAC3C,CAAC,KAEN4M,EAAqB,CACvB4E,oBAAqBa,EAAA,sCAEnBC,GAAwB,IAAAvM,SAAQN,EAAiBmH,EAAzB,CAA6CsE,GAE3E,GADgB,EAAA5R,EAAA,KAAW,OAAWgT,G,8FC5D/B,MAAMrR,EAAS,CAClBsR,WAAY,CACR3P,UAAW,QACXL,QAAS,OACTS,eAAgB,WAChBwP,aAAc,GAElBC,aAAc,CACVC,SAAU,QAEdC,WAAY,CACR/Q,gBAAiB,WACjBW,QAAS,OACTS,eAAgB,SAChBzB,WAAY,WACZzC,OAAQ,OACRC,MAAO,QAEX6T,UAAW,CACPT,SAAU,YAEdU,cAAe,CACXC,OAAQ,YAEZC,gBAAiB,CACb3Q,MAAO,WACPF,SAAU,YAEd8Q,aAAc,CACVpQ,UAAW,QACX4P,aAAc,QAElBS,mBAAoB,CAChBrQ,UAAW,QACXL,QAAS,OACTS,eAAgB,YAEpBkQ,cAAe,CACXtQ,UAAW,SAEfuQ,WAAY,CACRpU,MAAO,M,wKClCf,MAAMqU,UAAkB,cACpBxP,YAAY5D,GACR6D,MAAM7D,GACND,KAAKsT,cAAgB,KACjB,MAAM,KAAE7T,EAAI,gBAAE8T,EAAe,OAAE7M,GAAW1G,KAAKC,MACzC8Q,GAAiB,QAAWrK,EAAOyJ,SAASU,QAClD,GAAIE,EAAe7D,UACf,IAAK,MAAM1E,KAAO1B,OAAO0M,OAAOzC,EAAe7D,WAC3C,GAAY,MAAR1E,EACA,OAAO,kBAAoB,IAAkB,CAAE4D,OAAQ5D,EAAKiL,YAAY,IAIpF,OAAIF,EACO,kBAAoB,IAAsB,MAE7C,kBAAoB,EAAArT,WAAY,KACpC,kBAAoB,EAAAG,eAAgB,CAAEf,KAAM,OAC5C,kBAAoB,EAAAmB,eAAgB,KAAMhB,EAAKG,cAAcC,EAAA,sBAA8B,EAEnGG,KAAK0T,UAAYrM,IACb,MAAM,QAAElB,EAAO,OAAEO,GAAW1G,KAAKC,MAC3B+G,EAAUb,EAAQkB,GAAOL,QACzB+J,GAAiB,QAAWrK,EAAOyJ,SAASU,QAC5C8C,EAAY5C,GAAkBA,EAAe3D,UAAY2D,EAAe3D,SAASpG,GACvF,OAAO2M,EACD,CACEtM,QACAsM,aAEF,CAAC,CAAC,EAEZ3T,KAAK4T,cAAiBvM,IACX,CACHwM,OAAQ7T,KAAK0T,UAAUrM,GACvB0C,OAAQ/J,KAAK8T,aACbC,YAAa1M,IAGrBrH,KAAKqR,eAAiB,CAAC3C,EAAO2B,EAAY2D,KACtC,MAAM,WAAE7O,EAAU,KAAEiB,GAASpG,KAAKC,MAClC,IAAIgU,EACApG,EAAQ,IACG,IAAXmG,EACAC,EAAU7N,EAAKe,KAAI+M,IACfA,EAAI7L,SAAWgI,EACR6D,MAIXD,EAAU,IAAI7N,GACd6N,EAAQD,GAAO3L,SAAWgI,EAC1BxC,EAAQ,CAACoG,EAAQD,GAAO5M,OAE5BpH,KAAK0I,SAAS,CAAEtC,SAAQ,KAChBjB,GACAA,EAAW0I,EAAOwC,EACtB,GACF,EAENrQ,KAAK8T,aAAe,CAACpF,EAAOrH,EAAOsM,KAC/B,MAAM,QAAExN,EAAO,OAAE4D,GAAW/J,KAAKC,MAC7B8J,GAGAA,EAFgB5D,EAAQkB,GAAOL,QACP2M,IAAc,EAAAQ,gBAAA,IAE1C,EAEJnU,KAAKoU,iBAAmB,CAAC1F,EAAO2F,KAC5B,MAAM,WAAEC,EAAU,KAAElO,GAASpG,KAAKC,MAClCmG,EAAKe,KAAI+M,GAAQA,EAAI7L,UAAW,IAChCjC,EAAKiO,GAAUhM,UAAW,EAC1BrI,KAAK0I,SAAS,CAAEtC,SAAQ,KAChBkO,GACAA,EAAW5F,EAAO2F,EACtB,GACF,EAENrU,KAAKqR,eAAiBrR,KAAKqR,eAAeb,KAAKxQ,MAC/CA,KAAK8T,aAAe9T,KAAK8T,aAAatD,KAAKxQ,KAC/C,CACAD,SACI,MAAM,QAAEoG,EAAO,KAAE1G,EAAI,UAAEqK,EAAS,gBAAEyJ,EAAe,KAAEnN,GAASpG,KAAKC,MACjE,OAAQ,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAsU,gBAAiB,CAAE,aAAc9U,EAAKG,cAAcC,EAAA,sBAA8BL,UAAW,gBAAiBgV,eAAgB,WAAYC,wBAAyBlB,GACnL,kBAAoB,EAAAmB,MAAO,KACvB,kBAAoB,EAAAC,GAAI,KAAMxO,EAAQgB,KAAI,CAACyN,EAAKvN,IAAW,kBAAoB,EAAAwN,GAAI,CAAEzL,IAAK,OAAO/B,KAASuN,EAAIpR,QAASsR,SAAU,SAAUnK,KAAMiK,EAAI1N,WAAalH,KAAK4T,cAAcvM,QAASiB,EAAWvD,MAAO6P,EAAI7P,OAAS6P,EAAI9V,UACrO,kBAAoB,EAAAiW,MAAO,KAAMjL,EAAa,kBAAoB,EAAA6K,GAAI,KAClE,kBAAoB,EAAAK,GAAI,CAAEC,QAAS,KAC/B,kBAAoB,EAAAC,SAAU,KAC1B,kBAAoB,MAAO,CAAEnQ,MAAO,CAAElC,UAAW,WAC7C,kBAAoB,EAAAsS,QAAS,CAAE3U,KAAM,WAAgB4F,EAAKe,KAAI,CAAC+M,EAAKG,IAAc,kBAAoB,EAAAM,GAAI,CAAES,aAAc7B,EAAiB8B,YAAa9B,EAAiB+B,cAAe/B,GAAmBW,EAAI7L,SAAUiM,WAAYf,EAAkBgC,GAAUvV,KAAKoU,iBAAiBmB,EAAQlB,QAAY/L,EAAWc,IAAK,OAAOiL,KAAcH,EAAI9L,MAAMjB,KAAI,CAACC,EAAMoO,IAA4B,IAAdA,GAAoBjC,EAKvX,kBAAoB,EAAAyB,GAAI,CAAES,UAAWtP,EAAQqP,GAAW1W,KAAMsK,IAAK,QAAQiL,KAAYmB,IAAaV,SAAU,SAAUY,cAAenC,GAAmBiC,IAActB,EAAI9L,MAAMnB,OAAS,EAAGlC,MAAOqC,EAAKrC,OAASqC,EAAK5D,OALkL,kBAAoB,EAAAwR,GAAI,CAAES,UAAWtP,EAAQqP,GAAW1W,KAAMsK,IAAK,QAAQoM,KAAanB,IAAYS,SAAU,SAAUa,OAAQ,CACliBC,QAAS1B,EAAIzL,kBACb4H,WAAY6D,EAAI7L,SAChBpD,SAAU,CAACsQ,EAAQlF,IAAerQ,KAAKqR,eAAekE,EAAQlF,EAAYgE,GAC1EA,YACDtP,MAAOqC,EAAKrC,eACP,IAAhBqB,EAAKa,QAAgB,kBAAoB,MAAO,CAAElC,MAAO,gBAAqB/E,KAAKsT,iBAC3F,EAEJ,SAAe,EAAA/T,EAAA,KAAW,OAAW8T,G","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_spacer_xs.js","webpack:///./src/routes/components/icons/optimizationIcon/optimizationIcon.tsx","webpack:///./src/routes/state/noOptimizations/noOptimizationsState.tsx","webpack:///./src/utils/computedReport/getComputedAwsReportItems.ts","webpack:///./src/routes/views/details/awsDetails/awsDetails.styles.ts","webpack:///./src/routes/views/details/awsDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/awsDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/awsDetails/detailsTable.tsx","webpack:///./src/routes/views/details/awsDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/awsDetails/awsDetails.tsx","webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);\n\nexport default ExternalLinkAltIcon;","\"use strict\";\nexports.__esModule = true;\nexports.global_spacer_xs = {\n  \"name\": \"--pf-global--spacer--xs\",\n  \"value\": \"0.25rem\",\n  \"var\": \"var(--pf-global--spacer--xs)\"\n};\nexports[\"default\"] = exports.global_spacer_xs;","import './optimizationIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Red_Hat-IT_Optimization-Gray.svg');\nconst OptimizationIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `optimization-icon ${className}`, src: icon, alt: intl.formatMessage(messages.optimizations), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(OptimizationIcon);\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { OptimizationIcon } from 'routes/components/icons/optimizationIcon';\nclass NoOptimizationsStateBase extends React.Component {\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: OptimizationIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(messages.noOptimizationsTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noOptimizationsDesc))));\n    }\n}\nconst NoOptimizationsState = injectIntl(NoOptimizationsStateBase);\nexport { NoOptimizationsState };\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.aws_category) {\n        return 'aws_category';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { OrgPathsType } from 'api/orgs/org';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgPathsType = OrgPathsType.aws;\nconst resourcePathsType = ResourcePathsType.aws;\nconst tagPathsType = TagPathsType.aws;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { costType, currency, groupBy, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.awsDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, orgPathsType: orgPathsType, resourcePathsType: resourcePathsType, showCostCategories: true, showOrgs: true, showTags: true, tagPathsType: tagPathsType }),\n                    React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected }))),\n                showContent && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getOrgBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = ReportPathsType.aws;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByCostCategory, groupByOrg, groupByTagKey, intl, isAllSelected, report, router, selectedItems, } = this.props;\n            if (!report) {\n                return;\n            }\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByCostCategory\n                    ? groupByCostCategory\n                    : groupByTagKey\n                        ? groupByTagKey\n                        : groupByOrg\n                            ? 'org_entities'\n                            : groupBy),\n            });\n            const columns = groupByCostCategory || groupByTagKey || groupByOrg\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: groupByCostCategory\n                            ? intl.formatMessage(messages.costCategoryNames)\n                            : groupByOrg\n                                ? intl.formatMessage(messages.names, { count: 2 })\n                                : intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupBy === 'account' ? 'account_alias' : groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const isDisabled = label === `${noPrefix}${groupBy}` ||\n                    label === `${noPrefix}${groupByCostCategory}` ||\n                    label === `${noPrefix}${groupByTagKey}`;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: formatPath(routes.awsDetailsBreakdown.path),\n                        description: item.id,\n                        groupBy,\n                        groupByOrg,\n                        id: item.id,\n                        router,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, isDisabled = false) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        showPercentage && item.delta_percent !== null && item.delta_value > 0 && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        showPercentage && item.delta_percent !== null && item.delta_value < 0 && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport || prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { OrgPathsType, OrgType } from 'api/orgs/org';\nimport { getQuery } from 'api/queries/query';\nimport { ResourcePathsType, ResourceType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { resourceActions, resourceSelectors } from 'store/resources';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { awsCategoryKey, orgUnitIdKey, tagKey } from 'utils/props';\nconst orgPathsType = OrgPathsType.aws;\nconst orgType = OrgType.org;\nconst resourcePathsType = ResourcePathsType.aws;\nconst resourceType = ResourceType.aws_category;\nconst tagPathsType = TagPathsType.aws;\nconst tagType = TagType.tag;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, isCostCategoriesFeatureEnabled, orgReport, resourceReport, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            if (resourceReport && resourceReport.data && resourceReport.data.length && isCostCategoriesFeatureEnabled) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: awsCategoryKey }),\n                    key: awsCategoryKey,\n                });\n            }\n            return options.sort((a, b) => {\n                if (a.name < b.name) {\n                    return -1;\n                }\n                if (a.name > b.name) {\n                    return 1;\n                }\n                return 0;\n            });\n        };\n        this.updateReport = () => {\n            const { fetchOrg, fetchResource, fetchTag, isCostCategoriesFeatureEnabled, orgQueryString, resourceQueryString, tagQueryString, } = this.props;\n            fetchOrg(orgPathsType, orgType, orgQueryString);\n            if (isCostCategoriesFeatureEnabled) {\n                fetchResource(resourcePathsType, resourceType, resourceQueryString);\n            }\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            this.updateReport();\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { orgReport, query, resourceReport, tagReport } = this.props;\n        if (!isEqual(orgReport, prevProps.orgReport) ||\n            !isEqual(resourceReport, prevProps.resourceReport) ||\n            !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                this.updateReport();\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, resourceReport, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, resourcePathsType: resourcePathsType, resourceReport: resourceReport, selectedItems: selectedItems, showBulkSelect: true, showExcludes: true, showExport: true, showFilter: true, tagPathsType: tagPathsType, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request. Only the toolbar requires key values;\n    // however, for better server-side performance, we chose to use key_only here.\n    const baseQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    };\n    const resourceQueryString = getQuery({\n        key_only: true,\n    });\n    const resourceReport = resourceSelectors.selectResource(state, resourcePathsType, resourceType, resourceQueryString);\n    const resourceReportFetchStatus = resourceSelectors.selectResourceFetchStatus(state, resourcePathsType, resourceType, resourceQueryString);\n    const tagQueryString = getQuery(Object.assign({}, baseQuery));\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    const orgQueryString = getQuery(Object.assign({}, baseQuery));\n    const orgReport = orgSelectors.selectOrg(state, orgPathsType, orgType, orgQueryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgPathsType, orgType, orgQueryString);\n    return {\n        isCostCategoriesFeatureEnabled: featureFlagsSelectors.selectIsCostCategoriesFeatureEnabled(state),\n        orgReport,\n        orgReportFetchStatus,\n        orgQueryString,\n        resourceReport,\n        resourceReportFetchStatus,\n        resourceQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchResource: resourceActions.fetchResource,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByCostCategory, getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCostTypeSelected, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nimport { awsCategoryPrefix, logicalOrPrefix, noPrefix, orgUnitIdKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.aws;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByCostCategory = getGroupByCostCategory(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByCostCategory\n                    ? `${awsCategoryPrefix}${groupByCostCategory}`\n                    : groupByTagKey\n                        ? `${tagPrefix}${groupByTagKey}`\n                        : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, router, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.aws),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByCostCategory = getGroupByCostCategory(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupByOrg = getGroupByOrgValue(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByCostCategory\n                    ? `${awsCategoryPrefix}${groupByCostCategory}`\n                    : groupByTagKey\n                        ? `${tagPrefix}${groupByTagKey}`\n                        : groupById, groupByCostCategory: groupByCostCategory, groupByTagKey: groupByTagKey, groupByOrg: groupByOrg, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, router, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByCostCategory = getGroupByCostCategory(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByCostCategory\n                    ? `${awsCategoryPrefix}${groupByCostCategory}`\n                    : groupByTagKey\n                        ? `${tagPrefix}${groupByTagKey}`\n                        : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for org units\n            const index = groupBy && groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router, } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.awsDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.aws, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { costType: costType, currency: currency, groupBy: groupById, onCostTypeSelected: value => handleCostTypeSelected(query, router, value), onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const costType = getCostType();\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign({}, baseQuery), queryFromRoute);\n    const reportQuery = {\n        cost_type: costType,\n        currency,\n        delta: 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: Object.assign(Object.assign({}, query.filter_by), (query.filter_by &&\n            query.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: query.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costType,\n        currency,\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(AwsDetails)));\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, item: { source_uuid }, redirectToCostModel, router, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], router) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingRight: 0,\n    },\n    defaultLabel: {\n        minWidth: '63px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    lastReported: {\n        textAlign: 'right',\n        paddingRight: '40px',\n    },\n    lastReportedColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    managedColumn: {\n        textAlign: 'right',\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import './dataTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { NoOptimizationsState } from 'routes/state/noOptimizations/noOptimizationsState';\nimport { withRouter } from 'utils/router';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl, isOptimizations, router } = this.props;\n            const queryFromRoute = parseQuery(router.location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            if (isOptimizations) {\n                return React.createElement(NoOptimizationsState, null);\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns, router } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(router.location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnRowClick = (event, rowIndex) => {\n            const { onRowClick, rows } = this.props;\n            rows.map(row => (row.selected = false));\n            rows[rowIndex].selected = true;\n            this.setState({ rows }, () => {\n                if (onRowClick) {\n                    onRowClick(event, rowIndex);\n                }\n            });\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isLoading, isOptimizations, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), className: \"tableOverride\", gridBreakPoint: \"grid-2xl\", hasSelectableRowCaption: isOptimizations },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { isSelectable: isOptimizations, isHoverable: isOptimizations, isRowSelected: isOptimizations && row.selected, onRowClick: isOptimizations ? _event => this.handleOnRowClick(_event, rowIndex) : undefined, key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 && !isOptimizations ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    }, style: item.style })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: !isOptimizations && cellIndex === row.cells.length - 1, style: item.style }, item.value))))))))),\n            rows.length === 0 && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(withRouter(DataTable));\n"],"names":["ExternalLinkAltIconConfig","name","height","width","svgPath","yOffset","xOffset","ExternalLinkAltIcon","exports","icon","injectIntl","className","intl","src","alt","formatMessage","messages","NoOptimizationsStateBase","render","this","props","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","NoOptimizationsState","getIdKeyForGroupBy","groupBy","account","aws_category","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","toolbarContainer","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costType","display","costValue","marginTop","marginBottom","dateTitle","textAlign","header","padding","headerContent","justifyContent","headerContentLeft","headerContentRight","title","global_spacer_sm","groupByOptions","label","value","orgPathsType","resourcePathsType","tagPathsType","DetailsHeaderBase","constructor","super","arguments","handleCostTypeSelected","onCostTypeSelected","currency","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","count","hasCost","total","cost","style","TitleSizes","onSelect","isDisabled","onSelected","options","showCostCategories","showOrgs","showTags","format","units","mapStateToProps","state","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","connect","reportPathsType","DetailsTableBase","columns","rows","initDatum","groupByCostCategory","groupByOrg","groupByTagKey","isAllSelected","router","selectedItems","computedItems","idKey","Object","assign","orderBy","length","isSortable","map","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","desc","id","actions","getActions","Link","to","basePath","routes","description","type","push","cells","selected","undefined","find","val","selectionDisabled","setState","reportQueryString","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","key","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","orgType","resourceType","tagType","DetailsToolbarBase","defaultState","getCategoryOptions","isCostCategoriesFeatureEnabled","orgReport","resourceReport","tagReport","sort","a","b","updateReport","fetchOrg","fetchResource","fetchTag","orgQueryString","resourceQueryString","tagQueryString","categoryOptions","query","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","showBulkSelect","showExcludes","showExport","showFilter","baseQuery","filter","resolution","time_scope_units","time_scope_value","key_only","limit","resourceReportFetchStatus","tagReportFetchStatus","orgReportFetchStatus","mapDispatchToProps","DetailsToolbarConnect","DetailsToolbar","offset","exclude","filter_by","group_by","order_by","reportType","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","groupById","getExportModal","items","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","page","trunc","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","indexOf","slice","newQuery","parse","navigate","location","replace","isSelected","newItems","fetchReport","bind","prevState","reportError","noReport","noLocation","search","providerType","queryFromRoute","reportQuery","cost_type","delta","DetailsActionsBase","isDropdownOpen","handleOnSelect","handleOnToggle","showPriceListOption","source_uuid","redirectToCostModel","DropdownItem","component","onClick","unshift","includes","Dropdown","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","costModels","DetailsActionsConnect","costColumn","paddingRight","defaultLabel","minWidth","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","lastReported","lastReportedColumn","managedColumn","nameColumn","DataTable","getEmptyState","isOptimizations","values","showMargin","getSortBy","direction","getSortParams","sortBy","handleOnSort","columnIndex","rowId","newRows","row","SortByDirection","handleOnRowClick","rowIndex","onRowClick","TableComposable","gridBreakPoint","hasSelectableRowCaption","Thead","Tr","col","Th","modifier","Tbody","Td","colSpan","Bullseye","Spinner","isSelectable","isHoverable","isRowSelected","_event","cellIndex","dataLabel","isActionCell","select","disable"],"sourceRoot":""}