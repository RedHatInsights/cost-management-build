{"version":3,"file":"js/ocpDetails.03b9b6dfb08f3fa79c21.js","mappings":"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","sources":["webpack:///./src/routes/views/components/costDistribution/costDistribution.styles.ts","webpack:///./src/routes/views/components/costDistribution/costDistribution.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/utils/computedReport/getComputedOcpReportItems.ts","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsOptimization.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.tsx"],"sourcesContent":["import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    selector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    label: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costDistribution.scss';\nimport { Select, SelectOption, SelectVariant, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { createMapStateToProps } from 'store/common';\nimport { setCostDistribution } from 'utils/localStorage';\nimport { styles } from './costDistribution.styles';\nconst costDistributionOptions = [\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.distributed },\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.total },\n];\nclass CostDistributionBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { costDistribution, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costDistribution);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costDistributionSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costDistributionOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostDistribution(selection.value); // Set cost distribution in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.selector },\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.md, style: styles.label }, intl.formatMessage(messages.costDistributionLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostDistributionConnect = connect(mapStateToProps, mapDispatchToProps)(CostDistributionBase);\nconst CostDistribution = injectIntl(CostDistributionConnect);\nexport default CostDistribution;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { CostDistribution } from 'routes/views/components/costDistribution';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { getIdKeyForGroupBy } from 'routes/views/utils/computedReport/getComputedOcpReportItems';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { costDistribution, currency, groupBy, isCostDistributionFeatureEnabled, isExportsFeatureEnabled, onCostDistributionSelected, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const showCostDistribution = groupBy === 'project' && report && report.meta && report.meta.distributed_overhead === true;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost[reportItemValue];\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost[reportItemValue].value : 0, hasCost ? report.meta.total.cost[reportItemValue].units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagPathsType: tagPathsType }),\n                    showCostDistribution && isCostDistributionFeatureEnabled && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected })))),\n                showContent && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCostDistributionFeatureEnabled: featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { getQuery } from 'api/queries/query';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { formatPath } from 'utils/paths';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = RosPathsType.recommendations;\nconst reportType = RosType.ros;\nclass DetailsOptimization extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.getBreakdownLink = count => {\n            const { project, router } = this.props;\n            if (count === 0 || project === undefined) {\n                return count;\n            }\n            return (React.createElement(Link, { to: getBreakdownPath({\n                    basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                    groupBy: 'project',\n                    id: project,\n                    isOptimizationsTab: true,\n                    router,\n                    title: project,\n                }) }, count));\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        // Todo: Add link to breakdown page\n        return React.createElement(\"span\", null, this.getBreakdownLink(count));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const reportQuery = {\n        project, // project filter\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DetailsOptimization));\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/components/dataTable/dataTable.scss';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { DataTable } from 'routes/components/dataTable';\nimport { styles } from 'routes/components/dataTable/dataTable.styles';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { getUnsortedComputedReportItems } from 'routes/views/utils/computedReport/getComputedReportItems';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { classificationDefault, classificationPlatform, classificationUnallocated, noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport DetailsOptimization from './detailsOptimization';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { costDistribution, groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, isRosFeatureEnabled, report, router, selectedItems, } = this.props;\n            if (!report) {\n                return;\n            }\n            const isGroupByProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                    },\n                    Object.assign({ orderBy: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: false })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const isOverheadCosts = costDistribution === ComputedReportItemValueType.distributed &&\n                    ((item.cost.platformDistributed && item.cost.platformDistributed.value > 0) ||\n                        (item.cost.workerUnallocatedDistributed && item.cost.workerUnallocatedDistributed.value > 0));\n                const isPlatformCosts = item.classification === classificationPlatform;\n                const isUnallocatedCosts = item.classification === classificationUnallocated;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}` || isUnallocatedCosts;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                        description: item.id,\n                        id: item.id,\n                        isPlatformCosts,\n                        groupBy,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !isGroupByProject,\n                            value: item.classification === classificationDefault ? (React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default))) : isOverheadCosts ? (React.createElement(Tooltip, { content: intl.formatMessage(messages.overheadDesc), enableFlip: true },\n                                React.createElement(Label, { variant: \"outline\", color: \"orange\" }, intl.formatMessage(messages.overhead)))) : (React.createElement(\"span\", { style: styles.defaultLabel })),\n                        },\n                        {\n                            hidden: !(isGroupByProject && isRosFeatureEnabled),\n                            value: !isPlatformCosts && !isDisabled && React.createElement(DetailsOptimization, { project: label }),\n                        },\n                        { value: monthOverMonth, id: DetailsTableColumnIds.monthOverMonth },\n                        {\n                            value: InfrastructureCost,\n                            id: DetailsTableColumnIds.infrastructure,\n                            style: styles.managedColumn,\n                        },\n                        {\n                            value: supplementaryCost,\n                            id: DetailsTableColumnIds.supplementary,\n                            style: styles.managedColumn,\n                        },\n                        { value: cost, style: styles.managedColumn },\n                        { value: actions },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.ocp, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { costDistribution, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const value = formatCurrency(Math.abs(item.cost[reportItemValue].value - item.delta_value), item.cost[reportItemValue].units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        showPercentage && item.delta_percent !== null && item.delta_value > 0 && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        showPercentage && item.delta_percent !== null && item.delta_value < 0 && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost[reportItemValue].value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost[reportItemValue].value, item.cost[reportItemValue].units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { costDistribution, hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.costDistribution !== costDistribution ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { filterBy, isLoading, onSelected, onSort, orderBy, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, filterBy: filterBy, isActionsCell: true, isLoading: isLoading, onSelected: onSelected, onSort: onSort, orderBy: orderBy, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/components/dataToolbar';\nimport { isEqual } from 'routes/views/utils/equal';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { tagKey } from 'utils/props';\nconst tagType = TagType.tag;\nconst tagPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n        this.updateReport = () => {\n            const { fetchTag, tagQueryString } = this.props;\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            this.updateReport();\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { query, tagReport } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                this.updateReport();\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExcludes: true, showExport: true, showFilter: true, showPlatformCosts: groupBy === 'project', tagReport: tagReport, tagPathsType: tagPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100vh',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getIdKeyForGroupBy } from 'routes/views/utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'routes/views/utils/computedReport/getComputedReportItems';\nimport { getGroupById, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleOnCostDistributionSelected, handleOnCurrencySelected, handleOnFilterAdded, handleOnFilterRemoved, handleOnPerPageSelect, handleOnSetPage, handleOnSort, } from 'routes/views/utils/navHandles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCostDistribution, getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    exclude: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handleOnPerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleOnSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { costDistribution, isRosFeatureEnabled, query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { costDistribution: costDistribution, filterBy: query.filter_by, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, isRosFeatureEnabled: isRosFeatureEnabled, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleOnSort(query, router, sortType, isSortAscending), orderBy: query.order_by, report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleOnFilterAdded(query, router, filter), onFilterRemoved: filter => handleOnFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: undefined, category: undefined, delta: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router, } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { costDistribution: costDistribution, currency: currency, groupBy: groupById, onCostDistributionSelected: () => handleOnCostDistributionSelected(query, router), onCurrencySelected: () => handleOnCurrencySelected(query, router), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = queryFromRoute.group_by ? getGroupById(queryFromRoute) : getGroupById(baseQuery);\n    const isCostDistributionFeatureEnabled = featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state);\n    const costDistribution = groupBy === 'project' && isCostDistributionFeatureEnabled ? getCostDistribution() : undefined;\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign(Object.assign({}, baseQuery), (costDistribution === ComputedReportItemValueType.distributed && {\n        order_by: {\n            distributed_cost: 'desc',\n        },\n    })), queryFromRoute);\n    const reportQuery = {\n        category: query.category,\n        currency,\n        delta: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costDistribution,\n        currency,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OcpDetails)));\n"],"names":["styles","selector","display","alignItems","label","marginBottom","marginRight","whiteSpace","costDistributionOptions","messages","value","CostDistributionBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","costDistribution","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","description","desc","key","intl","options","push","toString","formatMessage","event","setState","render","style","Title","headingLevel","size","TitleSizes","mapStateToProps","CostDistributionConnect","connect","injectIntl","marginLeft","costValue","marginTop","costLabelUnit","fontSize","color","dateTitle","textAlign","header","backgroundColor","padding","headerContent","justifyContent","headerContentLeft","minHeight","headerContentRight","info","verticalAlign","infoIcon","infoTitle","fontWeight","title","paddingBottom","getIdKeyForGroupBy","groupBy","project","cluster","node","groupByOptions","tagPathsType","DetailsHeaderBase","currency","isCostDistributionFeatureEnabled","isExportsFeatureEnabled","onCostDistributionSelected","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","count","showCostDistribution","distributed_overhead","cost","supplementaryCost","infrastructureCost","reportItemValue","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","onSelected","showTags","Tooltip","content","enableFlip","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","reportPathsType","reportType","DetailsOptimization","updateReport","fetchReport","reportQueryString","getBreakdownLink","router","undefined","Link","to","basePath","routes","isOptimizationsTab","componentDidMount","reportQuery","reportError","reportFetchStatus","mapDispatchToProps","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","groupByTagKey","hiddenColumns","isAllSelected","isRosFeatureEnabled","selectedItems","isGroupByProject","computedItems","idKey","name","hidden","orderBy","length","isSortable","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","isOverheadCosts","platformDistributed","workerUnallocatedDistributed","isPlatformCosts","classification","isUnallocatedCosts","actions","getActions","cells","Label","selected","val","selectionDisabled","filteredColumns","filter","column","has","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","providerType","showPriceListOption","percentValue","toFixed","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","filterBy","isLoading","onSort","isActionsCell","DetailsTable","tagType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","onPlatformCostsChanged","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExcludes","showExport","showFilter","showPlatformCosts","resolution","time_scope_units","time_scope_value","key_only","limit","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","global_spacer_lg","paddingTop","ocpDetails","paginationContainer","global_BackgroundColor_light_100","global_spacer_md","tableContainer","toolbarContainer","baseQuery","offset","filter_by","exclude","group_by","order_by","defaultColumnOptions","OcpDetails","stateProps","dispatchProps","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","onClose","handleColumnManagementModalClose","onSave","handleColumnManagementModalSave","getComputedItems","groupById","getExportModal","items","isAllItems","handleExportModalClose","getPagination","isBottom","page","trunc","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handlePlatformCostsChanged","action","handleGroupBySelected","groupByKey","newQuery","parse","category","delta","navigate","location","replace","checked","isSelected","newItems","bind","prevState","noReport","noLocation","search","queryFromRoute","distributed_cost"],"sourceRoot":""}