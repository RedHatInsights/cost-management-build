{"version":3,"file":"js/ocpDetails.5101d3bb7e652dfd9099.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_FontSize_md.js","webpack:///./src/routes/views/utils/costDistribution.ts","webpack:///./src/routes/views/components/costDistribution/costDistribution.styles.ts","webpack:///./src/routes/views/components/costDistribution/costDistribution.tsx","webpack:///./src/routes/views/details/components/columnManagement/columnManagementModal.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsOptimization.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.tsx"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.global_FontSize_md = {\n  \"name\": \"--pf-global--FontSize--md\",\n  \"value\": \"1rem\",\n  \"var\": \"var(--pf-global--FontSize--md)\"\n};\nexports[\"default\"] = exports.global_FontSize_md;","import { getCostDistribution as getCostDistributionFromLocaleStorage } from 'utils/localStorage';\n// eslint-disable-next-line no-shadow\nexport var CostDistributionType;\n(function (CostDistributionType) {\n    CostDistributionType[\"distributed\"] = \"distributed\";\n    CostDistributionType[\"total\"] = \"total\";\n})(CostDistributionType || (CostDistributionType = {}));\n// Returns cost type\nexport const getCostType = () => {\n    switch (getCostDistributionFromLocaleStorage()) {\n        case 'distributed':\n            return CostDistributionType.distributed;\n        case 'total':\n        default:\n            return CostDistributionType.total;\n    }\n};\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    selector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    label: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costDistribution.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostDistributionType } from 'routes/views/utils/costDistribution';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, setCostDistribution } from 'utils/localStorage';\nimport { styles } from './costDistribution.styles';\nconst costDistributionOptions = [\n    { label: messages.costDistributionType, value: CostDistributionType.distributed },\n    { label: messages.costDistributionType, value: CostDistributionType.total },\n];\nclass CostDistributionBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { costDistribution = CostDistributionType.total, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costDistribution);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costDistributionSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costDistributionOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostDistribution(selection.value); // Set cost distribution in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.selector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.label }, intl.formatMessage(messages.costDistributionLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostDistributionConnect = connect(mapStateToProps, mapDispatchToProps)(CostDistributionBase);\nconst CostDistribution = injectIntl(CostDistributionConnect);\nexport default CostDistribution;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.manageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.selectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.manageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.manageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": `${option.value}Label`, isChecked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: `${option.value}Label`, key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport default ColumnManagementModal;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { CostDistribution } from 'routes/views/components/costDistribution';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { costDistribution, currency, groupBy, isExportsFeatureEnabled, onCostDistributionSelected, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType }),\n                    groupBy === 'project' && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected })))),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { getQuery } from 'api/queries/query';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { formatPath } from 'utils/paths';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = RosPathsType.recommendations;\nconst reportType = RosType.ros;\nclass DetailsOptimization extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.getBreakdownLink = count => {\n            const { project, router } = this.props;\n            if (count === 0 || project === undefined) {\n                return count;\n            }\n            return (React.createElement(Link, { to: getBreakdownPath({\n                    basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                    groupBy: 'project',\n                    id: project,\n                    isOptimizationsTab: true,\n                    router,\n                    title: project,\n                }) }, count));\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        // Todo: Add link to breakdown page\n        return React.createElement(\"span\", null, this.getBreakdownLink(count));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const reportQuery = {\n        project, // project filter\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DetailsOptimization));\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { classificationDefault, classificationPlatform, classificationUnallocated, noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport DetailsOptimization from './detailsOptimization';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, isRosFeatureEnabled, report, router, selectedItems, } = this.props;\n            if (!report) {\n                return;\n            }\n            const isGroupByProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: false })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const isOverheadCosts = (item.cost.platformDistributed && item.cost.platformDistributed.value > 0) ||\n                    (item.cost.workerUnallocatedDistributed && item.cost.workerUnallocatedDistributed.value > 0);\n                const isPlatformCosts = item.classification === classificationPlatform;\n                const isUnallocatedCosts = item.classification === classificationUnallocated;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}` || isUnallocatedCosts;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                        description: item.id,\n                        id: item.id,\n                        isPlatformCosts,\n                        groupBy,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !isGroupByProject,\n                            value: item.classification === classificationDefault ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : isOverheadCosts ? (React.createElement(Tooltip, { content: intl.formatMessage(messages.overheadDesc), enableFlip: true },\n                                React.createElement(Label, { variant: \"outline\", color: \"orange\" }, intl.formatMessage(messages.overhead)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        {\n                            hidden: !(isGroupByProject && isRosFeatureEnabled),\n                            value: !isPlatformCosts && !isDisabled && (React.createElement(\"div\", null,\n                                React.createElement(DetailsOptimization, { project: label }))),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        {\n                            value: React.createElement(\"div\", null, InfrastructureCost),\n                            id: DetailsTableColumnIds.infrastructure,\n                            style: styles.managedColumn,\n                        },\n                        {\n                            value: React.createElement(\"div\", null, supplementaryCost),\n                            id: DetailsTableColumnIds.supplementary,\n                            style: styles.managedColumn,\n                        },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.ocp, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== FetchStatus.inProgress) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExcludes: true, showExport: true, showFilter: true, showPlatformCosts: groupBy === 'project', tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100vh',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCostDistributionSelected, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostDistribution, getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    exclude: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { isRosFeatureEnabled, query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, isRosFeatureEnabled: isRosFeatureEnabled, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' }, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router, } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { costDistribution: costDistribution, currency: currency, groupBy: groupById, onCostDistributionSelected: value => handleCostDistributionSelected(query, router, value), onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const costDistribution = getCostDistribution();\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign({}, baseQuery), queryFromRoute);\n    const reportQuery = {\n        category: query.category,\n        currency,\n        delta: 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costDistribution,\n        currency,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OcpDetails)));\n"],"names":["exports","CostDistributionType","styles","selector","display","alignItems","label","marginBottom","marginRight","whiteSpace","costDistributionOptions","messages","value","distributed","total","CostDistributionBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","costDistribution","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","description","desc","key","intl","options","push","toString","formatMessage","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CostDistributionConnect","connect","injectIntl","initHiddenColumns","hiddenColumns","Set","hidden","add","ColumnManagementModalBase","stateProps","dispatchProps","getHidden","result","delete","isHidden","has","handleChange","checked","target","handleClose","onClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","Modal","TextContent","Text","component","TextVariants","Button","isInline","onClick","title","ModalVariant","actions","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","isChecked","name","onChange","DataListItemCells","dataListCells","DataListCell","ColumnManagementModalConnect","marginLeft","costValue","marginTop","costLabelUnit","fontSize","color","dateTitle","textAlign","header","backgroundColor","padding","headerContent","justifyContent","headerContentLeft","minHeight","headerContentRight","info","verticalAlign","infoIcon","infoTitle","fontWeight","paddingBottom","getIdKeyForGroupBy","groupBy","project","cluster","node","groupByOptions","tagReportPathsType","DetailsHeaderBase","currency","isExportsFeatureEnabled","onCostDistributionSelected","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","count","cost","supplementaryCost","infrastructureCost","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","TitleSizes","onSelected","showTags","Boolean","Tooltip","content","enableFlip","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","reportPathsType","reportType","DetailsOptimization","updateReport","fetchReport","reportQueryString","getBreakdownLink","router","undefined","Link","to","basePath","routes","isOptimizationsTab","componentDidMount","reportQuery","reportError","reportFetchStatus","mapDispatchToProps","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","groupByTagKey","isAllSelected","isRosFeatureEnabled","selectedItems","isGroupByProject","computedItems","idKey","orderBy","length","isSortable","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","isOverheadCosts","platformDistributed","workerUnallocatedDistributed","isPlatformCosts","classification","isUnallocatedCosts","getActions","cells","Label","selected","val","selectionDisabled","filteredColumns","filter","column","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","providerType","showPriceListOption","percentValue","toFixed","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","onPlatformCostsChanged","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExcludes","showExport","showFilter","showPlatformCosts","resolution","time_scope_units","time_scope_value","key_only","limit","DetailsToolbarConnect","DetailsToolbar","global_spacer_lg","paddingTop","ocpDetails","paginationContainer","global_BackgroundColor_light_100","global_spacer_md","tableContainer","toolbarContainer","baseQuery","offset","filter_by","exclude","group_by","order_by","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","groupById","getExportModal","items","isAllItems","handleExportModalClose","getPagination","isBottom","page","trunc","Pagination","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handlePlatformCostsChanged","action","handleGroupBySelected","groupByKey","newQuery","parse","category","navigate","location","replace","isSelected","newItems","bind","prevState","noReport","noLocation","search","queryFromRoute","delta"],"sourceRoot":""}