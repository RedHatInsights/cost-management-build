{"version":3,"file":"js/ocp.1669058738233.ed1102f4405d7384486b.js","mappings":"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","sources":["webpack:///./src/routes/views/details/ocpBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/ocpBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/ocpBreakdown/ocpBreakdown.tsx","webpack:///./src/routes/views/details/components/columnManagement/columnManagementModal.tsx","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        category: queryFromRoute.category, // Needed to restore details page state\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign(Object.assign({}, query), (queryFromRoute.category === 'platform' && {\n        group_by: {\n            project: ['kube-', 'openshift-'],\n        },\n    })), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { category: queryFromRoute.category, currency: currency, groupBy: groupBy, report: report })),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        providerType: ProviderType.ocp,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.ocp,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.manageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.selectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.manageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.manageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": `${option.value}Label`, isChecked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: `${option.value}Label`, key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport default ColumnManagementModal;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, isAllSelected, report, selectedItems, intl } = this.props;\n            if (!report) {\n                return;\n            }\n            const showDefaultProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const isDisabled = label === `no-${groupBy}` || label === `no-${groupByTagKey}`;\n                const isPlatformCosts = item.classification === 'category';\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const actions = this.getActions(item, isDisabled || isPlatformCosts);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ocpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy,\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !showDefaultProject,\n                            value: item.default_project ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { value: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { value: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled || isPlatformCosts,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.ocp, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== FetchStatus.inProgress) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, showPlatformCosts: groupBy === 'project', tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getRouteForQuery, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/history';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { history, intl, query, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(history, query, perPage), onSetPage: (event, pageNumber) => handleSetPage(history, query, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { history, query, report, reportFetchStatus, reportQueryString } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(history, query, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { history, query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(history, query, filter), onFilterRemoved: filter => handleFilterRemoved(history, query, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' }, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? 'platform' : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, history, location, query, reportQueryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, reportQueryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, history, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(history, query, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        category: queryFromRoute.category,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","injectIntl","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","queryFromRoute","location","search","groupBy","groupByValue","currency","featureFlags","undefined","query","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","exclude","group_by","category","reportQueryString","project","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","constructor","stateProps","dispatchProps","super","this","defaultState","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","setState","handleClose","onClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","render","Modal","TextContent","Text","component","TextVariants","Button","isInline","onClick","variant","isOpen","ModalVariant","actions","key","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","isChecked","name","onChange","DataListItemCells","dataListCells","DataListCell","label","ColumnManagementModalConnect","getIdKeyForGroupBy","cluster","node","groupByOptions","DetailsHeaderBase","arguments","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","style","Title","headingLevel","size","TitleSizes","onSelect","isDisabled","onSelected","showTags","Boolean","Tooltip","content","enableFlip","DetailsHeader","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","groupByTagKey","isAllSelected","selectedItems","showDefaultProject","computedItems","idKey","orderBy","length","isSortable","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","isPlatformCosts","classification","desc","getActions","to","basePath","toString","push","cells","default_project","Label","color","selected","find","val","selectionDisabled","filteredColumns","column","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","showPriceListOption","percentValue","toFixed","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","componentDidMount","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","tagQueryString","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","onPlatformCostsChanged","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","showPlatformCosts","key_only","limit","DetailsToolbarConnect","DetailsToolbar","styles","paddingBottom","global_spacer_lg","paddingTop","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","baseQuery","delta","offset","order_by","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","groupById","getExportModal","items","isAllItems","handleExportModalClose","getPagination","isBottom","history","page","Pagination","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handlePlatformCostsChanged","action","handleGroupBySelected","groupByKey","newQuery","parse","replace","isSelected","newItems","updateReport","bind","prevState","noReport","noLocation"],"sourceRoot":""}