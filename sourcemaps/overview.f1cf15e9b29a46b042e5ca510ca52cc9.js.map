{"version":3,"file":"js/overview.ce59f24f7b771c6f5189.js","mappings":"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","sources":["webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/routes/components/currency/currency.styles.ts","webpack:///./src/routes/components/currency/currency.tsx","webpack:///./src/routes/settings/settings.styles.ts","webpack:///./src/routes/settings/settings.tsx","webpack:///./src/routes/state/noData/noDataState.tsx","webpack:///./src/routes/state/noData/noData.tsx","webpack:///./src/routes/components/icons/costIcon/costIcon.tsx","webpack:///./src/routes/state/noProviders/noProvidersState.styles.ts","webpack:///./src/routes/state/noProviders/noProvidersState.tsx","webpack:///./src/routes/state/noProviders/noProviders.tsx","webpack:///./src/routes/views/components/perspective/perspective.tsx","webpack:///./src/routes/views/overview/components/dashboardBase.tsx","webpack:///./src/routes/views/overview/components/optimizationsSummary/optimizations.styles.ts","webpack:///./src/routes/views/overview/components/optimizationsSummary/optimizationsSummary.tsx","webpack:///./src/routes/views/overview/components/chartComparison.tsx","webpack:///./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack:///./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboard.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack:///./src/routes/views/overview/overview.styles.ts","webpack:///./src/routes/views/overview/overview.tsx","webpack:///./src/api/queries/overviewQuery.ts","webpack:///./src/routes/views/utils/providers.ts","webpack:///./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currency, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: \"currencyOverride\", id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCurrency(selection.value); // Set currency units via local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.currency)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport default Currency;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './settings.scss';\nimport { Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes } from '@patternfly/react-core';\nimport { getQueryRoute, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { withRouter } from 'utils/router';\nimport { styles } from './settings.styles';\n// eslint-disable-next-line no-shadow\nvar SettingsTab;\n(function (SettingsTab) {\n    SettingsTab[\"costModels\"] = \"cost-models\";\n    SettingsTab[\"calculations\"] = \"calculations\";\n    SettingsTab[\"tags\"] = \"tags\";\n})(SettingsTab || (SettingsTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case SettingsTab.costModels:\n            return 'cost-models';\n        case SettingsTab.calculations:\n            return 'calculations';\n        case SettingsTab.tags:\n            return 'tags';\n    }\n};\nclass SettingsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: SettingsTab.costModels,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: SettingsTab.calculations,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: SettingsTab.tags,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getRouteForQuery = (query) => {\n            const { router } = this.props;\n            return `${router.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === SettingsTab.costModels) {\n                return 'cost models';\n            }\n            else if (currentTab === SettingsTab.calculations) {\n                return 'calculations';\n            }\n            else if (currentTab === SettingsTab.tags) {\n                return 'tags';\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === SettingsTab.costModels) {\n                return intl.formatMessage(messages.costModels);\n            }\n            else if (tab === SettingsTab.calculations) {\n                return intl.formatMessage(messages.currencyCalcuations);\n            }\n            else if (tab === SettingsTab.tags) {\n                return intl.formatMessage(messages.tagLabels);\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { query, router } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n                });\n            }\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n        });\n    }\n    render() {\n        const { intl } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.settingsTitle);\n        return (React.createElement(\"div\", { className: \"tabsOverride\" },\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] }, title)),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const query = Object.assign({}, queryFromRoute);\n    return {\n        query,\n        tabKey,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Settings = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SettingsBase)));\nexport default Settings;\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(NoDataStateBase);\nexport { NoDataState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default NoData;\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CostIcon } from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case ProviderType.aws:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case ProviderType.azure:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case ProviderType.gcp:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case ProviderType.ibm:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case ProviderType.ocp:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(NoProvidersStateBase);\nexport { NoProvidersState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default NoProviders;\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\n// RHEL options\nconst rhelOptions = [{ label: messages.perspectiveValues, value: 'rhel' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst Perspective = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, hasRhel, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isRhelTab, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    // Note isInfrastructureTab and isRhelTab will be undefined for cost explorer\n    if (isInfrastructureTab !== undefined || isRhelTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n            }));\n        }\n        else if (isRhelTab) {\n            if (hasRhel) {\n                options.push(...rhelOptions);\n            }\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        if (hasRhel) {\n            options.push(...rhelOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nexport default Perspective;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, currency, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details && widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency })))));\n    }))));\nexport default DashboardBase;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nexport const styles = {\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n};\n","import './optimizationsSummary.scss';\nimport { Button, ButtonVariant, Card, CardBody, CardTitle, Popover, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { FetchStatus } from 'store/common';\nimport { formatPath } from 'utils/paths';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './optimizations.styles';\nconst OptimizationsSummaryBase = ({ intl, report, status, title }) => {\n    const count = report && report.meta ? report.meta.count : 0;\n    const description = intl.formatMessage(messages.optimizationsDetails, { count });\n    return (React.createElement(Card, { className: \"summary\" },\n        React.createElement(CardTitle, null,\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                intl.formatMessage(title),\n                React.createElement(\"span\", { style: styles.infoIcon },\n                    React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.optimizationsInfoArialLabel), enableFlip: true, bodyContent: React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.optimizationsInfo)) },\n                        React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.optimizationsInfoButtonArialLabel), variant: ButtonVariant.plain },\n                            React.createElement(OutlinedQuestionCircleIcon, null)))))),\n        React.createElement(CardBody, null, status === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { width: \"16%\" }),\n            React.createElement(Skeleton, { className: \"skeleton\", width: skeletonWidth.md }))) : count > 0 ? (React.createElement(Link, { to: formatPath(routes.optimizations.path) }, description)) : (description))));\n};\nconst OptimizationsSummary = injectIntl(OptimizationsSummaryBase);\nexport default OptimizationsSummary;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ComputedReportItemType, DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { getComputedForecast, transformForecast, transformForecastCone, } from 'routes/views/components/charts/common/chartDatumForecast';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { OptimizationsSummary } from 'routes/views/overview/components/optimizationsSummary';\nimport { DashboardChartType } from 'store/dashboard/common/dashboardCommon';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\n// eslint-disable-next-line no-shadow\nvar Comparison;\n(function (Comparison) {\n    Comparison[\"cumulative\"] = \"cumulative\";\n    Comparison[\"daily\"] = \"daily\";\n})(Comparison || (Comparison = {}));\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            currentComparison: Comparison.cumulative,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === DashboardChartType.dailyTrend) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.dailyCost) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === DashboardChartType.trend) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.usage) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: Comparison.daily },\n                { label: cumulativeTitle, value: Comparison.cumulative, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === Comparison.daily;\n            const datumType = daily ? DatumType.rolling : trend.datumType;\n            const computedForecast = getComputedForecast(forecast, report, computedForecastItem, datumType);\n            const forecastData = transformForecast(computedForecast, datumType, computedForecastItem);\n            const forecastConeData = transformForecastCone(computedForecast, datumType, computedForecastItem);\n            return { forecastData, forecastConeData };\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === ComputedReportItemType.usage) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getOptimizationsSummary = () => {\n            const { rosReportFetchStatus, rosReport, titleKey } = this.props;\n            return React.createElement(OptimizationsSummary, { status: rosReportFetchStatus, report: rosReport, title: titleKey });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                availableTabs && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({ activeTabKey: tabIndex });\n        };\n        this.updateForecasts = () => {\n            const { fetchForecasts, widgetId } = this.props;\n            if (fetchForecasts) {\n                fetchForecasts(widgetId);\n            }\n        };\n        this.updateReports = () => {\n            const { fetchReports, widgetId } = this.props;\n            if (fetchReports) {\n                fetchReports(widgetId);\n            }\n        };\n        this.updateRosReports = () => {\n            const { fetchRosReports, isRosFeatureEnabled, widgetId } = this.props;\n            if (fetchRosReports && isRosFeatureEnabled) {\n                fetchRosReports(widgetId);\n            }\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, details, id, trend, updateTab } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (trend && trend.computedForecastItem !== undefined) {\n            this.updateForecasts();\n        }\n        if (!details.showOptimizations) {\n            this.updateReports();\n        }\n        if (details.showOptimizations) {\n            this.updateRosReports();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, trend } = this.props;\n        if (prevProps.costType !== costType || prevProps.currency !== currency) {\n            this.updateReports();\n            if (trend && trend.computedForecastItem !== undefined) {\n                this.updateForecasts();\n            }\n        }\n    }\n    render() {\n        const { details, isRosFeatureEnabled } = this.props;\n        if (details.showOptimizations) {\n            return isRosFeatureEnabled ? this.getOptimizationsSummary() : null;\n        }\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport default DashboardWidgetBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, AwsDashboardTab } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsDashboardTab.services:\n            return 'service';\n        case AwsDashboardTab.accounts:\n            return 'account';\n        case AwsDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), costType: getCostType(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors, AwsOcpDashboardTab } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsOcpDashboardTab.services:\n            return 'service';\n        case AwsOcpDashboardTab.accounts:\n            return 'account';\n        case AwsOcpDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), costType: getCostType(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, AzureDashboardTab } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureDashboardTab.service_names:\n            return 'service_name';\n        case AzureDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, AzureOcpDashboardTab, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureOcpDashboardTab.service_names:\n            return 'service_name';\n        case AzureOcpDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureOcpDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors, GcpDashboardTab } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpDashboardTab.regions:\n            return 'region';\n        case GcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors, GcpOcpDashboardTab } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpOcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpOcpDashboardTab.regions:\n            return 'region';\n        case GcpOcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors, IbmDashboardTab } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case IbmDashboardTab.services:\n            return 'service';\n        case IbmDashboardTab.projects:\n            return 'project';\n        case IbmDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, OcpCloudDashboardTab, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpCloudDashboardTab.accounts:\n            return 'account';\n        case OcpCloudDashboardTab.regions:\n            return 'region';\n        case OcpCloudDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, OcpDashboardTab } from 'store/dashboard/ocpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { rosSelectors } from 'store/ros';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpDashboardTab.clusters:\n            return 'cluster';\n        case OcpDashboardTab.nodes:\n            return 'node';\n        case OcpDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    })), (widget.rosPathsType &&\n        widget.rosType && {\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        rosReport: rosSelectors.selectRos(state, widget.rosPathsType, widget.rosType, queries.optimizations),\n        rosReportError: rosSelectors.selectRosError(state, widget.rosPathsType, widget.rosType, queries.optimizations),\n        rosReportFetchStatus: rosSelectors.selectRosFetchStatus(state, widget.rosPathsType, widget.rosType, queries.optimizations),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    fetchRosReports: ocpDashboardActions.fetchWidgetRosReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardActions, rhelDashboardSelectors, RhelDashboardTab } from 'store/dashboard/rhelDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './rhelDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case RhelDashboardTab.clusters:\n            return 'cluster';\n        case RhelDashboardTab.nodes:\n            return 'node';\n        case RhelDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = rhelDashboardSelectors.selectWidget(state, widgetId);\n    const queries = rhelDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: rhelDashboardActions.fetchWidgetForecasts,\n    fetchReports: rhelDashboardActions.fetchWidgetReports,\n    updateTab: rhelDashboardActions.changeWidgetTab,\n};\nconst RhelDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { RhelDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardSelectors } from 'store/dashboard/rhelDashboard';\nimport { RhelDashboardWidget } from './rhelDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: RhelDashboardWidget,\n        selectWidgets: rhelDashboardSelectors.selectWidgets(state),\n        widgets: rhelDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst RhelDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default RhelDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors, OciDashboardTab } from 'store/dashboard/ociDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OciDashboardTab.product_services:\n            return 'product_service';\n        case OciDashboardTab.payer_tenant_ids:\n            return 'payer_tenant_id';\n        case OciDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport { getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { UserAccessType } from 'api/userAccess';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { Loading } from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { AwsDashboard } from 'routes/views/overview/awsDashboard';\nimport { AwsOcpDashboard } from 'routes/views/overview/awsOcpDashboard';\nimport { AzureDashboard } from 'routes/views/overview/azureDashboard';\nimport { AzureOcpDashboard } from 'routes/views/overview/azureOcpDashboard';\nimport { GcpDashboard } from 'routes/views/overview/gcpDashboard';\nimport { GcpOcpDashboard } from 'routes/views/overview/gcpOcpDashboard';\nimport { IbmDashboard } from 'routes/views/overview/ibmDashboard';\nimport { OcpCloudDashboard } from 'routes/views/overview/ocpCloudDashboard';\nimport { OcpDashboard } from 'routes/views/overview/ocpDashboard';\nimport { RhelDashboard } from 'routes/views/overview/rhelDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nimport { withRouter } from 'utils/router';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, isRhelAvailable, } from 'utils/userAccess';\nimport { OciDashboard } from './ociDashboard';\nimport { styles } from './overview.styles';\n// eslint-disable-next-line no-shadow\nvar InfrastructurePerspective;\n(function (InfrastructurePerspective) {\n    InfrastructurePerspective[\"aws\"] = \"aws\";\n    InfrastructurePerspective[\"awsOcp\"] = \"aws_ocp\";\n    InfrastructurePerspective[\"azure\"] = \"azure\";\n    InfrastructurePerspective[\"azureOcp\"] = \"azure_ocp\";\n    InfrastructurePerspective[\"gcp\"] = \"gcp\";\n    InfrastructurePerspective[\"gcpOcp\"] = \"gcp_ocp\";\n    InfrastructurePerspective[\"ibm\"] = \"ibm\";\n    InfrastructurePerspective[\"ibmOcp\"] = \"ibm_ocp\";\n    InfrastructurePerspective[\"oci\"] = \"oci\";\n    InfrastructurePerspective[\"ocpCloud\"] = \"ocp_cloud\";\n})(InfrastructurePerspective || (InfrastructurePerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OcpPerspective;\n(function (OcpPerspective) {\n    OcpPerspective[\"ocp\"] = \"ocp\";\n})(OcpPerspective || (OcpPerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OverviewTab;\n(function (OverviewTab) {\n    OverviewTab[\"infrastructure\"] = \"infrastructure\";\n    OverviewTab[\"ocp\"] = \"ocp\";\n    OverviewTab[\"rhel\"] = \"rhel\";\n})(OverviewTab || (OverviewTab = {}));\n// eslint-disable-next-line no-shadow\nvar RhelPerspective;\n(function (RhelPerspective) {\n    RhelPerspective[\"rhel\"] = \"rhel\";\n})(RhelPerspective || (RhelPerspective = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OverviewTab.infrastructure:\n            return 'infrastructure';\n        case OverviewTab.ocp:\n            return 'ocp';\n        case OverviewTab.rhel:\n            return 'rhel';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const availableTabs = [];\n            const infrastructureTabs = this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.infrastructure,\n                    },\n                ]\n                : undefined;\n            const ocpTabs = this.isOcpAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.ocp,\n                    },\n                ]\n                : undefined;\n            const rhelTabs = this.isRhelAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.rhel,\n                    },\n                ]\n                : undefined;\n            if (isFinsightsFeatureEnabled) {\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n                if (rhelTabs) {\n                    availableTabs.push(...rhelTabs);\n                }\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n            }\n            else {\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === InfrastructurePerspective.aws || currentItem === InfrastructurePerspective.awsOcp) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrency = () => {\n            const { currency } = this.props;\n            return React.createElement(Currency, { onSelect: this.handleCurrencySelected, currency: currency });\n        };\n        this.getCurrentTab = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const hasRhel = this.isRhelAvailable();\n            const hasInfrastructure = hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud;\n            const showInfrastructureOnly = hasInfrastructure && !hasOcp && !hasRhel;\n            const showOcpOnly = hasOcp && !hasInfrastructure && !hasRhel;\n            const showRhelOnly = hasRhel && !hasInfrastructure && !hasOcp;\n            if (showOcpOnly) {\n                return OverviewTab.ocp;\n            }\n            else if (showInfrastructureOnly) {\n                return OverviewTab.infrastructure;\n            }\n            else if (showRhelOnly) {\n                return OverviewTab.rhel;\n            }\n            else {\n                if (isFinsightsFeatureEnabled) {\n                    switch (activeTabKey) {\n                        case 0:\n                            return OverviewTab.infrastructure;\n                        case 1:\n                            return OverviewTab.rhel;\n                        case 2:\n                            return OverviewTab.ocp;\n                    }\n                }\n                switch (activeTabKey) {\n                    case 0:\n                        return OverviewTab.ocp;\n                    case 1:\n                        return OverviewTab.infrastructure;\n                }\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case InfrastructurePerspective.aws:\n                case InfrastructurePerspective.awsOcp:\n                case InfrastructurePerspective.azure:\n                case InfrastructurePerspective.oci:\n                case InfrastructurePerspective.azureOcp:\n                case InfrastructurePerspective.gcp:\n                case InfrastructurePerspective.gcpOcp:\n                case InfrastructurePerspective.ibm:\n                case InfrastructurePerspective.ibmOcp:\n                case InfrastructurePerspective.ocpCloud:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return InfrastructurePerspective.ocpCloud;\n            }\n            if (this.isAwsAvailable()) {\n                return InfrastructurePerspective.aws;\n            }\n            if (this.isAzureAvailable()) {\n                return InfrastructurePerspective.azure;\n            }\n            if (this.isOciAvailable()) {\n                return InfrastructurePerspective.oci;\n            }\n            if (this.isGcpAvailable()) {\n                return InfrastructurePerspective.gcp;\n            }\n            if (this.isIbmAvailable()) {\n                return InfrastructurePerspective.ibm;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case OcpPerspective.ocp:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return OcpPerspective.ocp;\n            }\n            return undefined;\n        };\n        this.getDefaultRhelPerspective = () => {\n            const { perspective, rhelProviders, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case RhelPerspective.rhel:\n                    return perspective;\n            }\n            if (isRhelAvailable(userAccess, rhelProviders)) {\n                return RhelPerspective.rhel;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasRhel = this.isRhelAvailable();\n            // Note: No need to test \"OCP on cloud\" here, since that requires at least one of the providers below\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp || hasRhel)) {\n                return null;\n            }\n            let currentItem;\n            const currentTab = this.getCurrentTab();\n            switch (currentTab) {\n                case OverviewTab.infrastructure:\n                    currentItem = currentInfrastructurePerspective;\n                    break;\n                case OverviewTab.ocp:\n                    currentItem = currentOcpPerspective;\n                    break;\n                case OverviewTab.rhel:\n                    currentItem = currentRhelPerspective;\n                    break;\n            }\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), hasRhel: hasRhel, isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: OverviewTab.infrastructure === currentTab, isRhelTab: OverviewTab.rhel === currentTab, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { router } = this.props;\n            return `${router.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, ocpProviders, rhelProviders, } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === OverviewTab.infrastructure) {\n                if (currentInfrastructurePerspective === InfrastructurePerspective.ocpCloud) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.aws) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.awsOcp) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azure) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azureOcp) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcp) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcpOcp) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.ibm) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.oci) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.ocp) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === OcpPerspective.ocp) {\n                    return hasData ? React.createElement(OcpDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.rhel) {\n                const hasData = hasCurrentMonthData(rhelProviders) || hasPreviousMonthData(rhelProviders);\n                if (currentRhelPerspective === RhelPerspective.rhel) {\n                    return hasData ? React.createElement(RhelDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl, isFinsightsFeatureEnabled } = this.props;\n            if (tab === OverviewTab.infrastructure) {\n                if (isFinsightsFeatureEnabled) {\n                    return intl.formatMessage(messages.summary);\n                }\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === OverviewTab.ocp) {\n                return intl.formatMessage(messages.openShift);\n            }\n            else if (tab === OverviewTab.rhel) {\n                return intl.formatMessage(messages.rhel);\n            }\n        };\n        this.handleCostTypeSelected = () => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handleCurrencySelected = () => {\n            const { router, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { query, router } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === OverviewTab.infrastructure && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === OverviewTab.ocp && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { query, router } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n        this.isRhelAvailable = () => {\n            const { isFinsightsFeatureEnabled, rhelProviders, userAccess } = this.props;\n            return isFinsightsFeatureEnabled && isRhelAvailable(userAccess, rhelProviders);\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n            currentRhelPerspective: this.getDefaultRhelPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n                currentRhelPerspective: this.getDefaultRhelPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isFinsightsFeatureEnabled, isIbmFeatureEnabled, userAccessFetchStatus } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === FetchStatus.complete &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable() &&\n            !this.isRhelAvailable();\n        const isLoading = providersFetchStatus === FetchStatus.inProgress || userAccessFetchStatus === FetchStatus.inProgress;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    isFinsightsFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rhel)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.rhelDesc)),\n                                        React.createElement(\"br\", null))),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, this.getCurrency())),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const perspective = queryFromRoute.perspective;\n    const currency = getCurrency();\n    const costType = perspective === InfrastructurePerspective.aws || perspective === InfrastructurePerspective.awsOcp\n        ? getCostType()\n        : undefined;\n    const query = Object.assign({}, queryFromRoute);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, UserAccessType.all, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, UserAccessType.all, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, UserAccessType.all, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, ProviderType.aws),\n        azureProviders: filterProviders(providers, ProviderType.azure),\n        costType,\n        currency,\n        gcpProviders: filterProviders(providers, ProviderType.gcp),\n        ibmProviders: filterProviders(providers, ProviderType.ibm),\n        isFinsightsFeatureEnabled: featureFlagsSelectors.selectIsFinsightsFeatureEnabled(state),\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        ociProviders: filterProviders(providers, ProviderType.oci),\n        ocpProviders: filterProviders(providers, ProviderType.ocp),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        rhelProviders: filterProviders(providers, ProviderType.rhel),\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OverviewBase)));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","// eslint-disable-next-line no-shadow\nvar DataType;\n(function (DataType) {\n    DataType[\"currentMonthData\"] = \"current_month_data\";\n    DataType[\"hasData\"] = \"has_data\";\n    DataType[\"previousMonthData\"] = \"previous_month_data\";\n})(DataType || (DataType = {}));\n// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.currentMonthData);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.hasData);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.previousMonthData);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, DataType.currentMonthData);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, DataType.hasData);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, DataType.previousMonthData);\n};\n","import { UserAccessType } from 'api/userAccess';\nconst hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.aws);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.azure);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.oci);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.cost_model);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.gcp);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, UserAccessType.gcp) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ocp);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n// Returns true if user has access to RHEL\nexport const hasRhelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.rhel);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRhelAvailable = (userAccess, rhelProviders) => {\n    return hasRhelAccess(userAccess) && hasProviders(rhelProviders);\n};\n// Returns true if user has access to ROS\nexport const hasRosAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ros);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRosAvailable = (userAccess, rosProviders) => {\n    return hasRosAccess(userAccess) && hasProviders(rosProviders);\n};\n"],"names":["getProvidersQuery","query","stringify","encode","indices","getUserAccessQuery","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","currency","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CurrencyConnect","connect","injectIntl","header","backgroundColor","global_BackgroundColor_light_100","paddingLeft","global_spacer_lg","paddingRight","paddingTop","headerContent","justifyContent","main","padding","tabs","SettingsTab","getIdKeyForTab","tab","costModels","calculations","tags","SettingsBase","activeTabKey","getAvailableTabs","contentRef","getRouteForQuery","router","location","pathname","getTab","index","Tab","eventKey","tabContentId","tabContentRef","title","TabTitleText","getTabTitle","getTabContent","availableTabs","val","TabContent","ref","getTabItem","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","newQuery","JSON","parse","tabKey","navigate","replace","componentDidMount","TitleSizes","queryFromRoute","search","Number","isNaN","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","Button","onClick","window","reload","NoDataState","PageHeader","PageHeaderTitle","PageSection","src","alt","iconSpacer","marginLeft","viewSources","marginTop","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","titleKey","component","NoProvidersState","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","rhelOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","currentItem","hasOcp","hasOcpCloud","hasRhel","isInfrastructureTab","isRhelTab","onSelected","undefined","costType","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","widget","details","showHorizontal","GridItem","sm","lg","xl","xl2","infoIcon","fontSize","global_FontSize_md","report","status","count","meta","description","Card","CardTitle","Popover","enableFlip","bodyContent","infoTitle","ButtonVariant","CardBody","Skeleton","width","skeleton","Link","to","routes","ChartComparisonBase","default","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","global_spacer_2xl","tabItems","global_spacer_xl","Comparison","DashboardWidgetBase","currentComparison","cumulative","buildDetailsLink","viewAllPath","group_by","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","getFormattedUnits","cumulativeTitle","dailyTitleKey","daily","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","type","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","forecast","computedForecast","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","getDetailsLinkTitle","getHorizontalLayout","currentReportFetchStatus","detailsLink","getTitle","getOptimizationsSummary","rosReportFetchStatus","rosReport","tabsReport","tabsReportFetchStatus","idKey","items","reportItem","topItems","activeTab","totalValue","hasTotal","total","usage","isFilled","getVerticalLayout","updateTab","updateForecasts","fetchForecasts","updateReports","fetchReports","updateRosReports","fetchRosReports","isRosFeatureEnabled","showOptimizations","componentDidUpdate","prevProps","awsDashboard","queries","forecastPathsType","forecastType","forecastError","forecastFetchStatus","reportPathsType","current","currentReportError","previous","previousReportError","previousReportFetchStatus","tabsReportError","mapDispatchToProps","AwsDashboardWidget","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","rosPathsType","rosType","featureFlags","ros","optimizations","rosReportError","OcpDashboardWidget","rhelDashboard","RhelDashboardWidget","ociDashboard","OciDashboardWidget","date","alignSelf","flexGrow","textAlign","headerContentLeft","headerContentRight","fontWeight","paddingBottom","InfrastructurePerspective","OcpPerspective","OverviewTab","RhelPerspective","infrastructure","ocp","rhel","OverviewBase","isFinsightsFeatureEnabled","infrastructureTabs","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","ocpTabs","isOcpAvailable","rhelTabs","isRhelAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","awsOcp","handleCostTypeSelected","getCurrency","handleCurrencySelected","hasInfrastructure","showInfrastructureOnly","showRhelOnly","getDefaultInfrastructurePerspective","perspective","azure","oci","azureOcp","gcp","gcpOcp","ibm","ibmOcp","ocpCloud","getDefaultOcpPerspective","ocpProviders","userAccess","getDefaultRhelPerspective","rhelProviders","getPerspective","currentRhelPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getQueryRoute","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","noData","hasData","providers","providersFetchStatus","userAccessFetchStatus","noProviders","isLoading","parseQuery","providersQueryString","providersError","userAccessQueryString","userAccessError","DataType","_getOcpProvider","uuid","result","data","provider","filterProviders","sourceType","filter","source_type","toLowerCase","length","_hasData","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","currentMonthData","hasCloudData","hasCloudPreviousMonthData","previousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasPreviousMonthData","hasAccess","userAccessType","Array","isArray","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasOciAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess","hasRhelAccess","hasRosAccess"],"sourceRoot":""}