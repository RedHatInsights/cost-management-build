{"version":3,"file":"js/ocpBreakdown.1671164616533.43e32c00a947ed7aef8c.js","mappings":"0bAMA,MAAMA,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeC,EAAA,iBAAuCH,GACtDI,QAASD,EAAA,wBAA8CH,OAGzDK,GAAe,EAAAC,EAAA,KAAW,IAAAC,SAAQR,EAAiB,CAAC,EAA1B,CAA6B,M,0BCN7D,MAAM,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeM,EAAA,iBAAyCR,GACxDI,QAASI,EAAA,wBAAgDR,OAG3DS,GAAiB,EAAAH,EAAA,KAAW,IAAAC,SAAQ,EAAiB,CAAC,EAA1B,CAA6B,MCWzDG,EAAa,gBACbC,EAAa,SACbC,EAAkB,QAElB,GAAkB,SAAsB,CAACZ,GAASa,OAAMC,aAC1D,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,GAAU,QAAaH,GACvBI,GAAe,QAAgBJ,GAC/BK,EAAWC,EAAA,kCAAqDrB,IAAS,eAAgBsB,EACzFC,EAAW,CACbC,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBC,UAAWC,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAIf,GAAkBA,EAAea,WAAab,EAAea,WAAcb,GAAkBA,EAAeS,QAAU,CAAEO,SAAUhB,EAAeS,OAAOO,WAAeb,GAAW,CAAE,CAACA,QAAUI,IACzPU,QAASH,OAAOC,OAAO,CAAC,EAAIf,GAAkBA,EAAeiB,SAAWjB,EAAeiB,SACvFC,SAAUJ,OAAOC,OAAO,CAAC,EAAIZ,GAAW,CAAE,CAACA,GAAUC,IACrDY,SAAUhB,EAAegB,UAEvBG,GAAoB,QAASL,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGP,GAAW,CAAEQ,cAAUT,EAAWF,cAC/Fe,EAAS,kBAA6BnC,EAAOY,EAAiBD,EAAYuB,GAC1EE,EAAc,uBAAkCpC,EAAOY,EAAiBD,EAAYuB,GACpFG,EAAoB,6BAAwCrC,EAAOY,EAAiBD,EAAYuB,GAChGI,GAAuB,OAAkB,MACzCC,EAAY,qBAAmCvC,EAAO,QAAkBsC,GACxEE,EAAuB,gCAA8CxC,EAAO,QAAkBsC,GACpG,MAAO,CACHG,sBAAwB,kBAAoBpC,EAAc,CAAEe,SAAUA,EAAUF,QAASA,EAASwB,iBAAiB,QAAgB3B,GAAiBoB,OAAQA,IAC5Jf,WACAuB,YAAa5B,EAAe,MAC5BL,aACAkC,gBAAiB/B,EAAKgC,cAAcC,EAAA,mBACpC5B,UACAC,eACA4B,wBAAyB,kBAAoBtC,EAAgB,CAAEW,SAAUA,IACzEmB,WAAW,QAAgBA,EAAW,SACtCC,uBACAQ,aAAc,QACdC,MAAOlC,EACPoB,SACAC,cACAC,oBACA1B,aACAC,kBACAsB,oBACAgB,mBAAoB,QACpBC,MAAOpC,EAAe,MAAqBA,EAAe,MAAqBI,EAClF,IAECiC,EAAqB,CACvBC,YAAa,kBAGjB,GADqB,EAAA/C,EAAA,KAAW,QAAW,IAAAC,SAAQ,EAAiB6C,EAAzB,CAA6C,M","sources":["webpack:///./src/routes/views/details/ocpBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/ocpBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/ocpBreakdown/ocpBreakdown.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { isPlatformCosts } from 'routes/views/utils/paths';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { breakdownDescKey, breakdownTitleKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute && queryFromRoute.filter && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        category: queryFromRoute.category, // Needed to restore details page state\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { category: undefined, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { currency: currency, groupBy: groupBy, isPlatformCosts: isPlatformCosts(queryFromRoute), report: report })),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        providerType: ProviderType.ocp,\n        query: queryFromRoute,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.ocp,\n        title: queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default OcpBreakdown;\n"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","injectIntl","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","intl","router","queryFromRoute","location","search","groupBy","groupByValue","currency","featureFlags","undefined","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","category","exclude","group_by","reportQueryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","isPlatformCosts","description","emptyStateTitle","formatMessage","messages","historicalDataComponent","providerType","query","tagReportPathsType","title","mapDispatchToProps","fetchReport"],"sourceRoot":""}