{"version":3,"file":"js/awsBreakdown.2cf721704f126021520c.js","mappings":"uYAKA,MAAMA,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeC,EAAA,iBAAuCH,GACtDI,QAASD,EAAA,wBAA8CH,OAGzDK,GAAe,IAAAC,SAAQP,EAAiB,CAAC,EAA1B,CAA6B,K,0BCNlD,MAAM,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeK,EAAA,iBAAyCP,GACxDI,QAASG,EAAA,wBAAgDP,OAG3DQ,GAAiB,IAAAF,SAAQ,EAAiB,CAAC,EAA1B,CAA6B,KCY9CG,GAAa,QAAWC,EAAA,mBACxBC,EAAa,SACbC,EAAkB,QAElB,GAAkB,SAAsB,CAACZ,GAASa,OAAMC,aAC1D,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,EAAmBH,EAAef,MAAQmB,KAAKC,MAAMC,OAAOC,KAAKP,EAAef,aAAUuB,EAC1FC,GAAkB,QAAmBT,GACrCU,EAAUD,EAAkB,MAAe,QAAaT,GACxDW,EAAeF,IAAoC,QAAgBT,GACnEY,GAAW,SACXC,GAAW,UACXC,EAAW,CACbC,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBC,UAAWC,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAIlB,GAAoBA,EAAiBgB,WAAahB,EAAiBgB,WAAcnB,GACzHA,EAAee,QACff,EAAee,OAAOO,SAAW,CAAE,CAAC,GAAG,eAA4BtB,EAAee,OAAOO,UAC7FC,QAASH,OAAOC,OAAO,CAAC,EAAIlB,GAAoBA,EAAiBoB,SAAWpB,EAAiBoB,SAC7FC,SAAUJ,OAAOC,OAAO,CAAC,EAAIX,GAAW,CAAE,CAACA,GAAUC,KAEnDc,GAAoB,QAASL,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGP,GAAW,CAAEY,UAAWd,EAAUC,WAAUM,UAAWC,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGP,EAASK,WAAaT,GAAWA,IAAY,MAAiC,MAAjBC,GAAwB,CAAE,CAACD,QAAUF,OACtPmB,EAAS,kBAA6B1C,EAAOY,EAAiBD,EAAY6B,GAC1EG,EAAc,uBAAkC3C,EAAOY,EAAiBD,EAAY6B,GACpFI,EAAoB,6BAAwC5C,EAAOY,EAAiBD,EAAY6B,GAChGK,GAAuB,OAAkB,MACzCC,EAAY,qBAAmC9C,EAAO,QAAkB6C,GACxEE,EAAiB,0BAAwC/C,EAAO,QAAkB6C,GAClFG,EAAuB,gCAA8ChD,EAAO,QAAkB6C,GAC9FI,EAAQlC,EAAe,MAAqBA,EAAe,MAAqBW,EACtF,MAAO,CACHwB,sBAAwB,kBAAoB7C,EAAc,CAAEsB,SAAUA,EAAUC,SAAUA,EAAUH,QAASA,EAAS0B,MAAOpC,EAAgB2B,OAAQA,IACrJf,WACAC,WACAwB,YAAarC,EAAe,MAC5BN,aACA4C,gBAAiBxC,EAAKyC,cAAcC,EAAA,mBACpC9B,UACAC,eACA8B,wBAAyB,kBAAoBhD,EAAgB,CAAEmB,SAAUA,EAAUC,SAAUA,IAC7FkB,WAAW,QAAgBA,EAAW,SACtCC,iBACAC,uBACAS,aAAc,QACdN,MAAOpC,EACP2B,SACAC,cACAC,oBACAjC,aACAC,kBACA4B,oBACAkB,cAAc,EACdC,mBAAoB,QACpBV,QACH,IAECW,EAAqB,CACvBC,YAAa,kBAGjB,GADqB,EAAAC,EAAA,KAAW,QAAW,IAAAxD,SAAQ,EAAiBsD,EAAzB,CAA6C,M","sources":["webpack:///./src/routes/views/details/awsBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/awsBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/awsBreakdown/awsBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, orgUnitIdKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = formatPath(routes.awsDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.aws;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const detailsPageState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const costType = getCostType();\n    const currency = getCurrency();\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (detailsPageState && detailsPageState.filter_by && detailsPageState.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })),\n        exclude: Object.assign({}, (detailsPageState && detailsPageState.exclude && detailsPageState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { cost_type: costType, currency, filter_by: Object.assign(Object.assign({}, newQuery.filter_by), (groupBy && groupBy !== orgUnitIdKey && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { costType: costType, currency: currency, groupBy: groupBy, query: queryFromRoute, report: report })),\n        costType,\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.awsDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { costType: costType, currency: currency }),\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        providerType: ProviderType.aws,\n        query: queryFromRoute,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        showCostType: true,\n        tagReportPathsType: TagPathsType.aws,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default AwsBreakdown;\n"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","connect","awsHistoricalData","HistoricalData","detailsURL","routes","reportType","reportPathsType","intl","router","queryFromRoute","location","search","detailsPageState","JSON","parse","window","atob","undefined","groupByOrgValue","groupBy","groupByValue","costType","currency","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","account","exclude","group_by","reportQueryString","cost_type","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","title","costOverviewComponent","query","description","emptyStateTitle","formatMessage","messages","historicalDataComponent","providerType","showCostType","tagReportPathsType","mapDispatchToProps","fetchReport","injectIntl"],"sourceRoot":""}