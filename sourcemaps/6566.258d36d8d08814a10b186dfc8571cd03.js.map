{"version":3,"file":"js/6566.a1ab7eb523b56ff78470.js","mappings":"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","sources":["webpack:///./src/routes/components/costDistribution/costDistribution.styles.ts","webpack:///./src/routes/components/costDistribution/costDistribution.tsx","webpack:///./src/routes/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/details/components/tag/tag.styles.ts","webpack:///./src/routes/details/components/tag/tagContent.tsx","webpack:///./src/routes/details/components/tag/tagModal.tsx","webpack:///./src/routes/details/components/tag/tagLink.tsx","webpack:///./src/routes/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/details/components/cluster/cluster.tsx","webpack:///./src/routes/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/details/components/costChart/costChart.tsx","webpack:///./src/routes/details/components/overheadCostChart/overheadCostChart.styles.ts","webpack:///./src/routes/details/components/overheadCostChart/overheadCostChart.tsx","webpack:///./src/routes/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/details/components/summary/summaryModal.tsx","webpack:///./src/routes/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/details/components/summary/summaryCard.tsx","webpack:///./src/routes/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/details/ocpDetails/detailsHeader.styles.ts"],"sourcesContent":["import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    selector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    label: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costDistribution.scss';\nimport { Select, SelectOption, SelectVariant, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { createMapStateToProps } from 'store/common';\nimport { setCostDistribution } from 'utils/localStorage';\nimport { styles } from './costDistribution.styles';\nconst costDistributionOptions = [\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.distributed },\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.total },\n];\nclass CostDistributionBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { costDistribution, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costDistribution);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costDistributionSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costDistributionOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostDistribution(selection.value); // Set cost distribution in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.selector },\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.md, style: styles.label }, intl.formatMessage(messages.costDistributionLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostDistributionConnect = connect(mapStateToProps, mapDispatchToProps)(CostDistributionBase);\nconst CostDistribution = injectIntl(CostDistributionConnect);\nexport default CostDistribution;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { TagContent } from './tagContent';\nconst tagType = TagType.tag;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        fetchTag(tagPathsType, tagType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, intl, isOpen, query, tagReport } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: this.props.isPlatformCosts ? platformCategoryKey : groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        // Omit unsupported query params\n        if (key.indexOf('node') !== -1 ||\n            key.indexOf('region') !== -1 ||\n            key.indexOf('resource_location') !== -1 ||\n            key.indexOf('service') !== -1 ||\n            key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        isPlatformCosts: queryFromRoute && queryFromRoute.isPlatformCosts,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagModalBase)));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagType = TagType.tag;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        fetchTag(tagPathsType, tagType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            count > 0 && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", { \"data-testid\": \"tag-lnk\", href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }, count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagPathsType: tagPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        // Omit unsupported query params\n        if (key.indexOf('node') !== -1 ||\n            key.indexOf('region') !== -1 ||\n            key.indexOf('resource_location') !== -1 ||\n            key.indexOf('service') !== -1 ||\n            key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase)));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costDistribution: {\n        marginTop: global_spacer_md.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { getQueryRoute, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { CostDistribution } from 'routes/components/costDistribution';\nimport { CostType } from 'routes/components/costType';\nimport { Currency } from 'routes/components/currency';\nimport { TagLink } from 'routes/details/components/tag';\nimport { getGroupByCostCategory, getGroupByOrgValue, getGroupByTagKey } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getTotalCostDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { awsCategoryKey, orgUnitIdKey, tagKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = url => {\n            const { groupBy, isOptimizationsPath, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const state = query.state ? window.atob(query.state) : undefined;\n            const newQuery = Object.assign(Object.assign({}, (state && JSON.parse(state))), (!isOptimizationsPath && {\n                group_by: {\n                    [groupByKey]: value,\n                },\n            }));\n            return `${url}?${getQueryRoute(newQuery)}`;\n        };\n        this.getBackToLink = groupByKey => {\n            const { detailsURL, intl, isOptimizationsPath, tagPathsType } = this.props;\n            if (isOptimizationsPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(formatPath(routes.optimizations.path)) }, intl.formatMessage(messages.breakdownBackToOptimizations)));\n            }\n            return (React.createElement(Link, { to: this.buildDetailsLink(detailsURL) }, intl.formatMessage(messages.breakdownBackToDetails, {\n                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagPathsType }),\n                groupBy: groupByKey,\n            })));\n        };\n        this.getTotalCost = () => {\n            const { costDistribution, report } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue];\n            const cost = formatCurrency(hasCost ? report.meta.total.cost[reportItemValue].value : 0, hasCost ? report.meta.total.cost[reportItemValue].units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costDistribution, costType, currency, description, groupBy, intl, isCostDistributionFeatureEnabled, onCostDistributionSelected, onCostTypeSelected, onCurrencySelected, query, showCostDistribution, showCostType, tabs, tagPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByCostCategory = getGroupByCostCategory(query);\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'payer_tenant_id' ||\n            groupBy === 'project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount\n            ? 'account'\n            : groupByCostCategory\n                ? awsCategoryKey\n                : groupByTag\n                    ? tagKey\n                    : groupByOrg\n                        ? orgUnitIdKey\n                        : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            this.getBackToLink(groupByKey)))),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostDistribution && isCostDistributionFeatureEnabled && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected }))),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getTotalCostDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }))))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, showTags && React.createElement(TagLink, { id: \"tags\", tagPathsType: tagPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    return {\n        isCostDistributionFeatureEnabled: featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state),\n        isOptimizationsPath: queryFromRoute.optimizationsPath !== undefined,\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader)));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/components/page/loading';\nimport { NoData } from 'routes/components/page/noData';\nimport { NoProviders } from 'routes/components/page/noProviders';\nimport { NotAvailable } from 'routes/components/page/notAvailable';\nimport { hasCurrentMonthData } from 'routes/utils/providers';\nimport { handleOnCostDistributionSelected, handleOnCostTypeSelected, handleOnCurrencySelected, } from 'routes/utils/queryNavigate';\nimport { FetchStatus } from 'store/common';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\n// eslint-disable-next-line no-shadow\nvar BreakdownTab;\n(function (BreakdownTab) {\n    BreakdownTab[\"costOverview\"] = \"cost-overview\";\n    BreakdownTab[\"historicalData\"] = \"historical-data\";\n    BreakdownTab[\"optimizations\"] = \"optimizations\";\n})(BreakdownTab || (BreakdownTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case BreakdownTab.costOverview:\n            return 'cost-overview';\n        case BreakdownTab.historicalData:\n            return 'historical-data';\n        case BreakdownTab.optimizations:\n            return 'optimizations';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: this.props.isOptimizationsTab ? 2 : 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { costOverviewComponent, historicalDataComponent, isRosFeatureEnabled, optimizationsBadgeComponent, optimizationsComponent, } = this.props;\n            const availableTabs = [];\n            if (costOverviewComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.costOverview,\n                });\n            }\n            if (historicalDataComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.historicalData,\n                });\n            }\n            if (optimizationsComponent && isRosFeatureEnabled) {\n                availableTabs.push({\n                    badge: optimizationsBadgeComponent,\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.optimizations,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, badge, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(React.Fragment, null,\n                    React.createElement(TabTitleText, null, this.getTabTitle(tab)),\n                    badge && React.createElement(\"span\", null, badge)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent, optimizationsComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === BreakdownTab.costOverview) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === BreakdownTab.historicalData) {\n                return historicalDataComponent;\n            }\n            else if (currentTab === BreakdownTab.optimizations) {\n                return optimizationsComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, val.badge, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === BreakdownTab.costOverview) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === BreakdownTab.historicalData) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n            else if (tab === BreakdownTab.optimizations) {\n                return intl.formatMessage(messages.optimizations);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.handleTabClick = (event, tabIndex) => {\n            const { closeOptimizationsDrawer } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    if (closeOptimizationsDrawer) {\n                        closeOptimizationsDrawer();\n                    }\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, costType, currency, description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, router, showCostDistribution, showCostType, tagPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress && reportFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.complete && reportFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === FetchStatus.complete;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costDistribution: costDistribution, costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostDistributionSelected: () => handleOnCostDistributionSelected(query, router), onCostTypeSelected: () => handleOnCostTypeSelected(query, router), onCurrencySelected: () => handleOnCurrencySelected(query, router), query: query, report: report, showCostDistribution: showCostDistribution, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagPathsType: tagPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nconst Breakdown = injectIntl(withRouter(BreakdownBase));\nexport default Breakdown;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { clusters = [] } = this.props;\n        if (clusters.length === 0) {\n            return null;\n        }\n        return clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { clusters, isOpen } = this.props;\n        return nextProps.clusters !== clusters || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { clusters, groupBy, intl, isOpen, title } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, {\n                groupBy,\n                name: title,\n            }), width: '50%' },\n            React.createElement(ClusterContent, { clusters: clusters })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import { Tooltip } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems } from 'routes/utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, intl, report, title } = this.props;\n        const { isOpen, showAll } = this.state;\n        const maxCharsPerName = 45; // Max (non-whitespace) characters that fit without overlapping card\n        const maxItems = 2; // Max items to show before adding \"more\" link\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        // Get clusters from all projects -- see https://issues.redhat.com/browse/COST-3371\n        const clusters = [];\n        computedItems.map(item => {\n            if (item.clusters) {\n                item.clusters.map(cluster => {\n                    if (!clusters.includes(cluster)) {\n                        clusters.push(cluster);\n                    }\n                });\n            }\n        });\n        if (clusters.length === 0) {\n            return null;\n        }\n        // Sort clusters from multiple projects\n        clusters.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n        for (const cluster of clusters) {\n            let clusterString = someClusters.length > 0 ? `, ${cluster}` : cluster;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (someClusters.length < maxItems) {\n                if (clusterString.length > maxCharsPerName) {\n                    clusterString = clusterString.slice(0, maxCharsPerName).trim().concat('...');\n                    someClusters.push(React.createElement(Tooltip, { content: cluster, enableFlip: true },\n                        React.createElement(\"span\", null, clusterString)));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            someClusters && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            someClusters.length < allClusters.length && (React.createElement(\"a\", { \"data-testid\": \"cluster-lnk\", href: \"#/\", onClick: this.handleOpen }, intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { clusters: clusters, groupBy: groupBy, isOpen: isOpen, onClose: this.handleClose, title: title })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 475,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 80, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costBreakdownAriaDesc), ariaTitle: intl.formatMessage(messages.costBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 525,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { chartStyles, styles } from './overheadCostChart.styles';\nclass OverheadCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { costDistribution, name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasPlatformDistributed = hasCost &&\n            costDistribution === ComputedReportItemValueType.distributed &&\n            report.meta.total.cost.platform_distributed;\n        const hasWorkerUnallocated = hasCost &&\n            costDistribution === ComputedReportItemValueType.distributed &&\n            report.meta.total.cost.worker_unallocated_distributed;\n        const hasCostTotal = hasCost && report.meta.total.cost.total;\n        const platformDistributedUnits = hasPlatformDistributed ? report.meta.total.cost.platform_distributed.units : 'USD';\n        const workerUnallocatedUnits = hasWorkerUnallocated\n            ? report.meta.total.cost.worker_unallocated_distributed.units\n            : 'USD';\n        const totalCostUnits = hasCostTotal ? report.meta.total.cost.total.units : 'USD';\n        const platformDistributedValue = hasPlatformDistributed && report.meta.total.cost.platform_distributed.value > 0\n            ? report.meta.total.cost.platform_distributed.value\n            : 0;\n        const workerUnallocatedValue = hasWorkerUnallocated && report.meta.total.cost.worker_unallocated_distributed.value > 0\n            ? report.meta.total.cost.worker_unallocated_distributed.value\n            : 0;\n        const totalCostValue = hasCostTotal ? report.meta.total.cost.total.value : 0;\n        const platformDistributed = formatCurrency(platformDistributedValue, platformDistributedUnits);\n        const workerUnallocated = formatCurrency(workerUnallocatedValue, workerUnallocatedUnits);\n        const totalCost = formatCurrency(totalCostValue, totalCostUnits);\n        const platformDistributedLabel = intl.formatMessage(messages.platformDistributed);\n        const workerUnallocatedLabel = intl.formatMessage(messages.workerUnallocated);\n        const totalCostLabel = intl.formatMessage(messages.allOtherProjectCosts);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 30, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [platformDistributed, workerUnallocated, totalCost] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costDistributionAriaDesc), ariaTitle: intl.formatMessage(messages.costDistributionTitle), constrainToVisibleArea: true, data: [\n                { x: platformDistributedLabel, y: platformDistributedValue, units: platformDistributedUnits },\n                { x: workerUnallocatedLabel, y: workerUnallocatedValue, units: workerUnallocatedUnits },\n                { x: totalCostLabel, y: totalCostValue, units: totalCostUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: platformDistributedLabel,\n                },\n                {\n                    name: workerUnallocatedLabel,\n                },\n                {\n                    name: totalCostLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 325,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst OverheadCostChart = injectIntl(OverheadCostChartBase);\nexport default OverheadCostChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './summaryModal.styles';\nconst reportType = ReportType.cost;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString, reportPathsType } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost[reportItemValue].value : 0, hasTotal ? report.meta.total.cost[reportItemValue].units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost[reportItemValue].value, units: report.meta.total.cost[reportItemValue].units, value: _item.cost[reportItemValue].value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costDistribution, costType, currency, reportGroupBy, reportPathsType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const reportQuery = Object.assign({ cost_type: costType, currency, filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        }, filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })), exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)), group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })) }, (costDistribution === ComputedReportItemValueType.distributed && {\n        order_by: {\n            distributed_cost: 'desc',\n        },\n    }));\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase)));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costDistribution, costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costDistribution: costDistribution, costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/details/components/summary/summaryModal';\nimport { getComputedReportItems } from 'routes/utils/computedReport/getComputedReportItems';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { costDistribution, report, reportGroupBy, reportFetchStatus } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            return (React.createElement(ReportSummaryItems, { costDistribution: costDistribution, idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost[reportItemValue].value, units: report.meta.total.cost[reportItemValue].units, value: reportItem.cost[reportItemValue].value })))));\n        };\n        this.getViewAll = () => {\n            const { costDistribution, costType, currency, groupBy, intl, isPlatformCosts, query, reportGroupBy, reportPathsType, } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, { ouiaId: \"view-all-btn\", onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }, intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costDistribution: costDistribution, costType: costType, currency: currency, groupBy: groupBy, groupByValue: isPlatformCosts ? platformCategoryKey : groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportQueryString, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { intl, isPlatformCosts, reportGroupBy, reportFetchStatus } = this.props;\n        const title = intl.formatMessage(messages.breakdownSummaryTitle, {\n            value: isPlatformCosts ? platformCategoryKey.toLowerCase() : reportGroupBy,\n        });\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, title)),\n            React.createElement(CardBody, null, reportFetchStatus === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costDistribution, costType, currency, reportGroupBy, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = Object.assign({ cost_type: costType, currency, filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })), exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)), group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })) }, (costDistribution === ComputedReportItemValueType.distributed && {\n        order_by: {\n            distributed_cost: 'desc',\n        },\n    }));\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryBase)));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        marginTop: global_spacer_md.value,\n    },\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    subtitle: {\n        marginBottom: global_spacer_md.value,\n    },\n};\n","import 'routes/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { noop } from 'routes/utils/noop';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(React.Fragment, null, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster' || groupBy === 'node') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getHasData = () => {\n            const { report } = this.props;\n            // Note: When APIs return an empty data array, units are unknown. Likewise, when \"platform projects\" are applied,\n            // there is no \"platform\" project. As a workaround, we obtain values from the meta data.\n            const hasMeta = report && report.meta !== undefined;\n            const hasTotal = hasMeta && report.meta.total !== undefined;\n            const hasCapacity = hasTotal && report.meta.total.capacity !== undefined;\n            const hasCapacityCount = hasCapacity && report.meta.total.capacity.count !== undefined;\n            const hasCapacityCountUnits = hasCapacity && report.meta.total.capacity.count_units !== undefined;\n            const hasCapacityUnits = hasCapacity && report.meta.total.capacity.units !== undefined;\n            const hasCapacityUnused = hasCapacity && report.meta.total.capacity.unused !== undefined;\n            const hasCapacityUnusedPercent = hasCapacity && report.meta.total.capacity.unused_percent !== undefined;\n            const hasCapacityValue = hasCapacity && report.meta.total.capacity.value !== undefined;\n            const hasLimit = hasTotal && report.meta.total.limit;\n            const hasLimitUnits = hasLimit && report.meta.total.limit.value !== undefined;\n            const hasLimitValue = hasLimit && report.meta.total.limit.units !== undefined;\n            const hasRequest = hasTotal && report.meta.total.request !== undefined;\n            const hasRequestUnits = hasRequest && report.meta.total.request.units !== undefined;\n            const hasRequestUnused = hasRequest && report.meta.total.request.unused !== undefined;\n            const hasRequestUnusedPercent = hasRequest && report.meta.total.request.unused_percent !== undefined;\n            const hasRequestValue = hasRequest && report.meta.total.request.value !== undefined;\n            const hasUsage = hasTotal && report.meta.total.usage !== undefined;\n            const hasUsageUnits = hasUsage && report.meta.total.usage.units !== undefined;\n            const hasUsageValue = hasUsage && report.meta.total.usage.value !== undefined;\n            return {\n                hasCapacity,\n                hasCapacityCount,\n                hasCapacityCountUnits,\n                hasCapacityUnits,\n                hasCapacityUnused,\n                hasCapacityUnusedPercent,\n                hasCapacityValue,\n                hasLimit,\n                hasLimitUnits,\n                hasLimitValue,\n                hasMeta,\n                hasRequest,\n                hasRequestUnits,\n                hasRequestUnused,\n                hasRequestUnusedPercent,\n                hasRequestValue,\n                hasTotal,\n                hasUsage,\n                hasUsageUnits,\n                hasUsageValue,\n            };\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            this.updateReport();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, intl, report, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        const { hasCapacityUnits, hasCapacityValue, hasLimitUnits, hasLimitValue, hasRequestUnits, hasRequestValue, hasUsageUnits, hasUsageValue, } = this.getHasData();\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const limit = Math.trunc(hasLimitValue ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimitUnits ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || groupBy === 'node' || reportType === ReportType.volume) {\n            const capacity = Math.trunc(hasCapacityValue ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacityUnits ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const request = Math.trunc(hasRequestValue ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequestUnits ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsageValue ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsageUnits ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { groupBy, intl, report } = this.props;\n        if (!report || !(groupBy === 'cluster' || groupBy === 'node')) {\n            return null;\n        }\n        const { hasCapacityCount, hasCapacityCountUnits, hasCapacityUnits, hasCapacityUnused, hasCapacityUnusedPercent, hasRequestUnits, hasRequestUnused, hasRequestUnusedPercent, } = this.getHasData();\n        if (!(hasCapacityUnused && hasRequestUnused)) {\n            return null;\n        }\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const capacityUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasCapacityUnits ? report.meta.total.capacity.units : undefined),\n        });\n        const capacityUnused = Math.trunc(hasCapacityUnused ? report.meta.total.capacity.unused : 0);\n        const capacityUnusedPercent = Math.trunc(hasCapacityUnusedPercent ? report.meta.total.capacity.unused_percent : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequestUnits ? report.meta.total.request.units : undefined),\n        });\n        const requestUnused = Math.trunc(hasRequestUnused ? report.meta.total.request.unused : 0);\n        const requestUnusedPercent = Math.trunc(hasRequestUnusedPercent ? report.meta.total.request.unused_percent : 0);\n        const chartContainer = groupBy === 'node' && !(hasCapacityCount && hasCapacityCountUnits) ? styles.chartContainer : undefined;\n        return (React.createElement(Grid, { hasGutter: true, style: chartContainer },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedCapacityLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(capacityUnused, capacityUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(capacityUnusedPercent, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: capacityUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(requestUnused, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(requestUnusedPercent, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    getSubTitle() {\n        const { groupBy, intl, report } = this.props;\n        if (!report || !(groupBy === 'cluster' || groupBy === 'node')) {\n            return null;\n        }\n        const { hasCapacityCount, hasCapacityCountUnits } = this.getHasData();\n        const count = hasCapacityCount ? report.meta.total.capacity.count : 0;\n        const countUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasCapacityCountUnits ? report.meta.total.capacity.count_units : undefined),\n        });\n        if (hasCapacityCount && hasCapacityCountUnits) {\n            return React.createElement(\"div\", { style: styles.subtitle }, intl.formatMessage(messages.usageSubtitle, { count, countUnits }));\n        }\n        return null;\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            this.getSubTitle(),\n            this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        query,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase)));\nexport default UsageChart;\n","import './costOverview.scss';\nimport { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { Cluster } from 'routes/details/components/cluster';\nimport { CostChart } from 'routes/details/components/costChart';\nimport { OverheadCostChart } from 'routes/details/components/overheadCostChart';\nimport { SummaryCard } from 'routes/details/components/summary';\nimport { UsageChart } from 'routes/details/components/usageChart';\nimport { styles } from 'routes/details/ocpDetails/detailsHeader.styles';\nimport { getGroupByCostCategory, getGroupByOrgValue, getGroupByTagKey } from 'routes/utils/groupBy';\nimport { CostOverviewWidgetType } from 'store/breakdown/costOverview/common/costOverviewCommon';\nimport { platformCategoryKey, tagPrefix } from 'utils/props';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster card\n        this.getClusterCard = (widget) => {\n            const { groupBy, intl, report, title } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report, title: title }))));\n            }\n            else {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns cost distribution chart\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.getCostDistributionChart = (widget) => {\n            const { costDistribution, intl, isCostDistributionFeatureEnabled, report } = this.props;\n            if (!costDistribution || !isCostDistributionFeatureEnabled) {\n                return null;\n            }\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costDistributionTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costDistributionAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.platformDistributed)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.platformDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.workerUnallocated)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.workerUnallocatedDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(OverheadCostChart, { costDistribution: costDistribution, name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { groupBy, intl } = this.props;\n            return (React.createElement(Card, { className: groupBy === 'node' ? 'cardOverride' : undefined },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { groupBy, intl } = this.props;\n            return (React.createElement(Card, { className: groupBy === 'node' ? 'cardOverride' : undefined },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costDistribution, costType, currency, groupBy, isPlatformCosts, query } = this.props;\n            const groupByCostCategory = getGroupByCostCategory(query);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTag = getGroupByTagKey(query);\n            let showWidget = false;\n            if (widget.reportSummary.showWidgetOnGroupBy) {\n                for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                    if (groupById === groupBy || groupByCostCategory || groupByOrg || groupByTag) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (!showWidget && widget.reportSummary.showWidgetOnPlatformCategory) {\n                for (const categoryId of widget.reportSummary.showWidgetOnPlatformCategory) {\n                    if (isPlatformCosts && categoryId === platformCategoryKey) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costDistribution: groupBy === 'cluster' ? ComputedReportItemValueType.distributed : costDistribution, costType: costType, currency: currency, isPlatformCosts: isPlatformCosts, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { groupBy, intl } = this.props;\n            return (React.createElement(Card, { className: groupBy === 'node' ? 'cardOverride' : undefined },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case CostOverviewWidgetType.cluster:\n                return this.getClusterCard(widget);\n            case CostOverviewWidgetType.cost:\n                return this.getCostChart(widget);\n            case CostOverviewWidgetType.costDistribution:\n                return this.getCostDistributionChart(widget);\n            case CostOverviewWidgetType.cpuUsage:\n                return this.getCpuUsageChart(widget);\n            case CostOverviewWidgetType.memoryUsage:\n                return this.getMemoryUsageChart(widget);\n            case CostOverviewWidgetType.reportSummary:\n                return this.getSummaryCard(widget);\n            case CostOverviewWidgetType.volumeUsage:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip } from 'routes/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/components/charts/common/chartUtils';\nimport { noop } from 'routes/utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 725 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 725\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType, DatumType, transformReport } from 'routes/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.updateReport = () => {\n            const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { chartName, costDistribution, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl, } = this.props;\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        // Current data\n        const currentData = transformReport(currentReport, DatumType.cumulative, 'date', 'cost', reportItemValue);\n        const currentInfrastructureCostData = transformReport(currentReport, DatumType.cumulative, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, DatumType.cumulative, 'date', 'cost', reportItemValue);\n        const previousInfrastructureCostData = transformReport(previousReport, DatumType.cumulative, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost[reportItemValue].units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase)));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip, getDateRange } from 'routes/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/components/charts/common/chartUtils';\nimport { noop } from 'routes/utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.updateReport = () => {\n            const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === ReportType.cost;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase)));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeTooltip } from 'routes/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/components/charts/common/chartUtils';\nimport { noop } from 'routes/utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 925 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 925\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.updateReport = () => {\n            const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.previousQueryString !== previousQueryString) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, DatumType.rolling, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, DatumType.rolling, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, DatumType.rolling, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, DatumType.rolling, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, DatumType.rolling, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, DatumType.rolling, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === ReportType.instanceType || reportType === ReportType.storage;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase)));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataWidgetType } from 'store/breakdown/historicalData/common/historicalDataCommon';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === ReportPathsType.azure) {\n                return reportType === ReportType.instanceType ? 'virtual_machine' : reportType;\n            }\n            return reportType === ReportType.instanceType ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costDistribution, costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costDistribution: costDistribution, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case HistoricalDataWidgetType.cost:\n                return this.getCostChart(widget);\n            case HistoricalDataWidgetType.trend:\n                return this.getTrendChart(widget);\n            case HistoricalDataWidgetType.usage:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n"],"names":["styles","selector","display","alignItems","label","marginBottom","marginRight","whiteSpace","costDistributionOptions","messages","value","CostDistributionBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","costDistribution","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","description","desc","key","intl","options","push","toString","formatMessage","event","setState","render","style","Title","headingLevel","size","TitleSizes","mapStateToProps","CostDistributionConnect","connect","injectIntl","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","tagLink","marginLeft","global_spacer_sm","tagsContainer","global_spacer_3xl","marginTop","TagContentBase","getDataListItems","tagReport","result","item","data","val","values","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","groupBy","groupByValue","dataListItems","count","DataList","isCompact","TagContent","tagType","TagModalBase","getTagValueCount","length","handleClose","onClose","bind","componentDidMount","fetchTag","tagPathsType","tagQueryString","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","query","filter","account","Modal","title","width","isPlatformCosts","router","queryFromRoute","location","search","queryState","groupByOrgValue","filterByParams","filter_by","keys","indexOf","undefined","tagQuery","resolution","time_scope_units","time_scope_value","category","tagReportFetchStatus","mapDispatchToProps","TagModal","TagLinkBase","handleOpen","preventDefault","href","onClick","cost","global_spacer_xl","global_spacer_md","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","header","backgroundColor","global_BackgroundColor_100","headerContent","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeader","buildDetailsLink","url","isOptimizationsPath","groupByKey","window","atob","newQuery","JSON","parse","group_by","getBackToLink","detailsURL","Link","to","routes","getTotalCost","report","reportItemValue","hasCost","meta","total","format","units","currency","isCostDistributionFeatureEnabled","onCostDistributionSelected","onCostTypeSelected","onCurrencySelected","showCostDistribution","showCostType","filterByAccount","groupByCostCategory","groupByOrg","groupByTag","showTags","featureFlags","optimizationsPath","BreakdownTab","getIdKeyForTab","tab","costOverview","historicalData","optimizations","BreakdownBase","activeTabKey","isOptimizationsTab","getAvailableTabs","costOverviewComponent","historicalDataComponent","isRosFeatureEnabled","optimizationsBadgeComponent","optimizationsComponent","availableTabs","contentRef","badge","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","TabContent","ref","getTabItem","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","closeOptimizationsDrawer","updateReport","fetchReport","reportPathsType","reportType","reportQueryString","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","name","ClusterModal","ClusterBase","showAll","someClusters","allClusters","computedItems","getComputedReportItems","idKey","includes","sort","a","b","clusterString","slice","trim","concat","Tooltip","enableFlip","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","OverheadCostChartBase","hasPlatformDistributed","platform_distributed","hasWorkerUnallocated","worker_unallocated_distributed","hasCostTotal","platformDistributedUnits","workerUnallocatedUnits","totalCostUnits","platformDistributedValue","workerUnallocatedValue","totalCostValue","platformDistributed","workerUnallocated","totalCost","platformDistributedLabel","workerUnallocatedLabel","totalCostLabel","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","items","_item","formatOptions","totalValue","reportQuery","cost_type","exclude","order_by","distributed_cost","SummaryModalContent","SummaryModalBase","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","ouiaId","handleBulletChartModalOpen","type","ButtonType","ButtonVariant","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","limit","chartContainer","capacity","legendSkeleton","subtitle","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","getHasData","hasMeta","hasCapacity","hasCapacityCount","hasCapacityCountUnits","count_units","hasCapacityUnits","hasCapacityUnused","unused","hasCapacityUnusedPercent","unused_percent","hasCapacityValue","hasLimit","hasLimitUnits","hasLimitValue","hasRequest","request","hasRequestUnits","hasRequestUnused","hasRequestUnusedPercent","hasRequestValue","hasUsageUnits","hasUsageValue","hasRange","range","componentWillUnmount","Math","trunc","limitUnits","capacityUnits","requestUnits","capacityUnused","capacityUnusedPercent","requestUnused","requestUnusedPercent","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","getSubTitle","countUnits","PLACEHOLDER","CostOverviewsBase","getClusterCard","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","bodyContent","rel","target","chartName","getCostDistributionChart","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","showWidgetOnPlatformCategory","categoryId","usePlaceholder","getVolumeUsageChart","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","xl2","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","getTrendChart","getUsageChart","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle"],"sourceRoot":""}