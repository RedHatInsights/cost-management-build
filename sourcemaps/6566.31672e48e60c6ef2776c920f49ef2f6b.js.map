{"version":3,"file":"js/6566.67a3e14b2e54986696c8.js","mappings":"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","sources":["webpack:///./src/routes/components/costDistribution/costDistribution.styles.ts","webpack:///./src/routes/components/costDistribution/costDistribution.tsx","webpack:///./src/routes/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/details/components/tag/tag.styles.ts","webpack:///./src/routes/details/components/tag/tagContent.tsx","webpack:///./src/routes/details/components/tag/tagModal.tsx","webpack:///./src/routes/details/components/tag/tagLink.tsx","webpack:///./src/routes/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/details/components/cluster/cluster.tsx","webpack:///./src/routes/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/details/components/costChart/costChart.tsx","webpack:///./src/routes/details/components/overheadCostChart/overheadCostChart.styles.ts","webpack:///./src/routes/details/components/overheadCostChart/overheadCostChart.tsx","webpack:///./src/routes/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/details/components/summary/summaryModal.tsx","webpack:///./src/routes/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/details/components/summary/summaryCard.tsx","webpack:///./src/routes/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/details/ocpDetails/detailsHeader.styles.ts"],"sourcesContent":["import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    selector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    label: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costDistribution.scss';\nimport { Select, SelectOption, SelectVariant, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { createMapStateToProps } from 'store/common';\nimport { setCostDistribution } from 'utils/localStorage';\nimport { styles } from './costDistribution.styles';\nconst costDistributionOptions = [\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.distributed },\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.total },\n];\nclass CostDistributionBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { costDistribution, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costDistribution);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costDistributionSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costDistributionOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostDistribution(selection.value); // Set cost distribution in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.selector },\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.md, style: styles.label }, intl.formatMessage(messages.costDistributionLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostDistributionConnect = connect(mapStateToProps, mapDispatchToProps)(CostDistributionBase);\nconst CostDistribution = injectIntl(CostDistributionConnect);\nexport default CostDistribution;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { TagContent } from './tagContent';\nconst tagType = TagType.tag;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        fetchTag(tagPathsType, tagType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, intl, isOpen, query, tagReport } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: this.props.isPlatformCosts ? platformCategoryKey : groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        // Omit unsupported query params\n        if (key.indexOf('node') !== -1 ||\n            key.indexOf('region') !== -1 ||\n            key.indexOf('resource_location') !== -1 ||\n            key.indexOf('service') !== -1 ||\n            key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        isPlatformCosts: queryFromRoute && queryFromRoute.isPlatformCosts,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagModalBase)));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagType = TagType.tag;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        fetchTag(tagPathsType, tagType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            count > 0 && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", { \"data-testid\": \"tag-lnk\", href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }, count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagPathsType: tagPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        // Omit unsupported query params\n        if (key.indexOf('node') !== -1 ||\n            key.indexOf('region') !== -1 ||\n            key.indexOf('resource_location') !== -1 ||\n            key.indexOf('service') !== -1 ||\n            key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase)));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costDistribution: {\n        marginTop: global_spacer_md.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { getQueryRoute, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { CostDistribution } from 'routes/components/costDistribution';\nimport { CostType } from 'routes/components/costType';\nimport { Currency } from 'routes/components/currency';\nimport { TagLink } from 'routes/details/components/tag';\nimport { getGroupByCostCategory, getGroupByOrgValue, getGroupByTagKey } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getTotalCostDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { awsCategoryKey, orgUnitIdKey, tagKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = url => {\n            const { groupBy, isOptimizationsPath, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const state = query.state ? window.atob(query.state) : undefined;\n            const newQuery = Object.assign(Object.assign({}, (state && JSON.parse(state))), (!isOptimizationsPath && {\n                group_by: {\n                    [groupByKey]: value,\n                },\n            }));\n            return `${url}?${getQueryRoute(newQuery)}`;\n        };\n        this.getBackToLink = groupByKey => {\n            const { detailsURL, intl, isOptimizationsPath, tagPathsType } = this.props;\n            if (isOptimizationsPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(formatPath(routes.optimizations.path)) }, intl.formatMessage(messages.breakdownBackToOptimizations)));\n            }\n            return (React.createElement(Link, { to: this.buildDetailsLink(detailsURL) }, intl.formatMessage(messages.breakdownBackToDetails, {\n                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagPathsType }),\n                groupBy: groupByKey,\n            })));\n        };\n        this.getTotalCost = () => {\n            const { costDistribution, report } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue];\n            const cost = formatCurrency(hasCost ? report.meta.total.cost[reportItemValue].value : 0, hasCost ? report.meta.total.cost[reportItemValue].units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costDistribution, costType, currency, description, groupBy, intl, isCostDistributionFeatureEnabled, onCostDistributionSelected, onCostTypeSelected, onCurrencySelected, query, showCostDistribution, showCostType, tabs, tagPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByCostCategory = getGroupByCostCategory(query);\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'payer_tenant_id' ||\n            groupBy === 'project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount\n            ? 'account'\n            : groupByCostCategory\n                ? awsCategoryKey\n                : groupByTag\n                    ? tagKey\n                    : groupByOrg\n                        ? orgUnitIdKey\n                        : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            this.getBackToLink(groupByKey)))),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostDistribution && isCostDistributionFeatureEnabled && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected }))),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getTotalCostDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }))))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, showTags && React.createElement(TagLink, { id: \"tags\", tagPathsType: tagPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    return {\n        isCostDistributionFeatureEnabled: featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state),\n        isOptimizationsPath: queryFromRoute.optimizationsPath !== undefined,\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader)));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/components/page/loading';\nimport { NoData } from 'routes/components/page/noData';\nimport { NoProviders } from 'routes/components/page/noProviders';\nimport { NotAvailable } from 'routes/components/page/notAvailable';\nimport { hasCurrentMonthData } from 'routes/utils/providers';\nimport { handleOnCostDistributionSelected, handleOnCostTypeSelected, handleOnCurrencySelected, } from 'routes/utils/queryNavigate';\nimport { FetchStatus } from 'store/common';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\n// eslint-disable-next-line no-shadow\nvar BreakdownTab;\n(function (BreakdownTab) {\n    BreakdownTab[\"costOverview\"] = \"cost-overview\";\n    BreakdownTab[\"historicalData\"] = \"historical-data\";\n    BreakdownTab[\"optimizations\"] = \"optimizations\";\n})(BreakdownTab || (BreakdownTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case BreakdownTab.costOverview:\n            return 'cost-overview';\n        case BreakdownTab.historicalData:\n            return 'historical-data';\n        case BreakdownTab.optimizations:\n            return 'optimizations';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: this.props.isOptimizationsTab ? 2 : 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { costOverviewComponent, historicalDataComponent, isRosFeatureEnabled, optimizationsBadgeComponent, optimizationsComponent, } = this.props;\n            const availableTabs = [];\n            if (costOverviewComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.costOverview,\n                });\n            }\n            if (historicalDataComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.historicalData,\n                });\n            }\n            if (optimizationsComponent && isRosFeatureEnabled) {\n                availableTabs.push({\n                    badge: optimizationsBadgeComponent,\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.optimizations,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, badge, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(React.Fragment, null,\n                    React.createElement(TabTitleText, null, this.getTabTitle(tab)),\n                    badge && React.createElement(\"span\", null, badge)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent, optimizationsComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === BreakdownTab.costOverview) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === BreakdownTab.historicalData) {\n                return historicalDataComponent;\n            }\n            else if (currentTab === BreakdownTab.optimizations) {\n                return optimizationsComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, val.badge, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === BreakdownTab.costOverview) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === BreakdownTab.historicalData) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n            else if (tab === BreakdownTab.optimizations) {\n                return intl.formatMessage(messages.optimizations);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.handleTabClick = (event, tabIndex) => {\n            const { closeOptimizationsDrawer } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    if (closeOptimizationsDrawer) {\n                        closeOptimizationsDrawer();\n                    }\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, costType, currency, description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, router, showCostDistribution, showCostType, tagPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress && reportFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.complete && reportFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === FetchStatus.complete;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costDistribution: costDistribution, costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostDistributionSelected: () => handleOnCostDistributionSelected(query, router), onCostTypeSelected: () => handleOnCostTypeSelected(query, router), onCurrencySelected: () => handleOnCurrencySelected(query, router), query: query, report: report, showCostDistribution: showCostDistribution, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagPathsType: tagPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nconst Breakdown = injectIntl(withRouter(BreakdownBase));\nexport default Breakdown;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { clusters = [] } = this.props;\n        if (clusters.length === 0) {\n            return null;\n        }\n        return clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { clusters, isOpen } = this.props;\n        return nextProps.clusters !== clusters || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { clusters, groupBy, intl, isOpen, title } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, {\n                groupBy,\n                name: title,\n            }), width: '50%' },\n            React.createElement(ClusterContent, { clusters: clusters })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import { Tooltip } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems } from 'routes/utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, intl, report, title } = this.props;\n        const { isOpen, showAll } = this.state;\n        const maxCharsPerName = 45; // Max (non-whitespace) characters that fit without overlapping card\n        const maxItems = 2; // Max items to show before adding \"more\" link\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        // Get clusters from all projects -- see https://issues.redhat.com/browse/COST-3371\n        const clusters = [];\n        computedItems.map(item => {\n            if (item.clusters) {\n                item.clusters.map(cluster => {\n                    if (!clusters.includes(cluster)) {\n                        clusters.push(cluster);\n                    }\n                });\n            }\n        });\n        if (clusters.length === 0) {\n            return null;\n        }\n        // Sort clusters from multiple projects\n        clusters.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n        for (const cluster of clusters) {\n            let clusterString = someClusters.length > 0 ? `, ${cluster}` : cluster;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (someClusters.length < maxItems) {\n                if (clusterString.length > maxCharsPerName) {\n                    clusterString = clusterString.slice(0, maxCharsPerName).trim().concat('...');\n                    someClusters.push(React.createElement(Tooltip, { content: cluster, enableFlip: true },\n                        React.createElement(\"span\", null, clusterString)));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            someClusters && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            someClusters.length < allClusters.length && (React.createElement(\"a\", { \"data-testid\": \"cluster-lnk\", href: \"#/\", onClick: this.handleOpen }, intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { clusters: clusters, groupBy: groupBy, isOpen: isOpen, onClose: this.handleClose, title: title })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 475,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 80, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costBreakdownAriaDesc), ariaTitle: intl.formatMessage(messages.costBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 525,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { chartStyles, styles } from './overheadCostChart.styles';\nclass OverheadCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { costDistribution, name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasPlatformDistributed = hasCost &&\n            costDistribution === ComputedReportItemValueType.distributed &&\n            report.meta.total.cost.platform_distributed;\n        const hasWorkerUnallocated = hasCost &&\n            costDistribution === ComputedReportItemValueType.distributed &&\n            report.meta.total.cost.worker_unallocated_distributed;\n        const hasCostTotal = hasCost && report.meta.total.cost.total;\n        const platformDistributedUnits = hasPlatformDistributed ? report.meta.total.cost.platform_distributed.units : 'USD';\n        const workerUnallocatedUnits = hasWorkerUnallocated\n            ? report.meta.total.cost.worker_unallocated_distributed.units\n            : 'USD';\n        const totalCostUnits = hasCostTotal ? report.meta.total.cost.total.units : 'USD';\n        const platformDistributedValue = hasPlatformDistributed && report.meta.total.cost.platform_distributed.value > 0\n            ? report.meta.total.cost.platform_distributed.value\n            : 0;\n        const workerUnallocatedValue = hasWorkerUnallocated && report.meta.total.cost.worker_unallocated_distributed.value > 0\n            ? report.meta.total.cost.worker_unallocated_distributed.value\n            : 0;\n        const totalCostValue = hasCostTotal ? report.meta.total.cost.total.value : 0;\n        const platformDistributed = formatCurrency(platformDistributedValue, platformDistributedUnits);\n        const workerUnallocated = formatCurrency(workerUnallocatedValue, workerUnallocatedUnits);\n        const totalCost = formatCurrency(totalCostValue, totalCostUnits);\n        const platformDistributedLabel = intl.formatMessage(messages.platformDistributed);\n        const workerUnallocatedLabel = intl.formatMessage(messages.workerUnallocated);\n        const totalCostLabel = intl.formatMessage(messages.allOtherProjectCosts);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 30, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [platformDistributed, workerUnallocated, totalCost] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costDistributionAriaDesc), ariaTitle: intl.formatMessage(messages.costDistributionTitle), constrainToVisibleArea: true, data: [\n                { x: platformDistributedLabel, y: platformDistributedValue, units: platformDistributedUnits },\n                { x: workerUnallocatedLabel, y: workerUnallocatedValue, units: workerUnallocatedUnits },\n                { x: totalCostLabel, y: totalCostValue, units: totalCostUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: platformDistributedLabel,\n                },\n                {\n                    name: workerUnallocatedLabel,\n                },\n                {\n                    name: totalCostLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 325,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst OverheadCostChart = injectIntl(OverheadCostChartBase);\nexport default OverheadCostChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './summaryModal.styles';\nconst reportType = ReportType.cost;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString, reportPathsType } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost[reportItemValue].value : 0, hasTotal ? report.meta.total.cost[reportItemValue].units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost[reportItemValue].value, units: report.meta.total.cost[reportItemValue].units, value: _item.cost[reportItemValue].value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costDistribution, costType, currency, reportGroupBy, reportPathsType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const reportQuery = Object.assign({ cost_type: costType, currency, filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        }, filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })), exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)), group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })) }, (costDistribution === ComputedReportItemValueType.distributed && {\n        order_by: {\n            distributed_cost: 'desc',\n        },\n    }));\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase)));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costDistribution, costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costDistribution: costDistribution, costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/details/components/summary/summaryModal';\nimport { getComputedReportItems } from 'routes/utils/computedReport/getComputedReportItems';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { costDistribution, report, reportGroupBy, reportFetchStatus } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            return (React.createElement(ReportSummaryItems, { costDistribution: costDistribution, idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost[reportItemValue].value, units: report.meta.total.cost[reportItemValue].units, value: reportItem.cost[reportItemValue].value })))));\n        };\n        this.getViewAll = () => {\n            const { costDistribution, costType, currency, groupBy, intl, isPlatformCosts, query, reportGroupBy, reportPathsType, } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, { ouiaId: \"view-all-btn\", onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }, intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costDistribution: costDistribution, costType: costType, currency: currency, groupBy: groupBy, groupByValue: isPlatformCosts ? platformCategoryKey : groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportQueryString, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { intl, isPlatformCosts, reportGroupBy, reportFetchStatus } = this.props;\n        const title = intl.formatMessage(messages.breakdownSummaryTitle, {\n            value: isPlatformCosts ? platformCategoryKey.toLowerCase() : reportGroupBy,\n        });\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, title)),\n            React.createElement(CardBody, null, reportFetchStatus === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costDistribution, costType, currency, reportGroupBy, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = Object.assign({ cost_type: costType, currency, filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })), exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)), group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })) }, (costDistribution === ComputedReportItemValueType.distributed && {\n        order_by: {\n            distributed_cost: 'desc',\n        },\n    }));\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryBase)));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        marginTop: global_spacer_md.value,\n    },\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    subtitle: {\n        marginBottom: global_spacer_md.value,\n    },\n};\n","import 'routes/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { noop } from 'routes/utils/noop';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(React.Fragment, null, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster' || groupBy === 'node') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getHasData = () => {\n            const { report } = this.props;\n            // Note: When APIs return an empty data array, units are unknown. Likewise, when \"platform projects\" are applied,\n            // there is no \"platform\" project. As a workaround, we obtain values from the meta data.\n            const hasMeta = report && report.meta !== undefined;\n            const hasTotal = hasMeta && report.meta.total !== undefined;\n            const hasCapacity = hasTotal && report.meta.total.capacity !== undefined;\n            const hasCapacityCount = hasCapacity && report.meta.total.capacity.count !== undefined;\n            const hasCapacityCountUnits = hasCapacity && report.meta.total.capacity.count_units !== undefined;\n            const hasCapacityUnits = hasCapacity && report.meta.total.capacity.units !== undefined;\n            const hasCapacityUnused = hasCapacity && report.meta.total.capacity.unused !== undefined;\n            const hasCapacityUnusedPercent = hasCapacity && report.meta.total.capacity.unused_percent !== undefined;\n            const hasCapacityValue = hasCapacity && report.meta.total.capacity.value !== undefined;\n            const hasLimit = hasTotal && report.meta.total.limit;\n            const hasLimitUnits = hasLimit && report.meta.total.limit.value !== undefined;\n            const hasLimitValue = hasLimit && report.meta.total.limit.units !== undefined;\n            const hasRequest = hasTotal && report.meta.total.request !== undefined;\n            const hasRequestUnits = hasRequest && report.meta.total.request.units !== undefined;\n            const hasRequestUnused = hasRequest && report.meta.total.request.unused !== undefined;\n            const hasRequestUnusedPercent = hasRequest && report.meta.total.request.unused_percent !== undefined;\n            const hasRequestValue = hasRequest && report.meta.total.request.value !== undefined;\n            const hasUsage = hasTotal && report.meta.total.usage !== undefined;\n            const hasUsageUnits = hasUsage && report.meta.total.usage.units !== undefined;\n            const hasUsageValue = hasUsage && report.meta.total.usage.value !== undefined;\n            return {\n                hasCapacity,\n                hasCapacityCount,\n                hasCapacityCountUnits,\n                hasCapacityUnits,\n                hasCapacityUnused,\n                hasCapacityUnusedPercent,\n                hasCapacityValue,\n                hasLimit,\n                hasLimitUnits,\n                hasLimitValue,\n                hasMeta,\n                hasRequest,\n                hasRequestUnits,\n                hasRequestUnused,\n                hasRequestUnusedPercent,\n                hasRequestValue,\n                hasTotal,\n                hasUsage,\n                hasUsageUnits,\n                hasUsageValue,\n            };\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            this.updateReport();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, intl, report, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        const { hasCapacityUnits, hasCapacityValue, hasLimitUnits, hasLimitValue, hasRequestUnits, hasRequestValue, hasUsageUnits, hasUsageValue, } = this.getHasData();\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const limit = Math.trunc(hasLimitValue ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimitUnits ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || groupBy === 'node' || reportType === ReportType.volume) {\n            const capacity = Math.trunc(hasCapacityValue ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacityUnits ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const request = Math.trunc(hasRequestValue ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequestUnits ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsageValue ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsageUnits ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { groupBy, intl, report } = this.props;\n        if (!report || !(groupBy === 'cluster' || groupBy === 'node')) {\n            return null;\n        }\n        const { hasCapacityCount, hasCapacityCountUnits, hasCapacityUnits, hasCapacityUnused, hasCapacityUnusedPercent, hasRequestUnits, hasRequestUnused, hasRequestUnusedPercent, } = this.getHasData();\n        if (!(hasCapacityUnused && hasRequestUnused)) {\n            return null;\n        }\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const capacityUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasCapacityUnits ? report.meta.total.capacity.units : undefined),\n        });\n        const capacityUnused = Math.trunc(hasCapacityUnused ? report.meta.total.capacity.unused : 0);\n        const capacityUnusedPercent = Math.trunc(hasCapacityUnusedPercent ? report.meta.total.capacity.unused_percent : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequestUnits ? report.meta.total.request.units : undefined),\n        });\n        const requestUnused = Math.trunc(hasRequestUnused ? report.meta.total.request.unused : 0);\n        const requestUnusedPercent = Math.trunc(hasRequestUnusedPercent ? report.meta.total.request.unused_percent : 0);\n        const chartContainer = groupBy === 'node' && !(hasCapacityCount && hasCapacityCountUnits) ? styles.chartContainer : undefined;\n        return (React.createElement(Grid, { hasGutter: true, style: chartContainer },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedCapacityLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(capacityUnused, capacityUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(capacityUnusedPercent, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: capacityUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(requestUnused, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(requestUnusedPercent, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    getSubTitle() {\n        const { groupBy, intl, report } = this.props;\n        if (!report || !(groupBy === 'cluster' || groupBy === 'node')) {\n            return null;\n        }\n        const { hasCapacityCount, hasCapacityCountUnits } = this.getHasData();\n        const count = hasCapacityCount ? report.meta.total.capacity.count : 0;\n        const countUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasCapacityCountUnits ? report.meta.total.capacity.count_units : undefined),\n        });\n        if (hasCapacityCount && hasCapacityCountUnits) {\n            return React.createElement(\"div\", { style: styles.subtitle }, intl.formatMessage(messages.usageSubtitle, { count, countUnits }));\n        }\n        return null;\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            this.getSubTitle(),\n            this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        query,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase)));\nexport default UsageChart;\n","import './costOverview.scss';\nimport { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { Cluster } from 'routes/details/components/cluster';\nimport { CostChart } from 'routes/details/components/costChart';\nimport { OverheadCostChart } from 'routes/details/components/overheadCostChart';\nimport { SummaryCard } from 'routes/details/components/summary';\nimport { UsageChart } from 'routes/details/components/usageChart';\nimport { styles } from 'routes/details/ocpDetails/detailsHeader.styles';\nimport { getGroupByCostCategory, getGroupByOrgValue, getGroupByTagKey } from 'routes/utils/groupBy';\nimport { CostOverviewWidgetType } from 'store/breakdown/costOverview/common/costOverviewCommon';\nimport { platformCategoryKey, tagPrefix } from 'utils/props';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster card\n        this.getClusterCard = (widget) => {\n            const { groupBy, intl, report, title } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report, title: title }))));\n            }\n            else {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns cost distribution chart\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.getCostDistributionChart = (widget) => {\n            const { costDistribution, intl, isCostDistributionFeatureEnabled, report } = this.props;\n            if (!costDistribution || !isCostDistributionFeatureEnabled) {\n                return null;\n            }\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costDistributionTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costDistributionAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.platformDistributed)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.platformDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.workerUnallocated)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.workerUnallocatedDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(OverheadCostChart, { costDistribution: costDistribution, name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { groupBy, intl } = this.props;\n            return (React.createElement(Card, { className: groupBy === 'node' ? 'cardOverride' : undefined },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { groupBy, intl } = this.props;\n            return (React.createElement(Card, { className: groupBy === 'node' ? 'cardOverride' : undefined },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costDistribution, costType, currency, groupBy, isPlatformCosts, query } = this.props;\n            const groupByCostCategory = getGroupByCostCategory(query);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTag = getGroupByTagKey(query);\n            let showWidget = false;\n            if (widget.reportSummary.showWidgetOnGroupBy) {\n                for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                    if (groupById === groupBy || groupByCostCategory || groupByOrg || groupByTag) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (!showWidget && widget.reportSummary.showWidgetOnPlatformCategory) {\n                for (const categoryId of widget.reportSummary.showWidgetOnPlatformCategory) {\n                    if (isPlatformCosts && categoryId === platformCategoryKey) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costDistribution: groupBy === 'cluster' ? ComputedReportItemValueType.distributed : costDistribution, costType: costType, currency: currency, isPlatformCosts: isPlatformCosts, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { groupBy, intl } = this.props;\n            return (React.createElement(Card, { className: groupBy === 'node' ? 'cardOverride' : undefined },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case CostOverviewWidgetType.cluster:\n                return this.getClusterCard(widget);\n            case CostOverviewWidgetType.cost:\n                return this.getCostChart(widget);\n            case CostOverviewWidgetType.costDistribution:\n                return this.getCostDistributionChart(widget);\n            case CostOverviewWidgetType.cpuUsage:\n                return this.getCpuUsageChart(widget);\n            case CostOverviewWidgetType.memoryUsage:\n                return this.getMemoryUsageChart(widget);\n            case CostOverviewWidgetType.reportSummary:\n                return this.getSummaryCard(widget);\n            case CostOverviewWidgetType.volumeUsage:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip } from 'routes/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/components/charts/common/chartUtils';\nimport { noop } from 'routes/utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 725 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 725\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType, DatumType, transformReport } from 'routes/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.updateReport = () => {\n            const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { chartName, costDistribution, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl, } = this.props;\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        // Current data\n        const currentData = transformReport(currentReport, DatumType.cumulative, 'date', 'cost', reportItemValue);\n        const currentInfrastructureCostData = transformReport(currentReport, DatumType.cumulative, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, DatumType.cumulative, 'date', 'cost', reportItemValue);\n        const previousInfrastructureCostData = transformReport(previousReport, DatumType.cumulative, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost[reportItemValue].units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase)));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip, getDateRange } from 'routes/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/components/charts/common/chartUtils';\nimport { noop } from 'routes/utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.updateReport = () => {\n            const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === ReportType.cost;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase)));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeTooltip } from 'routes/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/components/charts/common/chartUtils';\nimport { noop } from 'routes/utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 925 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 925\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/utils/groupBy';\nimport { skeletonWidth } from 'routes/utils/skeleton';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.updateReport = () => {\n            const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.previousQueryString !== previousQueryString) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, DatumType.rolling, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, DatumType.rolling, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, DatumType.rolling, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, DatumType.rolling, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, DatumType.rolling, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, DatumType.rolling, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === ReportType.instanceType || reportType === ReportType.storage;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase)));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataWidgetType } from 'store/breakdown/historicalData/common/historicalDataCommon';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === ReportPathsType.azure) {\n                return reportType === ReportType.instanceType ? 'virtual_machine' : reportType;\n            }\n            return reportType === ReportType.instanceType ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costDistribution, costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costDistribution: costDistribution, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case HistoricalDataWidgetType.cost:\n                return this.getCostChart(widget);\n            case HistoricalDataWidgetType.trend:\n                return this.getTrendChart(widget);\n            case HistoricalDataWidgetType.usage:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n"],"names":["styles","selector","display","alignItems","label","marginBottom","marginRight","var","whiteSpace","costDistributionOptions","messages","costDistributionType","value","distributed","total","CostDistributionBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","costDistribution","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","single","map","SelectOption","description","desc","key","intl","options","push","toString","formatMessage","event","setState","render","style","Title","headingLevel","size","TitleSizes","md","costDistributionLabel","mapStateToProps","CostDistributionConnect","connect","injectIntl","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","tagLink","marginLeft","global_spacer_sm","tagsContainer","global_spacer_3xl","marginTop","TagContentBase","getDataListItems","tagReport","result","item","data","val","values","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","groupBy","groupByValue","dataListItems","groupByValues","count","DataList","tagNames","isCompact","tagHeadingKey","tagHeadingValue","TagContent","tagType","tag","TagModalBase","getTagValueCount","length","handleClose","onClose","bind","componentDidMount","fetchTag","tagPathsType","tagQueryString","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","query","filter","account","Modal","title","tagHeadingTitle","width","isPlatformCosts","router","queryFromRoute","location","search","queryState","groupByOrgValue","filterByParams","filter_by","keys","indexOf","undefined","tagQuery","resolution","time_scope_units","time_scope_value","category","tagReportFetchStatus","mapDispatchToProps","TagModal","TagLinkBase","handleOpen","preventDefault","href","onClick","cost","global_spacer_xl","global_spacer_md","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","header","backgroundColor","global_BackgroundColor_100","headerContent","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","BreakdownHeader","buildDetailsLink","url","isOptimizationsPath","groupByKey","window","atob","newQuery","JSON","parse","group_by","getBackToLink","detailsURL","Link","to","routes","optimizations","path","breakdownBackToOptimizations","breakdownBackToDetails","breakdownBackToTitles","getTotalCost","report","reportItemValue","hasCost","meta","format","units","currency","isCostDistributionFeatureEnabled","onCostDistributionSelected","onCostTypeSelected","onCurrencySelected","showCostDistribution","showCostType","filterByAccount","groupByCostCategory","groupByOrg","groupByTag","showTags","breakdownBackToDetailsAriaLabel","breakdownTitle","groupByValuesTitleCase","featureFlags","optimizationsPath","BreakdownTab","getIdKeyForTab","tab","costOverview","historicalData","BreakdownBase","activeTabKey","isOptimizationsTab","getAvailableTabs","costOverviewComponent","historicalDataComponent","isRosFeatureEnabled","optimizationsBadgeComponent","optimizationsComponent","availableTabs","contentRef","badge","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","TabContent","ref","getTabItem","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","breakdownCostOverviewTitle","breakdownHistoricalDataTitle","tabIndex","closeOptimizationsDrawer","updateReport","fetchReport","reportPathsType","reportType","reportQueryString","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","inProgress","complete","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","detailsClustersModalTitle","name","ClusterModal","ClusterBase","showAll","someClusters","allClusters","computedItems","getComputedReportItems","idKey","includes","sort","a","b","clusterString","slice","trim","concat","Tooltip","enableFlip","detailsMoreClusters","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","markupTitle","rawLabel","rawCostTitle","usageLabel","usageCostTitle","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","costBreakdownAriaDesc","ariaTitle","costBreakdownTitle","constrainToVisibleArea","x","y","labels","datum","costBreakdownTooltip","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","green","OverheadCostChartBase","hasPlatformDistributed","platform_distributed","hasWorkerUnallocated","worker_unallocated_distributed","hasCostTotal","platformDistributedUnits","workerUnallocatedUnits","totalCostUnits","platformDistributedValue","workerUnallocatedValue","totalCostValue","platformDistributed","workerUnallocated","totalCost","platformDistributedLabel","workerUnallocatedLabel","totalCostLabel","allOtherProjectCosts","costDistributionAriaDesc","costDistributionTitle","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","xl","detailsCostValue","status","items","_item","formatOptions","totalValue","reportQuery","cost_type","exclude","order_by","distributed_cost","SummaryModalContent","SummaryModalBase","detailsSummaryModalTitle","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","ouiaId","handleBulletChartModalOpen","type","ButtonType","button","ButtonVariant","link","detailsViewAll","handleBulletChartModalClose","breakdownSummaryTitle","toLowerCase","Card","CardTitle","lg","CardBody","CardFooter","limit","chartContainer","capacity","legendSkeleton","subtitle","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","getHasData","hasMeta","hasCapacity","hasCapacityCount","hasCapacityCountUnits","count_units","hasCapacityUnits","hasCapacityUnused","unused","hasCapacityUnusedPercent","unused_percent","hasCapacityValue","hasLimit","hasLimitUnits","hasLimitValue","hasRequest","request","hasRequestUnits","hasRequestUnused","hasRequestUnusedPercent","hasRequestValue","hasUsageUnits","hasUsageValue","xs","hasRange","range","componentWillUnmount","Math","trunc","limitUnits","detailsUsageLimit","volume","capacityUnits","detailsUsageCapacity","requestUnits","detailsUsageUsage","detailsUsageRequests","capacityUnused","capacityUnusedPercent","requestUnused","requestUnusedPercent","Grid","hasGutter","GridItem","detailsUnusedCapacityLabel","detailsUnusedUnits","percentage","minimumFractionDigits","maximumFractionDigits","detailsUnusedRequestsLabel","getSubTitle","countUnits","usageSubtitle","PLACEHOLDER","CostOverviewsBase","getClusterCard","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","costBreakdownAriaLabel","bodyContent","infoTitle","rawCostDesc","usageCostDesc","markupDesc","docsCostModelTerminology","rel","target","learnMore","plain","info","chartName","getCostDistributionChart","costDistributionAriaLabel","platformDesc","workerUnallocatedDesc","getCpuUsageChart","cpuTitle","getMemoryUsageChart","memoryTitle","getSummaryCard","reportSummary","showWidgetOnPlatformCategory","categoryId","usePlaceholder","getVolumeUsageChart","volumeTitle","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","cpuUsage","memoryUsage","volumeUsage","xl2","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","chartCostLegendLabel","costTooltipKey","chartCostLegendTooltip","series","childName","legendItem","chartCostLegendNoDataLabel","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","chartDayOfTheMonth","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","cumulative","previousData","costUnits","test","currencyUnits","historicalChartDayOfMonthLabel","historicalChartCostLabel","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","chartUsageLegendLabel","toolTipKey","chartUsageLegendTooltip","chartUsageLegendNoDataLabel","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","rolling","Number","isNaN","historicalChartUsageLabel","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","chartLimitLegendLabel","limitTooltipKey","chartLimitLegendTooltip","requestKey","chartRequestsLegendLabel","requestTooltipKey","chartRequestsLegendTooltip","usageKey","usageTooltipKey","chartRequestsLegendNoDataLabel","chartLimitLegendNoDataLabel","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","instanceType","storage","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","azure","historicalChartTitle","getTrendChart","getUsageChart","trend","costLabelUnit","dateTitle","headerContentLeft","minHeight","verticalAlign","infoIcon"],"sourceRoot":""}