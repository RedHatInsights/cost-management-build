{"version":3,"file":"js/awsDetails.fc2ed38052bd24d82b18.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js","webpack:///./src/routes/views/components/costType/costType.styles.ts","webpack:///./src/routes/views/components/costType/costType.tsx","webpack:///./src/utils/computedReport/getComputedAwsReportItems.ts","webpack:///./src/routes/views/details/awsDetails/awsDetails.styles.ts","webpack:///./src/routes/views/details/awsDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/awsDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/awsDetails/detailsTable.tsx","webpack:///./src/routes/views/details/awsDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/awsDetails/awsDetails.tsx","webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);\n\nexport default ExternalLinkAltIcon;","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    costSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costType.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { CostTypes } from 'utils/costType';\nimport { invalidateSession, setCostType } from 'utils/localStorage';\nimport { styles } from './costType.styles';\nconst costTypeOptions = [\n    { desc: messages.costTypeAmortizedDesc, label: messages.costTypeAmortized, value: CostTypes.amortized },\n    { desc: messages.costTypeBlendedDesc, label: messages.costTypeBlended, value: CostTypes.blended },\n    { desc: messages.costTypeUnblendedDesc, label: messages.costTypeUnblended, value: CostTypes.unblended },\n];\nclass CostTypeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { costType, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costType);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costTypeSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costTypeOptions.map(option => {\n                options.push({\n                    desc: intl.formatMessage(option.desc),\n                    toString: () => intl.formatMessage(option.label),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostType(selection.value); // Set cost type in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.costSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.costLabel }, intl.formatMessage(messages.costTypeLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostTypeConnect = connect(mapStateToProps, mapDispatchToProps)(CostTypeBase);\nconst CostType = injectIntl(CostTypeConnect);\nexport default CostType;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { OrgPathsType } from 'api/orgs/org';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = OrgPathsType.aws;\nconst tagReportPathsType = TagPathsType.aws;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { costType, currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.awsDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType }),\n                    React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected }))),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getOrgBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = ReportPathsType.aws;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByOrg, groupByTagKey, intl, isAllSelected, report, router, selectedItems } = this.props;\n            if (!report) {\n                return;\n            }\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupBy),\n            });\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: groupByOrg\n                            ? intl.formatMessage(messages.names, { count: 2 })\n                            : intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupBy === 'account' ? 'account_alias' : groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}`;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: formatPath(routes.awsDetailsBreakdown.path),\n                        description: item.id,\n                        groupBy,\n                        groupByOrg,\n                        id: item.id,\n                        router,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, isDisabled = false) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport || prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { OrgPathsType, OrgType } from 'api/orgs/org';\nimport { getQuery } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { orgUnitIdKey, tagKey } from 'utils/props';\nconst orgReportPathsType = OrgPathsType.aws;\nconst orgReportType = OrgType.org;\nconst tagReportPathsType = TagPathsType.aws;\nconst tagReportType = TagType.tag;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, orgReport, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportFetchStatus, orgQueryString, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (orgReportFetchStatus !== FetchStatus.inProgress) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, orgReportFetchStatus, query, orgQueryString, tagReport, tagReportFetchStatus, tagQueryString, } = this.props;\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (orgReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n                }\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportFetchStatus !== FetchStatus.inProgress) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.aws, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const baseQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    };\n    const tagQueryString = getQuery(Object.assign({}, baseQuery));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    const orgQueryString = getQuery(Object.assign({}, baseQuery));\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    return {\n        orgReport,\n        orgReportFetchStatus,\n        orgQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCostTypeSelected, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, orgUnitIdKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.aws;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, router, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.aws),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupByOrg = getGroupByOrgValue(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, groupByOrg: groupByOrg, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, router, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router, } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.awsDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.aws, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { costType: costType, currency: currency, groupBy: groupById, onCostTypeSelected: value => handleCostTypeSelected(query, router, value), onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const costType = getCostType();\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costType,\n        currency,\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(AwsDetails)));\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, item: { source_uuid }, redirectToCostModel, router, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], router) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingRight: 0,\n    },\n    defaultLabel: {\n        minWidth: '63px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    lastReported: {\n        textAlign: 'right',\n        paddingRight: '40px',\n    },\n    lastReportedColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    managedColumn: {\n        textAlign: 'right',\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { withRouter } from 'utils/router';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl, router } = this.props;\n            const queryFromRoute = parseQuery(router.location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns, router } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(router.location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnRowClick = (event, rowIndex) => {\n            const { onRowClick, rows } = this.props;\n            rows.map(row => (row.selected = false));\n            rows[rowIndex].selected = true;\n            this.setState({ rows }, () => {\n                if (onRowClick) {\n                    onRowClick(event, rowIndex);\n                }\n            });\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isLoading, isRecommendations, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), gridBreakPoint: \"grid-2xl\", hasSelectableRowCaption: isRecommendations },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { isSelectable: isRecommendations, isHoverable: isRecommendations, isRowSelected: isRecommendations && row.selected, onRowClick: _event => this.handleOnRowClick(_event, rowIndex), key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 && !isRecommendations ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    }, style: item.style })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: !isRecommendations && cellIndex === row.cells.length - 1, style: item.style }, item.value))))))))),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(withRouter(DataTable));\n"],"names":["ExternalLinkAltIconConfig","name","height","width","svgPath","yOffset","xOffset","ExternalLinkAltIcon","styles","costSelector","display","alignItems","costLabel","marginBottom","marginRight","whiteSpace","costTypeOptions","desc","messages","label","value","CostTypeBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","costType","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","description","key","intl","options","push","formatMessage","toString","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CostTypeConnect","connect","injectIntl","getIdKeyForGroupBy","groupBy","account","org_unit_id","region","service","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","toolbarContainer","costValue","marginTop","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","padding","headerContent","justifyContent","headerContentLeft","headerContentRight","title","global_spacer_sm","groupByOptions","orgReportPathsType","tagReportPathsType","DetailsHeaderBase","handleCostTypeSelected","onCostTypeSelected","currency","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","count","hasCost","total","cost","TitleSizes","onSelected","showOrgs","showTags","Boolean","format","units","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","reportPathsType","DetailsTableBase","columns","rows","initDatum","groupByOrg","groupByTagKey","isAllSelected","router","selectedItems","computedItems","idKey","orderBy","length","isSortable","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","actions","getActions","Link","to","basePath","routes","type","cells","selected","undefined","val","selectionDisabled","reportQueryString","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","orgReportFetchStatus","orgQueryString","tagReportFetchStatus","tagQueryString","categoryOptions","query","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","baseQuery","filter","resolution","time_scope_units","time_scope_value","key_only","limit","mapDispatchToProps","DetailsToolbarConnect","DetailsToolbar","delta","offset","exclude","filter_by","group_by","order_by","reportType","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","groupById","getExportModal","items","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","indexOf","slice","newQuery","parse","navigate","location","replace","isSelected","newItems","updateReport","fetchReport","bind","prevState","reportError","noReport","noLocation","search","providerType","queryFromRoute","cost_type","DetailsActionsBase","isDropdownOpen","handleOnSelect","handleOnToggle","showPriceListOption","source_uuid","redirectToCostModel","DropdownItem","component","onClick","unshift","includes","Dropdown","toggle","KebabToggle","isPlain","position","dropdownItems","costModels","DetailsActionsConnect","costColumn","paddingRight","defaultLabel","minWidth","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","lastReported","lastReportedColumn","managedColumn","nameColumn","DataTable","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","getSortBy","direction","getSortParams","sortBy","handleOnSort","columnIndex","rowId","newRows","row","SortByDirection","handleOnRowClick","rowIndex","onRowClick","isRecommendations","TableComposable","gridBreakPoint","hasSelectableRowCaption","Thead","Tr","col","Th","modifier","sort","Tbody","Td","colSpan","Bullseye","Spinner","isSelectable","isHoverable","isRowSelected","_event","cellIndex","dataLabel","isActionCell","select","disable"],"sourceRoot":""}