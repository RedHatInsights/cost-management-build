{"version":3,"file":"js/azure.1666365225684.9b80b6ea3fe62854f383.js","mappings":"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","sources":["webpack:///./src/routes/views/details/azureBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/azureBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/azureBreakdown/azureBreakdown.tsx","webpack:///./src/utils/computedReport/getComputedAzureReportItems.ts","webpack:///./src/routes/views/details/azureDetails/azureDetails.styles.ts","webpack:///./src/routes/views/details/azureDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/azureDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/azureDetails/detailsTable.styles.ts","webpack:///./src/routes/views/details/azureDetails/detailsTable.tsx","webpack:///./src/routes/views/details/azureDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/azureDetails/azureDetails.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"azure\" /* ReportPathsType.azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        currency,\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { currency: currency, groupBy: groupBy, report: report }),\n        currency,\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.azureDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, \"azure\" /* ProviderType.azure */),\n        providersError,\n        providersFetchStatus,\n        providerType: \"azure\" /* ProviderType.azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* TagPathsType.azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* TagPathsType.azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.azureDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, \"azure\" /* ProviderType.azure */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* ReportPathsType.azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.azureDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* TagType.tag */;\nconst tagReportPathsType = \"azure\" /* TagPathsType.azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"azure\" /* ResourcePathsType.azure */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReportFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getRouteForQuery, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/history';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/currency';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"azure\" /* ReportPathsType.azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { history, intl, query, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(history, query, perPage), onSetPage: (event, pageNumber) => handleSetPage(history, query, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.azure),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { history, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* FetchStatus.inProgress */, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(history, query, sortType, isSortAscending), query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { history, query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(history, query, filter), onFilterRemoved: filter => handleFilterRemoved(history, query, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, history, location, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, history, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.azureDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* FetchStatus.inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* FetchStatus.complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* ProviderType.azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(history, query, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        currency,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, \"azure\" /* ProviderType.azure */),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n"],"names":["mapStateToProps","state","props","selectWidgets","azureCostOverview","widgets","CostOverview","injectIntl","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","currency","featureFlags","undefined","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","resource_location","service_name","styles","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","padding","headerContent","display","justifyContent","headerContentLeft","headerContentRight","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","onSelect","isDisabled","onSelected","options","showTags","Boolean","format","units","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","offset","exclude","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","history","page","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","parse","replace","newItems","updateReport","prevState","noReport","noLocation","queryFromRoute"],"sourceRoot":""}