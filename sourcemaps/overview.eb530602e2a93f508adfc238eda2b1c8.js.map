{"version":3,"file":"js/overview.1666295382424.2b6d2a9c6b95d59c5d3c.js","mappings":"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","sources":["webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/routes/views/components/perspective/perspective.styles.ts","webpack:///./src/routes/views/components/perspective/perspectiveSelect.tsx","webpack:///./src/routes/views/components/perspective/perspective.tsx","webpack:///./src/routes/views/overview/components/dashboardBase.tsx","webpack:///./src/routes/views/overview/components/chartComparison.tsx","webpack:///./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack:///./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack:///./src/routes/views/overview/overview.styles.ts","webpack:///./src/routes/views/overview/overview.tsx","webpack:///./src/api/queries/overviewQuery.ts","webpack:///./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveSelectBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.perspective)),\n            this.getSelect()));\n    }\n}\nconst PerspectiveSelect = injectIntl(PerspectiveSelectBase);\nexport { PerspectiveSelect };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, isOciFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci && isOciFeatureEnabled) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst OverviewPerspectiveBase = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isOciFeatureEnabled, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    if (isInfrastructureTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n                isOciFeatureEnabled,\n            }));\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n            isOciFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nconst Perspective = withRouter(OverviewPerspectiveBase);\nexport default Perspective;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, currency, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency })))));\n    }))));\nexport default DashboardBase;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { transformForecast, transformForecastCone, transformReport, } from 'routes/views/components/charts/common/chartDatum';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* Comparison.cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* DashboardChartType.dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* DashboardChartType.dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* DashboardChartType.trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* DashboardChartType.usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* Comparison.daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* Comparison.cumulative */, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* Comparison.daily */;\n            const type = daily ? 1 /* DatumType.rolling */ : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* Comparison.daily */;\n            const type = daily ? 1 /* DatumType.rolling */ : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* Comparison.daily */;\n            const type = daily ? 1 /* DatumType.rolling */ : trend.datumType;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* DatumType.cumulative */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === \"usage\" /* ComputedReportItemType.usage */) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* ComputedReportItemType.usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* ComputedReportItemType.usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType || prevProps.currency !== currency) {\n            fetchReports(widgetId);\n            if (trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport default DashboardWidgetBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/currency';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* AwsDashboardTab.services */:\n            return 'service';\n        case \"accounts\" /* AwsDashboardTab.accounts */:\n            return 'account';\n        case \"regions\" /* AwsDashboardTab.regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { costType: getCostType(), getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* AwsOcpDashboardTab.services */:\n            return 'service';\n        case \"accounts\" /* AwsOcpDashboardTab.accounts */:\n            return 'account';\n        case \"regions\" /* AwsOcpDashboardTab.regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* AzureDashboardTab.service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* AzureDashboardTab.subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* AzureDashboardTab.resource_locations */:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* AzureOcpDashboardTab.service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* AzureOcpDashboardTab.subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* AzureOcpDashboardTab.resource_locations */:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* GcpDashboardTab.gcpProjects */:\n            return 'gcp_project';\n        case \"regions\" /* GcpDashboardTab.regions */:\n            return 'region';\n        case \"services\" /* GcpDashboardTab.services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* GcpOcpDashboardTab.gcpProjects */:\n            return 'gcp_project';\n        case \"regions\" /* GcpOcpDashboardTab.regions */:\n            return 'region';\n        case \"services\" /* GcpOcpDashboardTab.services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* IbmDashboardTab.services */:\n            return 'service';\n        case \"projects\" /* IbmDashboardTab.projects */:\n            return 'project';\n        case \"regions\" /* IbmDashboardTab.regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* OcpCloudDashboardTab.accounts */:\n            return 'account';\n        case \"regions\" /* OcpCloudDashboardTab.regions */:\n            return 'region';\n        case \"services\" /* OcpCloudDashboardTab.services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* OcpDashboardTab.clusters */:\n            return 'cluster';\n        case \"nodes\" /* OcpDashboardTab.nodes */:\n            return 'node';\n        case \"projects\" /* OcpDashboardTab.projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/currency';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"product_services\" /* OciDashboardTab.product_services */:\n            return 'product_service';\n        case \"payer_tenant_ids\" /* OciDashboardTab.payer_tenant_ids */:\n            return 'payer_tenant_id';\n        case \"regions\" /* OciDashboardTab.regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { Loading } from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { AwsDashboard } from 'routes/views/overview/awsDashboard';\nimport { AwsOcpDashboard } from 'routes/views/overview/awsOcpDashboard';\nimport { AzureDashboard } from 'routes/views/overview/azureDashboard';\nimport { AzureOcpDashboard } from 'routes/views/overview/azureOcpDashboard';\nimport { GcpDashboard } from 'routes/views/overview/gcpDashboard';\nimport { GcpOcpDashboard } from 'routes/views/overview/gcpOcpDashboard';\nimport { IbmDashboard } from 'routes/views/overview/ibmDashboard';\nimport { OcpCloudDashboard } from 'routes/views/overview/ocpCloudDashboard';\nimport { OcpDashboard } from 'routes/views/overview/ocpDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/currency';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { OciDashboard } from './ociDashboard';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* OverviewTab.infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* OverviewTab.ocp */:\n            return 'ocp';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* OverviewTab.ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* OverviewTab.infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* OverviewTab.infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === \"aws\" /* InfrastructurePerspective.aws */) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrency = () => {\n            const { currency } = this.props;\n            return React.createElement(Currency, { onSelect: this.handleCurrencySelected, currency: currency });\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = hasOcp && !(hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud);\n            const showInfrastructureOnly = !hasOcp && (hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* OverviewTab.ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* OverviewTab.infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* OverviewTab.ocp */ : \"infrastructure\" /* OverviewTab.infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"aws\" /* InfrastructurePerspective.aws */:\n                case \"aws_ocp\" /* InfrastructurePerspective.awsOcp */:\n                case \"azure\" /* InfrastructurePerspective.azure */:\n                case \"oci\" /* InfrastructurePerspective.oci */:\n                case \"azure_ocp\" /* InfrastructurePerspective.azureOcp */:\n                case \"gcp\" /* InfrastructurePerspective.gcp */:\n                case \"gcp_ocp\" /* InfrastructurePerspective.gcpOcp */:\n                case \"ibm\" /* InfrastructurePerspective.ibm */:\n                case \"ibm_ocp\" /* InfrastructurePerspective.ibmOcp */:\n                case \"ocp_cloud\" /* InfrastructurePerspective.ocpCloud */:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return \"ocp_cloud\" /* InfrastructurePerspective.ocpCloud */;\n            }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* InfrastructurePerspective.aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* InfrastructurePerspective.azure */;\n            }\n            if (this.isOciAvailable()) {\n                return \"oci\" /* InfrastructurePerspective.oci */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* InfrastructurePerspective.gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* InfrastructurePerspective.ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"ocp\" /* OcpPerspective.ocp */:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return \"ocp\" /* OcpPerspective.ocp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled, isOciFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp)) {\n                return null;\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* OverviewTab.infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: this.getCurrentTab() === \"infrastructure\" /* OverviewTab.infrastructure */, isOciFeatureEnabled: isOciFeatureEnabled, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* OverviewTab.infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* InfrastructurePerspective.ocpCloud */) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* InfrastructurePerspective.aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* InfrastructurePerspective.awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* InfrastructurePerspective.azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* InfrastructurePerspective.azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* InfrastructurePerspective.gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* InfrastructurePerspective.gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* InfrastructurePerspective.ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"oci\" /* InfrastructurePerspective.oci */) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* OverviewTab.ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"ocp\" /* OcpPerspective.ocp */) {\n                    return hasData ? React.createElement(OcpDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"infrastructure\" /* OverviewTab.infrastructure */) {\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === \"ocp\" /* OverviewTab.ocp */) {\n                return intl.formatMessage(messages.openShift);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handleCurrencySelected = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { currency: value });\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, query } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* OverviewTab.infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* OverviewTab.ocp */ && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { history, query } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    history.replace(this.getRouteForQuery(newQuery));\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isCurrencyFeatureEnabled, isIbmFeatureEnabled, isOciFeatureEnabled, userAccessFetchStatus, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === 2 /* FetchStatus.complete */ &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable();\n        const isLoading = providersFetchStatus === 1 /* FetchStatus.inProgress */ || userAccessFetchStatus === 1 /* FetchStatus.inProgress */;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    isOciFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && this.getCurrency())),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const costType = getCostType();\n    const isCurrencyFeatureEnabled = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state);\n    const currency = isCurrencyFeatureEnabled ? getCurrency() : undefined;\n    const perspective = queryFromRoute.perspective;\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const query = Object.assign(Object.assign(Object.assign({ tabKey }, (perspective && { perspective })), (perspective === \"aws\" /* InfrastructurePerspective.aws */ && { cost_type: costType })), { currency });\n    const queryString = getQuery(query);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, \"aws\" /* ProviderType.aws */),\n        azureProviders: filterProviders(providers, \"azure\" /* ProviderType.azure */),\n        gcpProviders: filterProviders(providers, \"gcp\" /* ProviderType.gcp */),\n        ibmProviders: filterProviders(providers, \"ibm\" /* ProviderType.ibm */),\n        isCurrencyFeatureEnabled,\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        isOciFeatureEnabled: featureFlagsSelectors.selectIsOciFeatureEnabled(state),\n        ociProviders: filterProviders(providers, \"oci\" /* ProviderType.oci */),\n        ocpProviders: filterProviders(providers, \"ocp\" /* ProviderType.ocp */),\n        costType,\n        currency,\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        queryString,\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* UserAccessType.aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* UserAccessType.azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, \"oci\" /* UserAccessType.oci */);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* UserAccessType.cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* UserAccessType.gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, \"gcp\" /* UserAccessType.gcp */) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* UserAccessType.ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveSelectBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","intl","options","props","selections","map","option","push","toString","formatMessage","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","variant","SelectVariant","SelectOption","key","event","onSelected","setState","render","Title","headingLevel","size","messages","PerspectiveSelect","injectIntl","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","isOciFeatureEnabled","hasOcp","hasOcpCloud","isInfrastructureTab","undefined","costType","currency","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","default","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","title","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","componentDidUpdate","prevProps","mapStateToProps","widget","awsDashboard","queries","featureFlags","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","ociDashboard","OciDashboardWidget","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","headerContentRight","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","handleCostTypeSelected","getCurrency","handleCurrencySelected","getDefaultInfrastructurePerspective","perspective","getDefaultOcpPerspective","ocpProviders","userAccess","getPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getRouteForQuery","history","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","cost_type","replace","tabKey","providers","providersFetchStatus","isCurrencyFeatureEnabled","userAccessFetchStatus","noProviders","isLoading","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","queryString","getQuery","providersQueryString","providersError","userAccessQueryString","userAccessError","hasAccess","userAccessType","result","Array","isArray","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasOciAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess"],"sourceRoot":""}