{"version":3,"file":"js/ocpDetails.2791f09002d8435a15e3.js","mappings":"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","sources":["webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/columnManagement/columnManagementModal.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.tsx","webpack:///./src/routes/views/details/rhelBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/rhelBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/rhelBreakdown/rhelBreakdown.tsx","webpack:///./src/utils/computedReport/getComputedRhelReportItems.ts","webpack:///./src/routes/views/details/rhelDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/rhelDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/rhelDetails/detailsTable.tsx","webpack:///./src/routes/views/details/rhelDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/rhelDetails/rhelDetails.styles.ts","webpack:///./src/routes/views/details/rhelDetails/rhelDetails.tsx","webpack:///./src/utils/computedReport/getComputedRosItems.ts","webpack:///./src/routes/views/ros/recommendations/recommendations.styles.ts","webpack:///./src/routes/views/ros/recommendations/rosHeader.styles.ts","webpack:///./src/routes/views/ros/recommendations/rosHeader.tsx","webpack:///./src/routes/views/ros/recommendations/rosTable.tsx","webpack:///./src/routes/views/ros/recommendations/rosToolbar.tsx","webpack:///./src/routes/views/ros/recommendations/recommendations.tsx","webpack:///./src/api/queries/rosQuery.ts","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts"],"sourcesContent":["import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, item: { source_uuid }, redirectToCostModel, router, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], router) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.manageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.selectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.manageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.manageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": `${option.value}Label`, isChecked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: `${option.value}Label`, key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport default ColumnManagementModal;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n    },\n    defaultLabel: {\n        minWidth: '63px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { withRouter } from 'utils/router';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl, router } = this.props;\n            const queryFromRoute = parseQuery(router.location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns, router } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(router.location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isLoading, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), gridBreakPoint: \"grid-2xl\" },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    } })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: cellIndex === row.cells.length - 1 }, item.value))))))))),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(withRouter(DataTable));\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { classificationDefault, classificationPlatform, classificationUnallocated, noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, report, router, selectedItems } = this.props;\n            if (!report) {\n                return;\n            }\n            const showDefaultProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const isPlatformCosts = item.classification === classificationPlatform;\n                const isUnallocatedCosts = item.classification === classificationUnallocated;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}` || isUnallocatedCosts;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                        description: item.id,\n                        id: item.id,\n                        isPlatformCosts,\n                        groupBy,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !showDefaultProject,\n                            value: item.classification === classificationDefault ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { value: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { value: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.ocp, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== FetchStatus.inProgress) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, showPlatformCosts: groupBy === 'project', tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' }, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        category: queryFromRoute.category,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OcpDetails)));\n","import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { rhelCostOverviewSelectors } from 'store/breakdown/costOverview/rhelCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { title }) => {\n    return {\n        selectWidgets: rhelCostOverviewSelectors.selectWidgets(state),\n        widgets: rhelCostOverviewSelectors.selectCurrentWidgets(state),\n        title,\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { rhelHistoricalDataSelectors } from 'store/breakdown/historicalData/rhelHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: rhelHistoricalDataSelectors.selectWidgets(state),\n        widgets: rhelHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/rhelQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { isPlatformCosts } from 'routes/views/utils/paths';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = formatPath(routes.rhelDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.rhel;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute && queryFromRoute.filter && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        category: queryFromRoute.category, // Needed to restore details page state\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { category: undefined, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { currency: currency, groupBy: groupBy, isPlatformCosts: isPlatformCosts(queryFromRoute), report: report, title: title })),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.rhelDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.rhel),\n        providersFetchStatus,\n        providerType: ProviderType.rhel,\n        query: queryFromRoute,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.rhel,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst RhelBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default RhelBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedRhelReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = TagPathsType.rhel;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.rhelDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.rhel),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.rhel;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, report, router, selectedItems } = this.props;\n            if (!report) {\n                return;\n            }\n            const showDefaultProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}`;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.rhelDetailsBreakdown.path),\n                        description: item.id,\n                        groupBy,\n                        id: item.id,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !showDefaultProject,\n                            value: item.default_project ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { value: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { value: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.rhel, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== FetchStatus.inProgress) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './rhelDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass RhelDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' }, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        category: queryFromRoute.category,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(RhelDetails)));\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    rosDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedRosItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './rosHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = TagPathsType.ros; // Todo: remove when mocks are ready\nclass RosHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.rosRecommendationsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ros),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst RosHeader = injectIntl(connect(mapStateToProps, {})(RosHeaderBase));\nexport { RosHeader };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nexport const RosTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.rhel;\nclass RosTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, report, selectedItems } = this.props;\n            if (!report) {\n                return;\n            }\n            const showDefaultProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: RosTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                    },\n                    {\n                        id: RosTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        id: RosTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: RosTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: RosTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}`;\n                const actions = this.getActions(item, isDisabled);\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, label),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !showDefaultProject,\n                            value: item.default_project ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: RosTableColumnIds.monthOverMonth },\n                        { value: React.createElement(\"div\", null, InfrastructureCost), id: RosTableColumnIds.infrastructure },\n                        { value: React.createElement(\"div\", null, supplementaryCost), id: RosTableColumnIds.supplementary },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.rhel, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst RosTable = injectIntl(withRouter(RosTableBase));\nexport { RosTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.ocp;\nexport class RosToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== FetchStatus.inProgress) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst RosToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(RosToolbarBase);\nconst RosToolbar = injectIntl(RosToolbarConnect);\nexport { RosToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/rosQuery';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { rosActions } from 'store/ros';\nimport { rosSelectors } from 'store/ros';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedRosItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './recommendations.styles';\nimport { RosHeader } from './rosHeader';\nimport { RosTable, RosTableColumnIds } from './rosTable';\nimport { RosToolbar } from './rosToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: RosTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: RosTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: RosTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst recommendationType = RosType.cost;\nconst recommendationPathsType = RosPathsType.recommendation;\nclass Recommendations extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, recommendation } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report: recommendation,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, recommendation, recommendationQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = recommendation && recommendation.meta ? recommendation.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: recommendationPathsType, reportQueryString: recommendationQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, recommendation, router } = this.props;\n            const count = recommendation && recommendation.meta ? recommendation.meta.count : 0;\n            const limit = recommendation && recommendation.meta && recommendation.meta.filter && recommendation.meta.filter.limit\n                ? recommendation.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = recommendation && recommendation.meta && recommendation.meta.filter && recommendation.meta.filter.offset\n                ? recommendation.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, recommendation, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, recommendation, recommendationFetchStatus, recommendationQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(RosTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: recommendationFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: recommendation, reportQueryString: recommendationQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, recommendation, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = recommendation && recommendation.meta ? recommendation.meta.count : 0;\n            return (React.createElement(RosToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' }, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateRecommendation = () => {\n            const { fetchRos, recommendationQueryString } = this.props;\n            fetchRos(recommendationPathsType, recommendationType, recommendationQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateRecommendation();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { recommendation, recommendationError, recommendationQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.recommendationQueryString !== recommendationQueryString;\n        const noRecommendation = !recommendation && !recommendationError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noRecommendation || noLocation || newItems) {\n            this.updateRecommendation();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, recommendation, recommendationError, recommendationFetchStatus, router, } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (recommendationError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ros, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.rosDetails },\n            React.createElement(RosHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: recommendation }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                recommendationFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        category: queryFromRoute.category,\n    };\n    const recommendationQueryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const recommendation = rosSelectors.selectRos(state, recommendationPathsType, recommendationType, recommendationQueryString);\n    const recommendationError = rosSelectors.selectRosError(state, recommendationPathsType, recommendationType, recommendationQueryString);\n    const recommendationFetchStatus = rosSelectors.selectRosFetchStatus(state, recommendationPathsType, recommendationType, recommendationQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        recommendation,\n        recommendationError,\n        recommendationFetchStatus,\n        recommendationQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchRos: rosActions.fetchRos,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(Recommendations)));\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n"],"names":["DetailsActionsBase","constructor","stateProps","dispatchProps","super","this","defaultState","isDropdownOpen","isExportModalOpen","state","Object","assign","getExportModal","groupBy","item","reportPathsType","reportQueryString","props","count","isOpen","items","onClose","handleExportModalClose","setState","handleExportModalOpen","handleOnSelect","handleOnToggle","bind","render","isDisabled","showPriceListOption","intl","source_uuid","redirectToCostModel","router","DropdownItem","component","key","onClick","formatMessage","messages","unshift","includes","length","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","mapStateToProps","mapDispatchToProps","costModels","DetailsActionsConnect","connect","injectIntl","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","handleClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","Modal","description","TextContent","Text","TextVariants","Button","isInline","variant","title","ModalVariant","actions","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","isChecked","name","onChange","DataListItemCells","dataListCells","DataListCell","label","ColumnManagementModalConnect","styles","costColumn","textAlign","defaultLabel","minWidth","emptyState","backgroundColor","display","justifyContent","paddingTop","height","width","infoArrow","infoArrowDesc","bottom","infoDescription","color","fontSize","nameColumn","DataTable","getEmptyState","queryFromRoute","location","search","filter_by","val","values","filter","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","getSortBy","index","columns","orderBy","direction","order_by","getSortParams","sortBy","onSort","handleOnSort","columnIndex","isSelected","rowId","onSelected","rows","newRows","row","selected","SortByDirection","isLoading","TableComposable","gridBreakPoint","Thead","Tr","col","Th","modifier","sort","isSortable","undefined","style","Tbody","Td","colSpan","Bullseye","Spinner","size","rowIndex","cells","cellIndex","dataLabel","select","disable","selectionDisabled","_event","isActionCell","Boolean","groupByOptions","tagReportPathsType","DetailsHeaderBase","arguments","currency","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","Title","headingLevel","TitleSizes","getIdKeyForGroupBy","showTags","Tooltip","content","enableFlip","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","DetailsTableColumnIds","DetailsTableBase","initDatum","groupByTagKey","isAllSelected","selectedItems","showDefaultProject","computedItems","idKey","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","isPlatformCosts","classification","isUnallocatedCosts","desc","getActions","Link","to","basePath","routes","toString","push","Label","find","filteredColumns","column","filteredRows","_a","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","providerType","percentValue","toFixed","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","componentDidMount","currentReport","data","JSON","stringify","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","onPlatformCostsChanged","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","showPlatformCosts","resolution","time_scope_units","time_scope_value","key_only","limit","DetailsToolbarConnect","DetailsToolbar","paddingBottom","global_spacer_lg","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","global_BackgroundColor_light_100","global_spacer_md","tableContainer","baseQuery","delta","offset","exclude","group_by","project","defaultColumnOptions","reportType","OcpDetails","isColumnManagementModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","groupById","isAllItems","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handlePlatformCostsChanged","action","handleGroupBySelected","groupByKey","newQuery","parse","category","navigate","replace","newItems","updateReport","fetchReport","prevState","reportError","noReport","noLocation","selectWidgets","rhelCostOverview","widgets","CostOverview","rhelHistoricalData","HistoricalData","detailsURL","groupByValue","costOverviewComponent","emptyStateTitle","historicalDataComponent","cluster","node","costValue","marginTop","marginBottom","costLabelUnit","global_FontSize_sm","global_Color_100","dateTitle","header","padding","headerContent","headerContentLeft","headerContentRight","info","verticalAlign","infoIcon","global_FontSize_md","infoTitle","fontWeight","global_spacer_sm","default_project","RhelDetails","rosDetails","RosHeaderBase","RosHeader","RosTableColumnIds","RosTableBase","RosTable","RosToolbarBase","RosToolbarConnect","RosToolbar","recommendationType","recommendationPathsType","Recommendations","recommendation","recommendationQueryString","recommendationFetchStatus","updateRecommendation","fetchRos","recommendationError","noRecommendation","parseQuery","getQuery"],"sourceRoot":""}