{"version":3,"file":"js/InactiveSources.cc5ea0f725e2ede9c215.js","mappings":"qQAYA,MAAMA,UAA4B,cAC9BC,cACIC,SAASC,WACTC,KAAKC,uBAAyB,KAC1B,MAAM,UAAEC,GAAcF,KAAKG,MACrBC,EAAU,GAQhB,OAPIF,GAAaA,EAAUG,MACvBH,EAAUG,KAAKC,KAAID,KACK,IAAhBA,EAAKE,QACLH,EAAQI,KAAKH,EAAKI,KACtB,IAGDL,CAAO,EAElBJ,KAAKU,mBAAsBC,GACnBA,EAAMC,OAAS,EACR,KAEH,kBAAoB,IAAK,KAAMD,EAAML,KAAI,CAACG,EAAMI,IAChDA,IAAUF,EAAMC,OAAS,EAClBH,EAGA,GAAGA,SAItBT,KAAKc,cAAgB,MACjB,QAAmB,QACnBd,KAAKe,aAAa,EAEtBf,KAAKgB,cAAgB,KAEV,SAEf,CACAC,SACI,MAAM,UAAEf,EAAS,eAAEgB,EAAc,qBAAEC,EAAoB,KAAEC,GAASpB,KAAKG,MACjEkB,GAAU,UACVV,EAAQX,KAAKC,yBACbqB,EAAyB,IAAjBX,EAAMC,OACdQ,EAAKG,cAAcC,EAAA,uBAA+B,CAAEC,MAAOd,EAAM,KACjES,EAAKG,cAAcC,EAAA,kCACzB,OAAqB,IAAjBb,EAAMC,QACFV,GAAaiB,IAAyB,gBAAyBD,IAC/D,UAEG,MAEPlB,KAAKgB,gBACE,OAGX,UACQ,kBAAoB,MAAO,CAAEU,UAAW,SAC5C,kBAAoB,EAAAC,MAAO,CAAEC,UAAU,EAAMC,QAAS,SAAUP,MAAOA,EAAOQ,YAAa,kBAAoB,EAAAC,uBAAwB,CAAEC,QAAShC,KAAKc,gBAAkBmB,YAAa,kBAAoB,aAAgB,KAClN,kBAAoB,IAAK,CAAEC,KAAM,GAAGb,sBAA8BD,EAAKG,cAAcC,EAAA,0BAAmCxB,KAAKU,mBAAmBC,KAChK,EAGJ,MAAMwB,GAAkB,SAAsB,CAACC,EAAOjC,KAClD,MAAMkC,GAAuB,OAAkB,MAgB/C,MAAO,CACHnC,UAhBc,qBAAmCkC,EAAO,QAAkBC,GAiB1EnB,eAhBmB,0BAAwCkB,EAAO,QAAkBC,GAiBpFlB,qBAhByB,gCAA8CiB,EAAO,QAAkBC,GAiBnG,IAGL,GADwB,EAAAC,EAAA,KAAW,IAAAC,SAAQJ,OAAiBK,EAAzB,CAAoC5C,G","sources":["webpack:///./src/components/inactiveSources/inactiveSources.tsx"],"sourcesContent":["import './inactiveSources.scss';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { deleteInactiveSources, invalidateSession, isInactiveSourcesValid, setInactiveSources, } from 'utils/localStorage';\nimport { getReleasePath } from 'utils/paths';\nclass InactiveSourcesBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getInactiveSourceNames = () => {\n            const { providers } = this.props;\n            const sources = [];\n            if (providers && providers.data) {\n                providers.data.map(data => {\n                    if (data.active !== true) {\n                        sources.push(data.name);\n                    }\n                });\n            }\n            return sources;\n        };\n        this.getInactiveSources = (names) => {\n            if (names.length < 2) {\n                return null;\n            }\n            return (React.createElement(\"p\", null, names.map((name, index) => {\n                if (index === names.length - 1) {\n                    return name;\n                }\n                else {\n                    return `${name}, `;\n                }\n            })));\n        };\n        this.handleOnClose = () => {\n            setInactiveSources('true');\n            this.forceUpdate();\n        };\n        this.isAlertClosed = () => {\n            // Keep closed if token is valid for current session\n            return isInactiveSourcesValid();\n        };\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, intl } = this.props;\n        const release = getReleasePath();\n        const names = this.getInactiveSourceNames();\n        const title = names.length === 1\n            ? intl.formatMessage(messages.inactiveSourcesTitle, { value: names[0] })\n            : intl.formatMessage(messages.inactiveSourcesTitleMultiplier);\n        if (names.length === 0) {\n            if (providers && providersFetchStatus === FetchStatus.complete && !providersError) {\n                deleteInactiveSources(); // Reset cookie for new alerts\n            }\n            return null;\n        }\n        if (this.isAlertClosed()) {\n            return null; // Don't display alert\n        }\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { className: \"alert\" },\n            React.createElement(Alert, { isInline: true, variant: \"danger\", title: title, actionClose: React.createElement(AlertActionCloseButton, { onClose: this.handleOnClose }), actionLinks: React.createElement(React.Fragment, null,\n                    React.createElement(\"a\", { href: `${release}/settings/sources` }, intl.formatMessage(messages.inactiveSourcesGoTo))) }, this.getInactiveSources(names))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    // For testing...\n    //\n    // if (providers && providers.data) {\n    //   if (providers.data.length) {\n    //     providers.data[0].active = false;\n    //   } else {\n    //     providers.data[0] = {\n    //       name: 'AWS for OpenShift',\n    //       active: false,\n    //     };\n    //   }\n    // }\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n    };\n});\nconst InactiveSources = injectIntl(connect(mapStateToProps, undefined)(InactiveSourcesBase));\nexport default InactiveSources;\n"],"names":["InactiveSourcesBase","constructor","super","arguments","this","getInactiveSourceNames","providers","props","sources","data","map","active","push","name","getInactiveSources","names","length","index","handleOnClose","forceUpdate","isAlertClosed","render","providersError","providersFetchStatus","intl","release","title","formatMessage","messages","value","className","Alert","isInline","variant","actionClose","AlertActionCloseButton","onClose","actionLinks","href","mapStateToProps","state","providersQueryString","injectIntl","connect","undefined"],"sourceRoot":""}