{"version":3,"file":"js/overview.86f91efb69b4f5d9a0bf.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/ok-icon.js","webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/routes/components/currency/currency.styles.ts","webpack:///./src/routes/components/currency/currency.tsx","webpack:///./src/routes/settings/costModelsDetails/utils/query.tsx","webpack:///./src/routes/settings/costModelsDetails/bottomPagination.tsx","webpack:///./src/routes/settings/costModelsDetails/costModelsDetails.styles.ts","webpack:///./src/routes/settings/costModelWizard/api.ts","webpack:///./src/routes/settings/costModelWizard/context.ts","webpack:///./src/routes/settings/costModelWizard/wizard.styles.ts","webpack:///./src/routes/settings/costModelWizard/distribution.tsx","webpack:///./src/routes/settings/costModelWizard/steps.tsx","webpack:///./src/routes/settings/costModelWizard/generalInformation.tsx","webpack:///./src/routes/settings/costModelWizard/markup.tsx","webpack:///./src/routes/settings/components/addPriceList.tsx","webpack:///./src/routes/settings/components/paginationToolbarTemplate.tsx","webpack:///./src/routes/settings/costModelWizard/priceListTable.tsx","webpack:///./src/routes/settings/costModelWizard/priceList.tsx","webpack:///./src/routes/settings/costModelWizard/review.tsx","webpack:///./src/routes/settings/costModelWizard/assignSourcesToolbar.tsx","webpack:///./src/routes/settings/costModelWizard/table.tsx","webpack:///./src/routes/settings/costModelWizard/sources.tsx","webpack:///./src/routes/settings/costModelWizard/costModelWizard.tsx","webpack:///./src/routes/settings/costModelsDetails/createCostModelButton.tsx","webpack:///./src/routes/settings/costModelsDetails/utils/dialog.tsx","webpack:///./src/routes/settings/costModelsDetails/dialog.tsx","webpack:///./src/routes/settings/costModelsDetails/emptyStateBase.tsx","webpack:///./src/routes/settings/costModelsDetails/noCostModels.tsx","webpack:///./src/routes/settings/costModelsDetails/table.tsx","webpack:///./src/routes/settings/costModelsDetails/utils/table.tsx","webpack:///./src/routes/settings/costModelsDetails/utils/filters.tsx","webpack:///./src/routes/settings/costModelsDetails/utils/toolbar.tsx","webpack:///./src/routes/settings/costModelsDetails/toolbar.tsx","webpack:///./src/routes/settings/costModelsDetails/costModelsDetails.tsx","webpack:///./src/routes/settings/settings.styles.ts","webpack:///./src/routes/settings/settings.tsx","webpack:///./src/routes/state/noData/noDataState.tsx","webpack:///./src/routes/state/noData/noData.tsx","webpack:///./src/routes/components/icons/costIcon/costIcon.tsx","webpack:///./src/routes/state/noProviders/noProvidersState.styles.ts","webpack:///./src/routes/state/noProviders/noProvidersState.tsx","webpack:///./src/routes/state/noProviders/noProviders.tsx","webpack:///./src/routes/views/components/perspective/perspective.tsx","webpack:///./src/routes/views/overview/components/dashboardBase.tsx","webpack:///./src/routes/views/overview/components/optimizationsSummary/optimizations.styles.ts","webpack:///./src/routes/views/overview/components/optimizationsSummary/optimizationsSummary.tsx","webpack:///./src/routes/views/overview/components/chartComparison.tsx","webpack:///./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack:///./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboard.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack:///./src/routes/views/overview/overview.styles.ts","webpack:///./src/routes/views/overview/overview.tsx","webpack:///./src/api/queries/overviewQuery.ts","webpack:///./src/routes/views/utils/providers.ts","webpack:///./src/utils/userAccess.ts"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OkIconConfig = {\n  name: 'OkIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M668.3,361.4 L465.1,564.6 L352.2,451.7 C346.210177,445.698444 338.079189,442.325817 329.6,442.325817 C321.120811,442.325817 312.989823,445.698444 307,451.7 L261.8,496.9 C255.798444,502.889823 252.425817,511.020811 252.425817,519.5 C252.425817,527.979189 255.798444,536.110177 261.8,542.1 L442.4,722.7 C448.389823,728.701556 456.520811,732.074183 465,732.074183 C473.479189,732.074183 481.610177,728.701556 487.6,722.7 L758.6,451.7 C764.601556,445.710177 767.974183,437.579189 767.974183,429.1 C767.974183,420.620811 764.601556,412.489823 758.6,406.5 L713.4,361.3 C700.916226,348.87879 680.728569,348.923552 668.3,361.4 M512.1,127.9 C300.3,127.9 128.1,300.2 128.1,511.9 C128.1,723.8 300.3,895.9 512.1,895.9 C723.9,895.9 896.1,723.7 896.1,511.9 C896.1,300.1 723.8,127.9 512.1,127.9 M512.1,1024 C229.7,1024 0,794.3 0,512 C0,229.7 229.7,0 512.1,0 C794.3,0 1024,229.7 1024,512 C1024,794.3 794.3,1024 512.1,1024',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OkIcon = createIcon(OkIconConfig);\n\nexport default OkIcon;","import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currency, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: \"currencyOverride\", id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCurrency(selection.value); // Set currency units via local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.currency)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport default Currency;\n","import { SortByDirection } from '@patternfly/react-table';\nexport const initialCostModelsQuery = {\n    limit: 10,\n    offset: 0,\n    ordering: null,\n    name: null,\n    source_type: null,\n    description: null,\n};\nexport const costModelsQueryKeys = Object.keys(initialCostModelsQuery);\nexport function stringifySearch(query) {\n    return Object.keys(query).reduce((acc, cur) => {\n        if (query[cur] === null) {\n            return acc;\n        }\n        return acc === '' ? `?${cur}=${query[cur]}` : `${acc}&${cur}=${query[cur]}`;\n    }, '');\n}\nexport function objectifySearch(search) {\n    if (!search) {\n        return initialCostModelsQuery;\n    }\n    const urlQuery = search\n        .slice(1)\n        .split('&')\n        .map(term => term.split('='))\n        .filter(key_value => key_value.length === 2);\n    const nameTerm = urlQuery.find(term => term[0] === 'name');\n    const sourceTypeTerm = urlQuery.find(term => term[0] === 'source_type');\n    const descriptionTerm = urlQuery.find(term => term[0] === 'description');\n    const orderingTerm = urlQuery.find(term => term[0] === 'ordering');\n    const limitTerm = urlQuery.find(term => term[0] === 'limit');\n    const offsetTerm = urlQuery.find(term => term[0] === 'offset');\n    return {\n        name: nameTerm === undefined ? null : nameTerm[1],\n        description: descriptionTerm === undefined ? null : descriptionTerm[1],\n        source_type: sourceTypeTerm === undefined ? null : sourceTypeTerm[1],\n        ordering: orderingTerm === undefined ? null : orderingTerm[1],\n        offset: offsetTerm === undefined ? 0 : Number(offsetTerm[1]),\n        limit: limitTerm === undefined ? 10 : Number(limitTerm[1]),\n    };\n}\nexport function parseOrdering(query, cells) {\n    const { ordering } = query;\n    if (ordering === null) {\n        return {};\n    }\n    const name = ordering[0] === '-' ? ordering.slice(1) : ordering;\n    const direction = ordering[0] === '-' ? SortByDirection.desc : SortByDirection.asc;\n    const index = cells.findIndex(cell => cell.data && cell.data.orderName === name);\n    return { index, direction };\n}\nexport function limitTransform(perPage) {\n    return perPage;\n}\nexport function offsetTransform(page, perPage) {\n    return (page - 1) * perPage;\n}\n","import { Pagination, PaginationVariant, Toolbar, ToolbarContent, ToolbarItem, ToolbarItemVariant, } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { costModelsSelectors } from 'store/costModels';\nimport { withRouter } from 'utils/router';\nimport { initialCostModelsQuery, limitTransform, offsetTransform, stringifySearch } from './utils/query';\nconst BottomPaginationBase = props => {\n    const { variant, intl = defaultIntl, // for testing\n    itemCount, page, perPage, onSetPage, onPerPageSelect, } = props;\n    return (React.createElement(Toolbar, null,\n        React.createElement(ToolbarContent, null,\n            React.createElement(ToolbarItem, { variant: ToolbarItemVariant.pagination },\n                React.createElement(Pagination, { onPerPageSelect: onPerPageSelect, onSetPage: onSetPage, variant: variant, itemCount: itemCount, page: page, perPage: perPage, titles: {\n                        paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                            title: intl.formatMessage(messages.costModelsDetailsTitle),\n                            placement: 'bottom',\n                        }),\n                    } })))));\n};\nconst mapStateToProps = (state) => {\n    const { count, page, perPage } = costModelsSelectors.pagination(state);\n    const query = costModelsSelectors.query(state);\n    return {\n        query,\n        count,\n        page,\n        perPage,\n    };\n};\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { router } = ownProps;\n    const { count, page, perPage, query } = stateProps;\n    return {\n        itemCount: count,\n        page,\n        perPage,\n        variant: PaginationVariant.bottom,\n        onSetPage: (_evt, newPage, newPerPage) => {\n            router.navigate(stringifySearch(Object.assign(Object.assign(Object.assign({}, initialCostModelsQuery), query), { offset: offsetTransform(newPage, newPerPage) })));\n        },\n        onPerPageSelect: (_evt, newPerPage) => {\n            router.navigate(stringifySearch(Object.assign(Object.assign(Object.assign({}, initialCostModelsQuery), query), { limit: limitTransform(newPerPage), offset: 0 })));\n        },\n    };\n};\nexport const CostModelsBottomPagination = withRouter(connect(mapStateToProps, undefined, mergeProps)(injectIntl(BottomPaginationBase)));\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    descContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n};\n","import { fetchProviders } from 'api/providers';\nexport const fetchSources = ({ type, page, perPage, query }) => {\n    const offset = (page - 1) * perPage;\n    const limit = perPage;\n    const queryParam = Object.keys(query).reduce((acc, cur) => (acc ? `${acc}&${cur}=${query[cur]}` : `${cur}=${query[cur]}`), '');\n    return fetchProviders(`type=${type}&limit=${limit}&offset=${offset}&${queryParam}`).then(sources => {\n        const payload = sources.data;\n        return payload.data.map(src => ({\n            name: src.name,\n            uuid: src.uuid,\n            costmodel: src.cost_models.map(cm => cm.name).join(','),\n            meta: payload.meta,\n        }));\n    });\n};\n// .then(sources => sources.data.data)\n","import React from 'react';\nimport { getAccountCurrency } from 'utils/localStorage';\nexport const defaultCostModelContext = {\n    apiError: null,\n    checked: {},\n    clearQuery: () => null,\n    createError: null,\n    createProcess: false,\n    createSuccess: false,\n    currencyUnits: getAccountCurrency(),\n    dataFetched: false,\n    description: '',\n    dirtyName: false,\n    distribution: '',\n    distributePlatformUnallocated: true,\n    distributeWorkerUnallocated: true,\n    error: null,\n    fetchSources: (type, query, page, perPage) => null,\n    filterName: '',\n    goToAddPL: (value) => null,\n    isDiscount: false,\n    handleMarkupDiscountChange: (...args) => null,\n    handleDistributionChange: (...args) => null,\n    handleDistributePlatformUnallocatedChange: (...args) => null,\n    handleDistributeWorkerUnallocatedChange: (...args) => null,\n    handleSignChange: (...args) => null,\n    loading: false,\n    markup: '',\n    metricsHash: {},\n    name: '',\n    onClose: () => null,\n    onCurrencyChange: (value) => null,\n    onDescChange: (value) => null,\n    onFilterChange: (value) => null,\n    onPageChange: (_evt, value) => null,\n    onPerPageChange: (_evt, value) => null,\n    onTypeChange: (value) => null,\n    onNameChange: (value) => null,\n    onSourceSelect: (...args) => null,\n    page: 1,\n    perPage: 10,\n    priceListPagination: {\n        page: 1,\n        perPage: 4,\n        onPerPageSet: (_evt, perPage) => null,\n        onPageSet: (_evt, page) => null,\n    },\n    query: {},\n    step: 1,\n    setSources: (value) => null,\n    sources: [],\n    submitTiers: (tiers) => null,\n    tiers: [],\n    total: 0,\n    type: '',\n};\nexport const CostModelContext = React.createContext(defaultCostModelContext);\n","export const styles = {\n    form: {\n        width: '350px',\n    },\n    textArea: {\n        maxWidth: '450px',\n        minWidth: '350px',\n        minHeight: '75px',\n        maxHeight: '150px',\n    },\n    selector: {\n        maxHeight: '350px',\n    },\n    titleWithLearnMore: {\n        display: 'inline-block',\n        marginRight: '1em',\n    },\n};\n","import { FormGroup, Radio, Stack, StackItem, Text, TextContent, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Form } from 'routes/settings/components/forms/form';\nimport { createMapStateToProps } from 'store/common';\nimport { CostModelContext } from './context';\nimport { styles } from './wizard.styles';\nclass DistributionBase extends React.Component {\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(CostModelContext.Consumer, null, ({ handleDistributionChange, handleDistributePlatformUnallocatedChange, handleDistributeWorkerUnallocatedChange, distribution, distributePlatformUnallocated, distributeWorkerUnallocated, }) => {\n            return (React.createElement(Stack, { hasGutter: true },\n                React.createElement(StackItem, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"xl\", style: styles.titleWithLearnMore }, intl.formatMessage(messages.costDistribution)),\n                    React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelsDistribution), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))),\n                React.createElement(StackItem, null,\n                    React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.distributionType)),\n                    React.createElement(TextContent, null,\n                        React.createElement(Text, { style: styles.cardDescription }, intl.formatMessage(messages.distributionModelDesc)))),\n                React.createElement(StackItem, { isFilled: true },\n                    React.createElement(Form, null,\n                        React.createElement(FormGroup, { isInline: true, fieldId: \"cost-distribution-type\", isRequired: true },\n                            React.createElement(Radio, { isChecked: distribution === 'cpu', name: \"distributionType\", label: intl.formatMessage(messages.cpuTitle), \"aria-label\": intl.formatMessage(messages.cpuTitle), id: \"cpuDistribution\", value: \"cpu\", onChange: handleDistributionChange }),\n                            React.createElement(Radio, { isChecked: distribution === 'memory', name: \"distributionType\", label: intl.formatMessage(messages.memoryTitle), \"aria-label\": intl.formatMessage(messages.memoryTitle), id: \"memoryDistribution\", value: \"memory\", onChange: handleDistributionChange })))),\n                React.createElement(StackItem, null,\n                    React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.platform)),\n                    React.createElement(TextContent, null,\n                        React.createElement(Text, { style: styles.cardDescription }, intl.formatMessage(messages.platformDesc)))),\n                React.createElement(StackItem, { isFilled: true },\n                    React.createElement(Form, null,\n                        React.createElement(FormGroup, { isInline: true, fieldId: \"cost-distribution-platform-unallocated\", isRequired: true },\n                            React.createElement(Radio, { isChecked: distributePlatformUnallocated, name: \"distributePlatformUnallocated\", label: intl.formatMessage(messages.distribute), \"aria-label\": intl.formatMessage(messages.distribute), id: \"distributePlatformTrue\", value: \"true\", onChange: handleDistributePlatformUnallocatedChange }),\n                            React.createElement(Radio, { isChecked: !distributePlatformUnallocated, name: \"distributePlatformUnallocated\", label: intl.formatMessage(messages.doNotDistribute), \"aria-label\": intl.formatMessage(messages.doNotDistribute), id: \"distributePlatformFalse\", value: \"false\", onChange: handleDistributePlatformUnallocatedChange })))),\n                React.createElement(StackItem, null,\n                    React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.workerUnallocated)),\n                    React.createElement(TextContent, null,\n                        React.createElement(Text, { style: styles.cardDescription }, intl.formatMessage(messages.workerUnallocatedDesc)))),\n                React.createElement(StackItem, { isFilled: true },\n                    React.createElement(Form, null,\n                        React.createElement(FormGroup, { isInline: true, fieldId: \"cost-distribution-worker-unallocated\", isRequired: true },\n                            React.createElement(Radio, { isChecked: distributeWorkerUnallocated, name: \"distributeWorkerUnallocated\", label: intl.formatMessage(messages.distribute), \"aria-label\": intl.formatMessage(messages.distribute), id: \"distributeWorkerTrue\", value: \"true\", onChange: handleDistributeWorkerUnallocatedChange }),\n                            React.createElement(Radio, { isChecked: !distributeWorkerUnallocated, name: \"distributeWorkerUnallocated\", label: intl.formatMessage(messages.doNotDistribute), \"aria-label\": intl.formatMessage(messages.doNotDistribute), id: \"distributeWorkerFalse\", value: \"false\", onChange: handleDistributeWorkerUnallocatedChange }))))));\n        }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst Distribution = injectIntl(connect(mapStateToProps, {})(DistributionBase));\nexport default Distribution;\n","import messages from 'locales/messages';\nimport { countDecimals, isPercentageFormatValid } from 'utils/format';\nexport const nameErrors = (name) => {\n    if (name.length === 0) {\n        return messages.costModelsRequiredField;\n    }\n    if (name.length > 100) {\n        return messages.costModelsInfoTooLong;\n    }\n    return null;\n};\nexport const descriptionErrors = (description) => {\n    if (description.length > 500) {\n        return messages.costModelsDescTooLong;\n    }\n    return null;\n};\nconst isMarkupValid = value => {\n    if (value.trim() === '') {\n        return false;\n    }\n    if (!isPercentageFormatValid(value)) {\n        return false;\n    }\n    // Test number of decimals\n    const decimals = countDecimals(value);\n    if (decimals > 10) {\n        return false;\n    }\n    return true;\n};\nexport const validatorsHash = {\n    '': [() => false],\n    AWS: [\n        ctx => nameErrors(ctx.name) === null && descriptionErrors(ctx.description) === null && ctx.type !== '',\n        ctx => isMarkupValid(ctx.markup),\n        () => true,\n        () => true,\n    ],\n    Azure: [\n        ctx => nameErrors(ctx.name) === null && descriptionErrors(ctx.description) === null && ctx.type !== '',\n        ctx => isMarkupValid(ctx.markup),\n        () => true,\n        () => true,\n    ],\n    GCP: [\n        ctx => nameErrors(ctx.name) === null && descriptionErrors(ctx.description) === null && ctx.type !== '',\n        ctx => isMarkupValid(ctx.markup),\n        () => true,\n        () => true,\n    ],\n    OCP: [\n        ctx => nameErrors(ctx.name) === null && descriptionErrors(ctx.description) === null && ctx.type !== '',\n        ctx => ctx.priceListCurrent.justSaved,\n        ctx => isMarkupValid(ctx.markup),\n        () => true,\n        () => true,\n        () => true,\n    ],\n};\n","import { FormGroup, SelectDirection, Stack, StackItem, TextArea, TextInput, Title, TitleSizes, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { currencyOptions } from 'routes/components/currency';\nimport { Form } from 'routes/settings/components/forms/form';\nimport { Selector } from 'routes/settings/components/inputs/selector';\nimport { createMapStateToProps } from 'store/common';\nimport { CostModelContext } from './context';\nimport { descriptionErrors, nameErrors } from './steps';\nimport { styles } from './wizard.styles';\nclass GeneralInformation extends React.Component {\n    render() {\n        const getValueLabel = (valStr, options) => {\n            const val = options.find(o => o.value === valStr);\n            return !val ? valStr : intl.formatMessage(val.label, { units: val.value });\n        };\n        const { intl } = this.props;\n        const sourceTypeOptions = [\n            {\n                label: messages.costModelsWizardOnboardAws,\n                value: 'AWS',\n            },\n            {\n                label: messages.azure,\n                value: 'Azure',\n            },\n            {\n                label: messages.gcp,\n                value: 'GCP',\n            },\n            {\n                label: messages.costModelsWizardOnboardOcp,\n                value: 'OCP',\n            },\n        ];\n        return (React.createElement(CostModelContext.Consumer, null, ({ currencyUnits, dirtyName, description, name, type, onCurrencyChange, onNameChange, onDescChange, onTypeChange, }) => (React.createElement(Stack, { hasGutter: true },\n            React.createElement(StackItem, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl, style: styles.titleWithLearnMore }, intl.formatMessage(messages.costModelsWizardGeneralInfoTitle)),\n                React.createElement(\"a\", { href: intl.formatMessage(messages.docsConfigCostModels), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))),\n            React.createElement(StackItem, null,\n                React.createElement(Form, { style: styles.form },\n                    React.createElement(FormGroup, { helperTextInvalid: nameErrors(name) && intl.formatMessage(nameErrors(name)), validated: nameErrors(name) === null || !dirtyName ? 'default' : 'error', label: intl.formatMessage(messages.names, { count: 1 }), isRequired: true, fieldId: \"name\" },\n                        React.createElement(TextInput, { validated: nameErrors(name) === null || !dirtyName ? 'default' : 'error', isRequired: true, type: \"text\", id: \"name\", name: \"name\", value: name, onChange: onNameChange })),\n                    React.createElement(FormGroup, { helperTextInvalid: descriptionErrors(description) && intl.formatMessage(descriptionErrors(description)), validated: descriptionErrors(description) === null ? 'default' : 'error', label: intl.formatMessage(messages.description), fieldId: \"description\" },\n                        React.createElement(TextArea, { style: styles.textArea, type: \"text\", id: \"description\", name: \"description\", value: description, validated: descriptionErrors(description) === null ? 'default' : 'error', onChange: onDescChange })),\n                    React.createElement(Selector, { isRequired: true, id: \"source-type-selector\", direction: SelectDirection.up, appendMenuTo: \"inline\", maxHeight: styles.selector.maxHeight, label: messages.costModelsSourceType, toggleAriaLabel: intl.formatMessage(messages.costModelsWizardEmptySourceTypeLabel), placeholderText: intl.formatMessage(messages.costModelsWizardEmptySourceTypeLabel), value: getValueLabel(type, sourceTypeOptions), onChange: onTypeChange, options: sourceTypeOptions }),\n                    React.createElement(Selector, { label: messages.currency, direction: SelectDirection.up, appendMenuTo: \"inline\", maxHeight: styles.selector.maxHeight, toggleAriaLabel: intl.formatMessage(messages.costModelsWizardCurrencyToggleLabel), value: getValueLabel(currencyUnits, currencyOptions), onChange: onCurrencyChange, id: \"currency-units-selector\", options: currencyOptions.map(o => {\n                            return {\n                                label: intl.formatMessage(o.label, { units: o.value }),\n                                value: o.value,\n                            };\n                        }) })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(GeneralInformation));\n","import { Flex, FlexItem, FormGroup, InputGroup, InputGroupText, List, ListItem, Radio, Stack, StackItem, Text, TextContent, TextInput, TextVariants, Title, TitleSizes, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Form } from 'routes/settings/components/forms/form';\nimport { styles as costCalcStyles } from 'routes/settings/costModel/costCalc.styles';\nimport { createMapStateToProps } from 'store/common';\nimport { countDecimals, isPercentageFormatValid } from 'utils/format';\nimport { CostModelContext } from './context';\nimport { styles } from './wizard.styles';\nclass MarkupWithDistributionBase extends React.Component {\n    render() {\n        const { intl } = this.props;\n        const handleOnKeyDown = event => {\n            // Prevent 'enter', '+', and '-'\n            if (event.keyCode === 13 || event.keyCode === 187 || event.keyCode === 189) {\n                event.preventDefault();\n            }\n        };\n        const markupValidator = value => {\n            if (!isPercentageFormatValid(value)) {\n                return messages.markupOrDiscountNumber;\n            }\n            // Test number of decimals\n            const decimals = countDecimals(value);\n            if (decimals > 10) {\n                return messages.markupOrDiscountTooLong;\n            }\n            return undefined;\n        };\n        return (React.createElement(CostModelContext.Consumer, null, ({ handleSignChange, handleMarkupDiscountChange, markup, isDiscount }) => {\n            const helpText = markupValidator(markup);\n            const validated = helpText ? 'error' : 'default';\n            return (React.createElement(Stack, { hasGutter: true },\n                React.createElement(StackItem, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl, style: styles.titleWithLearnMore }, intl.formatMessage(messages.costCalculationsOptional)),\n                    React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelsMarkup), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))),\n                React.createElement(StackItem, null,\n                    React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.markupOrDiscount)),\n                    React.createElement(TextContent, null,\n                        React.createElement(Text, null, intl.formatMessage(messages.markupOrDiscountModalDesc)))),\n                React.createElement(StackItem, null,\n                    React.createElement(Flex, { style: costCalcStyles.markupRadioContainer },\n                        React.createElement(Flex, { direction: { default: 'column' }, alignSelf: { default: 'alignSelfCenter' } },\n                            React.createElement(FlexItem, null,\n                                React.createElement(Radio, { isChecked: !isDiscount, name: \"discount\", label: intl.formatMessage(messages.markupPlus), \"aria-label\": intl.formatMessage(messages.markupPlus), id: \"markup\", value: \"false\" // \"+\"\n                                    , onChange: handleSignChange, style: costCalcStyles.markupRadio }),\n                                React.createElement(Radio, { isChecked: isDiscount, name: \"discount\", label: intl.formatMessage(messages.discountMinus), \"aria-label\": intl.formatMessage(messages.discountMinus), id: \"discount\", value: \"true\" // '-'\n                                    , onChange: handleSignChange }))),\n                        React.createElement(Flex, { direction: { default: 'column' }, alignSelf: { default: 'alignSelfCenter' } },\n                            React.createElement(FlexItem, null,\n                                React.createElement(Form, null,\n                                    React.createElement(FormGroup, { fieldId: \"markup-input-box\", helperTextInvalid: helpText ? intl.formatMessage(helpText) : undefined, style: costCalcStyles.rateContainer, validated: validated },\n                                        React.createElement(InputGroup, null,\n                                            React.createElement(InputGroupText, { style: costCalcStyles.sign }, isDiscount\n                                                ? intl.formatMessage(messages.discountMinus)\n                                                : intl.formatMessage(messages.markupPlus)),\n                                            React.createElement(TextInput, { \"aria-label\": intl.formatMessage(messages.rate), id: \"markup-input-box\", isRequired: true, onKeyDown: handleOnKeyDown, onChange: handleMarkupDiscountChange, placeholder: '0', style: costCalcStyles.inputField, type: \"text\", validated: validated, value: markup }),\n                                            React.createElement(InputGroupText, { style: costCalcStyles.percent }, intl.formatMessage(messages.percentSymbol))))))))),\n                React.createElement(StackItem, null,\n                    React.createElement(\"div\", { style: costCalcStyles.exampleMargin },\n                        React.createElement(TextContent, null,\n                            React.createElement(Text, { component: TextVariants.h3 }, intl.formatMessage(messages.examplesTitle))),\n                        React.createElement(List, null,\n                            React.createElement(ListItem, null, intl.formatMessage(messages.costModelsExamplesNoAdjust)),\n                            React.createElement(ListItem, null, intl.formatMessage(messages.costModelsExamplesDoubleMarkup)),\n                            React.createElement(ListItem, null, intl.formatMessage(messages.costModelsExamplesReduceZero)),\n                            React.createElement(ListItem, null, intl.formatMessage(messages.costModelsExamplesReduceSeventyfive)))))));\n        }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst MarkupWithDistribution = injectIntl(connect(mapStateToProps, {})(MarkupWithDistributionBase));\nexport default MarkupWithDistribution;\n","import { ActionGroup, Button, ButtonVariant, Form, Stack, StackItem, Text, TextContent, TextVariants, Title, TitleSizes, } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { canSubmit as isReadyForSubmit, RateForm, useRateData } from 'routes/settings/components/rateForm';\nimport { CostModelContext } from 'routes/settings/costModelWizard/context';\nconst AddPriceList = ({ cancel, currencyUnits, intl = defaultIntl, // Default required for testing\nmetricsHash, submitRate, }) => {\n    const { tiers } = React.useContext(CostModelContext);\n    const rateFormData = useRateData(metricsHash, undefined, tiers);\n    const canSubmit = React.useMemo(() => isReadyForSubmit(rateFormData), [rateFormData.errors, rateFormData.rateKind]);\n    return (React.createElement(Stack, { hasGutter: true },\n        React.createElement(StackItem, null,\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.costModelsWizardCreatePriceList))),\n        React.createElement(StackItem, null,\n            React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.h3 }, intl.formatMessage(messages.costModelsWizardPriceListMetric)))),\n        React.createElement(StackItem, null,\n            React.createElement(Form, null,\n                React.createElement(RateForm, { currencyUnits: currencyUnits, metricsHash: metricsHash, rateFormData: rateFormData }))),\n        React.createElement(StackItem, null,\n            React.createElement(ActionGroup, null,\n                React.createElement(Button, { variant: ButtonVariant.primary, isDisabled: !canSubmit, onClick: () => submitRate(rateFormData) }, intl.formatMessage(messages.createRate)),\n                React.createElement(Button, { variant: ButtonVariant.link, onClick: cancel }, intl.formatMessage(messages.cancel))))));\n};\nexport default injectIntl(AddPriceList);\n","import { Pagination, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nexport const PaginationToolbarTemplateBase = ({ id, intl, itemCount, perPage, page, variant, onPerPageSelect, onSetPage, }) => {\n    return (React.createElement(Toolbar, { id: id },\n        React.createElement(ToolbarContent, null,\n            React.createElement(ToolbarItem, { variant: \"pagination\" },\n                React.createElement(Pagination, { variant: variant, itemCount: itemCount, perPage: perPage, page: page, onSetPage: onSetPage, onPerPageSelect: onPerPageSelect, titles: {\n                        paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                            title: intl.formatMessage(messages.createCostModelTitle),\n                            placement: 'bottom',\n                        }),\n                    } })))));\n};\nexport const PaginationToolbarTemplate = injectIntl(PaginationToolbarTemplateBase);\n","import { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, Pagination, Stack, StackItem, Text, TextContent, Title, TitleSizes, } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { SortByDirection } from '@patternfly/react-table';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { WithPriceListSearch } from 'routes/settings/components/hoc/withPriceListSearch';\nimport { PaginationToolbarTemplate } from 'routes/settings/components/paginationToolbarTemplate';\nimport { PriceListToolbar } from 'routes/settings/components/priceListToolbar';\nimport { compareBy } from 'routes/settings/components/rateForm/utils';\nimport { RateTable } from 'routes/settings/components/rateTable';\nimport { CheckboxSelector } from 'routes/settings/components/toolbar/checkboxSelector';\nimport { PrimarySelector } from 'routes/settings/components/toolbar/primarySelector';\nimport { createMapStateToProps } from 'store/common';\nimport { metricsSelectors } from 'store/metrics';\nimport { unitsLookupKey } from 'utils/format';\nimport { CostModelContext } from './context';\nclass PriceListTable extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            metrics: [],\n            measurements: [],\n            sortBy: {\n                index: 0,\n                direction: SortByDirection.asc,\n            },\n        };\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { addRateAction, deleteRateAction, intl, items, metricsHash } = this.props;\n        const getMetricLabel = m => {\n            // Match message descriptor or default to API string\n            const value = m.replace(/ /g, '_').toLowerCase();\n            const label = intl.formatMessage(messages.metricValues, { value });\n            return label ? label : m;\n        };\n        const getMeasurementLabel = m => {\n            // Match message descriptor or default to API string\n            const label = intl.formatMessage(messages.measurementValues, {\n                value: m.toLowerCase().replace('-', '_'),\n                count: 1,\n            });\n            return label ? label : m;\n        };\n        const metricOpts = Object.keys(metricsHash).map(m => ({\n            label: getMetricLabel(m),\n            value: m,\n        }));\n        const measurementOpts = metricOpts.reduce((acc, curr) => {\n            const measurs = Object.keys(metricsHash[curr.value])\n                .filter(m => !acc.map(i => i.value).includes(m))\n                .map(m => ({ label: getMeasurementLabel(m), value: m }));\n            return [...acc, ...measurs];\n        }, []);\n        const NoTiersEmptyState = () => (React.createElement(Bullseye, null,\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.costModelsWizardEmptyStateTitle)),\n                React.createElement(EmptyStateBody, null,\n                    intl.formatMessage(messages.costModelsWizardEmptyStateSkipStep, {\n                        value: React.createElement(\"strong\", null, intl.formatMessage(messages.next)),\n                    }),\n                    React.createElement(\"br\", null),\n                    intl.formatMessage(messages.costModelsWizardEmptyStateOtherTime)))));\n        return (React.createElement(CostModelContext.Consumer, null, ({ priceListPagination }) => {\n            return (React.createElement(Stack, { hasGutter: true },\n                React.createElement(StackItem, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.costModelsWizardCreatePriceList))),\n                React.createElement(StackItem, null,\n                    React.createElement(TextContent, null,\n                        React.createElement(Text, null, intl.formatMessage(messages.costModelsWizardSubTitleTable)))),\n                React.createElement(StackItem, null,\n                    React.createElement(WithPriceListSearch, { initialFilters: {\n                            primary: 'metrics',\n                            metrics: [],\n                            measurements: [],\n                        } }, ({ search, setSearch, onRemove, onSelect, onClearAll }) => {\n                        const getMetric = value => intl.formatMessage(messages.metricValues, { value }) || value;\n                        const getMeasurement = (measurement, units) => {\n                            units = intl.formatMessage(messages.units, { units: unitsLookupKey(units) }) || units;\n                            return intl.formatMessage(messages.measurementValues, {\n                                value: measurement.toLowerCase().replace('-', '_'),\n                                units,\n                                count: 2,\n                            });\n                        };\n                        const from = (priceListPagination.page - 1) * priceListPagination.perPage;\n                        const to = priceListPagination.page * priceListPagination.perPage;\n                        const filtered = items\n                            .map((item, index) => {\n                            return Object.assign(Object.assign({}, item), { stateIndex: index });\n                        })\n                            .filter(rate => search.metrics.length === 0 || search.metrics.includes(rate.metric.label_metric))\n                            .filter(rate => search.measurements.length === 0 ||\n                            search.measurements.includes(rate.metric.label_measurement))\n                            .sort((r1, r2) => {\n                            const projection = this.state.sortBy.index === 1\n                                ? (r) => getMetric(r.metric.label_metric)\n                                : this.state.sortBy.index === 2\n                                    ? (r) => getMeasurement(r.metric.label_measurement, r.metric.label_measurement_unit)\n                                    : () => '';\n                            return compareBy(r1, r2, this.state.sortBy.direction, projection);\n                        });\n                        const res = filtered.slice(from, to);\n                        return (React.createElement(React.Fragment, null,\n                            React.createElement(PriceListToolbar, { primary: React.createElement(PrimarySelector, { isDisabled: items.length === 0, primary: search.primary, setPrimary: (primary) => setSearch({ primary }), options: [\n                                        {\n                                            label: intl.formatMessage(messages.metric),\n                                            value: 'metrics',\n                                        },\n                                        {\n                                            label: intl.formatMessage(messages.measurement),\n                                            value: 'measurements',\n                                        },\n                                    ] }), selected: search.primary, secondaries: [\n                                    {\n                                        component: (React.createElement(CheckboxSelector, { isDisabled: items.length === 0, placeholderText: intl.formatMessage(messages.toolBarPriceListMeasurementPlaceHolder), selections: search.measurements, setSelections: (selection) => onSelect('measurements', selection), options: measurementOpts })),\n                                        name: 'measurements',\n                                        onRemove,\n                                        filters: search.measurements,\n                                    },\n                                    {\n                                        component: (React.createElement(CheckboxSelector, { isDisabled: items.length === 0, placeholderText: intl.formatMessage(messages.toolBarPriceListMetricPlaceHolder), selections: search.metrics, setSelections: (selection) => onSelect('metrics', selection), options: metricOpts })),\n                                        name: 'metrics',\n                                        onRemove,\n                                        filters: search.metrics,\n                                    },\n                                ], button: React.createElement(Button, { onClick: addRateAction }, intl.formatMessage(messages.createRate)), onClear: onClearAll, pagination: React.createElement(Pagination, { isCompact: true, itemCount: filtered.length, perPage: priceListPagination.perPage, page: priceListPagination.page, onSetPage: priceListPagination.onPageSet, onPerPageSelect: priceListPagination.onPerPageSet, titles: {\n                                        paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                                            title: intl.formatMessage(messages.costModelsAssignSourcesParen),\n                                            placement: 'top',\n                                        }),\n                                    } }) }),\n                            res.length === 0 &&\n                                (this.state.metrics.length !== 0 || this.state.measurements.length !== 0) && (React.createElement(Bullseye, null,\n                                React.createElement(EmptyFilterState, null))),\n                            res.length === 0 &&\n                                this.state.metrics.length === 0 &&\n                                this.state.measurements.length === 0 && React.createElement(NoTiersEmptyState, null),\n                            res.length > 0 && (React.createElement(RateTable, { actions: [\n                                    {\n                                        title: intl.formatMessage(messages.remove),\n                                        onClick: (_evt, _rowId, rowData) => {\n                                            deleteRateAction(rowData.data.stateIndex);\n                                        },\n                                    },\n                                ], tiers: res, sortCallback: e => {\n                                    this.setState(Object.assign(Object.assign({}, this.state), { sortBy: Object.assign({}, e) }));\n                                } })),\n                            React.createElement(PaginationToolbarTemplate, { isCompact: true, itemCount: filtered.length, perPage: priceListPagination.perPage, page: priceListPagination.page, onSetPage: priceListPagination.onPageSet, onPerPageSelect: priceListPagination.onPerPageSet, titles: {\n                                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                                        title: intl.formatMessage(messages.costModelsAssignSourcesParen),\n                                        placement: 'bottom',\n                                    }),\n                                } })));\n                    }))));\n        }));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    metricsHash: metricsSelectors.metrics(state),\n})))(injectIntl(PriceListTable));\n","import React from 'react';\nimport AddPriceList from 'routes/settings/components/addPriceList';\nimport { transformFormDataToRequest } from 'routes/settings/components/rateForm/index';\nimport { CostModelContext } from './context';\nimport PriceListTable from './priceListTable';\nconst PriceList = () => {\n    const { currencyUnits, goToAddPL, metricsHash, tiers, submitTiers } = React.useContext(CostModelContext);\n    const [state, setState] = React.useState('table');\n    const submit = (rate) => {\n        submitTiers([...tiers, rate]);\n        setState('table');\n        goToAddPL(true);\n    };\n    if (state === 'table') {\n        return (React.createElement(PriceListTable, { items: tiers, deleteRateAction: (index) => {\n                const items = [...tiers.slice(0, index), ...tiers.slice(index + 1)];\n                submitTiers(items);\n                if (items.length === 0) {\n                    goToAddPL(true);\n                }\n            }, addRateAction: () => {\n                setState('form');\n                goToAddPL(false);\n            } }));\n    }\n    if (state === 'form') {\n        return (React.createElement(AddPriceList, { currencyUnits: currencyUnits, metricsHash: metricsHash, submitRate: (rateFormData) => {\n                const rate = transformFormDataToRequest(rateFormData, metricsHash, currencyUnits);\n                submit(rate);\n            }, cancel: () => {\n                setState('table');\n                goToAddPL(true);\n            } }));\n    }\n    return null;\n};\nexport default PriceList;\n","import { Alert, Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateSecondaryActions, Stack, StackItem, Text, TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OkIcon } from '@patternfly/react-icons/dist/esm/icons/ok-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { RateTable } from 'routes/settings/components/rateTable';\nimport { WarningIcon } from 'routes/settings/components/warningIcon';\nimport { createMapStateToProps } from 'store/common';\nimport { CostModelContext } from './context';\nconst ReviewSuccessBase = ({ intl }) => (React.createElement(CostModelContext.Consumer, null, ({ onClose, name }) => (React.createElement(EmptyState, null,\n    React.createElement(EmptyStateIcon, { icon: OkIcon, color: \"green\" }),\n    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.costModelsWizardReviewStatusTitle)),\n    React.createElement(EmptyStateBody, null, intl.formatMessage(messages.costModelsWizardReviewStatusSubTitle, { value: name })),\n    React.createElement(EmptyStateSecondaryActions, null,\n        React.createElement(Button, { variant: \"link\", onClick: onClose }, intl.formatMessage(messages.close)))))));\nconst ReviewSuccess = injectIntl(ReviewSuccessBase);\nconst ReviewDetailsBase = ({ intl }) => (React.createElement(CostModelContext.Consumer, null, ({ checked, createError, currencyUnits, description, distribution, distributePlatformUnallocated, distributeWorkerUnallocated, isDiscount, markup, name, tiers, type, }) => {\n    const selectedSources = Object.keys(checked)\n        .filter(key => checked[key].selected)\n        .map(key => checked[key].meta);\n    return (React.createElement(React.Fragment, null,\n        createError && React.createElement(Alert, { variant: \"danger\", title: `${createError}` }),\n        React.createElement(Stack, { hasGutter: true },\n            React.createElement(StackItem, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.costModelsWizardStepsReview))),\n            React.createElement(StackItem, null,\n                React.createElement(TextContent, null,\n                    React.createElement(Text, null, intl.formatMessage(messages.costModelsWizardReviewStatusSubDetails, {\n                        create: React.createElement(\"strong\", null, intl.formatMessage(messages.create)),\n                        back: React.createElement(\"strong\", null, intl.formatMessage(messages.back)),\n                    })))),\n            React.createElement(StackItem, null,\n                React.createElement(TextContent, null,\n                    React.createElement(TextList, { component: TextListVariants.dl },\n                        React.createElement(TextListItem, { component: TextListItemVariants.dt }, intl.formatMessage(messages.names, { count: 1 })),\n                        React.createElement(TextListItem, { component: TextListItemVariants.dd }, name),\n                        React.createElement(TextListItem, { component: TextListItemVariants.dt }, intl.formatMessage(messages.description)),\n                        React.createElement(TextListItem, { component: TextListItemVariants.dd }, description),\n                        React.createElement(TextListItem, { component: TextListItemVariants.dt }, intl.formatMessage(messages.currency)),\n                        React.createElement(TextListItem, { component: TextListItemVariants.dd }, intl.formatMessage(messages.currencyOptions, { units: currencyUnits })),\n                        type === 'OCP' && (React.createElement(React.Fragment, null,\n                            React.createElement(TextListItem, { component: TextListItemVariants.dt }, intl.formatMessage(messages.priceList)),\n                            React.createElement(TextListItem, { component: TextListItemVariants.dd }, tiers.length > 0 ? (React.createElement(RateTable, { tiers: tiers })) : (intl.formatMessage(messages.costModelsWizardNoRatesAdded))))),\n                        React.createElement(TextListItem, { component: TextListItemVariants.dt }, intl.formatMessage(messages.costModelsWizardReviewMarkDiscount)),\n                        React.createElement(TextListItem, { component: TextListItemVariants.dd }, intl.formatMessage(messages.percent, { value: isDiscount ? '-' + markup : markup })),\n                        type === 'OCP' && (React.createElement(React.Fragment, null,\n                            React.createElement(TextListItem, { component: TextListItemVariants.dt }, intl.formatMessage(messages.costDistribution)),\n                            React.createElement(TextListItem, { component: TextListItemVariants.dd }, intl.formatMessage(messages.distributionTypeDesc, { type: distribution })),\n                            React.createElement(TextListItem, { component: TextListItemVariants.dd }, intl.formatMessage(messages.distributeCosts, {\n                                value: distributePlatformUnallocated,\n                                type: 'platform',\n                            })),\n                            React.createElement(TextListItem, { component: TextListItemVariants.dd }, intl.formatMessage(messages.distributeCosts, {\n                                value: distributeWorkerUnallocated,\n                                type: 'worker',\n                            })))),\n                        React.createElement(TextListItem, { component: TextListItemVariants.dt },\n                            intl.formatMessage(messages.costModelsAssignSources, { count: 2 }),\n                            ' ',\n                            selectedSources.find(src => Boolean(src.costmodel)) && (React.createElement(WarningIcon, { text: intl.formatMessage(messages.costModelsWizardWarningSources) }))),\n                        React.createElement(TextListItem, { component: TextListItemVariants.dd }, selectedSources.map(r => r.name).join(', '))))))));\n}));\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst ReviewDetails = injectIntl(connect(mapStateToProps, {})(ReviewDetailsBase));\nconst ReviewWithDistribution = () => {\n    return (React.createElement(CostModelContext.Consumer, null, ({ createSuccess }) => {\n        if (!createSuccess) {\n            return React.createElement(ReviewDetails, null);\n        }\n        return React.createElement(ReviewSuccess, null);\n    }));\n};\nexport default ReviewWithDistribution;\n","import { InputGroup, InputGroupText, Pagination, TextInput, Toolbar, ToolbarContent, ToolbarFilter, ToolbarItem, ToolbarToggleGroup, } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst FilterInput = ({ id, placeholder = '', value, onChange, onSearch }) => {\n    return (React.createElement(InputGroup, null,\n        React.createElement(TextInput, { value: value, placeholder: placeholder, id: id, onChange: onChange, onKeyPress: (evt) => {\n                if (evt.key !== 'Enter' || value === '') {\n                    return;\n                }\n                onSearch(evt);\n            } }),\n        React.createElement(InputGroupText, { style: { borderLeft: '0' } },\n            React.createElement(SearchIcon, null))));\n};\nexport const AssignSourcesToolbarBase = ({ intl, filterInputProps, paginationProps, filter, }) => {\n    return (React.createElement(Toolbar, { id: \"assign-sources-toolbar\", clearAllFilters: filter.onClearAll },\n        React.createElement(ToolbarContent, null,\n            React.createElement(ToolbarToggleGroup, { breakpoint: \"xl\", toggleIcon: React.createElement(FilterIcon, null) },\n                React.createElement(ToolbarItem, { variant: \"search-filter\" },\n                    React.createElement(ToolbarFilter, { deleteChip: filter.onRemove, chips: filter.query.name, categoryName: \"name\" },\n                        React.createElement(FilterInput, Object.assign({ placeholder: intl.formatMessage(messages.costModelsFilterPlaceholder) }, filterInputProps))))),\n            React.createElement(ToolbarItem, { variant: \"pagination\" },\n                React.createElement(Pagination, { isCompact: paginationProps.isCompact, itemCount: paginationProps.itemCount, page: paginationProps.page, perPage: paginationProps.perPage, onSetPage: paginationProps.onSetPage, onPerPageSelect: paginationProps.onPerPageSelect, titles: {\n                        paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                            title: intl.formatMessage(messages.costModelsAssignSourcesParen),\n                            placement: 'bottom',\n                        }),\n                    } })))));\n};\nexport const AssignSourcesToolbar = injectIntl(AssignSourcesToolbarBase);\n","import { Checkbox, Stack, StackItem, Text, TextContent, TextVariants, Title, TitleSizes } from '@patternfly/react-core';\nimport { TableComposable, TableVariant, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { LoadingState } from 'routes/components/state/loadingState';\nimport { addMultiValueQuery, removeMultiValueQuery } from 'routes/settings/components/filterLogic';\nimport { PaginationToolbarTemplate } from 'routes/settings/components/paginationToolbarTemplate';\nimport { WarningIcon } from 'routes/settings/components/warningIcon';\nimport { AssignSourcesToolbar } from './assignSourcesToolbar';\nimport { CostModelContext } from './context';\nconst SourcesTable = ({ intl }) => {\n    return (React.createElement(CostModelContext.Consumer, null, ({ checked, loading, onSourceSelect, sources, perPage, page, type, query, fetchSources, filterName, onFilterChange, }) => {\n        const sourceType = type === 'Azure' ? 'Azure' : type;\n        const itemCount = sources.length > 0 ? sources[0].meta.count : 0;\n        return (React.createElement(Stack, { hasGutter: true },\n            React.createElement(StackItem, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.costModelsWizardSourceTitle))),\n            React.createElement(StackItem, null,\n                React.createElement(TextContent, null,\n                    React.createElement(Text, null, intl.formatMessage(messages.costModelsWizardSourceSubtitle)))),\n            React.createElement(StackItem, null,\n                React.createElement(TextContent, null,\n                    React.createElement(Text, { component: TextVariants.h3 }, intl.formatMessage(messages.costModelsWizardSourceCaption, {\n                        value: type.toLowerCase(),\n                    })))),\n            React.createElement(StackItem, null,\n                React.createElement(AssignSourcesToolbar, { filter: {\n                        onRemove: (category, chip) => fetchSources(sourceType, removeMultiValueQuery(query)(category, chip), 1, perPage),\n                        onClearAll: () => fetchSources(sourceType, {}, 1, perPage),\n                        query,\n                    }, filterInputProps: {\n                        id: 'assign-source-search-input',\n                        value: filterName,\n                        onChange: onFilterChange,\n                        onSearch: () => {\n                            fetchSources(sourceType, addMultiValueQuery(query)('name', filterName), 1, perPage);\n                        },\n                    }, paginationProps: {\n                        isCompact: true,\n                        itemCount,\n                        perPage,\n                        page,\n                        onSetPage: (_evt, newPage) => {\n                            fetchSources(sourceType, query, newPage, perPage);\n                        },\n                        onPerPageSelect: (_evt, newPerPage) => fetchSources(sourceType, query, 1, newPerPage),\n                    } }),\n                loading ? (React.createElement(LoadingState, null)) : (React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.costModelsWizardSourceTableAriaLabel), variant: TableVariant.compact },\n                    React.createElement(Thead, null,\n                        React.createElement(Tr, null, [\n                            '',\n                            intl.formatMessage(messages.names, { count: 1 }),\n                            intl.formatMessage(messages.costModelsWizardSourceTableCostModel),\n                        ].map((c, i) => (React.createElement(Th, { key: i }, c))))),\n                    React.createElement(Tbody, null, sources.map((row, rowIndex) => (React.createElement(Tr, { key: rowIndex },\n                        React.createElement(Td, null,\n                            React.createElement(Checkbox, { onChange: isChecked => {\n                                    onSourceSelect(rowIndex, isChecked);\n                                }, id: row.name, key: row.name, \"aria-label\": intl.formatMessage(messages.selectRow, { value: rowIndex }), isChecked: checked[row.uuid] && checked[row.uuid].selected, isDisabled: Boolean(row.costmodel) })),\n                        React.createElement(Td, null,\n                            row.name,\n                            ' ',\n                            row.costmodel && (React.createElement(WarningIcon, { key: `wrng-${row.name}`, text: intl.formatMessage(messages.costModelsWizardSourceWarning, {\n                                    costModel: row.costmodel,\n                                }) }))),\n                        React.createElement(Td, null, row.costmodel ? row.costmodel : ''))))))),\n                React.createElement(PaginationToolbarTemplate, { itemCount: itemCount, perPage: perPage, page: page, titles: {\n                        paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                            title: intl.formatMessage(messages.sources),\n                            placement: 'bottom',\n                        }),\n                    }, onSetPage: (_evt, newPage) => {\n                        fetchSources(sourceType, query, newPage, perPage);\n                    }, onPerPageSelect: (_evt, newPerPage) => fetchSources(sourceType, query, 1, newPerPage) }))));\n    }));\n};\nexport default injectIntl(SourcesTable);\n","import React from 'react';\nimport { LoadingState } from 'routes/components/state/loadingState';\nimport { SourceStepErrorState } from 'routes/settings/components/errorState';\nimport { CostModelContext } from './context';\nimport SourcesTable from './table';\nclass Sources extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fetchData = () => null;\n        this.fetchData = () => {\n            const { type, query, page, perPage, fetchSources } = this.context;\n            const sourceType = type === 'Azure' ? 'Azure' : type;\n            fetchSources(sourceType, query, page, perPage);\n        };\n    }\n    componentDidMount() {\n        const { dataFetched } = this.context;\n        if (dataFetched) {\n            return;\n        }\n        this.fetchData();\n    }\n    renderContent() {\n        if (this.context.loading) {\n            return React.createElement(LoadingState, null);\n        }\n        if (this.context.apiError) {\n            return React.createElement(SourceStepErrorState, { onRefresh: this.fetchData });\n        }\n        return React.createElement(SourcesTable, null);\n    }\n    render() {\n        return this.renderContent();\n    }\n}\nSources.contextType = CostModelContext;\nexport default Sources;\n","import { Title, TitleSizes, Wizard } from '@patternfly/react-core';\nimport { Button, Modal } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport { addCostModel } from 'api/costModels';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { metricsSelectors } from 'store/metrics';\nimport { unFormat } from 'utils/format';\nimport { getAccountCurrency } from 'utils/localStorage';\nimport { fetchSources as apiSources } from './api';\nimport { CostModelContext } from './context';\nimport Distribution from './distribution';\nimport GeneralInformation from './generalInformation';\nimport Markup from './markup';\nimport { parseApiError } from './parseError';\nimport PriceList from './priceList';\nimport Review from './review';\nimport Sources from './sources';\nimport { validatorsHash } from './steps';\n// Update tiers currency\nconst updateTiersCurrency = (tiers, currencyUnits = 'USD') => {\n    const rates = cloneDeep(tiers);\n    rates.map(val => {\n        if (val.tiered_rates) {\n            for (const rate of val.tiered_rates) {\n                rate.unit = currencyUnits;\n                rate.usage.unit = currencyUnits;\n            }\n        }\n        if (val.tag_rates) {\n            for (const rate of val.tag_rates.tag_values) {\n                rate.unit = currencyUnits;\n            }\n        }\n    });\n    return rates;\n};\nconst InternalWizardBase = ({ intl, isProcess, isSuccess, closeFnc, isOpen, onMove, validators, steps, current = 1, context, setError, setSuccess, updateCostModel, }) => {\n    const newSteps = steps.map((step, ix) => {\n        return Object.assign(Object.assign({}, step), { canJumpTo: current > ix });\n    });\n    newSteps[current - 1].enableNext = validators[current - 1](context);\n    const isAddingRate = context.type === 'OCP' && current === 2 && !validators[current - 1](context);\n    if (current === steps.length && context.type !== '') {\n        newSteps[current - 1].nextButtonText = intl.formatMessage(messages.create);\n    }\n    return isOpen ? (React.createElement(Wizard, { isOpen: true, title: intl.formatMessage(messages.createCostModelTitle), description: intl.formatMessage(messages.createCostModelDesc), steps: newSteps, startAtStep: current, onNext: onMove, onBack: onMove, onGoToStep: onMove, onClose: closeFnc, footer: isSuccess || isProcess || isAddingRate ? React.createElement(\"div\", null) : null, onSave: () => {\n            const { currency, description, distribution, distributePlatformUnallocated, distributeWorkerUnallocated, isDiscount, markup, name, type, tiers, sources, } = context;\n            addCostModel({\n                name,\n                source_type: type,\n                currency,\n                description,\n                distribution_info: {\n                    distribution_type: distribution,\n                    platform_cost: distributePlatformUnallocated,\n                    worker_cost: distributeWorkerUnallocated,\n                },\n                rates: tiers,\n                markup: {\n                    value: `${isDiscount ? '-' : ''}${unFormat(markup)}`,\n                    unit: 'percent',\n                },\n                source_uuids: sources.map(src => src.uuid),\n            })\n                .then(() => {\n                setSuccess();\n                updateCostModel();\n            })\n                .catch(err => setError(parseApiError(err)));\n        } })) : null;\n};\nconst InternalWizard = injectIntl(InternalWizardBase);\nclass CostModelWizardBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            apiError: null,\n            checked: {},\n            createError: null,\n            createProcess: false,\n            createSuccess: false,\n            currencyUnits: getAccountCurrency(),\n            dataFetched: false,\n            dirtyName: false,\n            description: '',\n            distribution: 'cpu',\n            distributePlatformUnallocated: true,\n            distributeWorkerUnallocated: true,\n            error: null,\n            filterName: '',\n            isDialogOpen: false,\n            isDiscount: false,\n            loading: false,\n            markup: '0',\n            name: '',\n            page: 1,\n            perPage: 10,\n            priceListCurrent: {\n                metric: '',\n                measurement: '',\n                rate: '',\n                justSaved: true,\n            },\n            priceListPagination: {\n                page: 1,\n                perPage: 10,\n            },\n            query: {},\n            sources: [],\n            step: 1,\n            tiers: [],\n            total: 0,\n            type: '',\n        };\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { metricsHash, intl } = this.props;\n        /*\n         */\n        const closeConfirmDialog = () => {\n            this.setState({ isDialogOpen: false }, this.props.openWizard);\n        };\n        const stepsHash = () => ({\n            '': [\n                {\n                    id: 1,\n                    name: intl.formatMessage(messages.costModelsWizardStepsGenInfo),\n                    component: React.createElement(GeneralInformation, null),\n                },\n            ],\n            Azure: [\n                {\n                    id: 1,\n                    name: intl.formatMessage(messages.costModelsWizardStepsGenInfo),\n                    component: React.createElement(GeneralInformation, null),\n                },\n                {\n                    id: 2,\n                    name: intl.formatMessage(messages.costCalculations),\n                    component: React.createElement(Markup, null),\n                },\n                {\n                    id: 3,\n                    name: intl.formatMessage(messages.costModelsWizardStepsSources),\n                    component: React.createElement(Sources, null),\n                },\n                {\n                    id: 4,\n                    name: intl.formatMessage(messages.costModelsWizardStepsReview),\n                    component: React.createElement(Review, null),\n                },\n            ],\n            AWS: [\n                {\n                    id: 1,\n                    name: intl.formatMessage(messages.costModelsWizardStepsGenInfo),\n                    component: React.createElement(GeneralInformation, null),\n                },\n                {\n                    id: 2,\n                    name: intl.formatMessage(messages.costCalculations),\n                    component: React.createElement(Markup, null),\n                },\n                {\n                    id: 3,\n                    name: intl.formatMessage(messages.costModelsWizardStepsSources),\n                    component: React.createElement(Sources, null),\n                },\n                {\n                    id: 4,\n                    name: intl.formatMessage(messages.costModelsWizardStepsReview),\n                    component: React.createElement(Review, null),\n                },\n            ],\n            GCP: [\n                {\n                    id: 1,\n                    name: intl.formatMessage(messages.costModelsWizardStepsGenInfo),\n                    component: React.createElement(GeneralInformation, null),\n                },\n                {\n                    id: 2,\n                    name: intl.formatMessage(messages.costCalculations),\n                    component: React.createElement(Markup, null),\n                },\n                {\n                    id: 3,\n                    name: intl.formatMessage(messages.costModelsWizardStepsSources),\n                    component: React.createElement(Sources, null),\n                },\n                {\n                    id: 4,\n                    name: intl.formatMessage(messages.costModelsWizardStepsReview),\n                    component: React.createElement(Review, null),\n                },\n            ],\n            OCP: [\n                {\n                    id: 1,\n                    name: intl.formatMessage(messages.costModelsWizardStepsGenInfo),\n                    component: React.createElement(GeneralInformation, null),\n                },\n                {\n                    id: 2,\n                    name: intl.formatMessage(messages.priceList),\n                    component: React.createElement(PriceList, null),\n                },\n                {\n                    id: 3,\n                    name: intl.formatMessage(messages.costCalculations),\n                    component: React.createElement(Markup, null),\n                },\n                {\n                    id: 4,\n                    name: intl.formatMessage(messages.costDistribution),\n                    component: React.createElement(Distribution, null),\n                },\n                {\n                    id: 5,\n                    name: intl.formatMessage(messages.costModelsWizardStepsSources),\n                    component: React.createElement(Sources, null),\n                },\n                {\n                    id: 6,\n                    name: intl.formatMessage(messages.costModelsWizardStepsReview),\n                    component: React.createElement(Review, null),\n                },\n            ],\n        });\n        const CancelButton = (React.createElement(Button, { key: \"cancel\", variant: \"link\", onClick: closeConfirmDialog }, intl.formatMessage(messages.createCostModelNoContinue)));\n        const OkButton = (React.createElement(Button, { key: \"ok\", variant: \"primary\", onClick: () => this.setState(Object.assign({}, this.defaultState)) }, intl.formatMessage(messages.createCostModelExitYes)));\n        return (React.createElement(CostModelContext.Provider, { value: {\n                apiError: this.state.apiError,\n                checked: this.state.checked,\n                clearQuery: () => this.setState({ query: {} }),\n                createError: this.state.createError,\n                createProcess: this.state.createProcess,\n                createSuccess: this.state.createSuccess,\n                currencyUnits: this.state.currencyUnits,\n                description: this.state.description,\n                dataFetched: this.state.dataFetched,\n                dirtyName: this.state.dirtyName,\n                distribution: this.state.distribution,\n                distributePlatformUnallocated: this.state.distributePlatformUnallocated,\n                distributeWorkerUnallocated: this.state.distributeWorkerUnallocated,\n                error: this.state.error,\n                filterName: this.state.filterName,\n                fetchSources: (type, query, page, perPage) => {\n                    this.setState({ loading: true, apiError: null, filterName: '' }, () => apiSources({ type, query, page, perPage })\n                        .then((resp) => this.setState({\n                        sources: resp,\n                        query,\n                        page,\n                        perPage,\n                        loading: false,\n                        dataFetched: true,\n                        filterName: '',\n                    }))\n                        .catch(err => this.setState({\n                        apiError: err,\n                        loading: false,\n                        dataFetched: true,\n                        filterName: '',\n                    })));\n                },\n                goToAddPL: (value) => this.setState({\n                    priceListCurrent: Object.assign(Object.assign({}, this.state.priceListCurrent), { justSaved: value ? value : false }),\n                }),\n                handleDistributionChange: (_, event) => {\n                    const { value } = event.currentTarget;\n                    this.setState({ distribution: value });\n                },\n                handleDistributePlatformUnallocatedChange: (_, event) => {\n                    const { value } = event.currentTarget;\n                    this.setState({ distributePlatformUnallocated: value === 'true' });\n                },\n                handleDistributeWorkerUnallocatedChange: (_, event) => {\n                    const { value } = event.currentTarget;\n                    this.setState({ distributeWorkerUnallocated: value === 'true' });\n                },\n                handleMarkupDiscountChange: (_, event) => {\n                    const { value } = event.currentTarget;\n                    this.setState({ markup: value });\n                },\n                handleSignChange: (_, event) => {\n                    const { value } = event.currentTarget;\n                    this.setState({ isDiscount: value === 'true' });\n                },\n                isDiscount: this.state.isDiscount,\n                loading: this.state.loading,\n                metricsHash,\n                onClose: () => this.setState(Object.assign({}, this.defaultState), this.props.closeWizard),\n                onCurrencyChange: value => this.setState({ currencyUnits: value, tiers: updateTiersCurrency(this.state.tiers, value) }),\n                onDescChange: value => this.setState({ description: value }),\n                onFilterChange: value => this.setState({ filterName: value }),\n                onNameChange: value => this.setState({ name: value, dirtyName: true }),\n                onPageChange: (_evt, page) => this.setState({ page }),\n                onPerPageChange: (_evt, perPage) => this.setState({ page: 1, perPage }),\n                onSourceSelect: (rowId, isSelected) => {\n                    if (rowId === -1) {\n                        const pageSelections = this.state.sources.map(s => ({\n                            [s.uuid]: { selected: isSelected, meta: s },\n                        }));\n                        const newState = Object.assign(Object.assign({}, this.state.checked), pageSelections);\n                        return this.setState({ checked: newState });\n                    }\n                    const newState = Object.assign(Object.assign({}, this.state.checked), { [this.state.sources[rowId].uuid]: {\n                            selected: isSelected,\n                            meta: this.state.sources[rowId],\n                        } });\n                    return this.setState({ checked: newState });\n                },\n                onTypeChange: value => this.setState({ type: value, dataFetched: false, loading: false }),\n                page: this.state.page,\n                priceListPagination: {\n                    page: this.state.priceListPagination.page,\n                    perPage: this.state.priceListPagination.perPage,\n                    onPageSet: (_evt, page) => this.setState({\n                        priceListPagination: Object.assign(Object.assign({}, this.state.priceListPagination), { page }),\n                    }),\n                    onPerPageSet: (_evt, perPage) => this.setState({\n                        priceListPagination: {\n                            page: 1,\n                            perPage,\n                        },\n                    }),\n                },\n                markup: this.state.markup,\n                name: this.state.name,\n                perPage: this.state.perPage,\n                query: this.state.query,\n                setSources: sources => this.setState({ sources, dataFetched: true, loading: false }),\n                sources: this.state.sources,\n                step: this.state.step,\n                submitTiers: (tiers) => {\n                    this.setState({\n                        tiers,\n                    });\n                },\n                tiers: this.state.tiers,\n                total: this.state.total,\n                type: this.state.type,\n            } },\n            React.createElement(InternalWizard, { metricsHash: metricsHash, isProcess: this.state.createProcess, isSuccess: this.state.createSuccess, closeFnc: () => {\n                    if ((this.state.type === 'OCP' && this.state.step > 1 && this.state.tiers.length > 0) ||\n                        (this.state.type !== 'OCP' && this.state.step > 2)) {\n                        this.setState({ isDialogOpen: true }, this.props.closeWizard);\n                    }\n                    else {\n                        this.setState(Object.assign({}, this.defaultState), this.props.closeWizard);\n                    }\n                }, isOpen: this.props.isOpen, onMove: curr => this.setState({ step: Number(curr.id) }), steps: stepsHash()[this.state.type], current: this.state.step, validators: validatorsHash[this.state.type], setError: errorMessage => this.setState({ createError: errorMessage }), setSuccess: () => this.setState({ createError: null, createSuccess: true }), updateCostModel: () => this.props.fetch(), context: {\n                    name: this.state.name,\n                    type: this.state.type,\n                    currency: this.state.currencyUnits,\n                    description: this.state.description,\n                    distribution: this.state.distribution,\n                    distributePlatformUnallocated: this.state.distributePlatformUnallocated,\n                    distributeWorkerUnallocated: this.state.distributeWorkerUnallocated,\n                    markup: `${this.state.isDiscount ? '-' : ''}${this.state.markup}`,\n                    tiers: this.state.tiers,\n                    priceListCurrent: this.state.priceListCurrent,\n                    sources: Object.keys(this.state.checked).map(key => this.state.checked[key].meta),\n                } }),\n            React.createElement(Modal, { \"aria-label\": intl.formatMessage(messages.createCostModelExit), isOpen: this.state.isDialogOpen, header: React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                    React.createElement(ExclamationTriangleIcon, { color: \"orange\" }),\n                    \" \",\n                    intl.formatMessage(messages.createCostModelExit)), onClose: closeConfirmDialog, actions: [OkButton, CancelButton], variant: \"small\" }, intl.formatMessage(messages.createCostModelConfirmMsg))));\n    }\n}\nconst CostModelWizard = connect(createMapStateToProps(state => ({\n    metricsHash: metricsSelectors.metrics(state),\n})), { fetch: costModelsActions.fetchCostModels })(injectIntl(CostModelWizardBase));\nexport default CostModelWizard;\n","import { Button } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReadOnlyTooltip } from 'routes/settings/components/readOnlyTooltip';\nimport { CostModelWizard } from 'routes/settings/costModelWizard';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nimport { rbacSelectors } from 'store/rbac';\nconst buttonMapStateToProps = (state) => {\n    return {\n        canWrite: rbacSelectors.isCostModelWritePermission(state),\n    };\n};\nconst buttonMapDispatchToProps = (dispatch) => {\n    return {\n        openWizard: () => dispatch(costModelsActions.setCostModelDialog({ name: 'createWizard', isOpen: true })),\n        closeWizard: () => dispatch(costModelsActions.setCostModelDialog({ name: 'createWizard', isOpen: false })),\n    };\n};\nconst buttonMergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { intl = defaultIntl } = ownProps; // Default required for testing\n    const { canWrite } = stateProps;\n    const { openWizard } = dispatchProps;\n    return {\n        isDisabled: !canWrite,\n        tooltip: intl.formatMessage(messages.costModelsReadOnly),\n        children: (React.createElement(Button, { isDisabled: !canWrite, onClick: openWizard }, intl.formatMessage(messages.costModelsWizardCreateCostModel))),\n    };\n};\nexport const CreateCostModelButton = injectIntl(connect(buttonMapStateToProps, buttonMapDispatchToProps, buttonMergeProps)(ReadOnlyTooltip));\nconst wizardMapStateProps = (state) => {\n    return {\n        isOpen: costModelsSelectors.isDialogOpen(state)('costmodel').createWizard,\n    };\n};\nconst wizardMapDispatchProps = (dispatch) => {\n    return {\n        openWizard: () => {\n            dispatch(costModelsActions.setCostModelDialog({ name: 'createWizard', isOpen: true }));\n        },\n        closeWizard: () => {\n            dispatch(costModelsActions.setCostModelDialog({ name: 'createWizard', isOpen: false }));\n        },\n    };\n};\nconst wizardMergeProps = (stateProps, dispatchProps) => {\n    const { isOpen } = stateProps;\n    const { openWizard, closeWizard } = dispatchProps;\n    return { isOpen, openWizard, closeWizard };\n};\nexport const CreateCostModelWizard = connect(wizardMapStateProps, wizardMapDispatchProps, wizardMergeProps)(CostModelWizard);\n","import { Alert, AlertVariant, Button, ButtonVariant, Stack, StackItem, Text, TextContent, TextList, TextListItem, TextListVariants, } from '@patternfly/react-core';\nimport React from 'react';\nexport function DeleteDialogActions({ status, deleteText, deleteAction, cancelText, cancelAction, sourcesNo, }) {\n    let actions = [];\n    if (status === 'loading') {\n        actions = [\n            React.createElement(Button, { key: \"pending_delete\", variant: ButtonVariant.danger, isDisabled: true }, deleteText),\n            React.createElement(Button, { key: \"pending_cancel\", variant: ButtonVariant.link, isDisabled: true }, cancelText),\n        ];\n    }\n    if (['failure', 'open'].includes(status) && sourcesNo > 0) {\n        actions = [\n            React.createElement(Button, { key: \"sources_cancel\", variant: ButtonVariant.link, onClick: cancelAction }, cancelText),\n        ];\n    }\n    if (['failure', 'open'].includes(status) && sourcesNo === 0) {\n        actions = [\n            React.createElement(Button, { key: \"delete\", variant: ButtonVariant.danger, onClick: deleteAction }, deleteText),\n            React.createElement(Button, { key: \"cancel\", variant: ButtonVariant.link, onClick: cancelAction }, cancelText),\n        ];\n    }\n    return actions;\n}\nfunction CannotDeleteContent({ head, body, sources }) {\n    return (React.createElement(Stack, { hasGutter: true },\n        React.createElement(StackItem, null,\n            React.createElement(TextContent, null,\n                React.createElement(Text, null, head))),\n        React.createElement(StackItem, null,\n            React.createElement(TextContent, null,\n                React.createElement(Text, null, body),\n                React.createElement(TextList, { component: TextListVariants.ol }, sources.map(source => (React.createElement(TextListItem, { key: source }, source))))))));\n}\nexport function DeleteDialogBody({ status, sources, error, cannotDeleteTitle, cannotDeleteBody, canDeleteBody, }) {\n    if (status !== 'close' && sources.length > 0) {\n        return React.createElement(CannotDeleteContent, { head: cannotDeleteTitle, body: cannotDeleteBody, sources: sources });\n    }\n    if (status !== 'close' && sources.length === 0) {\n        return (React.createElement(Stack, { hasGutter: true },\n            status === 'failure' ? (React.createElement(StackItem, null,\n                React.createElement(Alert, { variant: AlertVariant.danger, title: error }))) : null,\n            React.createElement(StackItem, null, canDeleteBody)));\n    }\n}\nexport function getDialogStateName(isLoading, isOpen, error) {\n    if (!isOpen) {\n        return 'close';\n    }\n    if (isLoading) {\n        return 'loading';\n    }\n    if (error) {\n        return 'failure';\n    }\n    return 'open';\n}\n","import { Modal, ModalVariant } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nimport { DeleteDialogActions, DeleteDialogBody, getDialogStateName } from './utils/dialog';\nconst mapStateToProps = (state) => {\n    return {\n        isOpen: costModelsSelectors.isDialogOpen(state)('costmodel').deleteCostModel,\n        isLoading: costModelsSelectors.deleteProcessing(state),\n        deleteError: costModelsSelectors.deleteError(state),\n        dialogData: costModelsSelectors.dialogData(state),\n    };\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        closeDialog: () => dispatch(costModelsActions.setCostModelDialog({ name: 'deleteCostModel', isOpen: false })),\n        deleteCostModel: (uuid) => costModelsActions.deleteCostModel(uuid, 'deleteCostModel')(dispatch),\n    };\n};\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { intl = defaultIntl } = ownProps; // Default required for testing\n    const stateName = getDialogStateName(stateProps.isLoading, stateProps.isOpen, stateProps.deleteError);\n    const data = stateProps.dialogData && stateProps.dialogData.costModel ? stateProps.dialogData.costModel : null;\n    const name = data ? data.name : '';\n    const sources = data ? data.sources.map(source => source.name) : [];\n    const uuid = data ? data.uuid : '';\n    const actions = DeleteDialogActions({\n        status: stateName,\n        deleteText: intl.formatMessage(messages.costModelsDelete),\n        deleteAction: () => dispatchProps.deleteCostModel(uuid),\n        cancelText: intl.formatMessage(messages.cancel),\n        cancelAction: dispatchProps.closeDialog,\n        sourcesNo: sources.length,\n    });\n    const children = DeleteDialogBody({\n        status: stateName,\n        sources,\n        error: stateProps.deleteError,\n        cannotDeleteTitle: intl.formatMessage(messages.costModelsDeleteSource),\n        cannotDeleteBody: intl.formatMessage(messages.costModelsCanNotDelete, { name }),\n        canDeleteBody: intl.formatMessage(messages.costModelsCanDelete, { name }),\n    });\n    return {\n        actions,\n        isOpen: stateName !== 'close',\n        variant: ModalVariant.small,\n        'aria-label': intl.formatMessage(messages.costModelsDelete),\n        title: intl.formatMessage(messages.costModelsDelete),\n        titleIconVariant: 'warning',\n        onClose: dispatchProps.closeDialog,\n        children,\n    };\n};\nconst DeleteDialog = injectIntl(connect(mapStateToProps, mapDispatchToProps, mergeProps)(Modal));\nexport default DeleteDialog;\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, TitleSizes } from '@patternfly/react-core';\nimport React from 'react';\nfunction EmptyStateBase(props) {\n    return (React.createElement(EmptyState, { className: \"pf-m-redhat-font\" },\n        React.createElement(EmptyStateIcon, { icon: props.icon }),\n        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, props.title),\n        React.createElement(EmptyStateBody, null, props.description),\n        props.actions ? props.actions : null));\n}\nexport default EmptyStateBase;\n","import { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CreateCostModelButton } from 'routes/settings/costModelsDetails/createCostModelButton';\nimport EmptyStateBase from './emptyStateBase';\n// defaultIntl required for testing\nconst NoCostModels = ({ intl = defaultIntl }) => {\n    return (React.createElement(EmptyStateBase, { title: intl.formatMessage(messages.costModelsEmptyState), description: intl.formatMessage(messages.costModelsEmptyStateDesc), icon: PlusCircleIcon, actions: React.createElement(React.Fragment, null,\n            React.createElement(CreateCostModelButton, null),\n            React.createElement(\"br\", null),\n            React.createElement(\"br\", null),\n            React.createElement(\"a\", { href: intl.formatMessage(messages.docsConfigCostModels), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.costModelsEmptyStateLearnMore))) }));\n};\nexport default injectIntl(NoCostModels);\n","import { ActionsColumn, TableComposable, TableVariant, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { sortable, TableGridBreakpoint } from '@patternfly/react-table';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nimport { rbacSelectors } from 'store/rbac';\nimport { withRouter } from 'utils/router';\nimport { createActions, createOnSort, getRowsByStateName } from './utils/table';\nclass CostModelsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            dialogSource: null,\n            activeSortDirection: 'asc',\n            activeSortIndex: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { intl = defaultIntl, // Default required for testing\n        canWrite, costData, openDeleteDialog, query, router, stateName, } = this.props;\n        const rows = getRowsByStateName(stateName, costData);\n        const cells = [\n            Object.assign({ title: intl.formatMessage(messages.names, { count: 1 }), data: { orderName: 'name' } }, (rows.length && { transforms: [sortable] })),\n            { title: intl.formatMessage(messages.description) },\n            Object.assign({ title: intl.formatMessage(messages.costModelsSourceType), data: { orderName: 'source_type' } }, (rows.length && { transforms: [sortable] })),\n            { title: intl.formatMessage(messages.costModelsAssignedSources) },\n            Object.assign({ title: intl.formatMessage(messages.costModelsLastChange), data: { orderName: 'updated_timestamp' } }, (rows.length && { transforms: [sortable] })),\n            {\n                title: '',\n                props: { 'aria-label': intl.formatMessage(messages.costModelsActions) },\n            },\n        ];\n        const actions = createActions(stateName, canWrite, [\n            {\n                title: intl.formatMessage(messages.delete),\n                tooltip: intl.formatMessage(messages.costModelsReadOnly),\n                onClick: (_evt, _rowIx, rowData) => {\n                    openDeleteDialog(rowData.data);\n                },\n            },\n        ]);\n        const onSort = createOnSort(cells, query, router);\n        const getSortParams = (columnIndex) => ({\n            sortBy: {\n                index: this.state.activeSortIndex,\n                direction: this.state.activeSortDirection,\n                defaultDirection: 'asc',\n            },\n            onSort: (_evt, index, direction) => {\n                this.setState(Object.assign(Object.assign({}, this.state), { activeSortDirection: direction, activeSortIndex: index }));\n                onSort(_evt, index, direction);\n            },\n            columnIndex,\n        });\n        return (React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.costModelsTableAriaLabel), gridBreakPoint: TableGridBreakpoint.grid2xl, variant: TableVariant.compact },\n            React.createElement(Thead, null,\n                React.createElement(Tr, null,\n                    cells.map((c, cellIndex) => (React.createElement(Th, { key: cellIndex, sort: c.transforms ? getSortParams(cellIndex) : undefined }, c.title))),\n                    React.createElement(Th, null))),\n            React.createElement(Tbody, null, rows.map((r, rowIndex) => (React.createElement(Tr, { key: rowIndex },\n                r.cells.map((c, cellIndex) => (React.createElement(Td, { key: cellIndex }, c.title ? c.title : c))),\n                React.createElement(Td, { isActionCell: true },\n                    React.createElement(ActionsColumn, { items: actions.map(a => {\n                            return Object.assign(Object.assign({}, a), { onClick: _evt => a.onClick(_evt, rowIndex, r, null) });\n                        }) }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        canWrite: rbacSelectors.isCostModelWritePermission(state),\n        query: costModelsSelectors.query(state),\n        costData: costModelsSelectors.costModels(state),\n        stateName: costModelsSelectors.stateName(state),\n    };\n});\nconst mapDispatchToProps = (dispatch) => {\n    const setDialogActionCreator = costModelsActions.setCostModelDialog;\n    return {\n        openDeleteDialog: (item) => dispatch(setDialogActionCreator({ name: 'deleteCostModel', isOpen: true, meta: item })),\n    };\n};\nconst CostModelsTableConnect = connect(mapStateToProps, mapDispatchToProps)(CostModelsTableBase);\nconst CostModelsTable = injectIntl(withRouter(CostModelsTableConnect));\nexport default CostModelsTable;\n","import { Bullseye } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { intl } from 'components/i18n';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { LoadingState } from 'routes/components/state/loadingState';\nimport NoCostModels from 'routes/settings/costModelsDetails/noCostModels';\nimport { formatPath } from 'utils/paths';\nimport { stringifySearch } from './query';\nexport function getRowsByStateName(stateName, data) {\n    let component = null;\n    if (stateName === 'loading') {\n        component = React.createElement(LoadingState, null);\n    }\n    if (stateName === 'empty') {\n        component = React.createElement(NoCostModels, null);\n    }\n    if (stateName === 'no-match') {\n        component = React.createElement(EmptyFilterState, null);\n    }\n    if (stateName === 'failure') {\n        component = React.createElement(Unavailable, null);\n    }\n    if (component !== null) {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 5 },\n                        title: React.createElement(Bullseye, null,\n                            \" \",\n                            component,\n                            \" \"),\n                    },\n                ],\n            },\n        ];\n    }\n    return data.map((item) => {\n        const dateTime = intl.formatDate(item.updated_timestamp, {\n            day: 'numeric',\n            hour: 'numeric',\n            hour12: false,\n            minute: 'numeric',\n            month: 'short',\n            timeZone: 'UTC',\n            timeZoneName: 'short',\n            year: 'numeric',\n        });\n        return {\n            cells: [\n                {\n                    title: React.createElement(Link, { to: `${formatPath(routes.costModel.basePath)}/${item.uuid}` }, item.name),\n                },\n                item.description,\n                item.source_type,\n                item.sources.length.toString(),\n                dateTime,\n            ],\n            data: { costModel: item },\n        };\n    });\n}\nexport function createOnSort(cells, query, router) {\n    return function (_event, index, direction) {\n        const name = cells[index] && cells[index].data ? cells[index].data.orderName : null;\n        if (name === null) {\n            return;\n        }\n        if (direction === SortByDirection.asc) {\n            router.navigate(stringifySearch(Object.assign(Object.assign({}, query), { ordering: name })));\n            return;\n        }\n        router.navigate(stringifySearch(Object.assign(Object.assign({}, query), { ordering: `-${name}` })));\n    };\n}\nexport function createActions(stateName, canWrite, actions) {\n    if (stateName !== 'success') {\n        return [];\n    }\n    return actions.map(action => {\n        return Object.assign(Object.assign({}, action), { isDisabled: !canWrite, style: !canWrite ? { pointerEvents: 'auto' } : undefined, tooltip: !canWrite ? action.tooltip : undefined });\n    });\n}\n","import { Dropdown, DropdownItem, DropdownToggle, InputGroup, InputGroupText, TextInput, Toolbar, ToolbarFilter, } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { costModelsSelectors } from 'store/costModels';\nimport { withRouter } from 'utils/router';\nimport { initialCostModelsQuery, stringifySearch } from './query';\nconst FilterInput = ({ placeholder = '', value, onChange, onKeyPress }) => {\n    return (React.createElement(InputGroup, null,\n        React.createElement(TextInput, { \"aria-label\": placeholder, value: value, placeholder: placeholder, onChange: onChange, onKeyPress: (evt) => {\n                if (evt.key !== 'Enter' || value === '') {\n                    return;\n                }\n                onKeyPress(evt);\n            } }),\n        React.createElement(InputGroupText, { style: { borderLeft: '0' } },\n            React.createElement(SearchIcon, null))));\n};\nexport const onKeyPress = (router, key, query, inputer) => (event) => {\n    if (event.key === 'Enter' && inputer.value !== '') {\n        const currentValue = inputer.value;\n        router.navigate(stringifySearch(Object.assign(Object.assign({}, query), { [key]: query[key] ? `${query[key]},${currentValue}` : currentValue })));\n        inputer.setValue('');\n    }\n};\nexport const onDeleteChip = (router, key, query) => {\n    return (_filterName, chipName) => {\n        const newState = query[key] ? query[key].split(',').filter(qval => qval !== chipName) : null;\n        router.navigate(stringifySearch(Object.assign(Object.assign({}, query), { [key]: newState === null || newState.length === 0 ? null : newState.join(',') })));\n    };\n};\nexport const onDeleteChipGroup = (router, query, key) => {\n    return () => {\n        router.navigate(stringifySearch(Object.assign(Object.assign({}, query), { [key]: null })));\n    };\n};\nconst descriptionMapStateToProps = (state) => {\n    const filterType = costModelsSelectors.currentFilterType(state);\n    const query = costModelsSelectors.query(state);\n    return { filterType, query };\n};\nconst descriptionMergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { intl = defaultIntl, // Default required for testing\n    router, } = ownProps;\n    const { filterType, query } = stateProps;\n    const chips = query.description ? query.description.split(',') : [];\n    return {\n        categoryName: intl.formatMessage(messages.description),\n        chips,\n        deleteChip: onDeleteChip(router, 'description', Object.assign(Object.assign({}, initialCostModelsQuery), query)),\n        deleteChipGroup: onDeleteChipGroup(router, Object.assign(Object.assign({}, initialCostModelsQuery), query), 'description'),\n        filterType,\n        intl,\n        query,\n        router,\n    };\n};\nconst DescriptionFilterBase = ({ deleteChip, deleteChipGroup, filterType, intl, chips, categoryName, query, router, }) => {\n    const [value, setValue] = React.useState('');\n    const children = filterType === 'description' ? (React.createElement(FilterInput, { placeholder: intl.formatMessage(messages.filterByPlaceholder, { value: filterType }), value: value, onChange: (text) => setValue(text), onKeyPress: onKeyPress(router, 'description', Object.assign(Object.assign({}, initialCostModelsQuery), query), { value, setValue }) })) : null;\n    return (React.createElement(ToolbarFilter, { deleteChip: deleteChip, deleteChipGroup: deleteChipGroup, chips: chips, categoryName: categoryName }, children));\n};\nconst DescriptionFilterConnect = connect(descriptionMapStateToProps, undefined, descriptionMergeProps)(DescriptionFilterBase);\nexport const DescriptionFilter = injectIntl(withRouter(DescriptionFilterConnect));\nconst nameFilterMapStateToProps = (state) => {\n    const filterType = costModelsSelectors.currentFilterType(state);\n    const query = costModelsSelectors.query(state);\n    return { filterType, query };\n};\nconst nameFilterMergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { intl = defaultIntl, // Default required for testing\n    router, } = ownProps;\n    const { filterType, query } = stateProps;\n    const chips = query.name ? query.name.split(',') : [];\n    return {\n        deleteChip: onDeleteChip(router, 'name', Object.assign(Object.assign({}, initialCostModelsQuery), query)),\n        deleteChipGroup: onDeleteChipGroup(router, Object.assign(Object.assign({}, initialCostModelsQuery), query), 'name'),\n        filterType,\n        chips,\n        categoryName: intl.formatMessage(messages.names, { count: 1 }),\n        intl,\n        query,\n        router,\n    };\n};\nconst NameFilterBase = ({ deleteChip, deleteChipGroup, filterType, intl, chips, categoryName, query, router, }) => {\n    const [value, setValue] = React.useState('');\n    const children = filterType === 'name' ? (React.createElement(FilterInput, { placeholder: intl.formatMessage(messages.filterByPlaceholder, { value: filterType }), value: value, onChange: (text) => setValue(text), onKeyPress: onKeyPress(router, 'name', Object.assign(Object.assign({}, initialCostModelsQuery), query), { value, setValue }) })) : null;\n    return (React.createElement(ToolbarFilter, { deleteChip: deleteChip, deleteChipGroup: deleteChipGroup, chips: chips, categoryName: categoryName }, children));\n};\nconst NameFilterConnect = connect(nameFilterMapStateToProps, undefined, nameFilterMergeProps)(NameFilterBase);\nexport const NameFilter = injectIntl(withRouter(NameFilterConnect));\nexport const onSelect = (id, setToggle) => {\n    return () => {\n        setToggle(false);\n        const element = document.getElementById(id);\n        element && element.focus();\n    };\n};\nconst sourceTypeFilterMapStateToProps = (state) => {\n    const filterType = costModelsSelectors.currentFilterType(state);\n    const query = costModelsSelectors.query(state);\n    return { filterType, query };\n};\nconst sourceTypeFilterMergeProps = (stateProps, _dispatchProps, ownProps) => {\n    const { intl = defaultIntl, // Default required for testing\n    router, } = ownProps;\n    const { filterType, query } = stateProps;\n    const chips = query.source_type ? [query.source_type] : [];\n    return {\n        chips,\n        categoryName: intl.formatMessage(messages.costModelsSourceType),\n        deleteChip: onDeleteChipGroup(router, Object.assign(Object.assign({}, initialCostModelsQuery), query), 'source_type'),\n        filterType,\n        intl,\n        query,\n        router,\n    };\n};\nconst SourceTypeFilterBase = ({ deleteChip, deleteChipGroup, filterType, intl, chips, categoryName, query, router, }) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const id = 'source-type-filter';\n    const onFilter = (source) => router.navigate(stringifySearch(Object.assign(Object.assign(Object.assign({}, initialCostModelsQuery), query), { source_type: source })));\n    const children = filterType === 'sourceType' ? (React.createElement(Dropdown, { onSelect: onSelect(id, setIsOpen), isOpen: isOpen, toggle: React.createElement(DropdownToggle, { onToggle: (value) => {\n                setIsOpen(value);\n            }, id: id }, intl.formatMessage(messages.filterByPlaceholder, { value: 'source_type' })), dropdownItems: [\n            React.createElement(DropdownItem, { key: \"aws\", component: \"button\", onClick: () => onFilter('aws') }, intl.formatMessage(messages.aws)),\n            React.createElement(DropdownItem, { key: \"azure\", component: \"button\", onClick: () => onFilter('azure') }, intl.formatMessage(messages.azure)),\n            React.createElement(DropdownItem, { key: \"ocp\", component: \"button\", onClick: () => onFilter('ocp') }, intl.formatMessage(messages.openShift)),\n        ] })) : null;\n    return (React.createElement(ToolbarFilter, { deleteChip: deleteChip, deleteChipGroup: deleteChipGroup, chips: chips, categoryName: categoryName }, children));\n};\nconst SourceTypeFilterConnect = connect(sourceTypeFilterMapStateToProps, undefined, sourceTypeFilterMergeProps)(SourceTypeFilterBase);\nexport const SourceTypeFilter = injectIntl(withRouter(SourceTypeFilterConnect));\nconst toolbarMapStateToProps = (state) => {\n    const query = costModelsSelectors.query(state);\n    return { query };\n};\nconst toolbarMergeProps = (stateProps, _dispatchProps, ownProps) => {\n    const { children, router } = ownProps;\n    const { query } = stateProps;\n    return {\n        id: 'cost-models-toolbar',\n        clearAllFilters: () => router.navigate(stringifySearch(Object.assign(Object.assign(Object.assign({}, initialCostModelsQuery), query), { description: null, source_type: null, name: null }))),\n        children,\n    };\n};\nexport const ClearableToolbar = withRouter(connect(toolbarMapStateToProps, undefined, toolbarMergeProps)(Toolbar));\n","import { Pagination, PaginationVariant, Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nimport { withRouter } from 'utils/router';\nimport { initialCostModelsQuery, limitTransform, offsetTransform, stringifySearch } from './query';\nconst costModelsFilterSelectorMapStateToProps = (state) => {\n    return {\n        filterType: costModelsSelectors.currentFilterType(state),\n    };\n};\nconst costModelsFilterSelectorMapDispatchToProps = (dispatch) => {\n    return {\n        updateFilterType: (value) => {\n            dispatch(costModelsActions.updateFilterToolbar({\n                currentFilterType: value,\n            }));\n        },\n    };\n};\nconst costModelsFilterMergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { intl = defaultIntl } = ownProps; // Default required for testing\n    const { filterType } = stateProps;\n    return {\n        filterType,\n        intl,\n        updateFilterType: dispatchProps.updateFilterType,\n    };\n};\nconst CostModelsFilterSelectorBase = ({ filterType, intl, updateFilterType, }) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const options = [\n        React.createElement(SelectOption, { key: \"name\", value: \"name\" }, intl.formatMessage(messages.names, { count: 1 })),\n        React.createElement(SelectOption, { key: \"description\", value: \"description\" }, intl.formatMessage(messages.description)),\n        React.createElement(SelectOption, { key: \"sourceType\", value: \"sourceType\" }, intl.formatMessage(messages.costModelsSourceType)),\n    ];\n    return (React.createElement(Select, { isOpen: isOpen, onSelect: (_event, value) => {\n            updateFilterType(value);\n            setIsOpen(false);\n        }, onToggle: setIsOpen, selections: filterType, toggleIcon: React.createElement(FilterIcon, null), variant: SelectVariant.single }, options));\n};\nconst CostModelsFilterSelectorConnect = connect(costModelsFilterSelectorMapStateToProps, costModelsFilterSelectorMapDispatchToProps, costModelsFilterMergeProps)(CostModelsFilterSelectorBase);\nexport const CostModelsFilterSelector = injectIntl(withRouter(CostModelsFilterSelectorConnect));\nconst topPaginationMapStateToProps = (state) => {\n    const { count, page, perPage } = costModelsSelectors.pagination(state);\n    const query = costModelsSelectors.query(state);\n    return { count, page, perPage, query };\n};\nconst topPaginationMergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { router } = ownProps;\n    const { count, page, perPage, query } = stateProps;\n    return {\n        isCompact: true,\n        itemCount: count,\n        page,\n        perPage,\n        variant: PaginationVariant.top,\n        onSetPage: (_evt, newPage, newPerPage) => {\n            router.navigate(stringifySearch(Object.assign(Object.assign(Object.assign({}, initialCostModelsQuery), query), { offset: offsetTransform(newPage, newPerPage) })));\n        },\n        onPerPageSelect: (_evt, newPerPage) => {\n            router.navigate(stringifySearch(Object.assign(Object.assign(Object.assign({}, initialCostModelsQuery), query), { limit: limitTransform(newPerPage), offset: 0 })));\n        },\n    };\n};\nexport const CostModelsTopPagination = withRouter(connect(topPaginationMapStateToProps, undefined, topPaginationMergeProps)(Pagination));\n","import { ToolbarContent, ToolbarGroup, ToolbarItem, ToolbarItemVariant, ToolbarToggleGroup, } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport React from 'react';\nimport { CreateCostModelButton } from './createCostModelButton';\nimport { ClearableToolbar, DescriptionFilter, NameFilter, SourceTypeFilter } from './utils/filters';\nimport { CostModelsFilterSelector, CostModelsTopPagination } from './utils/toolbar';\nconst CostModelsToolbar = () => {\n    return (React.createElement(ClearableToolbar, null,\n        React.createElement(ToolbarContent, null,\n            React.createElement(ToolbarGroup, { variant: \"filter-group\" },\n                React.createElement(ToolbarToggleGroup, { breakpoint: \"xl\", toggleIcon: React.createElement(FilterIcon, null) },\n                    React.createElement(ToolbarItem, null,\n                        React.createElement(CostModelsFilterSelector, null)),\n                    React.createElement(ToolbarItem, null,\n                        React.createElement(NameFilter, null),\n                        React.createElement(DescriptionFilter, null),\n                        React.createElement(SourceTypeFilter, null))),\n                React.createElement(ToolbarItem, null,\n                    React.createElement(CreateCostModelButton, null))),\n            React.createElement(ToolbarItem, { variant: ToolbarItemVariant.pagination },\n                React.createElement(CostModelsTopPagination, null)))));\n};\nexport default CostModelsToolbar;\n","import { PageSection } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport { parse, stringify } from 'qs';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { costModelsActions } from 'store/costModels';\nimport { metricsActions } from 'store/metrics';\nimport { rbacActions } from 'store/rbac';\nimport { withRouter } from 'utils/router';\nimport { CostModelsBottomPagination } from './bottomPagination';\nimport { styles } from './costModelsDetails.styles';\nimport { CreateCostModelWizard } from './createCostModelButton';\nimport DeleteDialog from './dialog';\nimport CostModelsTable from './table';\nimport CostModelsToolbar from './toolbar';\nclass CostModelsDetailsBase extends React.Component {\n    componentDidMount() {\n        const { getCostModelsData, getMetricsData, getRbacData, search } = this.props;\n        getCostModelsData(search);\n        getMetricsData();\n        getRbacData();\n    }\n    componentDidUpdate(prevProps) {\n        const { getCostModelsData, search } = this.props;\n        if (prevProps.search !== search) {\n            getCostModelsData(search);\n        }\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(PageSection, { isFilled: true },\n            React.createElement(\"div\", { style: styles.descContainer }, intl.formatMessage(messages.costModelsDesc, {\n                learnMore: (React.createElement(\"a\", { href: intl.formatMessage(messages.docsUsingCostModels), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))),\n            })),\n            React.createElement(CreateCostModelWizard, null),\n            React.createElement(DeleteDialog, null),\n            React.createElement(CostModelsToolbar, null),\n            React.createElement(CostModelsTable, null),\n            React.createElement(CostModelsBottomPagination, null)));\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getCostModelsData: (query) => costModelsActions.fetchCostModels(query)(dispatch),\n        getRbacData: () => rbacActions.fetchRbac()(dispatch),\n        getMetricsData: () => metricsActions.fetchMetrics()(dispatch),\n    };\n};\nconst mapStateToProps = (state, ownProps) => {\n    const query = parse(ownProps.router.location.search, { ignoreQueryPrefix: true });\n    const searchQuery = Object.assign(Object.assign({}, query), { tabKey: undefined });\n    return {\n        search: stringify(searchQuery, { encode: false, indices: false }),\n    };\n};\nconst CostModelsDetails = withRouter(injectIntl(connect(mapStateToProps, mapDispatchToProps)(CostModelsDetailsBase)));\nexport default CostModelsDetails;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './settings.scss';\nimport { Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes } from '@patternfly/react-core';\nimport { getQueryRoute, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostModelsDetails } from 'routes/settings/costModelsDetails';\nimport { createMapStateToProps } from 'store/common';\nimport { withRouter } from 'utils/router';\nimport { styles } from './settings.styles';\n// eslint-disable-next-line no-shadow\nvar SettingsTab;\n(function (SettingsTab) {\n    SettingsTab[\"costModels\"] = \"cost-models\";\n    SettingsTab[\"calculations\"] = \"calculations\";\n    SettingsTab[\"tags\"] = \"tags\";\n})(SettingsTab || (SettingsTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case SettingsTab.costModels:\n            return 'cost-models';\n        case SettingsTab.calculations:\n            return 'calculations';\n        case SettingsTab.tags:\n            return 'tags';\n    }\n};\nclass SettingsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: SettingsTab.costModels,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: SettingsTab.calculations,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: SettingsTab.tags,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getRouteForQuery = (query) => {\n            const { router } = this.props;\n            return `${router.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === SettingsTab.costModels) {\n                return React.createElement(CostModelsDetails, null);\n            }\n            else if (currentTab === SettingsTab.calculations) {\n                return 'calculations';\n            }\n            else if (currentTab === SettingsTab.tags) {\n                return 'tags';\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === SettingsTab.costModels) {\n                return intl.formatMessage(messages.costModels);\n            }\n            else if (tab === SettingsTab.calculations) {\n                return intl.formatMessage(messages.currencyCalcuations);\n            }\n            else if (tab === SettingsTab.tags) {\n                return intl.formatMessage(messages.tagLabels);\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { query, router } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n                });\n            }\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n        });\n    }\n    render() {\n        const { intl } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.settingsTitle);\n        return (React.createElement(\"div\", { className: \"tabsOverride\" },\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] }, title)),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs))),\n            React.createElement(\"div\", null, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const query = Object.assign({}, queryFromRoute);\n    return {\n        query,\n        tabKey,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Settings = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SettingsBase)));\nexport default Settings;\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(NoDataStateBase);\nexport { NoDataState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default NoData;\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CostIcon } from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case ProviderType.aws:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case ProviderType.azure:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case ProviderType.gcp:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case ProviderType.ibm:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case ProviderType.ocp:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(NoProvidersStateBase);\nexport { NoProvidersState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default NoProviders;\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\n// RHEL options\nconst rhelOptions = [{ label: messages.perspectiveValues, value: 'rhel' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst Perspective = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, hasRhel, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isRhelTab, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    // Note isInfrastructureTab and isRhelTab will be undefined for cost explorer\n    if (isInfrastructureTab !== undefined || isRhelTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n            }));\n        }\n        else if (isRhelTab) {\n            if (hasRhel) {\n                options.push(...rhelOptions);\n            }\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        if (hasRhel) {\n            options.push(...rhelOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nexport default Perspective;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, currency, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details && widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency })))));\n    }))));\nexport default DashboardBase;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nexport const styles = {\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n};\n","import './optimizationsSummary.scss';\nimport { Button, ButtonVariant, Card, CardBody, CardTitle, Popover, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { FetchStatus } from 'store/common';\nimport { formatPath } from 'utils/paths';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './optimizations.styles';\nconst OptimizationsSummaryBase = ({ intl, report, status, title }) => {\n    const count = report && report.meta ? report.meta.count : 0;\n    const description = intl.formatMessage(messages.optimizationsDetails, { count });\n    return (React.createElement(Card, { className: \"summary\" },\n        React.createElement(CardTitle, null,\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                intl.formatMessage(title),\n                React.createElement(\"span\", { style: styles.infoIcon },\n                    React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.optimizationsInfoArialLabel), enableFlip: true, bodyContent: React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.optimizationsInfo)) },\n                        React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.optimizationsInfoButtonArialLabel), variant: ButtonVariant.plain },\n                            React.createElement(OutlinedQuestionCircleIcon, null)))))),\n        React.createElement(CardBody, null, status === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { width: \"16%\" }),\n            React.createElement(Skeleton, { className: \"skeleton\", width: skeletonWidth.md }))) : count > 0 ? (React.createElement(Link, { to: formatPath(routes.optimizations.path) }, description)) : (description))));\n};\nconst OptimizationsSummary = injectIntl(OptimizationsSummaryBase);\nexport default OptimizationsSummary;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ComputedReportItemType, DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { getComputedForecast, transformForecast, transformForecastCone, } from 'routes/views/components/charts/common/chartDatumForecast';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { OptimizationsSummary } from 'routes/views/overview/components/optimizationsSummary';\nimport { DashboardChartType } from 'store/dashboard/common/dashboardCommon';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\n// eslint-disable-next-line no-shadow\nvar Comparison;\n(function (Comparison) {\n    Comparison[\"cumulative\"] = \"cumulative\";\n    Comparison[\"daily\"] = \"daily\";\n})(Comparison || (Comparison = {}));\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            currentComparison: Comparison.cumulative,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === DashboardChartType.dailyTrend) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.dailyCost) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === DashboardChartType.trend) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.usage) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: Comparison.daily },\n                { label: cumulativeTitle, value: Comparison.cumulative, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === Comparison.daily;\n            const datumType = daily ? DatumType.rolling : trend.datumType;\n            const computedForecast = getComputedForecast(forecast, report, computedForecastItem, datumType);\n            const forecastData = transformForecast(computedForecast, datumType, computedForecastItem);\n            const forecastConeData = transformForecastCone(computedForecast, datumType, computedForecastItem);\n            return { forecastData, forecastConeData };\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === ComputedReportItemType.usage) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getOptimizationsSummary = () => {\n            const { rosReportFetchStatus, rosReport, titleKey } = this.props;\n            return React.createElement(OptimizationsSummary, { status: rosReportFetchStatus, report: rosReport, title: titleKey });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                availableTabs && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({ activeTabKey: tabIndex });\n        };\n        this.updateForecasts = () => {\n            const { fetchForecasts, widgetId } = this.props;\n            if (fetchForecasts) {\n                fetchForecasts(widgetId);\n            }\n        };\n        this.updateReports = () => {\n            const { fetchReports, widgetId } = this.props;\n            if (fetchReports) {\n                fetchReports(widgetId);\n            }\n        };\n        this.updateRosReports = () => {\n            const { fetchRosReports, isRosFeatureEnabled, widgetId } = this.props;\n            if (fetchRosReports && isRosFeatureEnabled) {\n                fetchRosReports(widgetId);\n            }\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, details, id, trend, updateTab } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (trend && trend.computedForecastItem !== undefined) {\n            this.updateForecasts();\n        }\n        if (!details.showOptimizations) {\n            this.updateReports();\n        }\n        if (details.showOptimizations) {\n            this.updateRosReports();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, trend } = this.props;\n        if (prevProps.costType !== costType || prevProps.currency !== currency) {\n            this.updateReports();\n            if (trend && trend.computedForecastItem !== undefined) {\n                this.updateForecasts();\n            }\n        }\n    }\n    render() {\n        const { details, isRosFeatureEnabled } = this.props;\n        if (details.showOptimizations) {\n            return isRosFeatureEnabled ? this.getOptimizationsSummary() : null;\n        }\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport default DashboardWidgetBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, AwsDashboardTab } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsDashboardTab.services:\n            return 'service';\n        case AwsDashboardTab.accounts:\n            return 'account';\n        case AwsDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), costType: getCostType(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors, AwsOcpDashboardTab } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsOcpDashboardTab.services:\n            return 'service';\n        case AwsOcpDashboardTab.accounts:\n            return 'account';\n        case AwsOcpDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), costType: getCostType(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, AzureDashboardTab } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureDashboardTab.service_names:\n            return 'service_name';\n        case AzureDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, AzureOcpDashboardTab, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureOcpDashboardTab.service_names:\n            return 'service_name';\n        case AzureOcpDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureOcpDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors, GcpDashboardTab } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpDashboardTab.regions:\n            return 'region';\n        case GcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors, GcpOcpDashboardTab } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpOcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpOcpDashboardTab.regions:\n            return 'region';\n        case GcpOcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors, IbmDashboardTab } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case IbmDashboardTab.services:\n            return 'service';\n        case IbmDashboardTab.projects:\n            return 'project';\n        case IbmDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, OcpCloudDashboardTab, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpCloudDashboardTab.accounts:\n            return 'account';\n        case OcpCloudDashboardTab.regions:\n            return 'region';\n        case OcpCloudDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, OcpDashboardTab } from 'store/dashboard/ocpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { rosSelectors } from 'store/ros';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpDashboardTab.clusters:\n            return 'cluster';\n        case OcpDashboardTab.nodes:\n            return 'node';\n        case OcpDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    })), (widget.rosPathsType &&\n        widget.rosType && {\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        rosReport: rosSelectors.selectRos(state, widget.rosPathsType, widget.rosType, queries.optimizations),\n        rosReportError: rosSelectors.selectRosError(state, widget.rosPathsType, widget.rosType, queries.optimizations),\n        rosReportFetchStatus: rosSelectors.selectRosFetchStatus(state, widget.rosPathsType, widget.rosType, queries.optimizations),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    fetchRosReports: ocpDashboardActions.fetchWidgetRosReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardActions, rhelDashboardSelectors, RhelDashboardTab } from 'store/dashboard/rhelDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './rhelDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case RhelDashboardTab.clusters:\n            return 'cluster';\n        case RhelDashboardTab.nodes:\n            return 'node';\n        case RhelDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = rhelDashboardSelectors.selectWidget(state, widgetId);\n    const queries = rhelDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: rhelDashboardActions.fetchWidgetForecasts,\n    fetchReports: rhelDashboardActions.fetchWidgetReports,\n    updateTab: rhelDashboardActions.changeWidgetTab,\n};\nconst RhelDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { RhelDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardSelectors } from 'store/dashboard/rhelDashboard';\nimport { RhelDashboardWidget } from './rhelDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: RhelDashboardWidget,\n        selectWidgets: rhelDashboardSelectors.selectWidgets(state),\n        widgets: rhelDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst RhelDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default RhelDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors, OciDashboardTab } from 'store/dashboard/ociDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OciDashboardTab.product_services:\n            return 'product_service';\n        case OciDashboardTab.payer_tenant_ids:\n            return 'payer_tenant_id';\n        case OciDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport { getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { UserAccessType } from 'api/userAccess';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { Loading } from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { AwsDashboard } from 'routes/views/overview/awsDashboard';\nimport { AwsOcpDashboard } from 'routes/views/overview/awsOcpDashboard';\nimport { AzureDashboard } from 'routes/views/overview/azureDashboard';\nimport { AzureOcpDashboard } from 'routes/views/overview/azureOcpDashboard';\nimport { GcpDashboard } from 'routes/views/overview/gcpDashboard';\nimport { GcpOcpDashboard } from 'routes/views/overview/gcpOcpDashboard';\nimport { IbmDashboard } from 'routes/views/overview/ibmDashboard';\nimport { OcpCloudDashboard } from 'routes/views/overview/ocpCloudDashboard';\nimport { OcpDashboard } from 'routes/views/overview/ocpDashboard';\nimport { RhelDashboard } from 'routes/views/overview/rhelDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nimport { withRouter } from 'utils/router';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, isRhelAvailable, } from 'utils/userAccess';\nimport { OciDashboard } from './ociDashboard';\nimport { styles } from './overview.styles';\n// eslint-disable-next-line no-shadow\nvar InfrastructurePerspective;\n(function (InfrastructurePerspective) {\n    InfrastructurePerspective[\"aws\"] = \"aws\";\n    InfrastructurePerspective[\"awsOcp\"] = \"aws_ocp\";\n    InfrastructurePerspective[\"azure\"] = \"azure\";\n    InfrastructurePerspective[\"azureOcp\"] = \"azure_ocp\";\n    InfrastructurePerspective[\"gcp\"] = \"gcp\";\n    InfrastructurePerspective[\"gcpOcp\"] = \"gcp_ocp\";\n    InfrastructurePerspective[\"ibm\"] = \"ibm\";\n    InfrastructurePerspective[\"ibmOcp\"] = \"ibm_ocp\";\n    InfrastructurePerspective[\"oci\"] = \"oci\";\n    InfrastructurePerspective[\"ocpCloud\"] = \"ocp_cloud\";\n})(InfrastructurePerspective || (InfrastructurePerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OcpPerspective;\n(function (OcpPerspective) {\n    OcpPerspective[\"ocp\"] = \"ocp\";\n})(OcpPerspective || (OcpPerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OverviewTab;\n(function (OverviewTab) {\n    OverviewTab[\"infrastructure\"] = \"infrastructure\";\n    OverviewTab[\"ocp\"] = \"ocp\";\n    OverviewTab[\"rhel\"] = \"rhel\";\n})(OverviewTab || (OverviewTab = {}));\n// eslint-disable-next-line no-shadow\nvar RhelPerspective;\n(function (RhelPerspective) {\n    RhelPerspective[\"rhel\"] = \"rhel\";\n})(RhelPerspective || (RhelPerspective = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OverviewTab.infrastructure:\n            return 'infrastructure';\n        case OverviewTab.ocp:\n            return 'ocp';\n        case OverviewTab.rhel:\n            return 'rhel';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const availableTabs = [];\n            const infrastructureTabs = this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.infrastructure,\n                    },\n                ]\n                : undefined;\n            const ocpTabs = this.isOcpAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.ocp,\n                    },\n                ]\n                : undefined;\n            const rhelTabs = this.isRhelAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.rhel,\n                    },\n                ]\n                : undefined;\n            if (isFinsightsFeatureEnabled) {\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n                if (rhelTabs) {\n                    availableTabs.push(...rhelTabs);\n                }\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n            }\n            else {\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === InfrastructurePerspective.aws || currentItem === InfrastructurePerspective.awsOcp) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: this.handleOnCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrency = () => {\n            const { currency } = this.props;\n            return React.createElement(Currency, { onSelect: this.handleOnCurrencySelected, currency: currency });\n        };\n        this.getCurrentTab = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const hasRhel = this.isRhelAvailable();\n            const hasInfrastructure = hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud;\n            const showInfrastructureOnly = hasInfrastructure && !hasOcp && !hasRhel;\n            const showOcpOnly = hasOcp && !hasInfrastructure && !hasRhel;\n            const showRhelOnly = hasRhel && !hasInfrastructure && !hasOcp;\n            if (showOcpOnly) {\n                return OverviewTab.ocp;\n            }\n            else if (showInfrastructureOnly) {\n                return OverviewTab.infrastructure;\n            }\n            else if (showRhelOnly) {\n                return OverviewTab.rhel;\n            }\n            else {\n                if (isFinsightsFeatureEnabled) {\n                    switch (activeTabKey) {\n                        case 0:\n                            return OverviewTab.infrastructure;\n                        case 1:\n                            return OverviewTab.rhel;\n                        case 2:\n                            return OverviewTab.ocp;\n                    }\n                }\n                switch (activeTabKey) {\n                    case 0:\n                        return OverviewTab.ocp;\n                    case 1:\n                        return OverviewTab.infrastructure;\n                }\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case InfrastructurePerspective.aws:\n                case InfrastructurePerspective.awsOcp:\n                case InfrastructurePerspective.azure:\n                case InfrastructurePerspective.oci:\n                case InfrastructurePerspective.azureOcp:\n                case InfrastructurePerspective.gcp:\n                case InfrastructurePerspective.gcpOcp:\n                case InfrastructurePerspective.ibm:\n                case InfrastructurePerspective.ibmOcp:\n                case InfrastructurePerspective.ocpCloud:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return InfrastructurePerspective.ocpCloud;\n            }\n            if (this.isAwsAvailable()) {\n                return InfrastructurePerspective.aws;\n            }\n            if (this.isAzureAvailable()) {\n                return InfrastructurePerspective.azure;\n            }\n            if (this.isOciAvailable()) {\n                return InfrastructurePerspective.oci;\n            }\n            if (this.isGcpAvailable()) {\n                return InfrastructurePerspective.gcp;\n            }\n            if (this.isIbmAvailable()) {\n                return InfrastructurePerspective.ibm;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case OcpPerspective.ocp:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return OcpPerspective.ocp;\n            }\n            return undefined;\n        };\n        this.getDefaultRhelPerspective = () => {\n            const { perspective, rhelProviders, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case RhelPerspective.rhel:\n                    return perspective;\n            }\n            if (isRhelAvailable(userAccess, rhelProviders)) {\n                return RhelPerspective.rhel;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasRhel = this.isRhelAvailable();\n            // Note: No need to test \"OCP on cloud\" here, since that requires at least one of the providers below\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp || hasRhel)) {\n                return null;\n            }\n            let currentItem;\n            const currentTab = this.getCurrentTab();\n            switch (currentTab) {\n                case OverviewTab.infrastructure:\n                    currentItem = currentInfrastructurePerspective;\n                    break;\n                case OverviewTab.ocp:\n                    currentItem = currentOcpPerspective;\n                    break;\n                case OverviewTab.rhel:\n                    currentItem = currentRhelPerspective;\n                    break;\n            }\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), hasRhel: hasRhel, isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: OverviewTab.infrastructure === currentTab, isRhelTab: OverviewTab.rhel === currentTab, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { router } = this.props;\n            return `${router.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, ocpProviders, rhelProviders, } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === OverviewTab.infrastructure) {\n                if (currentInfrastructurePerspective === InfrastructurePerspective.ocpCloud) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.aws) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.awsOcp) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azure) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azureOcp) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcp) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcpOcp) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.ibm) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.oci) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.ocp) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === OcpPerspective.ocp) {\n                    return hasData ? React.createElement(OcpDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.rhel) {\n                const hasData = hasCurrentMonthData(rhelProviders) || hasPreviousMonthData(rhelProviders);\n                if (currentRhelPerspective === RhelPerspective.rhel) {\n                    return hasData ? React.createElement(RhelDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl, isFinsightsFeatureEnabled } = this.props;\n            if (tab === OverviewTab.infrastructure) {\n                if (isFinsightsFeatureEnabled) {\n                    return intl.formatMessage(messages.summary);\n                }\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === OverviewTab.ocp) {\n                return intl.formatMessage(messages.openShift);\n            }\n            else if (tab === OverviewTab.rhel) {\n                return intl.formatMessage(messages.rhel);\n            }\n        };\n        this.handleOnCostTypeSelected = () => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handleOnCurrencySelected = () => {\n            const { router, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { query, router } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === OverviewTab.infrastructure && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === OverviewTab.ocp && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { query, router } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n        this.isRhelAvailable = () => {\n            const { isFinsightsFeatureEnabled, rhelProviders, userAccess } = this.props;\n            return isFinsightsFeatureEnabled && isRhelAvailable(userAccess, rhelProviders);\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n            currentRhelPerspective: this.getDefaultRhelPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n                currentRhelPerspective: this.getDefaultRhelPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isFinsightsFeatureEnabled, isIbmFeatureEnabled, userAccessFetchStatus } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === FetchStatus.complete &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable() &&\n            !this.isRhelAvailable();\n        const isLoading = providersFetchStatus === FetchStatus.inProgress || userAccessFetchStatus === FetchStatus.inProgress;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    isFinsightsFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rhel)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.rhelDesc)),\n                                        React.createElement(\"br\", null))),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, this.getCurrency())),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const perspective = queryFromRoute.perspective;\n    const currency = getCurrency();\n    const costType = perspective === InfrastructurePerspective.aws || perspective === InfrastructurePerspective.awsOcp\n        ? getCostType()\n        : undefined;\n    const query = Object.assign({}, queryFromRoute);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, UserAccessType.all, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, UserAccessType.all, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, UserAccessType.all, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, ProviderType.aws),\n        azureProviders: filterProviders(providers, ProviderType.azure),\n        costType,\n        currency,\n        gcpProviders: filterProviders(providers, ProviderType.gcp),\n        ibmProviders: filterProviders(providers, ProviderType.ibm),\n        isFinsightsFeatureEnabled: featureFlagsSelectors.selectIsFinsightsFeatureEnabled(state),\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        ociProviders: filterProviders(providers, ProviderType.oci),\n        ocpProviders: filterProviders(providers, ProviderType.ocp),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        rhelProviders: filterProviders(providers, ProviderType.rhel),\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OverviewBase)));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","// eslint-disable-next-line no-shadow\nvar DataType;\n(function (DataType) {\n    DataType[\"currentMonthData\"] = \"current_month_data\";\n    DataType[\"hasData\"] = \"has_data\";\n    DataType[\"previousMonthData\"] = \"previous_month_data\";\n})(DataType || (DataType = {}));\n// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.currentMonthData);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.hasData);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.previousMonthData);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, DataType.currentMonthData);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, DataType.hasData);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, DataType.previousMonthData);\n};\n","import { UserAccessType } from 'api/userAccess';\nconst hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.aws);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.azure);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.oci);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.cost_model);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.gcp);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, UserAccessType.gcp) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ocp);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n// Returns true if user has access to RHEL\nexport const hasRhelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.rhel);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRhelAvailable = (userAccess, rhelProviders) => {\n    return hasRhelAccess(userAccess) && hasProviders(rhelProviders);\n};\n// Returns true if user has access to ROS\nexport const hasRosAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ros);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRosAvailable = (userAccess, rosProviders) => {\n    return hasRosAccess(userAccess) && hasProviders(rosProviders);\n};\n"],"names":["OkIconConfig","name","height","width","svgPath","yOffset","xOffset","OkIcon","getProvidersQuery","query","stringify","encode","indices","getUserAccessQuery","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","currency","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CurrencyConnect","connect","injectIntl","initialCostModelsQuery","limit","offset","ordering","source_type","description","stringifySearch","keys","reduce","acc","cur","offsetTransform","page","perPage","CostModelsBottomPagination","count","costModels","undefined","stateProps","dispatchProps","ownProps","router","itemCount","PaginationVariant","onSetPage","_evt","newPage","newPerPage","navigate","onPerPageSelect","Toolbar","ToolbarContent","ToolbarItem","ToolbarItemVariant","Pagination","titles","paginationTitle","title","placement","descContainer","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","defaultCostModelContext","apiError","checked","clearQuery","createError","createProcess","createSuccess","currencyUnits","dataFetched","dirtyName","distribution","distributePlatformUnallocated","distributeWorkerUnallocated","error","fetchSources","type","filterName","goToAddPL","isDiscount","handleMarkupDiscountChange","args","handleDistributionChange","handleDistributePlatformUnallocatedChange","handleDistributeWorkerUnallocatedChange","handleSignChange","loading","markup","metricsHash","onClose","onCurrencyChange","onDescChange","onFilterChange","onPageChange","onPerPageChange","onTypeChange","onNameChange","onSourceSelect","priceListPagination","onPerPageSet","onPageSet","step","setSources","sources","submitTiers","tiers","total","CostModelContext","form","textArea","maxWidth","minWidth","minHeight","maxHeight","selector","titleWithLearnMore","DistributionBase","Consumer","Stack","hasGutter","StackItem","href","rel","target","TextContent","Text","isFilled","FormGroup","isInline","fieldId","isRequired","Radio","isChecked","onChange","nameErrors","length","descriptionErrors","isMarkupValid","trim","validatorsHash","AWS","ctx","Azure","GCP","OCP","priceListCurrent","justSaved","GeneralInformation","getValueLabel","valStr","val","o","sourceTypeOptions","TitleSizes","helperTextInvalid","validated","TextInput","TextArea","direction","SelectDirection","appendMenuTo","toggleAriaLabel","placeholderText","MarkupWithDistributionBase","handleOnKeyDown","keyCode","preventDefault","helpText","Flex","default","alignSelf","FlexItem","InputGroup","InputGroupText","onKeyDown","placeholder","component","TextVariants","List","ListItem","cancel","submitRate","rateFormData","canSubmit","errors","rateKind","Form","ActionGroup","Button","ButtonVariant","onClick","PaginationToolbarTemplate","PriceListTable","metrics","measurements","sortBy","index","SortByDirection","addRateAction","deleteRateAction","items","getMetricLabel","m","replace","toLowerCase","getMeasurementLabel","metricOpts","measurementOpts","curr","measurs","filter","i","includes","NoTiersEmptyState","Bullseye","EmptyState","EmptyStateIcon","icon","EmptyStateBody","initialFilters","primary","search","setSearch","onRemove","onClearAll","from","to","filtered","item","stateIndex","rate","metric","label_metric","label_measurement","sort","r1","r2","projection","r","getMetric","getMeasurement","measurement","label_measurement_unit","res","slice","setPrimary","selected","secondaries","setSelections","filters","button","onClear","pagination","isCompact","actions","_rowId","rowData","data","sortCallback","e","ReviewSuccess","color","EmptyStateSecondaryActions","ReviewDetails","selectedSources","meta","Alert","create","back","TextList","TextListVariants","TextListItem","TextListItemVariants","src","Boolean","costmodel","text","join","FilterInput","onSearch","onKeyPress","evt","borderLeft","AssignSourcesToolbar","filterInputProps","paginationProps","clearAllFilters","ToolbarToggleGroup","breakpoint","toggleIcon","ToolbarFilter","deleteChip","chips","categoryName","sourceType","category","chip","TableComposable","TableVariant","Thead","Tr","c","Th","Tbody","row","rowIndex","Td","Checkbox","uuid","costModel","Sources","fetchData","context","componentDidMount","renderContent","onRefresh","contextType","updateTiersCurrency","rates","cloneDeep","tiered_rates","unit","usage","tag_rates","tag_values","InternalWizard","isProcess","isSuccess","closeFnc","onMove","validators","steps","current","setError","setSuccess","updateCostModel","newSteps","ix","canJumpTo","enableNext","isAddingRate","nextButtonText","Wizard","startAtStep","onNext","onBack","onGoToStep","footer","onSave","distribution_info","distribution_type","platform_cost","worker_cost","source_uuids","then","catch","err","CostModelWizardBase","isDialogOpen","closeConfirmDialog","openWizard","CancelButton","OkButton","Provider","queryParam","payload","cost_models","cm","resp","_","currentTarget","closeWizard","rowId","isSelected","pageSelections","s","newState","Number","errorMessage","fetch","Modal","header","CreateCostModelButton","canWrite","rbac","dispatch","tooltip","children","CreateCostModelWizard","createWizard","CannotDeleteContent","head","body","source","DeleteDialog","deleteCostModel","isLoading","deleteError","dialogData","closeDialog","stateName","status","deleteText","deleteAction","cancelText","cancelAction","sourcesNo","DeleteDialogActions","cannotDeleteTitle","cannotDeleteBody","canDeleteBody","AlertVariant","DeleteDialogBody","ModalVariant","titleIconVariant","CostModelsTableBase","dialogSource","activeSortDirection","activeSortIndex","costData","openDeleteDialog","rows","Unavailable","heightAuto","cells","colSpan","dateTime","updated_timestamp","day","hour","hour12","minute","month","timeZone","timeZoneName","year","Link","routes","getRowsByStateName","orderName","transforms","sortable","action","pointerEvents","createActions","_rowIx","onSort","_event","createOnSort","getSortParams","columnIndex","defaultDirection","gridBreakPoint","TableGridBreakpoint","cellIndex","isActionCell","ActionsColumn","a","CostModelsTableConnect","setDialogActionCreator","inputer","currentValue","setValue","onDeleteChip","_filterName","chipName","split","qval","onDeleteChipGroup","DescriptionFilterConnect","filterType","deleteChipGroup","DescriptionFilter","NameFilterConnect","NameFilter","setToggle","element","document","getElementById","focus","SourceTypeFilterConnect","_dispatchProps","setIsOpen","onFilter","Dropdown","toggle","DropdownToggle","dropdownItems","DropdownItem","SourceTypeFilter","ClearableToolbar","CostModelsFilterSelectorConnect","updateFilterType","currentFilterType","CostModelsFilterSelector","CostModelsTopPagination","ToolbarGroup","CostModelsDetailsBase","getCostModelsData","getMetricsData","getRbacData","componentDidUpdate","prevProps","PageSection","learnMore","parse","location","ignoreQueryPrefix","searchQuery","tabKey","paddingLeft","global_spacer_lg","paddingRight","paddingTop","headerContent","justifyContent","tabs","SettingsTab","getIdKeyForTab","tab","calculations","tags","SettingsBase","activeTabKey","getAvailableTabs","contentRef","getRouteForQuery","pathname","getTab","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","ref","getTabItem","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","newQuery","JSON","queryFromRoute","isNaN","NoDataStateBase","showReload","EmptyStateVariant","window","reload","NoDataState","PageHeader","PageHeaderTitle","alt","iconSpacer","marginLeft","viewSources","marginTop","NoProvidersStateBase","getDocLink","textKey","urlKey","getRouteToSources","providerType","docUrlKey","descKey","titleKey","NoProvidersState","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","rhelOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","currentItem","hasOcp","hasOcpCloud","hasRhel","isInfrastructureTab","isRhelTab","onSelected","costType","DashboardWidget","selectWidgets","widgets","Grid","widgetId","widget","details","showHorizontal","GridItem","sm","lg","xl","xl2","infoIcon","fontSize","global_FontSize_md","report","Card","CardTitle","Popover","enableFlip","bodyContent","infoTitle","CardBody","Skeleton","skeleton","ChartComparisonBase","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","comparisonContainer","global_spacer_2xl","tabItems","global_spacer_xl","Comparison","DashboardWidgetBase","currentComparison","cumulative","buildDetailsLink","viewAllPath","group_by","getChart","containerHeight","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","getFormattedUnits","cumulativeTitle","dailyTitleKey","daily","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","forecast","computedForecast","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","getDetailsLinkTitle","getHorizontalLayout","currentReportFetchStatus","detailsLink","getTitle","getOptimizationsSummary","rosReportFetchStatus","rosReport","tabsReport","tabsReportFetchStatus","idKey","reportItem","topItems","activeTab","totalValue","hasTotal","getVerticalLayout","updateTab","updateForecasts","fetchForecasts","updateReports","fetchReports","updateRosReports","fetchRosReports","isRosFeatureEnabled","showOptimizations","awsDashboard","queries","forecastPathsType","forecastType","forecastError","forecastFetchStatus","reportPathsType","currentReportError","previous","previousReportError","previousReportFetchStatus","tabsReportError","mapDispatchToProps","AwsDashboardWidget","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","rosPathsType","rosType","featureFlags","ros","optimizations","rosReportError","OcpDashboardWidget","rhelDashboard","RhelDashboardWidget","ociDashboard","OciDashboardWidget","date","flexGrow","textAlign","headerContentLeft","headerContentRight","fontWeight","main","paddingBottom","InfrastructurePerspective","OcpPerspective","OverviewTab","RhelPerspective","infrastructure","ocp","rhel","OverviewBase","isFinsightsFeatureEnabled","infrastructureTabs","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","ocpTabs","isOcpAvailable","rhelTabs","isRhelAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","awsOcp","handleOnCostTypeSelected","getCurrency","handleOnCurrencySelected","hasInfrastructure","showInfrastructureOnly","showRhelOnly","getDefaultInfrastructurePerspective","perspective","azure","oci","azureOcp","gcp","gcpOcp","ibm","ibmOcp","ocpCloud","getDefaultOcpPerspective","ocpProviders","userAccess","getDefaultRhelPerspective","rhelProviders","getPerspective","currentRhelPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getQueryRoute","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","noData","hasData","providers","providersFetchStatus","userAccessFetchStatus","noProviders","parseQuery","providersQueryString","providersError","userAccessQueryString","userAccessError","DataType","_getOcpProvider","result","provider","filterProviders","_hasData","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","currentMonthData","hasCloudData","hasCloudPreviousMonthData","previousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasPreviousMonthData","hasAccess","userAccessType","Array","isArray","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasOciAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess","hasRhelAccess","hasRosAccess"],"sourceRoot":""}