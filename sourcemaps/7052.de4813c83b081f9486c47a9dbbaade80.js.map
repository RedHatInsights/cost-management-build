{"version":3,"file":"js/7052.331de0cb72c5426e8bc0.js","mappings":"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","sources":["webpack:///./src/routes/state/notAvailable/notAvailable.tsx","webpack:///./src/routes/views/components/costDistribution/costDistribution.styles.ts","webpack:///./src/routes/views/components/costDistribution/costDistribution.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/views/details/components/tag/tag.styles.ts","webpack:///./src/routes/views/details/components/tag/tagContent.tsx","webpack:///./src/routes/views/details/components/tag/tagModal.tsx","webpack:///./src/routes/views/details/components/tag/tagLink.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/views/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.tsx","webpack:///./src/routes/views/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/views/details/components/costChart/costChart.tsx","webpack:///./src/routes/views/details/components/costDistributionChart/costDistributionChart.styles.ts","webpack:///./src/routes/views/details/components/costDistributionChart/costDistributionChart.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.tsx","webpack:///./src/routes/views/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryCard.tsx","webpack:///./src/routes/views/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/views/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/views/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/views/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/utils/costDistribution.ts","webpack:///./src/routes/views/utils/handles.ts","webpack:///./src/routes/views/utils/query.ts"],"sourcesContent":["import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(Unavailable, null))));\n};\nexport default NotAvailable;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    selector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    label: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costDistribution.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostDistributionType } from 'routes/views/utils/costDistribution';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, setCostDistribution } from 'utils/localStorage';\nimport { styles } from './costDistribution.styles';\nconst costDistributionOptions = [\n    { label: messages.costDistributionType, value: CostDistributionType.distributed },\n    { label: messages.costDistributionType, value: CostDistributionType.total },\n];\nclass CostDistributionBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { costDistribution = CostDistributionType.total, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costDistribution);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costDistributionSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costDistributionOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostDistribution(selection.value); // Set cost distribution in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.selector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.label }, intl.formatMessage(messages.costDistributionLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostDistributionConnect = connect(mapStateToProps, mapDispatchToProps)(CostDistributionBase);\nconst CostDistribution = injectIntl(CostDistributionConnect);\nexport default CostDistribution;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { TagContent } from './tagContent';\nconst tagReportType = TagType.tag;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, intl, isOpen, query, tagReport } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: this.props.isPlatformCosts ? platformCategoryKey : groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        isPlatformCosts: queryFromRoute && queryFromRoute.isPlatformCosts,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagModalBase)));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = TagType.tag;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", { \"data-testid\": \"tag-lnk\", href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }, count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase)));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costDistribution: {\n        marginTop: global_spacer_md.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { getQueryRoute, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { Currency } from 'routes/components/currency';\nimport { CostDistribution } from 'routes/views/components/costDistribution';\nimport { CostType } from 'routes/views/components/costType';\nimport { TagLink } from 'routes/views/details/components/tag';\nimport { CostDistributionType } from 'routes/views/utils/costDistribution';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { getTotalCostDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { orgUnitIdKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = url => {\n            const { groupBy, isOptimizationsPath, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const state = query.state ? window.atob(query.state) : undefined;\n            const newQuery = Object.assign(Object.assign({}, (state && JSON.parse(state))), (!isOptimizationsPath && {\n                group_by: {\n                    [groupByKey]: value,\n                },\n            }));\n            return `${url}?${getQueryRoute(newQuery)}`;\n        };\n        this.getBackToLink = groupByKey => {\n            const { detailsURL, intl, isOptimizationsPath, tagReportPathsType } = this.props;\n            if (isOptimizationsPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(formatPath(routes.optimizations.path)) }, intl.formatMessage(messages.breakdownBackToOptimizations)));\n            }\n            return (React.createElement(Link, { to: this.buildDetailsLink(detailsURL) }, intl.formatMessage(messages.breakdownBackToDetails, {\n                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagReportPathsType }),\n                groupBy: groupByKey,\n            })));\n        };\n        this.getTotalCost = () => {\n            const { costDistribution = CostDistributionType.total, report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[costDistribution];\n            const cost = formatCurrency(hasCost ? report.meta.total.cost[costDistribution].value : 0, hasCost ? report.meta.total.cost[costDistribution].units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costDistribution, costType, currency, description, groupBy, intl, onCostDistributionSelected, onCostTypeSelected, onCurrencySelected, query, showCostDistribution, showCostType, tabs, tagReportPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'payer_tenant_id' ||\n            groupBy === 'project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            this.getBackToLink(groupByKey)))),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostDistribution && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected }))),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getTotalCostDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }))))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    return {\n        isOptimizationsPath: queryFromRoute.optimizationsPath !== undefined,\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader)));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { handleCostDistributionSelected, handleCostTypeSelected, handleCurrencySelected, } from 'routes/views/utils/handles';\nimport { hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { FetchStatus } from 'store/common';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\n// eslint-disable-next-line no-shadow\nvar BreakdownTab;\n(function (BreakdownTab) {\n    BreakdownTab[\"costOverview\"] = \"cost-overview\";\n    BreakdownTab[\"historicalData\"] = \"historical-data\";\n    BreakdownTab[\"optimizations\"] = \"optimizations\";\n})(BreakdownTab || (BreakdownTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case BreakdownTab.costOverview:\n            return 'cost-overview';\n        case BreakdownTab.historicalData:\n            return 'historical-data';\n        case BreakdownTab.optimizations:\n            return 'optimizations';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: this.props.isOptimizationsTab ? 2 : 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { costOverviewComponent, historicalDataComponent, isRosFeatureEnabled, optimizationsBadgeComponent, optimizationsComponent, } = this.props;\n            const availableTabs = [];\n            if (costOverviewComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.costOverview,\n                });\n            }\n            if (historicalDataComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.historicalData,\n                });\n            }\n            if (optimizationsComponent && isRosFeatureEnabled) {\n                availableTabs.push({\n                    badge: optimizationsBadgeComponent,\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.optimizations,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, badge, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(React.Fragment, null,\n                    React.createElement(TabTitleText, null, this.getTabTitle(tab)),\n                    badge && React.createElement(\"span\", null, badge)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent, optimizationsComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === BreakdownTab.costOverview) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === BreakdownTab.historicalData) {\n                return historicalDataComponent;\n            }\n            else if (currentTab === BreakdownTab.optimizations) {\n                return optimizationsComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, val.badge, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === BreakdownTab.costOverview) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === BreakdownTab.historicalData) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n            else if (tab === BreakdownTab.optimizations) {\n                return intl.formatMessage(messages.optimizations);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.handleTabClick = (event, tabIndex) => {\n            const { closeOptimizationsDrawer } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    if (closeOptimizationsDrawer) {\n                        closeOptimizationsDrawer();\n                    }\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, costType, currency, description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, router, showCostDistribution, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress && reportFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.complete && reportFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === FetchStatus.complete;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costDistribution: costDistribution, costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostDistributionSelected: value => handleCostDistributionSelected(query, router, value), onCostTypeSelected: value => handleCostTypeSelected(query, router, value), onCurrencySelected: value => handleCurrencySelected(query, router, value), query: query, report: report, showCostDistribution: showCostDistribution, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nconst Breakdown = injectIntl(withRouter(BreakdownBase));\nexport default Breakdown;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { clusters = [] } = this.props;\n        if (clusters.length === 0) {\n            return null;\n        }\n        return clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { clusters, isOpen } = this.props;\n        return nextProps.clusters !== clusters || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { clusters, groupBy, intl, isOpen, title } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, {\n                groupBy,\n                name: title,\n            }), width: '50%' },\n            React.createElement(ClusterContent, { clusters: clusters })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import { Tooltip } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, intl, report, title } = this.props;\n        const { isOpen, showAll } = this.state;\n        const maxCharsPerName = 45; // Max (non-whitespace) characters that fit without overlapping card\n        const maxItems = 2; // Max items to show before adding \"more\" link\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        // Get clusters from all projects -- see https://issues.redhat.com/browse/COST-3371\n        const clusters = [];\n        computedItems.map(item => {\n            if (item.clusters) {\n                item.clusters.map(cluster => {\n                    if (!clusters.includes(cluster)) {\n                        clusters.push(cluster);\n                    }\n                });\n            }\n        });\n        if (clusters.length === 0) {\n            return null;\n        }\n        // Sort clusters from multiple projects\n        clusters.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n        for (const cluster of clusters) {\n            let clusterString = someClusters.length > 0 ? `, ${cluster}` : cluster;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (someClusters.length < maxItems) {\n                if (clusterString.length > maxCharsPerName) {\n                    clusterString = clusterString.slice(0, maxCharsPerName).trim().concat('...');\n                    someClusters.push(React.createElement(Tooltip, { content: cluster, enableFlip: true },\n                        React.createElement(\"span\", null, clusterString)));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", { \"data-testid\": \"cluster-lnk\", href: \"#/\", onClick: this.handleOpen }, intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { clusters: clusters, groupBy: groupBy, isOpen: isOpen, onClose: this.handleClose, title: title })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 475,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 80, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costBreakdownAriaDesc), ariaTitle: intl.formatMessage(messages.costBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 525,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costDistributionChart.styles';\nclass CostDistributionChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasPlatformDistributed = hasCost && report.meta.total.cost.platform_distributed;\n        const hasWorkerUnallocated = hasCost && report.meta.total.cost.worker_unallocated_distributed;\n        const hasCostPlatformDistributed = hasCost && report.meta.total.cost.platform_distributed;\n        const hasCostTotal = hasCost && report.meta.total.cost.total;\n        const platformDistributedUnits = hasPlatformDistributed ? report.meta.total.cost.platform_distributed.units : 'USD';\n        const workerUnallocatedUnits = hasWorkerUnallocated\n            ? report.meta.total.cost.worker_unallocated_distributed.units\n            : 'USD';\n        const totalCostUnits = hasCostTotal ? report.meta.total.cost.total.units : 'USD';\n        const platformDistributedValue = hasPlatformDistributed ? report.meta.total.cost.platform_distributed.value : 0;\n        const workerUnallocatedValue = hasWorkerUnallocated\n            ? report.meta.total.cost.worker_unallocated_distributed.value\n            : 0;\n        const totalCostValue = hasCostPlatformDistributed ? report.meta.total.cost.total.value : 0;\n        const platformDistributed = formatCurrency(hasPlatformDistributed ? report.meta.total.cost.platform_distributed.value : 0, platformDistributedUnits);\n        const workerUnallocated = formatCurrency(hasWorkerUnallocated ? report.meta.total.cost.worker_unallocated_distributed.value : 0, workerUnallocatedUnits);\n        const totalCost = formatCurrency(totalCostValue, totalCostUnits);\n        const platformDistributedLabel = intl.formatMessage(messages.platformDistributed);\n        const workerUnallocatedLabel = intl.formatMessage(messages.workerUnallocated);\n        const totalCostLabel = intl.formatMessage(messages.allOtherProjectCosts);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 30, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [platformDistributed, workerUnallocated, totalCost] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costDistributionAriaDesc), ariaTitle: intl.formatMessage(messages.costDistributionTitle), constrainToVisibleArea: true, data: [\n                { x: platformDistributedLabel, y: platformDistributedValue, units: platformDistributedUnits },\n                { x: workerUnallocatedLabel, y: workerUnallocatedValue, units: workerUnallocatedUnits },\n                { x: totalCostLabel, y: totalCostValue, units: totalCostUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: platformDistributedLabel,\n                },\n                {\n                    name: workerUnallocatedLabel,\n                },\n                {\n                    name: totalCostLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 325,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostDistributionChart = injectIntl(CostDistributionChartBase);\nexport default CostDistributionChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { CostDistributionType } from 'routes/views/utils/costDistribution';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './summaryModal.styles';\nconst reportType = ReportType.cost;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { costDistribution = CostDistributionType.total, intl, report, reportGroupBy, reportFetchStatus, } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost[costDistribution].value : 0, hasTotal ? report.meta.total.cost[costDistribution].units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost[costDistribution].value, units: report.meta.total.cost[costDistribution].units, value: _item.cost[costDistribution].value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const reportQuery = {\n        cost_type: costType,\n        currency,\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase)));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costDistribution, costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costDistribution: costDistribution, costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/views/details/components/summary/summaryModal';\nimport { CostDistributionType } from 'routes/views/utils/costDistribution';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { costDistribution = CostDistributionType.total, report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost[costDistribution].value, units: report.meta.total.cost[costDistribution].units, value: reportItem.cost[costDistribution].value })))));\n        };\n        this.getViewAll = () => {\n            const { costDistribution, costType, currency, groupBy, intl, isPlatformCosts, query, reportGroupBy, reportPathsType, } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, { ouiaId: \"view-all-btn\", onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }, intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costDistribution: costDistribution, costType: costType, currency: currency, groupBy: groupBy, groupByValue: isPlatformCosts ? platformCategoryKey : groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { intl, isPlatformCosts, reportGroupBy, reportFetchStatus } = this.props;\n        const title = intl.formatMessage(messages.breakdownSummaryTitle, {\n            value: isPlatformCosts ? platformCategoryKey.toLowerCase() : reportGroupBy,\n        });\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, title)),\n            React.createElement(CardBody, null, reportFetchStatus === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        cost_type: costType,\n        currency,\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryBase)));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== this.props.reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, report, intl, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || reportType === ReportType.volume) {\n            const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n            const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        query,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase)));\nexport default UsageChart;\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Cluster } from 'routes/views/details/components/cluster';\nimport { CostChart } from 'routes/views/details/components/costChart';\nimport { CostDistributionChart } from 'routes/views/details/components/costDistributionChart';\nimport { SummaryCard } from 'routes/views/details/components/summary';\nimport { UsageChart } from 'routes/views/details/components/usageChart';\nimport { styles } from 'routes/views/details/ocpDetails/detailsHeader.styles';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { CostOverviewWidgetType } from 'store/breakdown/costOverview/common/costOverviewCommon';\nimport { platformCategoryKey, tagPrefix } from 'utils/props';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, intl, report, title } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report, title: title }))));\n            }\n            else {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns cost distribution chart\n        this.getCostDistributionChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costDistributionTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costDistributionAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.platformDistributed)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.platformDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.workerUnallocated)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.workerUnallocatedDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostDistributionChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costDistribution, costType, currency, groupBy, isPlatformCosts, query } = this.props;\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTag = getGroupByTagKey(query);\n            let showWidget = false;\n            if (widget.reportSummary.showWidgetOnGroupBy) {\n                for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                    if (groupById === groupBy || groupByOrg || groupByTag) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (!showWidget && widget.reportSummary.showWidgetOnCategory) {\n                for (const categoryId of widget.reportSummary.showWidgetOnCategory) {\n                    if (isPlatformCosts && categoryId === platformCategoryKey) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costDistribution: costDistribution, costType: costType, currency: currency, isPlatformCosts: isPlatformCosts, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case CostOverviewWidgetType.cluster:\n                return this.getClusterChart(widget);\n            case CostOverviewWidgetType.cost:\n                return this.getCostChart(widget);\n            case CostOverviewWidgetType.costDistribution:\n                return this.getCostDistributionChart(widget);\n            case CostOverviewWidgetType.cpuUsage:\n                return this.getCpuUsageChart(widget);\n            case CostOverviewWidgetType.memoryUsage:\n                return this.getMemoryUsageChart(widget);\n            case CostOverviewWidgetType.reportSummary:\n                return this.getSummaryCard(widget);\n            case CostOverviewWidgetType.volumeUsage:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 725 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 725\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/views/components/charts/historicalCostChart';\nimport { CostDistributionType } from 'routes/views/utils/costDistribution';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, costDistribution = CostDistributionType.total, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl, } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, DatumType.cumulative, 'date', 'cost', costDistribution);\n        const currentInfrastructureCostData = transformReport(currentReport, DatumType.cumulative, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, DatumType.cumulative, 'date', 'cost', costDistribution);\n        const previousInfrastructureCostData = transformReport(previousReport, DatumType.cumulative, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost[costDistribution].units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase)));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip, getDateRange, } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === ReportType.cost;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase)));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 925 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 925\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, DatumType.rolling, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, DatumType.rolling, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, DatumType.rolling, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, DatumType.rolling, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, DatumType.rolling, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, DatumType.rolling, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === ReportType.instanceType || reportType === ReportType.storage;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase)));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataWidgetType } from 'store/breakdown/historicalData/common/historicalDataCommon';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === ReportPathsType.azure) {\n                return reportType === ReportType.instanceType ? 'virtual_machine' : reportType;\n            }\n            return reportType === ReportType.instanceType ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costDistribution, costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costDistribution: costDistribution, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costDistribution, costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costDistribution: costDistribution, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case HistoricalDataWidgetType.cost:\n                return this.getCostChart(widget);\n            case HistoricalDataWidgetType.trend:\n                return this.getTrendChart(widget);\n            case HistoricalDataWidgetType.usage:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { getCostDistribution as getCostDistributionFromLocaleStorage } from 'utils/localStorage';\n// eslint-disable-next-line no-shadow\nexport var CostDistributionType;\n(function (CostDistributionType) {\n    CostDistributionType[\"distributed\"] = \"distributed\";\n    CostDistributionType[\"total\"] = \"total\";\n})(CostDistributionType || (CostDistributionType = {}));\n// Returns cost type\nexport const getCostType = () => {\n    switch (getCostDistributionFromLocaleStorage()) {\n        case 'distributed':\n            return CostDistributionType.distributed;\n        case 'total':\n        default:\n            return CostDistributionType.total;\n    }\n};\n","import { addFilterToQuery, removeFilterFromQuery } from './filter';\nimport { getRouteForQuery } from './query';\nexport const handleSelected = (query, router, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    router.navigate(getRouteForQuery(newQuery, router.location, reset), { replace: true }); // Don't reset pagination\n};\nexport const handleCurrencySelected = (query, router, value, reset = false) => {\n    handleSelected(query, router, value, reset);\n};\nexport const handleCostTypeSelected = (query, router, value, reset = false) => {\n    handleSelected(query, router, value, reset);\n};\nexport const handleCostDistributionSelected = (query, router, value, reset = false) => {\n    handleSelected(query, router, value, reset);\n};\nexport const handleFilterAdded = (query, router, filter) => {\n    const filteredQuery = addFilterToQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handleFilterRemoved = (query, router, filter) => {\n    const filteredQuery = removeFilterFromQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handlePerPageSelect = (query, router, perPage) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n    const filteredQuery = getRouteForQuery(newQuery, router.location, true);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSetPage = (query, router, report, pageNumber) => {\n    const limit = report && report.meta && report.meta.filter && report.meta.filter.limit ? report.meta.filter.limit : 10;\n    const offset = pageNumber * limit - limit;\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSort = (query, router, sortType, isSortAscending, date = undefined) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.order_by = {};\n    newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n    if (date) {\n        newQuery.order_by.date = date;\n    }\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\n","import { getQueryRoute } from 'api/queries/query';\nexport const getRouteForQuery = (query, location, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: 0 });\n    }\n    return `${location.pathname}?${getQueryRoute(query)}`;\n};\n"],"names":["title","PageHeader","PageHeaderTitle","PageSection","Unavailable","styles","selector","display","alignItems","label","marginBottom","marginRight","whiteSpace","costDistributionOptions","messages","value","CostDistributionBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","costDistribution","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","description","desc","key","intl","options","push","toString","formatMessage","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CostDistributionConnect","connect","injectIntl","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","tagLink","marginLeft","global_spacer_sm","tagsContainer","global_spacer_3xl","marginTop","TagContentBase","getDataListItems","tagReport","result","item","data","val","values","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","groupBy","groupByValue","dataListItems","count","DataList","isCompact","TagContent","tagReportType","TagModalBase","getTagValueCount","length","handleClose","onClose","bind","componentDidMount","fetchTag","tagReportPathsType","tagQueryString","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","query","filter","account","Modal","width","isPlatformCosts","router","queryFromRoute","location","search","queryState","groupByOrgValue","filterByParams","filter_by","keys","indexOf","undefined","tagQuery","resolution","time_scope_units","time_scope_value","category","tagReportFetchStatus","mapDispatchToProps","TagModal","TagLinkBase","handleOpen","preventDefault","Boolean","href","onClick","cost","global_spacer_xl","global_spacer_md","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","header","backgroundColor","global_BackgroundColor_100","headerContent","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeader","buildDetailsLink","url","isOptimizationsPath","groupByKey","window","atob","newQuery","JSON","parse","group_by","getBackToLink","detailsURL","Link","to","routes","getTotalCost","report","hasCost","meta","total","format","units","currency","onCostDistributionSelected","onCostTypeSelected","onCurrencySelected","showCostDistribution","showCostType","filterByAccount","groupByOrg","groupByTag","showTags","TitleSizes","optimizationsPath","BreakdownTab","getIdKeyForTab","tab","costOverview","historicalData","optimizations","BreakdownBase","activeTabKey","isOptimizationsTab","getAvailableTabs","costOverviewComponent","historicalDataComponent","isRosFeatureEnabled","optimizationsBadgeComponent","optimizationsComponent","availableTabs","contentRef","badge","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","TabContent","ref","getTabItem","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","closeOptimizationsDrawer","updateReport","fetchReport","reportPathsType","reportType","reportQueryString","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","name","ClusterModal","ClusterBase","showAll","someClusters","allClusters","computedItems","getComputedReportItems","idKey","includes","sort","a","b","clusterString","slice","trim","concat","Tooltip","enableFlip","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","CostDistributionChartBase","hasPlatformDistributed","platform_distributed","hasWorkerUnallocated","worker_unallocated_distributed","hasCostPlatformDistributed","hasCostTotal","platformDistributedUnits","workerUnallocatedUnits","totalCostUnits","platformDistributedValue","workerUnallocatedValue","totalCostValue","platformDistributed","workerUnallocated","totalCost","platformDistributedLabel","workerUnallocatedLabel","totalCostLabel","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","items","_item","formatOptions","totalValue","reportQuery","cost_type","exclude","SummaryModalContent","SummaryModalBase","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","ouiaId","handleBulletChartModalOpen","type","ButtonType","ButtonVariant","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","limit","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasCapacity","capacityUnits","hasRequest","request","requestUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","bodyContent","rel","target","chartName","getCostDistributionChart","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","showWidgetOnCategory","categoryId","usePlaceholder","getVolumeUsageChart","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","xl2","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","getTrendChart","getUsageChart","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","CostDistributionType","handleSelected","reset","stringify","navigate","replace","handleCurrencySelected","handleCostTypeSelected","handleCostDistributionSelected","handleFilterAdded","filteredQuery","handleFilterRemoved","handlePerPageSelect","perPage","handleSetPage","pageNumber","offset","handleSort","sortType","isSortAscending","date","order_by","getRouteForQuery","pathname"],"sourceRoot":""}