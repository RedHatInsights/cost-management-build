{"version":3,"file":"js/rhelBreakdown.2e67836cee3aa92b5b8d.js","mappings":"4XAKA,MAAMA,GAAkB,SAAsB,CAACC,GAASC,YAC7C,CACHC,cAAeC,EAAA,iBAAwCH,GACvDI,QAASD,EAAA,wBAA+CH,GACxDC,YAGFI,GAAe,IAAAC,SAAQP,EAAiB,CAAC,EAA1B,CAA6B,K,uBCPlD,MAAM,GAAkB,SAAsB,CAACC,EAAOO,KAC3C,CACHL,cAAeM,EAAA,iBAA0CR,GACzDI,QAASI,EAAA,wBAAiDR,OAG5DS,GAAiB,IAAAH,SAAQ,EAAiB,CAAC,EAA1B,CAA6B,KCW9CI,GAAa,QAAWC,EAAA,oBACxBC,EAAa,SACbC,EAAkB,SAElB,GAAkB,SAAsB,CAACb,GAASc,OAAMC,aAC1D,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,EAAmBH,EAAehB,MAAQoB,KAAKC,MAAMC,OAAOC,KAAKP,EAAehB,aAAUwB,EAC1FC,GAAU,QAAaT,GACvBU,GAAe,QAAgBV,GAC/BW,GAAW,UACXC,EAAW,CACbC,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBC,UAAWC,OAAOC,OAAO,CAAC,EAAIhB,GAAoBA,EAAiBc,WAAad,EAAiBc,WACjGG,QAASF,OAAOC,OAAO,CAAC,EAAIhB,GAAoBA,EAAiBiB,SAAWjB,EAAiBiB,SAC7FC,SAAUH,OAAOC,OAAO,CAAC,EAAIV,GAAW,CAAE,CAACA,GAAUC,KAEnDY,GAAoB,QAASJ,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGP,GAAW,CAAEW,cAAUf,EAAWG,WAAUM,UAAWC,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGP,EAASK,WAAaR,GAA4B,MAAjBC,GAAwB,CAAE,CAACD,QAAUD,OAC1NgB,EAAS,kBAA6BxC,EAAOa,EAAiBD,EAAY0B,GAC1EG,EAAc,uBAAkCzC,EAAOa,EAAiBD,EAAY0B,GACpFI,EAAoB,6BAAwC1C,EAAOa,EAAiBD,EAAY0B,GAChGK,GAAuB,OAAkB,MACzCC,EAAY,qBAAmC5C,EAAO,QAAkB2C,GACxEE,EAAuB,gCAA8C7C,EAAO,QAAkB2C,GAC9F1C,EAAQe,EAAe,MAAqBA,EAAe,MAAqBU,EACtF,MAAO,CACHoB,sBAAuB,kBAAoBzC,EAAc,CAAEsB,SAAUA,EAAUF,QAASA,EAASe,OAAQA,EAAQvC,MAAOA,IACxH0B,WACAoB,YAAa/B,EAAe,MAC5BN,aACAsC,gBAAiBlC,EAAKmC,cAAcC,EAAA,oBACpCzB,UACAC,eACAyB,wBAAyB,kBAAoB1C,EAAgB,CAAEkB,SAAUA,IACzEiB,WAAW,QAAgBA,EAAW,UACtCC,uBACAO,aAAc,SACdC,MAAOrC,EACPwB,SACAC,cACAC,oBACA9B,aACAC,kBACAyB,oBACAgB,mBAAoB,SACpBrD,QACH,IAECsD,EAAqB,CACvBC,YAAa,kBAGjB,GADsB,EAAAC,EAAA,KAAW,QAAW,IAAAnD,SAAQ,EAAiBiD,EAAzB,CAA6C,M","sources":["webpack:///./src/routes/views/details/rhelBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/rhelBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/rhelBreakdown/rhelBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { rhelCostOverviewSelectors } from 'store/breakdown/costOverview/rhelCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { title }) => {\n    return {\n        selectWidgets: rhelCostOverviewSelectors.selectWidgets(state),\n        widgets: rhelCostOverviewSelectors.selectCurrentWidgets(state),\n        title,\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { rhelHistoricalDataSelectors } from 'store/breakdown/historicalData/rhelHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: rhelHistoricalDataSelectors.selectWidgets(state),\n        widgets: rhelHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/rhelQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = formatPath(routes.rhelDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.rhel;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const detailsPageState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = getCurrency();\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign({}, (detailsPageState && detailsPageState.filter_by && detailsPageState.filter_by)),\n        exclude: Object.assign({}, (detailsPageState && detailsPageState.exclude && detailsPageState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { category: undefined, currency, filter_by: Object.assign(Object.assign({}, newQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { currency: currency, groupBy: groupBy, report: report, title: title }),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.rhelDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.rhel),\n        providersFetchStatus,\n        providerType: ProviderType.rhel,\n        query: queryFromRoute,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.rhel,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst RhelBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default RhelBreakdown;\n"],"names":["mapStateToProps","state","title","selectWidgets","rhelCostOverview","widgets","CostOverview","connect","props","rhelHistoricalData","HistoricalData","detailsURL","routes","reportType","reportPathsType","intl","router","queryFromRoute","location","search","detailsPageState","JSON","parse","window","atob","undefined","groupBy","groupByValue","currency","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","exclude","group_by","reportQueryString","category","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","formatMessage","messages","historicalDataComponent","providerType","query","tagReportPathsType","mapDispatchToProps","fetchReport","injectIntl"],"sourceRoot":""}