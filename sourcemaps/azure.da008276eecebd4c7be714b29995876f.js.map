{"version":3,"file":"js/azure.1669899482494.e36c308cf403a20bbba6.js","mappings":"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","sources":["webpack:///./src/routes/views/details/azureBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/azureBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/azureBreakdown/azureBreakdown.tsx","webpack:///./src/utils/computedReport/getComputedAzureReportItems.ts","webpack:///./src/routes/views/details/azureDetails/azureDetails.styles.ts","webpack:///./src/routes/views/details/azureDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/azureDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/azureDetails/detailsTable.tsx","webpack:///./src/routes/views/details/azureDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/azureDetails/azureDetails.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.azure;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { currency: currency, groupBy: groupBy, report: report }),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.azureDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.azure),\n        providersError,\n        providersFetchStatus,\n        providerType: ProviderType.azure,\n        query: queryFromRoute,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.azure,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = TagPathsType.azure;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.azureDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.azure),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nconst reportPathsType = ReportPathsType.azure;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, isAllSelected, report, selectedItems, intl } = this.props;\n            if (!report) {\n                return;\n            }\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const isDisabled = label === `no-${groupBy}` || label === `no-${groupByTagKey}`;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy,\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport || prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.azure;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.azure, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReportFetchStatus,\n        tagReport,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getRouteForQuery, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/history';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.azure;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { history, intl, query, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(history, query, perPage), onSetPage: (event, pageNumber) => handleSetPage(history, query, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.azure),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { history, query, report, reportFetchStatus, reportQueryString } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(history, query, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { history, query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(history, query, filter), onFilterRemoved: filter => handleFilterRemoved(history, query, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, history, location, query, reportQueryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, reportQueryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, history, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.azureDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.azure, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(history, query, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.azure),\n        providersError,\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n"],"names":["mapStateToProps","state","props","selectWidgets","azureCostOverview","widgets","CostOverview","injectIntl","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","queryFromRoute","location","search","groupBy","groupByValue","currency","featureFlags","undefined","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","exclude","group_by","reportQueryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","query","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","resource_location","service_name","styles","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","padding","headerContent","display","justifyContent","headerContentLeft","headerContentRight","global_spacer_sm","groupByOptions","label","value","DetailsHeaderBase","render","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","onSelect","isDisabled","onSelected","options","showTags","Boolean","format","units","DetailsHeader","DetailsTableBase","constructor","super","arguments","columns","rows","initDatum","groupByTagKey","isAllSelected","selectedItems","computedItems","idKey","name","orderBy","length","isSortable","map","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","desc","id","actions","getActions","to","basePath","toString","push","cells","isOpen","selected","find","val","selectionDisabled","setState","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","tagReportType","DetailsToolbarBase","defaultState","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","tagQueryString","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","baseQuery","delta","offset","order_by","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","groupById","getExportModal","items","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","history","page","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","parse","replace","isSelected","newItems","updateReport","bind","prevState","noReport","noLocation"],"sourceRoot":""}