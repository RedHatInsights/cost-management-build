{"version":3,"file":"js/8490.1670957344271.49bddb1d1931aa1cbf20.js","mappings":"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","sources":["webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/routes/components/currency/currency.styles.ts","webpack:///./src/routes/components/currency/currency.tsx","webpack:///./src/routes/state/noData/noDataState.tsx","webpack:///./src/routes/state/noData/noData.tsx","webpack:///./src/routes/components/icons/costIcon/costIcon.tsx","webpack:///./src/routes/state/noProviders/noProvidersState.styles.ts","webpack:///./src/routes/state/noProviders/noProvidersState.tsx","webpack:///./src/routes/state/noProviders/noProviders.tsx","webpack:///./src/routes/state/notAvailable/notAvailable.tsx","webpack:///./src/routes/views/utils/handles.ts","webpack:///./src/routes/views/utils/providers.ts","webpack:///./src/routes/views/utils/query.ts","webpack:///./src/utils/dates.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currency, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: \"currencyOverride\", id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCurrency(selection.value); // Set currency units via local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.currency)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport default Currency;\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(NoDataStateBase);\nexport { NoDataState };\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default NoData;\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CostIcon } from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case ProviderType.aws:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case ProviderType.azure:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case ProviderType.gcp:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case ProviderType.ibm:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case ProviderType.ocp:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(NoProvidersStateBase);\nexport { NoProvidersState };\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default NoProviders;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(Unavailable, null))));\n};\nexport default NotAvailable;\n","import { addFilterToQuery, removeFilterFromQuery } from './filter';\nimport { getRouteForQuery } from './query';\nexport const handleCurrencySelected = (query, router, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    router.navigate(getRouteForQuery(newQuery, router.location, reset), { replace: true });\n};\nexport const handleCostTypeSelected = (query, router, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    router.navigate(getRouteForQuery(newQuery, router.location, reset), { replace: true }); // Don't reset pagination\n};\nexport const handleFilterAdded = (query, router, filter) => {\n    const filteredQuery = addFilterToQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handleFilterRemoved = (query, router, filter) => {\n    const filteredQuery = removeFilterFromQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handlePerPageSelect = (query, router, perPage) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n    const filteredQuery = getRouteForQuery(newQuery, router.location, true);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSetPage = (query, router, report, pageNumber) => {\n    const limit = report && report.meta && report.meta.filter && report.meta.filter.limit ? report.meta.filter.limit : 10;\n    const offset = pageNumber * limit - limit;\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSort = (query, router, sortType, isSortAscending, date = undefined) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.order_by = {};\n    newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n    if (date) {\n        newQuery.order_by.date = date;\n    }\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\n","// eslint-disable-next-line no-shadow\nvar DataType;\n(function (DataType) {\n    DataType[\"currentMonthData\"] = \"current_month_data\";\n    DataType[\"hasData\"] = \"has_data\";\n    DataType[\"previousMonthData\"] = \"previous_month_data\";\n})(DataType || (DataType = {}));\n// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.currentMonthData);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.hasData);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.previousMonthData);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, DataType.currentMonthData);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, DataType.hasData);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, DataType.previousMonthData);\n};\n","import { getQueryRoute } from 'api/queries/query';\nexport const getRouteForQuery = (query, location, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: 0 });\n    }\n    return `${location.pathname}?${getQueryRoute(query)}`;\n};\n","import { intl } from 'components/i18n';\nimport { endOfMonth, format, startOfMonth } from 'date-fns';\nimport messages from 'locales/messages';\nexport const formatDate = (date, isFormatted = true) => {\n    return date && isFormatted ? format(date, 'yyyy-MM-dd') : date;\n};\nexport const formatStartEndDate = (startDate, endDate, isFormatted = true) => {\n    return {\n        end_date: formatDate(endDate, isFormatted),\n        start_date: formatDate(startDate, isFormatted),\n    };\n};\nexport const getToday = (hrs = 0, min = 0, sec = 0, ms = 0) => {\n    const today = new Date();\n    today.setHours(hrs);\n    today.setMinutes(min);\n    today.setSeconds(sec);\n    today.setMilliseconds(ms);\n    return today;\n};\nexport const getNoDataForDateRangeString = (message = messages.noDataForDate, offset = 1) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(1);\n    if (offset) {\n        startDate.setMonth(startDate.getMonth() - offset);\n        endDate.setMonth(endDate.getMonth() - offset);\n    }\n    const dateRange = intl.formatDateTimeRange(startDate, endDate, {\n        day: 'numeric',\n        month: 'long',\n    });\n    return intl.formatMessage(message, { dateRange });\n};\nexport const getForDateRangeString = (value, message = messages.forDate, offset = 1) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(1);\n    if (offset) {\n        startDate.setMonth(startDate.getMonth() - offset);\n        endDate.setMonth(endDate.getMonth() - offset);\n    }\n    const dateRange = intl.formatDateTimeRange(startDate, endDate, {\n        day: 'numeric',\n        month: 'long',\n    });\n    return intl.formatMessage(message, { dateRange, value });\n};\nexport const getSinceDateRangeString = (message = messages.sinceDate) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(1);\n    const dateRange = intl.formatDateTimeRange(startDate, endDate, {\n        day: 'numeric',\n        month: 'long',\n    });\n    return intl.formatMessage(message, { dateRange });\n};\nexport const getTotalCostDateRangeString = (value, message = messages.breakdownTotalCostDate) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(1);\n    const dateRange = intl.formatDateTimeRange(startDate, endDate, {\n        day: 'numeric',\n        month: 'long',\n    });\n    return intl.formatMessage(message, { dateRange, value });\n};\nexport const getMonthDate = (offset, isFormatted = true) => {\n    const today = getToday();\n    if (offset) {\n        today.setDate(1); // Required to obtain correct month\n        today.setMonth(today.getMonth() - offset);\n    }\n    return formatStartEndDate(startOfMonth(today), offset ? endOfMonth(today) : today, isFormatted);\n};\nexport const getCurrentMonthDate = (isFormatted = true) => {\n    return getMonthDate(0, isFormatted);\n};\n// Returns offset + 1 days, including today's date. See https://issues.redhat.com/browse/COST-1117\nexport const getLastDaysDate = (offset, isFormatted = true) => {\n    const endDate = getToday();\n    const startDate = getToday();\n    startDate.setDate(startDate.getDate() - offset);\n    return formatStartEndDate(startDate, endDate, isFormatted);\n};\n// Returns 31 days, including today's date\nexport const getLast30DaysDate = (isFormatted = true) => {\n    return getLastDaysDate(30, isFormatted);\n};\n// Returns 61 days, including today's date\nexport const getLast60DaysDate = (isFormatted = true) => {\n    return getLastDaysDate(60, isFormatted);\n};\n// Returns 91 days, including today's date\nexport const getLast90DaysDate = (isFormatted = true) => {\n    return getLastDaysDate(90, isFormatted);\n};\n"],"names":["getProvidersQuery","query","stringify","encode","indices","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","currency","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CurrencyConnect","connect","injectIntl","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","Button","onClick","window","location","reload","NoDataState","title","PageHeader","PageHeaderTitle","Main","src","alt","iconSpacer","marginLeft","viewSources","marginTop","global_spacer_lg","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","titleKey","component","NoProvidersState","Unavailable","handleCurrencySelected","router","reset","newQuery","JSON","parse","navigate","replace","handleCostTypeSelected","handleFilterAdded","filter","filteredQuery","handleFilterRemoved","handlePerPageSelect","perPage","limit","handleSetPage","report","pageNumber","meta","offset","handleSort","sortType","isSortAscending","date","order_by","DataType","_getOcpProvider","ocpProviders","uuid","result","data","provider","infrastructure","filterProviders","providers","sourceType","source_type","toLowerCase","count","length","_hasData","datumType","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","currentMonthData","hasCloudData","hasData","hasCloudPreviousMonthData","previousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasPreviousMonthData","getRouteForQuery","pathname","formatDate","isFormatted","formatStartEndDate","startDate","endDate","end_date","start_date","getToday","hrs","min","sec","ms","today","Date","setHours","setMinutes","setSeconds","setMilliseconds","getNoDataForDateRangeString","message","setDate","setMonth","getMonth","dateRange","day","month","getForDateRangeString","getSinceDateRangeString","getTotalCostDateRangeString","getCurrentMonthDate","getMonthDate","getLastDaysDate","getDate","getLast30DaysDate","getLast60DaysDate","getLast90DaysDate"],"sourceRoot":""}