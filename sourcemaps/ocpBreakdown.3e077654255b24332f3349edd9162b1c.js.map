{"version":3,"file":"js/ocpBreakdown.b198ea2c24d1aa393107.js","mappings":"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","sources":["webpack:///./src/routes/details/ocpBreakdown/costOverview.tsx","webpack:///./src/routes/details/ocpBreakdown/historicalData.tsx","webpack:///./src/routes/details/ocpBreakdown/optimizationsBadge.tsx","webpack:///./src/routes/details/ocpBreakdown/optimizationsBreakdown.tsx","webpack:///./src/routes/details/ocpBreakdown/ocpBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { title }) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n        title,\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { Badge } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/rosQuery';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = RosPathsType.recommendations;\nconst reportType = RosType.ros;\nclass OptimizationsBadgeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { intl, report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        return React.createElement(Badge, { screenReaderText: intl.formatMessage(messages.optimizationsDetails, { count }) }, count);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // Don't need pagination here\n    const reportQuery = Object.assign({}, (groupBy && {\n        [groupBy]: groupByValue, // project filter\n    }));\n    const reportQueryString = getQuery(reportQuery);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nconst OptimizationsBadge = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OptimizationsBadgeBase)));\nexport { OptimizationsBadge };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport messages from 'locales/messages';\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { OptimizationsTable, OptimizationsToolbar } from 'routes/components/optimizations';\nimport { Loading } from 'routes/components/page/loading';\nimport { NoOptimizations } from 'routes/components/page/noOptimizations';\nimport { NotAvailable } from 'routes/components/page/notAvailable';\nimport { styles } from 'routes/optimizations/optimizations.styles';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { getOrderById, getOrderByValue } from 'routes/utils/orderBy';\nimport * as queryUtils from 'routes/utils/query';\nimport { FetchStatus } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { uiActions } from 'store/ui';\nconst baseQuery = {\n    limit: 10,\n    offset: 0,\n    order_by: {\n        last_reported: 'desc',\n    },\n};\nconst reportType = RosType.ros;\nconst reportPathsType = RosPathsType.recommendations;\nconst OptimizationsBreakdown = () => {\n    const [query, setQuery] = useState(Object.assign({}, baseQuery));\n    const intl = useIntl();\n    const { closeOptimizationsDrawer, report, reportError, reportFetchStatus, reportQueryString } = useMapToProps({\n        query,\n    });\n    const getPagination = (isDisabled = false, isBottom = false) => {\n        const count = report && report.meta ? report.meta.count : 0;\n        const limit = report && report.meta ? report.meta.limit : baseQuery.limit;\n        const offset = report && report.meta ? report.meta.offset : baseQuery.offset;\n        const page = Math.trunc(offset / limit + 1);\n        return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handleOnPerPageSelect(perPage), onSetPage: (event, pageNumber) => handleOnSetPage(pageNumber), page: page, perPage: limit, titles: {\n                paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                    title: intl.formatMessage(messages.openShift),\n                    placement: isBottom ? 'bottom' : 'top',\n                }),\n            }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n    };\n    const getTable = () => {\n        return (React.createElement(OptimizationsTable, { filterBy: query.filter_by, isLoading: reportFetchStatus === FetchStatus.inProgress, onSort: (sortType, isSortAscending) => handleOnSort(sortType, isSortAscending), orderBy: query.order_by, report: report, reportQueryString: reportQueryString }));\n    };\n    const getToolbar = () => {\n        const itemsPerPage = report && report.meta ? report.meta.limit : 0;\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const isDisabled = itemsTotal === 0;\n        return (React.createElement(OptimizationsToolbar, { isDisabled: isDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onFilterAdded: filter => handleOnFilterAdded(filter), onFilterRemoved: filter => handleOnFilterRemoved(filter), pagination: getPagination(isDisabled), query: query }));\n    };\n    const handleOnFilterAdded = filter => {\n        const newQuery = queryUtils.handleOnFilterAdded(query, filter);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const handleOnFilterRemoved = filter => {\n        const newQuery = queryUtils.handleOnFilterRemoved(query, filter);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const handleOnPerPageSelect = perPage => {\n        const newQuery = queryUtils.handleOnPerPageSelect(query, perPage, true);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const handleOnSetPage = pageNumber => {\n        const newQuery = queryUtils.handleOnSetPage(query, report, pageNumber, true);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const handleOnSort = (sortType, isSortAscending) => {\n        const newQuery = queryUtils.handleOnSort(query, sortType, isSortAscending);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const itemsTotal = report && report.meta ? report.meta.count : 0;\n    const isDisabled = itemsTotal === 0;\n    const title = intl.formatMessage(messages.optimizations);\n    const hasOptimizations = report && report.meta && report.meta.count > 0;\n    if (reportError) {\n        return React.createElement(NotAvailable, { title: title });\n    }\n    if (!query.filter_by && !hasOptimizations && reportFetchStatus === FetchStatus.complete) {\n        return React.createElement(NoOptimizations, null);\n    }\n    return (React.createElement(React.Fragment, null,\n        getToolbar(),\n        reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, { body: intl.formatMessage(messages.optimizationsLoadingStateDesc), heading: intl.formatMessage(messages.optimizationsLoadingStateTitle) })) : (React.createElement(React.Fragment, null,\n            getTable(),\n            React.createElement(\"div\", { style: styles.pagination }, getPagination(isDisabled, true))))));\n};\nconst useQueryFromRoute = () => {\n    const location = useLocation();\n    return parseQuery(location.search);\n};\n// eslint-disable-next-line no-empty-pattern\nconst useMapToProps = ({ query }) => {\n    const dispatch = useDispatch();\n    const queryFromRoute = useQueryFromRoute();\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const order_by = getOrderById(query) || getOrderById(baseQuery);\n    const order_how = getOrderByValue(query) || getOrderByValue(baseQuery);\n    const reportQuery = Object.assign(Object.assign(Object.assign({}, (groupBy && {\n        [groupBy]: groupByValue, // Flattened project filter\n    })), query.filter_by), { limit: query.limit, offset: query.offset, order_by,\n        order_how });\n    const reportQueryString = getQuery(reportQuery);\n    const report = useSelector((state) => rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString));\n    const reportFetchStatus = useSelector((state) => rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString));\n    const reportError = useSelector((state) => rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString));\n    useEffect(() => {\n        if (!reportError && reportFetchStatus !== FetchStatus.inProgress) {\n            dispatch(rosActions.fetchRosReport(reportPathsType, reportType, reportQueryString));\n        }\n    }, [query]);\n    return {\n        closeOptimizationsDrawer: uiActions.closeOptimizationsDrawer,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n};\nexport { OptimizationsBreakdown };\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { filterProviders } from 'routes/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getCostDistribution, getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nimport { OptimizationsBadge } from './optimizationsBadge';\nimport { OptimizationsBreakdown } from './optimizationsBreakdown';\nconst detailsURL = formatPath(routes.ocpDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const isCostDistributionFeatureEnabled = featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state);\n    const costDistribution = groupBy === 'project' && isCostDistributionFeatureEnabled ? getCostDistribution() : undefined;\n    const currency = getCurrency();\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        currency,\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costDistribution,\n        costOverviewComponent: (React.createElement(CostOverview, { costDistribution: costDistribution, currency: currency, groupBy: groupBy, isCostDistributionFeatureEnabled: featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state), isPlatformCosts: queryFromRoute && queryFromRoute.isPlatformCosts, report: report, title: title })),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { costDistribution: costDistribution, currency: currency }),\n        isOptimizationsTab: queryFromRoute.optimizationsTab !== undefined,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        optimizationsBadgeComponent: React.createElement(OptimizationsBadge, null),\n        optimizationsComponent: groupBy === 'project' && groupByValue !== '*' ? React.createElement(OptimizationsBreakdown, null) : undefined,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        providerType: ProviderType.ocp,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        showCostDistribution: groupBy === 'project',\n        tagPathsType: TagPathsType.ocp,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    closeOptimizationsDrawer: uiActions.closeOptimizationsDrawer,\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default OcpBreakdown;\n"],"names":["mapStateToProps","state","title","selectWidgets","ocpCostOverview","widgets","CostOverview","connect","props","ocpHistoricalData","HistoricalData","reportPathsType","reportType","OptimizationsBadgeBase","constructor","super","arguments","this","defaultState","Object","assign","updateReport","fetchReport","reportQueryString","componentDidMount","render","intl","report","count","meta","Badge","screenReaderText","formatMessage","messages","router","queryFromRoute","location","search","groupBy","groupByValue","reportQuery","reportError","reportFetchStatus","mapDispatchToProps","OptimizationsBadge","injectIntl","baseQuery","limit","offset","order_by","last_reported","OptimizationsBreakdown","query","setQuery","useState","useIntl","closeOptimizationsDrawer","useMapToProps","getPagination","isDisabled","isBottom","page","Math","trunc","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","handleOnPerPageSelect","onSetPage","pageNumber","handleOnSetPage","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","newQuery","hasOptimizations","filter_by","itemsPerPage","itemsTotal","onFilterAdded","filter","handleOnFilterAdded","onFilterRemoved","handleOnFilterRemoved","pagination","getToolbar","body","heading","filterBy","isLoading","onSort","sortType","isSortAscending","handleOnSort","orderBy","style","dispatch","useDispatch","useLocation","useQueryFromRoute","order_how","useSelector","useEffect","ui","detailsURL","routes","queryState","isCostDistributionFeatureEnabled","featureFlags","costDistribution","undefined","currency","resolution","time_scope_units","time_scope_value","isPlatformCosts","category","exclude","group_by","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","isOptimizationsTab","optimizationsTab","isRosFeatureEnabled","optimizationsBadgeComponent","optimizationsComponent","providerType","showCostDistribution","tagPathsType"],"sourceRoot":""}