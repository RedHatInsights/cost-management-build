{"version":3,"file":"js/overview.63b3ba6ca25f6b731f99.js","mappings":"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","sources":["webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/routes/views/components/perspective/perspective.tsx","webpack:///./src/routes/views/overview/components/dashboardBase.tsx","webpack:///./src/routes/views/overview/components/optimizationsSummary/optimizations.styles.ts","webpack:///./src/routes/views/overview/components/optimizationsSummary/optimizationsSummary.tsx","webpack:///./src/routes/views/overview/components/chartComparison.tsx","webpack:///./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack:///./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboard.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack:///./src/routes/views/overview/overview.styles.ts","webpack:///./src/routes/views/overview/overview.tsx","webpack:///./src/api/queries/overviewQuery.ts","webpack:///./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\n// RHEL options\nconst rhelOptions = [{ label: messages.perspectiveValues, value: 'rhel' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst Perspective = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, hasRhel, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isRhelTab, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    // Note isInfrastructureTab and isRhelTab will be undefined for cost explorer\n    if (isInfrastructureTab !== undefined || isRhelTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n            }));\n        }\n        else if (isRhelTab) {\n            if (hasRhel) {\n                options.push(...rhelOptions);\n            }\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        if (hasRhel) {\n            options.push(...rhelOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nexport default Perspective;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, currency, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details && widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency })))));\n    }))));\nexport default DashboardBase;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nexport const styles = {\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n};\n","import './optimizationsSummary.scss';\nimport { Button, ButtonVariant, Card, CardBody, CardTitle, Popover, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { FetchStatus } from 'store/common';\nimport { formatPath } from 'utils/paths';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './optimizations.styles';\nconst OptimizationsSummaryBase = ({ intl, report, status, title }) => {\n    const count = report && report.meta ? report.meta.count : 0;\n    const description = intl.formatMessage(messages.optimizationsDetails, { count });\n    return (React.createElement(Card, { className: \"summary\" },\n        React.createElement(CardTitle, null,\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                intl.formatMessage(title),\n                React.createElement(\"span\", { style: styles.infoIcon },\n                    React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.optimizationsInfoArialLabel), enableFlip: true, bodyContent: React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.optimizationsInfo)) },\n                        React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.optimizationsInfoButtonArialLabel), variant: ButtonVariant.plain },\n                            React.createElement(OutlinedQuestionCircleIcon, null)))))),\n        React.createElement(CardBody, null, status === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { width: \"16%\" }),\n            React.createElement(Skeleton, { className: \"skeleton\", width: skeletonWidth.md }))) : count > 0 ? (React.createElement(Link, { to: formatPath(routes.optimizations.path) }, description)) : (description))));\n};\nconst OptimizationsSummary = injectIntl(OptimizationsSummaryBase);\nexport default OptimizationsSummary;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ComputedReportItemType, DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { getComputedForecast, transformForecast, transformForecastCone, } from 'routes/views/components/charts/common/chartDatumForecast';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { OptimizationsSummary } from 'routes/views/overview/components/optimizationsSummary';\nimport { DashboardChartType } from 'store/dashboard/common/dashboardCommon';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\n// eslint-disable-next-line no-shadow\nvar Comparison;\n(function (Comparison) {\n    Comparison[\"cumulative\"] = \"cumulative\";\n    Comparison[\"daily\"] = \"daily\";\n})(Comparison || (Comparison = {}));\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            currentComparison: Comparison.cumulative,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === DashboardChartType.dailyTrend) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.dailyCost) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === DashboardChartType.trend) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.usage) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: Comparison.daily },\n                { label: cumulativeTitle, value: Comparison.cumulative, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === Comparison.daily;\n            const datumType = daily ? DatumType.rolling : trend.datumType;\n            const computedForecast = getComputedForecast(forecast, report, computedForecastItem, datumType);\n            const forecastData = transformForecast(computedForecast, datumType, computedForecastItem);\n            const forecastConeData = transformForecastCone(computedForecast, datumType, computedForecastItem);\n            return { forecastData, forecastConeData };\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === ComputedReportItemType.usage) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getOptimizationsSummary = () => {\n            const { rosReportFetchStatus, rosReport, titleKey } = this.props;\n            return React.createElement(OptimizationsSummary, { status: rosReportFetchStatus, report: rosReport, title: titleKey });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({ activeTabKey: tabIndex });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, details, fetchForecasts, fetchReports, fetchRosReports, id, isRosFeatureEnabled, trend, updateTab, widgetId, } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (trend && trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n        if (!details.showOptimizations && fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (details.showOptimizations && fetchRosReports && isRosFeatureEnabled) {\n            fetchRosReports(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType || prevProps.currency !== currency) {\n            fetchReports(widgetId);\n            if (trend && trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details, isRosFeatureEnabled } = this.props;\n        if (details.showOptimizations) {\n            return isRosFeatureEnabled ? this.getOptimizationsSummary() : null;\n        }\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport default DashboardWidgetBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, AwsDashboardTab } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsDashboardTab.services:\n            return 'service';\n        case AwsDashboardTab.accounts:\n            return 'account';\n        case AwsDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), costType: getCostType(), getIdKeyForTab, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors, AwsOcpDashboardTab } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsOcpDashboardTab.services:\n            return 'service';\n        case AwsOcpDashboardTab.accounts:\n            return 'account';\n        case AwsOcpDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), costType: getCostType(), getIdKeyForTab, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, AzureDashboardTab } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureDashboardTab.service_names:\n            return 'service_name';\n        case AzureDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, AzureOcpDashboardTab, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureOcpDashboardTab.service_names:\n            return 'service_name';\n        case AzureOcpDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureOcpDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors, GcpDashboardTab } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpDashboardTab.regions:\n            return 'region';\n        case GcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors, GcpOcpDashboardTab } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpOcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpOcpDashboardTab.regions:\n            return 'region';\n        case GcpOcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors, IbmDashboardTab } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case IbmDashboardTab.services:\n            return 'service';\n        case IbmDashboardTab.projects:\n            return 'project';\n        case IbmDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, OcpCloudDashboardTab, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpCloudDashboardTab.accounts:\n            return 'account';\n        case OcpCloudDashboardTab.regions:\n            return 'region';\n        case OcpCloudDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, OcpDashboardTab } from 'store/dashboard/ocpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { rosSelectors } from 'store/ros';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpDashboardTab.clusters:\n            return 'cluster';\n        case OcpDashboardTab.nodes:\n            return 'node';\n        case OcpDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    })), (widget.rosPathsType &&\n        widget.rosType && {\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        rosReport: rosSelectors.selectRos(state, widget.rosPathsType, widget.rosType, queries.recommendations),\n        rosReportFetchStatus: rosSelectors.selectRosFetchStatus(state, widget.rosPathsType, widget.rosType, queries.recommendations),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    fetchRosReports: ocpDashboardActions.fetchWidgetRosReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardActions, rhelDashboardSelectors, RhelDashboardTab } from 'store/dashboard/rhelDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './rhelDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case RhelDashboardTab.clusters:\n            return 'cluster';\n        case RhelDashboardTab.nodes:\n            return 'node';\n        case RhelDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = rhelDashboardSelectors.selectWidget(state, widgetId);\n    const queries = rhelDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: rhelDashboardActions.fetchWidgetForecasts,\n    fetchReports: rhelDashboardActions.fetchWidgetReports,\n    updateTab: rhelDashboardActions.changeWidgetTab,\n};\nconst RhelDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { RhelDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardSelectors } from 'store/dashboard/rhelDashboard';\nimport { RhelDashboardWidget } from './rhelDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: RhelDashboardWidget,\n        selectWidgets: rhelDashboardSelectors.selectWidgets(state),\n        widgets: rhelDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst RhelDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default RhelDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors, OciDashboardTab } from 'store/dashboard/ociDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OciDashboardTab.product_services:\n            return 'product_service';\n        case OciDashboardTab.payer_tenant_ids:\n            return 'payer_tenant_id';\n        case OciDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport { getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { UserAccessType } from 'api/userAccess';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { Loading } from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { AwsDashboard } from 'routes/views/overview/awsDashboard';\nimport { AwsOcpDashboard } from 'routes/views/overview/awsOcpDashboard';\nimport { AzureDashboard } from 'routes/views/overview/azureDashboard';\nimport { AzureOcpDashboard } from 'routes/views/overview/azureOcpDashboard';\nimport { GcpDashboard } from 'routes/views/overview/gcpDashboard';\nimport { GcpOcpDashboard } from 'routes/views/overview/gcpOcpDashboard';\nimport { IbmDashboard } from 'routes/views/overview/ibmDashboard';\nimport { OcpCloudDashboard } from 'routes/views/overview/ocpCloudDashboard';\nimport { OcpDashboard } from 'routes/views/overview/ocpDashboard';\nimport { RhelDashboard } from 'routes/views/overview/rhelDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getCostType } from 'utils/costType';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { getCurrency } from 'utils/localStorage';\nimport { withRouter } from 'utils/router';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, isRhelAvailable, } from 'utils/userAccess';\nimport { OciDashboard } from './ociDashboard';\nimport { styles } from './overview.styles';\n// eslint-disable-next-line no-shadow\nvar InfrastructurePerspective;\n(function (InfrastructurePerspective) {\n    InfrastructurePerspective[\"aws\"] = \"aws\";\n    InfrastructurePerspective[\"awsOcp\"] = \"aws_ocp\";\n    InfrastructurePerspective[\"azure\"] = \"azure\";\n    InfrastructurePerspective[\"azureOcp\"] = \"azure_ocp\";\n    InfrastructurePerspective[\"gcp\"] = \"gcp\";\n    InfrastructurePerspective[\"gcpOcp\"] = \"gcp_ocp\";\n    InfrastructurePerspective[\"ibm\"] = \"ibm\";\n    InfrastructurePerspective[\"ibmOcp\"] = \"ibm_ocp\";\n    InfrastructurePerspective[\"oci\"] = \"oci\";\n    InfrastructurePerspective[\"ocpCloud\"] = \"ocp_cloud\";\n})(InfrastructurePerspective || (InfrastructurePerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OcpPerspective;\n(function (OcpPerspective) {\n    OcpPerspective[\"ocp\"] = \"ocp\";\n})(OcpPerspective || (OcpPerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OverviewTab;\n(function (OverviewTab) {\n    OverviewTab[\"infrastructure\"] = \"infrastructure\";\n    OverviewTab[\"ocp\"] = \"ocp\";\n    OverviewTab[\"rhel\"] = \"rhel\";\n})(OverviewTab || (OverviewTab = {}));\n// eslint-disable-next-line no-shadow\nvar RhelPerspective;\n(function (RhelPerspective) {\n    RhelPerspective[\"rhel\"] = \"rhel\";\n})(RhelPerspective || (RhelPerspective = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OverviewTab.infrastructure:\n            return 'infrastructure';\n        case OverviewTab.ocp:\n            return 'ocp';\n        case OverviewTab.rhel:\n            return 'rhel';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const availableTabs = [];\n            const infrastructureTabs = this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.infrastructure,\n                    },\n                ]\n                : undefined;\n            const ocpTabs = this.isOcpAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.ocp,\n                    },\n                ]\n                : undefined;\n            const rhelTabs = this.isRhelAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.rhel,\n                    },\n                ]\n                : undefined;\n            if (isFinsightsFeatureEnabled) {\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n                if (rhelTabs) {\n                    availableTabs.push(...rhelTabs);\n                }\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n            }\n            else {\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === InfrastructurePerspective.aws || currentItem === InfrastructurePerspective.awsOcp) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrency = () => {\n            const { currency } = this.props;\n            return React.createElement(Currency, { onSelect: this.handleCurrencySelected, currency: currency });\n        };\n        this.getCurrentTab = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const hasRhel = this.isRhelAvailable();\n            const hasInfrastructure = hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud;\n            const showInfrastructureOnly = hasInfrastructure && !hasOcp && !hasRhel;\n            const showOcpOnly = hasOcp && !hasInfrastructure && !hasRhel;\n            const showRhelOnly = hasRhel && !hasInfrastructure && !hasOcp;\n            if (showOcpOnly) {\n                return OverviewTab.ocp;\n            }\n            else if (showInfrastructureOnly) {\n                return OverviewTab.infrastructure;\n            }\n            else if (showRhelOnly) {\n                return OverviewTab.rhel;\n            }\n            else {\n                if (isFinsightsFeatureEnabled) {\n                    switch (activeTabKey) {\n                        case 0:\n                            return OverviewTab.infrastructure;\n                        case 1:\n                            return OverviewTab.rhel;\n                        case 2:\n                            return OverviewTab.ocp;\n                    }\n                }\n                switch (activeTabKey) {\n                    case 0:\n                        return OverviewTab.ocp;\n                    case 1:\n                        return OverviewTab.infrastructure;\n                }\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case InfrastructurePerspective.aws:\n                case InfrastructurePerspective.awsOcp:\n                case InfrastructurePerspective.azure:\n                case InfrastructurePerspective.oci:\n                case InfrastructurePerspective.azureOcp:\n                case InfrastructurePerspective.gcp:\n                case InfrastructurePerspective.gcpOcp:\n                case InfrastructurePerspective.ibm:\n                case InfrastructurePerspective.ibmOcp:\n                case InfrastructurePerspective.ocpCloud:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return InfrastructurePerspective.ocpCloud;\n            }\n            if (this.isAwsAvailable()) {\n                return InfrastructurePerspective.aws;\n            }\n            if (this.isAzureAvailable()) {\n                return InfrastructurePerspective.azure;\n            }\n            if (this.isOciAvailable()) {\n                return InfrastructurePerspective.oci;\n            }\n            if (this.isGcpAvailable()) {\n                return InfrastructurePerspective.gcp;\n            }\n            if (this.isIbmAvailable()) {\n                return InfrastructurePerspective.ibm;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case OcpPerspective.ocp:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return OcpPerspective.ocp;\n            }\n            return undefined;\n        };\n        this.getDefaultRhelPerspective = () => {\n            const { perspective, rhelProviders, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case RhelPerspective.rhel:\n                    return perspective;\n            }\n            if (isRhelAvailable(userAccess, rhelProviders)) {\n                return RhelPerspective.rhel;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasRhel = this.isRhelAvailable();\n            // Note: No need to test \"OCP on cloud\" here, since that requires at least one of the providers below\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp || hasRhel)) {\n                return null;\n            }\n            let currentItem;\n            const currentTab = this.getCurrentTab();\n            switch (currentTab) {\n                case OverviewTab.infrastructure:\n                    currentItem = currentInfrastructurePerspective;\n                    break;\n                case OverviewTab.ocp:\n                    currentItem = currentOcpPerspective;\n                    break;\n                case OverviewTab.rhel:\n                    currentItem = currentRhelPerspective;\n                    break;\n            }\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), hasRhel: hasRhel, isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: OverviewTab.infrastructure === currentTab, isRhelTab: OverviewTab.rhel === currentTab, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { router } = this.props;\n            return `${router.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, ocpProviders, rhelProviders, } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === OverviewTab.infrastructure) {\n                if (currentInfrastructurePerspective === InfrastructurePerspective.ocpCloud) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.aws) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.awsOcp) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azure) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azureOcp) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcp) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcpOcp) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.ibm) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.oci) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.ocp) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === OcpPerspective.ocp) {\n                    return hasData ? React.createElement(OcpDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.rhel) {\n                const hasData = hasCurrentMonthData(rhelProviders) || hasPreviousMonthData(rhelProviders);\n                if (currentRhelPerspective === RhelPerspective.rhel) {\n                    return hasData ? React.createElement(RhelDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl, isFinsightsFeatureEnabled } = this.props;\n            if (tab === OverviewTab.infrastructure) {\n                if (isFinsightsFeatureEnabled) {\n                    return intl.formatMessage(messages.summary);\n                }\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === OverviewTab.ocp) {\n                return intl.formatMessage(messages.openShift);\n            }\n            else if (tab === OverviewTab.rhel) {\n                return intl.formatMessage(messages.rhel);\n            }\n        };\n        this.handleCostTypeSelected = () => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handleCurrencySelected = () => {\n            const { router, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { query, router } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === OverviewTab.infrastructure && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === OverviewTab.ocp && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { query, router } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n        this.isRhelAvailable = () => {\n            const { isFinsightsFeatureEnabled, rhelProviders, userAccess } = this.props;\n            return isFinsightsFeatureEnabled && isRhelAvailable(userAccess, rhelProviders);\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n            currentRhelPerspective: this.getDefaultRhelPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n                currentRhelPerspective: this.getDefaultRhelPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isFinsightsFeatureEnabled, isIbmFeatureEnabled, userAccessFetchStatus } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === FetchStatus.complete &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable() &&\n            !this.isRhelAvailable();\n        const isLoading = providersFetchStatus === FetchStatus.inProgress || userAccessFetchStatus === FetchStatus.inProgress;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    isFinsightsFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rhel)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.rhelDesc)),\n                                        React.createElement(\"br\", null))),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, this.getCurrency())),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const perspective = queryFromRoute.perspective;\n    const currency = getCurrency();\n    const costType = perspective === InfrastructurePerspective.aws || perspective === InfrastructurePerspective.awsOcp\n        ? getCostType()\n        : undefined;\n    const query = Object.assign({}, queryFromRoute);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, UserAccessType.all, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, UserAccessType.all, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, UserAccessType.all, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, ProviderType.aws),\n        azureProviders: filterProviders(providers, ProviderType.azure),\n        costType,\n        currency,\n        gcpProviders: filterProviders(providers, ProviderType.gcp),\n        ibmProviders: filterProviders(providers, ProviderType.ibm),\n        isFinsightsFeatureEnabled: featureFlagsSelectors.selectIsFinsightsFeatureEnabled(state),\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        ociProviders: filterProviders(providers, ProviderType.oci),\n        ocpProviders: filterProviders(providers, ProviderType.ocp),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        rhelProviders: filterProviders(providers, ProviderType.rhel),\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OverviewBase)));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import { UserAccessType } from 'api/userAccess';\nconst hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.aws);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.azure);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.oci);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.cost_model);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.gcp);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, UserAccessType.gcp) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ocp);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n// Returns true if user has access to RHEL\nexport const hasRhelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.rhel);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRhelAvailable = (userAccess, rhelProviders) => {\n    return hasRhelAccess(userAccess) && hasProviders(rhelProviders);\n};\n// Returns true if user has access to ROS\nexport const hasRosAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ros);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRosAvailable = (userAccess, rosProviders) => {\n    return hasRosAccess(userAccess) && hasProviders(rosProviders);\n};\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","infrastructureAwsOptions","label","messages","value","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","rhelOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","options","push","currentItem","hasOcp","hasOcpCloud","hasRhel","isDisabled","isInfrastructureTab","isRhelTab","onSelected","undefined","costType","currency","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","map","widgetId","widget","details","showHorizontal","GridItem","sm","key","Object","assign","lg","xl","xl2","styles","infoIcon","fontSize","global_FontSize_md","injectIntl","intl","report","status","title","count","meta","description","formatMessage","Card","className","CardTitle","Title","headingLevel","size","TitleSizes","style","Popover","enableFlip","bodyContent","infoTitle","Button","variant","ButtonVariant","CardBody","Skeleton","width","skeleton","Link","to","routes","ChartComparisonBase","constructor","super","arguments","this","defaultState","props","find","option","default","isSelectOpen","state","getSelect","selectOptions","getSelectOptions","selection","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","SelectVariant","SelectOption","toString","event","onItemClicked","setState","render","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","marginBottom","global_spacer_md","comparisonContainer","display","tabs","marginTop","global_spacer_2xl","tabItems","global_spacer_xl","Comparison","DashboardWidgetBase","activeTabKey","currentComparison","cumulative","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","daily","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","type","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","forecast","computedForecast","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","getDetailsLinkTitle","getHorizontalLayout","currentReportFetchStatus","detailsLink","getTabs","getTitle","getOptimizationsSummary","rosReportFetchStatus","rosReport","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","total","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","fetchRosReports","isRosFeatureEnabled","showOptimizations","componentDidUpdate","prevProps","mapStateToProps","awsDashboard","queries","reportPathsType","current","forecastPathsType","forecastType","previous","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","forecastFetchStatus","previousReportFetchStatus","rosPathsType","rosType","featureFlags","ros","recommendations","OcpDashboardWidget","rhelDashboard","RhelDashboardWidget","ociDashboard","OciDashboardWidget","date","alignSelf","flexGrow","textAlign","marginLeft","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","headerContentRight","fontWeight","main","paddingBottom","paddingTop","InfrastructurePerspective","OcpPerspective","OverviewTab","RhelPerspective","infrastructure","ocp","rhel","OverviewBase","getAvailableTabs","isFinsightsFeatureEnabled","infrastructureTabs","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","contentRef","ocpTabs","isOcpAvailable","rhelTabs","isRhelAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","awsOcp","handleCostTypeSelected","getCurrency","handleCurrencySelected","hasInfrastructure","showInfrastructureOnly","showRhelOnly","getDefaultInfrastructurePerspective","perspective","azure","oci","azureOcp","gcp","gcpOcp","ibm","ibmOcp","ocpCloud","getDefaultOcpPerspective","ocpProviders","userAccess","getDefaultRhelPerspective","rhelProviders","getPerspective","currentRhelPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getRouteForQuery","router","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","val","TabContent","ref","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","navigate","replace","tabKey","providers","providersFetchStatus","userAccessFetchStatus","noProviders","isLoading","queryFromRoute","parseQuery","search","Number","isNaN","providersQueryString","providersError","userAccessQueryString","userAccessError","hasAccess","userAccessType","result","Array","isArray","data","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasOciAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess","hasRhelAccess","hasRosAccess"],"sourceRoot":""}