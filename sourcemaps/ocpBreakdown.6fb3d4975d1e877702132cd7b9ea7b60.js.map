{"version":3,"file":"js/ocpBreakdown.50e30cc4e7d9292413c2.js","mappings":"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","sources":["webpack:///./src/routes/views/details/ocpBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/ocpBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/ocpBreakdown/optimizationsBadge.tsx","webpack:///./src/routes/views/details/ocpBreakdown/ocpBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { title }) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n        title,\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { Badge } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/rosQuery';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { FetchStatus } from 'store/common';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { withRouter } from 'utils/router';\nconst baseQuery = {\n    limit: 10,\n    offset: 0,\n};\nconst reportPathsType = RosPathsType.recommendations;\nconst reportType = RosType.ros;\nclass OptimizationsBadge extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportFetchStatus, reportQueryString } = this.props;\n            if (reportFetchStatus !== FetchStatus.inProgress) {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { intl, report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        return React.createElement(Badge, { screenReaderText: intl.formatMessage(messages.optimizationsDetails, { count }) }, count);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const query = Object.assign(Object.assign({}, (groupBy && {\n        [groupBy]: groupByValue, // project filter\n    })), { limit: queryFromRoute.limit || baseQuery.limit, offset: queryFromRoute.offset || baseQuery.offset });\n    const reportQueryString = getQuery(query);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OptimizationsBadge)));\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport Optimizations from 'routes/views/optimizations/optimizations';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { isPlatformCosts } from 'routes/views/utils/paths';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nimport OptimizationsBadge from './optimizationsBadge';\nconst detailsURL = formatPath(routes.ocpDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = getCurrency();\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        category: queryFromRoute.category, // Needed to restore details page state\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { filter_by: Object.assign(Object.assign({}, newQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })), category: undefined, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { currency: currency, groupBy: groupBy, isPlatformCosts: isPlatformCosts(queryFromRoute), report: report, title: title })),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        isOptimizationsTab: queryFromRoute.optimizationsTab !== undefined,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        optimizationsBadgeComponent: React.createElement(OptimizationsBadge, null),\n        optimizationsComponent: groupBy === 'project' && groupByValue !== '*' ? React.createElement(Optimizations, null) : undefined,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        providerType: ProviderType.ocp,\n        query: queryFromRoute,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.ocp,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    closeOptimizationsDrawer: uiActions.closeOptimizationsDrawer,\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default OcpBreakdown;\n"],"names":["mapStateToProps","state","title","selectWidgets","ocpCostOverview","widgets","CostOverview","connect","props","ocpHistoricalData","HistoricalData","reportPathsType","reportType","OptimizationsBadge","constructor","super","arguments","this","defaultState","Object","assign","updateReport","fetchReport","reportFetchStatus","reportQueryString","componentDidMount","render","intl","report","count","meta","Badge","screenReaderText","formatMessage","messages","router","queryFromRoute","location","search","groupBy","groupByValue","query","limit","offset","reportError","mapDispatchToProps","injectIntl","detailsURL","routes","currency","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","category","exclude","group_by","undefined","providersQueryString","providers","providersFetchStatus","costOverviewComponent","isPlatformCosts","description","emptyStateTitle","historicalDataComponent","isOptimizationsTab","optimizationsTab","isRosFeatureEnabled","featureFlags","optimizationsBadgeComponent","optimizationsComponent","providerType","tagReportPathsType","closeOptimizationsDrawer","ui"],"sourceRoot":""}