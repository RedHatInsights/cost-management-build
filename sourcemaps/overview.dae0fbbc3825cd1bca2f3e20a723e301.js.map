{"version":3,"file":"js/overview.1669751947469.efa2b23757a952b476ae.js","mappings":"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","sources":["webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/routes/views/components/perspective/perspective.styles.ts","webpack:///./src/routes/views/components/perspective/perspectiveSelect.tsx","webpack:///./src/routes/views/components/perspective/perspective.tsx","webpack:///./src/routes/views/overview/components/dashboardBase.tsx","webpack:///./src/routes/views/overview/components/chartComparison.tsx","webpack:///./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack:///./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack:///./src/routes/views/overview/overview.styles.ts","webpack:///./src/routes/views/overview/overview.tsx","webpack:///./src/api/queries/overviewQuery.ts","webpack:///./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveSelectBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.perspective)),\n            this.getSelect()));\n    }\n}\nconst PerspectiveSelect = injectIntl(PerspectiveSelectBase);\nexport { PerspectiveSelect };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, isOciFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci && isOciFeatureEnabled) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst OverviewPerspectiveBase = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isOciFeatureEnabled, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    if (isInfrastructureTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n                isOciFeatureEnabled,\n            }));\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n            isOciFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nconst Perspective = withRouter(OverviewPerspectiveBase);\nexport default Perspective;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, currency, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency })))));\n    }))));\nexport default DashboardBase;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ComputedReportItemType, DatumType, transformForecast, transformForecastCone, transformReport, } from 'routes/views/components/charts/common/chartDatum';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { DashboardChartType } from 'store/dashboard/common/dashboardCommon';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\n// eslint-disable-next-line no-shadow\nvar Comparison;\n(function (Comparison) {\n    Comparison[\"cumulative\"] = \"cumulative\";\n    Comparison[\"daily\"] = \"daily\";\n})(Comparison || (Comparison = {}));\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: Comparison.cumulative,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === DashboardChartType.dailyTrend) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.dailyCost) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === DashboardChartType.trend) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.usage) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: Comparison.daily },\n                { label: cumulativeTitle, value: Comparison.cumulative, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === DatumType.cumulative) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === ComputedReportItemType.usage) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType || prevProps.currency !== currency) {\n            fetchReports(widgetId);\n            if (trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport default DashboardWidgetBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, AwsDashboardTab } from 'store/dashboard/awsDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsDashboardTab.services:\n            return 'service';\n        case AwsDashboardTab.accounts:\n            return 'account';\n        case AwsDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { costType: getCostType(), getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors, AwsOcpDashboardTab } from 'store/dashboard/awsOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsOcpDashboardTab.services:\n            return 'service';\n        case AwsOcpDashboardTab.accounts:\n            return 'account';\n        case AwsOcpDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), (featureFlagsSelectors.selectIsCostTypeFeatureEnabled(state) && { costType: getCostType() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, AzureDashboardTab } from 'store/dashboard/azureDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureDashboardTab.service_names:\n            return 'service_name';\n        case AzureDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, AzureOcpDashboardTab, } from 'store/dashboard/azureOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureOcpDashboardTab.service_names:\n            return 'service_name';\n        case AzureOcpDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureOcpDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors, GcpDashboardTab } from 'store/dashboard/gcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpDashboardTab.regions:\n            return 'region';\n        case GcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors, GcpOcpDashboardTab } from 'store/dashboard/gcpOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpOcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpOcpDashboardTab.regions:\n            return 'region';\n        case GcpOcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors, IbmDashboardTab } from 'store/dashboard/ibmDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case IbmDashboardTab.services:\n            return 'service';\n        case IbmDashboardTab.projects:\n            return 'project';\n        case IbmDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, OcpCloudDashboardTab, } from 'store/dashboard/ocpCloudDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpCloudDashboardTab.accounts:\n            return 'account';\n        case OcpCloudDashboardTab.regions:\n            return 'region';\n        case OcpCloudDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, OcpDashboardTab } from 'store/dashboard/ocpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpDashboardTab.clusters:\n            return 'cluster';\n        case OcpDashboardTab.nodes:\n            return 'node';\n        case OcpDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors, OciDashboardTab } from 'store/dashboard/ociDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OciDashboardTab.product_services:\n            return 'product_service';\n        case OciDashboardTab.payer_tenant_ids:\n            return 'payer_tenant_id';\n        case OciDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport { getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { UserAccessType } from 'api/userAccess';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { Loading } from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { AwsDashboard } from 'routes/views/overview/awsDashboard';\nimport { AwsOcpDashboard } from 'routes/views/overview/awsOcpDashboard';\nimport { AzureDashboard } from 'routes/views/overview/azureDashboard';\nimport { AzureOcpDashboard } from 'routes/views/overview/azureOcpDashboard';\nimport { GcpDashboard } from 'routes/views/overview/gcpDashboard';\nimport { GcpOcpDashboard } from 'routes/views/overview/gcpOcpDashboard';\nimport { IbmDashboard } from 'routes/views/overview/ibmDashboard';\nimport { OcpCloudDashboard } from 'routes/views/overview/ocpCloudDashboard';\nimport { OcpDashboard } from 'routes/views/overview/ocpDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getCostType } from 'utils/costType';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { getCurrency } from 'utils/localStorage';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { OciDashboard } from './ociDashboard';\nimport { styles } from './overview.styles';\n// eslint-disable-next-line no-shadow\nvar InfrastructurePerspective;\n(function (InfrastructurePerspective) {\n    InfrastructurePerspective[\"aws\"] = \"aws\";\n    InfrastructurePerspective[\"awsOcp\"] = \"aws_ocp\";\n    InfrastructurePerspective[\"azure\"] = \"azure\";\n    InfrastructurePerspective[\"azureOcp\"] = \"azure_ocp\";\n    InfrastructurePerspective[\"gcp\"] = \"gcp\";\n    InfrastructurePerspective[\"gcpOcp\"] = \"gcp_ocp\";\n    InfrastructurePerspective[\"ibm\"] = \"ibm\";\n    InfrastructurePerspective[\"ibmOcp\"] = \"ibm_ocp\";\n    InfrastructurePerspective[\"oci\"] = \"oci\";\n    InfrastructurePerspective[\"ocpCloud\"] = \"ocp_cloud\";\n})(InfrastructurePerspective || (InfrastructurePerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OcpPerspective;\n(function (OcpPerspective) {\n    OcpPerspective[\"ocp\"] = \"ocp\";\n})(OcpPerspective || (OcpPerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OverviewTab;\n(function (OverviewTab) {\n    OverviewTab[\"infrastructure\"] = \"infrastructure\";\n    OverviewTab[\"ocp\"] = \"ocp\";\n})(OverviewTab || (OverviewTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OverviewTab.infrastructure:\n            return 'infrastructure';\n        case OverviewTab.ocp:\n            return 'ocp';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: OverviewTab.ocp,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: OverviewTab.infrastructure,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType, isCostTypeFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === InfrastructurePerspective.aws ||\n                (currentItem === InfrastructurePerspective.awsOcp && isCostTypeFeatureEnabled)) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrency = () => {\n            const { currency } = this.props;\n            return React.createElement(Currency, { onSelect: this.handleCurrencySelected, currency: currency });\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = hasOcp && !(hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud);\n            const showInfrastructureOnly = !hasOcp && (hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud);\n            if (showOcpOnly) {\n                return OverviewTab.ocp;\n            }\n            else if (showInfrastructureOnly) {\n                return OverviewTab.infrastructure;\n            }\n            else {\n                return activeTabKey === 0 ? OverviewTab.ocp : OverviewTab.infrastructure;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case InfrastructurePerspective.aws:\n                case InfrastructurePerspective.awsOcp:\n                case InfrastructurePerspective.azure:\n                case InfrastructurePerspective.oci:\n                case InfrastructurePerspective.azureOcp:\n                case InfrastructurePerspective.gcp:\n                case InfrastructurePerspective.gcpOcp:\n                case InfrastructurePerspective.ibm:\n                case InfrastructurePerspective.ibmOcp:\n                case InfrastructurePerspective.ocpCloud:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return InfrastructurePerspective.ocpCloud;\n            }\n            if (this.isAwsAvailable()) {\n                return InfrastructurePerspective.aws;\n            }\n            if (this.isAzureAvailable()) {\n                return InfrastructurePerspective.azure;\n            }\n            if (this.isOciAvailable()) {\n                return InfrastructurePerspective.oci;\n            }\n            if (this.isGcpAvailable()) {\n                return InfrastructurePerspective.gcp;\n            }\n            if (this.isIbmAvailable()) {\n                return InfrastructurePerspective.ibm;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case OcpPerspective.ocp:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return OcpPerspective.ocp;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled, isOciFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp)) {\n                return null;\n            }\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: this.getCurrentTab() === OverviewTab.infrastructure, isOciFeatureEnabled: isOciFeatureEnabled, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === OverviewTab.infrastructure) {\n                if (currentInfrastructurePerspective === InfrastructurePerspective.ocpCloud) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.aws) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.awsOcp) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azure) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azureOcp) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcp) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcpOcp) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.ibm) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.oci) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.ocp) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === OcpPerspective.ocp) {\n                    return hasData ? React.createElement(OcpDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === OverviewTab.infrastructure) {\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === OverviewTab.ocp) {\n                return intl.formatMessage(messages.openShift);\n            }\n        };\n        this.handleCostTypeSelected = () => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handleCurrencySelected = () => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, query } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === OverviewTab.infrastructure && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === OverviewTab.ocp && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { history, query } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    history.replace(this.getRouteForQuery(newQuery));\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isCurrencyFeatureEnabled, isIbmFeatureEnabled, isOciFeatureEnabled, userAccessFetchStatus, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === FetchStatus.complete &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable();\n        const isLoading = providersFetchStatus === FetchStatus.inProgress || userAccessFetchStatus === FetchStatus.inProgress;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    isOciFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && this.getCurrency())),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const perspective = queryFromRoute.perspective;\n    const isCurrencyFeatureEnabled = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state);\n    const currency = isCurrencyFeatureEnabled ? getCurrency() : undefined;\n    const isCostTypeFeatureEnabled = featureFlagsSelectors.selectIsCostTypeFeatureEnabled(state);\n    const costType = perspective === InfrastructurePerspective.aws ||\n        (perspective === InfrastructurePerspective.awsOcp && isCostTypeFeatureEnabled)\n        ? getCostType()\n        : undefined;\n    const query = Object.assign({ tabKey }, (perspective && { perspective }));\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, UserAccessType.all, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, UserAccessType.all, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, UserAccessType.all, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, ProviderType.aws),\n        azureProviders: filterProviders(providers, ProviderType.azure),\n        gcpProviders: filterProviders(providers, ProviderType.gcp),\n        ibmProviders: filterProviders(providers, ProviderType.ibm),\n        isCostTypeFeatureEnabled,\n        isCurrencyFeatureEnabled,\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        isOciFeatureEnabled: featureFlagsSelectors.selectIsOciFeatureEnabled(state),\n        ociProviders: filterProviders(providers, ProviderType.oci),\n        ocpProviders: filterProviders(providers, ProviderType.ocp),\n        costType,\n        currency,\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import { UserAccessType } from 'api/userAccess';\nconst hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.aws);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.azure);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.oci);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.cost_model);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.gcp);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, UserAccessType.gcp) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ocp);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveSelectBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","intl","options","props","selections","map","option","push","toString","formatMessage","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","variant","SelectVariant","SelectOption","key","event","onSelected","setState","render","Title","headingLevel","size","messages","PerspectiveSelect","injectIntl","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","isOciFeatureEnabled","hasOcp","hasOcpCloud","isInfrastructureTab","undefined","costType","currency","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","default","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","Comparison","DashboardWidgetBase","activeTabKey","currentComparison","cumulative","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","daily","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","type","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","title","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","componentDidUpdate","prevProps","mapStateToProps","widget","awsDashboard","queries","featureFlags","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","ociDashboard","OciDashboardWidget","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","headerContentRight","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","InfrastructurePerspective","OcpPerspective","OverviewTab","ocp","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","getCostType","isCostTypeFeatureEnabled","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","awsOcp","handleCostTypeSelected","getCurrency","handleCurrencySelected","showInfrastructureOnly","getDefaultInfrastructurePerspective","perspective","azure","oci","azureOcp","gcp","gcpOcp","ibm","ibmOcp","ocpCloud","getDefaultOcpPerspective","ocpProviders","userAccess","getPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getRouteForQuery","history","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","replace","tabKey","providers","providersFetchStatus","isCurrencyFeatureEnabled","userAccessFetchStatus","noProviders","isLoading","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","providersQueryString","providersError","userAccessQueryString","userAccessError","hasAccess","userAccessType","result","Array","isArray","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasOciAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess"],"sourceRoot":""}