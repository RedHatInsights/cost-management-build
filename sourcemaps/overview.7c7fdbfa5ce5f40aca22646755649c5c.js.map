{"version":3,"file":"js/overview.e382446b5434738e2a8e.js","mappings":"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","sources":["webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/routes/views/components/perspective/perspective.styles.ts","webpack:///./src/routes/views/components/perspective/perspectiveSelect.tsx","webpack:///./src/routes/views/components/perspective/perspective.tsx","webpack:///./src/routes/views/overview/components/dashboardBase.tsx","webpack:///./src/routes/views/overview/components/chartComparison.tsx","webpack:///./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack:///./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboard.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack:///./src/routes/views/overview/overview.styles.ts","webpack:///./src/routes/views/overview/overview.tsx","webpack:///./src/api/queries/overviewQuery.ts","webpack:///./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveSelectBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.perspective)),\n            this.getSelect()));\n    }\n}\nconst PerspectiveSelect = injectIntl(PerspectiveSelectBase);\nexport { PerspectiveSelect };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\n// RHEL options\nconst rhelOptions = [{ label: messages.perspectiveValues, value: 'rhel' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, isOciFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci && isOciFeatureEnabled) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst Perspective = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, hasRhel, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isOciFeatureEnabled, isRhelTab, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    // Note isInfrastructureTab and isRhelTab will be undefined for cost explorer\n    if (isInfrastructureTab !== undefined || isRhelTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n                isOciFeatureEnabled,\n            }));\n        }\n        else if (isRhelTab) {\n            if (hasRhel) {\n                options.push(...rhelOptions);\n            }\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        if (hasRhel) {\n            options.push(...rhelOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n            isOciFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nexport default Perspective;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, currency, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency })))));\n    }))));\nexport default DashboardBase;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ComputedReportItemType, DatumType, transformForecast, transformForecastCone, transformReport, } from 'routes/views/components/charts/common/chartDatum';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { DashboardChartType } from 'store/dashboard/common/dashboardCommon';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\n// eslint-disable-next-line no-shadow\nvar Comparison;\n(function (Comparison) {\n    Comparison[\"cumulative\"] = \"cumulative\";\n    Comparison[\"daily\"] = \"daily\";\n})(Comparison || (Comparison = {}));\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: Comparison.cumulative,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === DashboardChartType.dailyTrend) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.dailyCost) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === DashboardChartType.trend) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.usage) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: Comparison.daily },\n                { label: cumulativeTitle, value: Comparison.cumulative, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === DatumType.cumulative) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === ComputedReportItemType.usage) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType || prevProps.currency !== currency) {\n            fetchReports(widgetId);\n            if (trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport default DashboardWidgetBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, AwsDashboardTab } from 'store/dashboard/awsDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsDashboardTab.services:\n            return 'service';\n        case AwsDashboardTab.accounts:\n            return 'account';\n        case AwsDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { costType: getCostType(), getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors, AwsOcpDashboardTab } from 'store/dashboard/awsOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsOcpDashboardTab.services:\n            return 'service';\n        case AwsOcpDashboardTab.accounts:\n            return 'account';\n        case AwsOcpDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), (featureFlagsSelectors.selectIsCostTypeFeatureEnabled(state) && { costType: getCostType() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, AzureDashboardTab } from 'store/dashboard/azureDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureDashboardTab.service_names:\n            return 'service_name';\n        case AzureDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, AzureOcpDashboardTab, } from 'store/dashboard/azureOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureOcpDashboardTab.service_names:\n            return 'service_name';\n        case AzureOcpDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureOcpDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors, GcpDashboardTab } from 'store/dashboard/gcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpDashboardTab.regions:\n            return 'region';\n        case GcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors, GcpOcpDashboardTab } from 'store/dashboard/gcpOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpOcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpOcpDashboardTab.regions:\n            return 'region';\n        case GcpOcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors, IbmDashboardTab } from 'store/dashboard/ibmDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case IbmDashboardTab.services:\n            return 'service';\n        case IbmDashboardTab.projects:\n            return 'project';\n        case IbmDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, OcpCloudDashboardTab, } from 'store/dashboard/ocpCloudDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpCloudDashboardTab.accounts:\n            return 'account';\n        case OcpCloudDashboardTab.regions:\n            return 'region';\n        case OcpCloudDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, OcpDashboardTab } from 'store/dashboard/ocpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpDashboardTab.clusters:\n            return 'cluster';\n        case OcpDashboardTab.nodes:\n            return 'node';\n        case OcpDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardActions, rhelDashboardSelectors, RhelDashboardTab } from 'store/dashboard/rhelDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './rhelDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case RhelDashboardTab.clusters:\n            return 'cluster';\n        case RhelDashboardTab.nodes:\n            return 'node';\n        case RhelDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = rhelDashboardSelectors.selectWidget(state, widgetId);\n    const queries = rhelDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: rhelDashboardActions.fetchWidgetForecasts,\n    fetchReports: rhelDashboardActions.fetchWidgetReports,\n    updateTab: rhelDashboardActions.changeWidgetTab,\n};\nconst RhelDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { RhelDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardSelectors } from 'store/dashboard/rhelDashboard';\nimport { RhelDashboardWidget } from './rhelDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: RhelDashboardWidget,\n        selectWidgets: rhelDashboardSelectors.selectWidgets(state),\n        widgets: rhelDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst RhelDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default RhelDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors, OciDashboardTab } from 'store/dashboard/ociDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OciDashboardTab.product_services:\n            return 'product_service';\n        case OciDashboardTab.payer_tenant_ids:\n            return 'payer_tenant_id';\n        case OciDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport { getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { UserAccessType } from 'api/userAccess';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { Loading } from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { AwsDashboard } from 'routes/views/overview/awsDashboard';\nimport { AwsOcpDashboard } from 'routes/views/overview/awsOcpDashboard';\nimport { AzureDashboard } from 'routes/views/overview/azureDashboard';\nimport { AzureOcpDashboard } from 'routes/views/overview/azureOcpDashboard';\nimport { GcpDashboard } from 'routes/views/overview/gcpDashboard';\nimport { GcpOcpDashboard } from 'routes/views/overview/gcpOcpDashboard';\nimport { IbmDashboard } from 'routes/views/overview/ibmDashboard';\nimport { OcpCloudDashboard } from 'routes/views/overview/ocpCloudDashboard';\nimport { OcpDashboard } from 'routes/views/overview/ocpDashboard';\nimport { RhelDashboard } from 'routes/views/overview/rhelDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getCostType } from 'utils/costType';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { getCurrency } from 'utils/localStorage';\nimport { withRouter } from 'utils/router';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, isRhelAvailable, } from 'utils/userAccess';\nimport { OciDashboard } from './ociDashboard';\nimport { styles } from './overview.styles';\n// eslint-disable-next-line no-shadow\nvar InfrastructurePerspective;\n(function (InfrastructurePerspective) {\n    InfrastructurePerspective[\"aws\"] = \"aws\";\n    InfrastructurePerspective[\"awsOcp\"] = \"aws_ocp\";\n    InfrastructurePerspective[\"azure\"] = \"azure\";\n    InfrastructurePerspective[\"azureOcp\"] = \"azure_ocp\";\n    InfrastructurePerspective[\"gcp\"] = \"gcp\";\n    InfrastructurePerspective[\"gcpOcp\"] = \"gcp_ocp\";\n    InfrastructurePerspective[\"ibm\"] = \"ibm\";\n    InfrastructurePerspective[\"ibmOcp\"] = \"ibm_ocp\";\n    InfrastructurePerspective[\"oci\"] = \"oci\";\n    InfrastructurePerspective[\"ocpCloud\"] = \"ocp_cloud\";\n})(InfrastructurePerspective || (InfrastructurePerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OcpPerspective;\n(function (OcpPerspective) {\n    OcpPerspective[\"ocp\"] = \"ocp\";\n})(OcpPerspective || (OcpPerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OverviewTab;\n(function (OverviewTab) {\n    OverviewTab[\"infrastructure\"] = \"infrastructure\";\n    OverviewTab[\"ocp\"] = \"ocp\";\n    OverviewTab[\"rhel\"] = \"rhel\";\n})(OverviewTab || (OverviewTab = {}));\n// eslint-disable-next-line no-shadow\nvar RhelPerspective;\n(function (RhelPerspective) {\n    RhelPerspective[\"rhel\"] = \"rhel\";\n})(RhelPerspective || (RhelPerspective = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OverviewTab.infrastructure:\n            return 'infrastructure';\n        case OverviewTab.ocp:\n            return 'ocp';\n        case OverviewTab.rhel:\n            return 'rhel';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const availableTabs = [];\n            const infrastructureTabs = this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.infrastructure,\n                    },\n                ]\n                : undefined;\n            const ocpTabs = this.isOcpAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.ocp,\n                    },\n                ]\n                : undefined;\n            const rhelTabs = this.isRhelAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.rhel,\n                    },\n                ]\n                : undefined;\n            if (isFinsightsFeatureEnabled) {\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n                if (rhelTabs) {\n                    availableTabs.push(...rhelTabs);\n                }\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n            }\n            else {\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType, isCostTypeFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === InfrastructurePerspective.aws ||\n                (currentItem === InfrastructurePerspective.awsOcp && isCostTypeFeatureEnabled)) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrency = () => {\n            const { currency } = this.props;\n            return React.createElement(Currency, { onSelect: this.handleCurrencySelected, currency: currency });\n        };\n        this.getCurrentTab = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const hasRhel = this.isRhelAvailable();\n            const hasInfrastructure = hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud;\n            const showInfrastructureOnly = hasInfrastructure && !hasOcp && !hasRhel;\n            const showOcpOnly = hasOcp && !hasInfrastructure && !hasRhel;\n            const showRhelOnly = hasRhel && !hasInfrastructure && !hasOcp;\n            if (showOcpOnly) {\n                return OverviewTab.ocp;\n            }\n            else if (showInfrastructureOnly) {\n                return OverviewTab.infrastructure;\n            }\n            else if (showRhelOnly) {\n                return OverviewTab.rhel;\n            }\n            else {\n                if (isFinsightsFeatureEnabled) {\n                    switch (activeTabKey) {\n                        case 0:\n                            return OverviewTab.infrastructure;\n                        case 1:\n                            return OverviewTab.rhel;\n                        case 2:\n                            return OverviewTab.ocp;\n                    }\n                }\n                switch (activeTabKey) {\n                    case 0:\n                        return OverviewTab.ocp;\n                    case 1:\n                        return OverviewTab.infrastructure;\n                }\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case InfrastructurePerspective.aws:\n                case InfrastructurePerspective.awsOcp:\n                case InfrastructurePerspective.azure:\n                case InfrastructurePerspective.oci:\n                case InfrastructurePerspective.azureOcp:\n                case InfrastructurePerspective.gcp:\n                case InfrastructurePerspective.gcpOcp:\n                case InfrastructurePerspective.ibm:\n                case InfrastructurePerspective.ibmOcp:\n                case InfrastructurePerspective.ocpCloud:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return InfrastructurePerspective.ocpCloud;\n            }\n            if (this.isAwsAvailable()) {\n                return InfrastructurePerspective.aws;\n            }\n            if (this.isAzureAvailable()) {\n                return InfrastructurePerspective.azure;\n            }\n            if (this.isOciAvailable()) {\n                return InfrastructurePerspective.oci;\n            }\n            if (this.isGcpAvailable()) {\n                return InfrastructurePerspective.gcp;\n            }\n            if (this.isIbmAvailable()) {\n                return InfrastructurePerspective.ibm;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case OcpPerspective.ocp:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return OcpPerspective.ocp;\n            }\n            return undefined;\n        };\n        this.getDefaultRhelPerspective = () => {\n            const { perspective, rhelProviders, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case RhelPerspective.rhel:\n                    return perspective;\n            }\n            if (isRhelAvailable(userAccess, rhelProviders)) {\n                return RhelPerspective.rhel;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled, isOciFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasRhel = this.isRhelAvailable();\n            // Note: No need to test \"OCP on cloud\" here, since that requires at least one of the providers below\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp || hasRhel)) {\n                return null;\n            }\n            let currentItem;\n            const currentTab = this.getCurrentTab();\n            switch (currentTab) {\n                case OverviewTab.infrastructure:\n                    currentItem = currentInfrastructurePerspective;\n                    break;\n                case OverviewTab.ocp:\n                    currentItem = currentOcpPerspective;\n                    break;\n                case OverviewTab.rhel:\n                    currentItem = currentRhelPerspective;\n                    break;\n            }\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), hasRhel: hasRhel, isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: OverviewTab.infrastructure === currentTab, isOciFeatureEnabled: isOciFeatureEnabled, isRhelTab: OverviewTab.rhel === currentTab, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { router } = this.props;\n            return `${router.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, ocpProviders, rhelProviders, } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === OverviewTab.infrastructure) {\n                if (currentInfrastructurePerspective === InfrastructurePerspective.ocpCloud) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.aws) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.awsOcp) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azure) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azureOcp) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcp) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcpOcp) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.ibm) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.oci) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.ocp) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === OcpPerspective.ocp) {\n                    return hasData ? React.createElement(OcpDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.rhel) {\n                const hasData = hasCurrentMonthData(rhelProviders) || hasPreviousMonthData(rhelProviders);\n                if (currentRhelPerspective === RhelPerspective.rhel) {\n                    return hasData ? React.createElement(RhelDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl, isFinsightsFeatureEnabled } = this.props;\n            if (tab === OverviewTab.infrastructure) {\n                if (isFinsightsFeatureEnabled) {\n                    return intl.formatMessage(messages.summary);\n                }\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === OverviewTab.ocp) {\n                return intl.formatMessage(messages.openShift);\n            }\n            else if (tab === OverviewTab.rhel) {\n                return intl.formatMessage(messages.rhel);\n            }\n        };\n        this.handleCostTypeSelected = () => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handleCurrencySelected = () => {\n            const { router, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { query, router } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === OverviewTab.infrastructure && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === OverviewTab.ocp && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { query, router } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n        this.isRhelAvailable = () => {\n            const { isFinsightsFeatureEnabled, rhelProviders, userAccess } = this.props;\n            return isFinsightsFeatureEnabled && isRhelAvailable(userAccess, rhelProviders);\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n            currentRhelPerspective: this.getDefaultRhelPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n                currentRhelPerspective: this.getDefaultRhelPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isCurrencyFeatureEnabled, isFinsightsFeatureEnabled, isIbmFeatureEnabled, isOciFeatureEnabled, userAccessFetchStatus, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === FetchStatus.complete &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable() &&\n            !this.isRhelAvailable();\n        const isLoading = providersFetchStatus === FetchStatus.inProgress || userAccessFetchStatus === FetchStatus.inProgress;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    isFinsightsFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rhel)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.rhelDesc)),\n                                        React.createElement(\"br\", null))),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    isOciFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && this.getCurrency())),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const perspective = queryFromRoute.perspective;\n    const isCurrencyFeatureEnabled = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state);\n    const currency = isCurrencyFeatureEnabled ? getCurrency() : undefined;\n    const isCostTypeFeatureEnabled = featureFlagsSelectors.selectIsCostTypeFeatureEnabled(state);\n    const costType = perspective === InfrastructurePerspective.aws ||\n        (perspective === InfrastructurePerspective.awsOcp && isCostTypeFeatureEnabled)\n        ? getCostType()\n        : undefined;\n    const query = Object.assign({ tabKey }, (perspective && { perspective }));\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, UserAccessType.all, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, UserAccessType.all, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, UserAccessType.all, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, ProviderType.aws),\n        azureProviders: filterProviders(providers, ProviderType.azure),\n        costType,\n        currency,\n        gcpProviders: filterProviders(providers, ProviderType.gcp),\n        ibmProviders: filterProviders(providers, ProviderType.ibm),\n        isCostTypeFeatureEnabled,\n        isCurrencyFeatureEnabled,\n        isFinsightsFeatureEnabled: featureFlagsSelectors.selectIsFinsightsFeatureEnabled(state),\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        isOciFeatureEnabled: featureFlagsSelectors.selectIsOciFeatureEnabled(state),\n        ociProviders: filterProviders(providers, ProviderType.oci),\n        ocpProviders: filterProviders(providers, ProviderType.ocp),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        rhelProviders: filterProviders(providers, ProviderType.rhel),\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OverviewBase)));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import { UserAccessType } from 'api/userAccess';\nconst hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.aws);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.azure);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.oci);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.cost_model);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.gcp);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, UserAccessType.gcp) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ocp);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n// Returns true if user has access to RHEL\nexport const hasRhelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.rhel);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRhelAvailable = (userAccess, rhelProviders) => {\n    return hasRhelAccess(userAccess) && hasProviders(rhelProviders);\n};\n// Returns true if user has access to ROS\nexport const hasRosAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ros);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRosAvailable = (userAccess, rosProviders) => {\n    return hasRosAccess(userAccess) && hasProviders(rosProviders);\n};\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveSelectBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","intl","options","props","selections","map","option","push","toString","formatMessage","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","variant","SelectVariant","SelectOption","key","event","onSelected","setState","render","Title","headingLevel","size","messages","PerspectiveSelect","injectIntl","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","rhelOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","isOciFeatureEnabled","hasOcp","hasOcpCloud","hasRhel","isInfrastructureTab","isRhelTab","undefined","costType","currency","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","default","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","Comparison","DashboardWidgetBase","activeTabKey","currentComparison","cumulative","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","daily","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","type","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","title","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","Link","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","componentDidUpdate","prevProps","mapStateToProps","widget","awsDashboard","queries","featureFlags","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","rhelDashboard","RhelDashboardWidget","ociDashboard","OciDashboardWidget","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","headerContentRight","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","InfrastructurePerspective","OcpPerspective","OverviewTab","RhelPerspective","ocp","rhel","OverviewBase","getAvailableTabs","isFinsightsFeatureEnabled","infrastructureTabs","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","contentRef","ocpTabs","isOcpAvailable","rhelTabs","isRhelAvailable","getCostType","isCostTypeFeatureEnabled","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","awsOcp","handleCostTypeSelected","getCurrency","handleCurrencySelected","hasInfrastructure","showInfrastructureOnly","showRhelOnly","getDefaultInfrastructurePerspective","perspective","azure","oci","azureOcp","gcp","gcpOcp","ibm","ibmOcp","ocpCloud","getDefaultOcpPerspective","ocpProviders","userAccess","getDefaultRhelPerspective","rhelProviders","getPerspective","currentRhelPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getRouteForQuery","router","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","navigate","replace","tabKey","providers","providersFetchStatus","isCurrencyFeatureEnabled","userAccessFetchStatus","noProviders","isLoading","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","providersQueryString","providersError","userAccessQueryString","userAccessError","hasAccess","userAccessType","result","Array","isArray","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasOciAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess","hasRhelAccess","hasRosAccess"],"sourceRoot":""}