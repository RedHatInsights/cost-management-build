{"version":3,"file":"js/awsBreakdown.da215c394eba2147d3bc.js","mappings":"4XAKA,MAAMA,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeC,EAAA,iBAAuCH,GACtDI,QAASD,EAAA,wBAA8CH,OAGzDK,GAAe,IAAAC,SAAQP,EAAiB,CAAC,EAA1B,CAA6B,K,0BCNlD,MAAM,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeK,EAAA,iBAAyCP,GACxDI,QAASG,EAAA,wBAAgDP,OAG3DQ,GAAiB,IAAAF,SAAQ,EAAiB,CAAC,EAA1B,CAA6B,KCW9CG,GAAa,QAAWC,EAAA,mBACxBC,EAAa,SACbC,EAAkB,QAElB,GAAkB,SAAsB,CAACZ,GAASa,OAAMC,aAC1D,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,GAAa,QAAgBH,GAC7BI,GAAkB,QAAmBJ,GACrCK,EAAUD,EAAkB,MAAe,QAAaJ,GACxDM,EAAeF,IAAoC,QAAgBJ,GACnEO,GAAW,UACXC,GAAW,UACXC,EAAQC,OAAOC,OAAO,CAAC,EAAGX,GAC1BY,EAAc,CAChBC,UAAWN,EACXC,WACAM,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBC,UAAWR,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAIR,GAAcA,EAAWe,WAAaf,EAAWe,WAAclB,GACnIA,EAAec,QACfd,EAAec,OAAOK,SAAW,CAAE,CAAC,GAAG,eAA4BnB,EAAec,OAAOK,UAAcd,GAAWA,IAAY,MAAiC,MAAjBC,GAAwB,CAAE,CAACD,QAAUe,IAAgBjB,GACnMA,EAAWe,WACXf,EAAWe,UAAU,OAAiB,CACtC,CAAC,GAAG,OAAkB,QAAiBf,EAAWe,UAAU,MAC5D,CAAC,WAAeE,IAEpBC,QAASX,OAAOC,OAAO,CAAC,EAAIR,GAAcA,EAAWkB,SAAWlB,EAAWkB,SAC3EC,SAAUZ,OAAOC,OAAO,CAAC,EAAIN,GAAW,CAAE,CAACA,GAAUC,KAEnDiB,GAAoB,QAASX,GAC7BY,EAAS,kBAA6BvC,EAAOY,EAAiBD,EAAY2B,GAC1EE,EAAc,uBAAkCxC,EAAOY,EAAiBD,EAAY2B,GACpFG,EAAoB,6BAAwCzC,EAAOY,EAAiBD,EAAY2B,GAChGI,GAAuB,OAAkB,MACzCC,EAAY,qBAAmC3C,EAAO,QAAkB0C,GACxEE,EAAiB,0BAAwC5C,EAAO,QAAkB0C,GAClFG,EAAuB,gCAA8C7C,EAAO,QAAkB0C,GAC9FI,EAAQ/B,EAAe,MAAqBA,EAAe,MAAqBM,EACtF,MAAO,CACH0B,sBAAwB,kBAAoB1C,EAAc,CAAEiB,SAAUA,EAAUC,SAAUA,EAAUH,QAASA,EAASI,MAAOT,EAAgBwB,OAAQA,IACrJjB,WACAC,WACAyB,YAAajC,EAAe,MAC5BN,aACAwC,gBAAiBpC,EAAKqC,cAAcC,EAAA,mBACpC/B,UACAC,eACA+B,wBAAyB,kBAAoB5C,EAAgB,CAAEc,SAAUA,EAAUC,SAAUA,IAC7FoB,WAAW,QAAgBA,EAAW,SACtCC,iBACAC,uBACAQ,aAAc,QACd7B,QACAe,SACAC,cACAC,oBACA9B,aACAC,kBACA0B,oBACAgB,cAAc,EACdC,aAAc,QACdT,QACH,IAECU,EAAqB,CACvBC,YAAa,kBAGjB,GADqB,EAAAC,EAAA,KAAW,QAAW,IAAApD,SAAQ,EAAiBkD,EAAzB,CAA6C,M","sources":["webpack:///./src/routes/views/details/awsBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/awsBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/awsBreakdown/awsBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, logicalOrPrefix, orgUnitIdKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = formatPath(routes.awsDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.aws;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const costType = getCostType();\n    const currency = getCurrency();\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        cost_type: costType,\n        currency,\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupBy !== orgUnitIdKey && groupByValue !== '*' && { [groupBy]: undefined })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { costType: costType, currency: currency, groupBy: groupBy, query: queryFromRoute, report: report })),\n        costType,\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.awsDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { costType: costType, currency: currency }),\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        providerType: ProviderType.aws,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        showCostType: true,\n        tagPathsType: TagPathsType.aws,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default AwsBreakdown;\n"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","connect","awsHistoricalData","HistoricalData","detailsURL","routes","reportType","reportPathsType","intl","router","queryFromRoute","location","search","queryState","groupByOrgValue","groupBy","groupByValue","costType","currency","query","Object","assign","reportQuery","cost_type","filter","resolution","time_scope_units","time_scope_value","filter_by","account","undefined","exclude","group_by","reportQueryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","title","costOverviewComponent","description","emptyStateTitle","formatMessage","messages","historicalDataComponent","providerType","showCostType","tagPathsType","mapDispatchToProps","fetchReport","injectIntl"],"sourceRoot":""}