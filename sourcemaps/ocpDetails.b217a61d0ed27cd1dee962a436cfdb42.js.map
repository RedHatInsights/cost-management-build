{"version":3,"file":"js/ocpDetails.edc6395718fc275f32a8.js","mappings":"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","sources":["webpack:///./src/routes/components/costDistribution/costDistribution.styles.ts","webpack:///./src/routes/components/costDistribution/costDistribution.tsx","webpack:///./src/routes/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/routes/utils/computedReport/getComputedOcpReportItems.ts","webpack:///./src/routes/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/details/ocpDetails/detailsOptimization.tsx","webpack:///./src/routes/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/details/ocpDetails/ocpDetails.tsx"],"sourcesContent":["import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    selector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    label: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costDistribution.scss';\nimport { Select, SelectOption, SelectVariant, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { createMapStateToProps } from 'store/common';\nimport { setCostDistribution } from 'utils/localStorage';\nimport { styles } from './costDistribution.styles';\nconst costDistributionOptions = [\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.distributed },\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.total },\n];\nclass CostDistributionBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { costDistribution, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costDistribution);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costDistributionSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costDistributionOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostDistribution(selection.value); // Set cost distribution in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.selector },\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.md, style: styles.label }, intl.formatMessage(messages.costDistributionLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostDistributionConnect = connect(mapStateToProps, mapDispatchToProps)(CostDistributionBase);\nconst CostDistribution = injectIntl(CostDistributionConnect);\nexport default CostDistribution;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { CostDistribution } from 'routes/components/costDistribution';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/components/groupBy';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { getIdKeyForGroupBy } from 'routes/utils/computedReport/getComputedOcpReportItems';\nimport { filterProviders } from 'routes/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { costDistribution, currency, groupBy, isCostDistributionFeatureEnabled, isExportsFeatureEnabled, onCostDistributionSelected, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const showCostDistribution = groupBy === 'project' && report && report.meta && report.meta.distributed_overhead === true;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost[reportItemValue];\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost[reportItemValue].value : 0, hasCost ? report.meta.total.cost[reportItemValue].units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagPathsType: tagPathsType }),\n                    showCostDistribution && isCostDistributionFeatureEnabled && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected })))),\n                showContent && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCostDistributionFeatureEnabled: featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { getQuery } from 'api/queries/query';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { getBreakdownPath } from 'routes/utils/paths';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { formatPath } from 'utils/paths';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = RosPathsType.recommendations;\nconst reportType = RosType.ros;\nclass DetailsOptimization extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.getBreakdownLink = count => {\n            const { project, router } = this.props;\n            if (count === 0 || project === undefined) {\n                return count;\n            }\n            return (React.createElement(Link, { to: getBreakdownPath({\n                    basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                    groupBy: 'project',\n                    id: project,\n                    isOptimizationsTab: true,\n                    router,\n                    title: project,\n                }) }, count));\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        // Todo: Add link to breakdown page\n        return React.createElement(\"span\", null, this.getBreakdownLink(count));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const reportQuery = {\n        project, // project filter\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DetailsOptimization));\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/components/dataTable/dataTable.scss';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { DataTable } from 'routes/components/dataTable';\nimport { styles } from 'routes/components/dataTable/dataTable.styles';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/details/components/actions';\nimport { getUnsortedComputedReportItems } from 'routes/utils/computedReport/getComputedReportItems';\nimport { getBreakdownPath } from 'routes/utils/paths';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { classificationDefault, classificationPlatform, classificationUnallocated, noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport DetailsOptimization from './detailsOptimization';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { costDistribution, groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, isRosFeatureEnabled, report, router, selectedItems, } = this.props;\n            if (!report) {\n                return;\n            }\n            const isGroupByProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                    },\n                    Object.assign({ orderBy: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: false })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default & Overhead column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.optimizations),\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const isPlatformCosts = item.classification === classificationPlatform;\n                const isUnallocatedCosts = item.classification === classificationUnallocated;\n                const isOverheadCosts = costDistribution === ComputedReportItemValueType.distributed &&\n                    !isUnallocatedCosts &&\n                    ((item.cost.platformDistributed && item.cost.platformDistributed.value > 0) ||\n                        (item.cost.workerUnallocatedDistributed && item.cost.workerUnallocatedDistributed.value > 0));\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}` || isUnallocatedCosts;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                        description: item.id,\n                        id: item.id,\n                        isPlatformCosts,\n                        groupBy,\n                        router,\n                        title: label.toString(), // Convert IDs if applicable\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !isGroupByProject,\n                            value: item.classification === classificationDefault ? (React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default))) : isOverheadCosts ? (React.createElement(Tooltip, { content: intl.formatMessage(messages.overheadDesc), enableFlip: true },\n                                React.createElement(Label, { variant: \"outline\", color: \"orange\" }, intl.formatMessage(messages.overhead)))) : (React.createElement(\"span\", { style: styles.defaultLabel })),\n                        },\n                        {\n                            hidden: !(isGroupByProject && isRosFeatureEnabled),\n                            value: !isPlatformCosts && !isDisabled && React.createElement(DetailsOptimization, { project: label }),\n                        },\n                        { value: monthOverMonth, id: DetailsTableColumnIds.monthOverMonth },\n                        {\n                            value: InfrastructureCost,\n                            id: DetailsTableColumnIds.infrastructure,\n                            style: styles.managedColumn,\n                        },\n                        {\n                            value: supplementaryCost,\n                            id: DetailsTableColumnIds.supplementary,\n                            style: styles.managedColumn,\n                        },\n                        { value: cost, style: styles.managedColumn },\n                        { value: actions },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.ocp, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { costDistribution, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const value = formatCurrency(Math.abs(item.cost[reportItemValue].value - item.delta_value), item.cost[reportItemValue].units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        showPercentage && item.delta_percent !== null && item.delta_value > 0 && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        showPercentage && item.delta_percent !== null && item.delta_value < 0 && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { costDistribution, report, intl } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue]\n                ? report.meta.total.cost[reportItemValue].value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost[reportItemValue].value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost[reportItemValue].value, item.cost[reportItemValue].units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { costDistribution, hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.costDistribution !== costDistribution ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { filterBy, isLoading, onSelected, onSort, orderBy, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, filterBy: filterBy, isActionsCell: true, isLoading: isLoading, onSelected: onSelected, onSort: onSort, orderBy: orderBy, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/components/dataToolbar';\nimport { isEqual } from 'routes/utils/equal';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { tagKey } from 'utils/props';\nconst tagType = TagType.tag;\nconst tagPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n        this.updateReport = () => {\n            const { fetchTag, tagQueryString } = this.props;\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            this.updateReport();\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { query, tagReport } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                this.updateReport();\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExcludes: true, showExport: true, showFilter: true, showPlatformCosts: groupBy === 'project', tagReport: tagReport, tagPathsType: tagPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100vh',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/components/charts/common';\nimport { ExportModal } from 'routes/components/export';\nimport { Loading } from 'routes/components/page/loading';\nimport { NoData } from 'routes/components/page/noData';\nimport { NoProviders } from 'routes/components/page/noProviders';\nimport { NotAvailable } from 'routes/components/page/notAvailable';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/details/components/columnManagement';\nimport { getIdKeyForGroupBy } from 'routes/utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'routes/utils/computedReport/getComputedReportItems';\nimport { getGroupById, getGroupByTagKey } from 'routes/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'routes/utils/providers';\nimport { getRouteForQuery } from 'routes/utils/query';\nimport { handleOnCostDistributionSelected, handleOnCurrencySelected, handleOnFilterAdded, handleOnFilterRemoved, handleOnPerPageSelect, handleOnSetPage, handleOnSort, } from 'routes/utils/queryNavigate';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCostDistribution, getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    exclude: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handleOnPerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleOnSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { costDistribution, isRosFeatureEnabled, query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { costDistribution: costDistribution, filterBy: query.filter_by, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, isRosFeatureEnabled: isRosFeatureEnabled, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleOnSort(query, router, sortType, isSortAscending), orderBy: query.order_by, report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleOnFilterAdded(query, router, filter), onFilterRemoved: filter => handleOnFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: undefined, category: undefined, delta: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router, } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { costDistribution: costDistribution, currency: currency, groupBy: groupById, onCostDistributionSelected: () => handleOnCostDistributionSelected(query, router), onCurrencySelected: () => handleOnCurrencySelected(query, router), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = queryFromRoute.group_by ? getGroupById(queryFromRoute) : getGroupById(baseQuery);\n    const isCostDistributionFeatureEnabled = featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state);\n    const costDistribution = groupBy === 'project' && isCostDistributionFeatureEnabled ? getCostDistribution() : undefined;\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign(Object.assign({}, baseQuery), (costDistribution === ComputedReportItemValueType.distributed && {\n        order_by: {\n            distributed_cost: 'desc',\n        },\n    })), queryFromRoute);\n    const reportQuery = {\n        category: query.category,\n        currency,\n        delta: costDistribution === ComputedReportItemValueType.distributed ? 'distributed_cost' : 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costDistribution,\n        currency,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OcpDetails)));\n"],"names":["styles","selector","display","alignItems","label","marginBottom","marginRight","var","whiteSpace","costDistributionOptions","messages","costDistributionType","value","distributed","total","CostDistributionBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","costDistribution","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","single","map","SelectOption","description","desc","key","intl","options","push","toString","formatMessage","event","setState","render","style","Title","headingLevel","size","TitleSizes","md","costDistributionLabel","mapStateToProps","CostDistributionConnect","connect","injectIntl","marginLeft","costValue","marginTop","costLabelUnit","fontSize","color","dateTitle","textAlign","header","backgroundColor","padding","headerContent","justifyContent","headerContentLeft","minHeight","headerContentRight","info","verticalAlign","infoIcon","infoTitle","fontWeight","title","paddingBottom","getIdKeyForGroupBy","groupBy","project","cluster","node","groupByOptions","tagPathsType","ocp","DetailsHeaderBase","currency","isCostDistributionFeatureEnabled","isExportsFeatureEnabled","onCostDistributionSelected","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","count","showCostDistribution","distributed_overhead","cost","supplementaryCost","infrastructureCost","reportItemValue","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","ocpDetailsTitle","onSelected","showTags","Tooltip","content","dashboardTotalCostTooltip","enableFlip","providersQueryString","all","providersFetchStatus","featureFlags","DetailsHeader","reportPathsType","recommendations","reportType","ros","DetailsOptimization","updateReport","fetchReport","reportQueryString","getBreakdownLink","router","undefined","Link","to","basePath","routes","ocpDetailsBreakdown","path","isOptimizationsTab","componentDidMount","reportQuery","reportError","reportFetchStatus","mapDispatchToProps","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","groupByTagKey","hiddenColumns","isAllSelected","isRosFeatureEnabled","selectedItems","isGroupByProject","computedItems","idKey","name","tagNames","nameColumn","hidden","optimizations","monthOverMonthChange","ocpDetailsInfrastructureCost","managedColumn","ocpDetailsSupplementaryCost","orderBy","costColumn","length","isSortable","detailsResourceNames","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","isPlatformCosts","classification","isUnallocatedCosts","isOverheadCosts","platformDistributed","workerUnallocatedDistributed","infoDescription","actions","getActions","cells","Label","overheadDesc","overhead","defaultLabel","selected","val","selectionDisabled","filteredColumns","filter","column","has","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","providerType","showPriceListOption","percentValue","toFixed","percentOfCost","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","percent","infoArrow","ininfoArrow","infoArrowDesc","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","filterBy","isLoading","onSort","isActionsCell","DetailsTable","tagType","tag","DetailsToolbarBase","getCategoryOptions","tagReport","filterByValues","fetchTag","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","onPlatformCostsChanged","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExcludes","showExport","showFilter","showPlatformCosts","resolution","time_scope_units","time_scope_value","key_only","limit","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","global_spacer_lg","paddingTop","ocpDetails","paginationContainer","global_BackgroundColor_light_100","global_spacer_md","tableContainer","toolbarContainer","baseQuery","offset","filter_by","exclude","group_by","order_by","defaultColumnOptions","ocpDetailsInfrastructureCostDesc","ocpDetailsSupplementaryCostDesc","OcpDetails","stateProps","dispatchProps","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","onClose","handleColumnManagementModalClose","onSave","handleColumnManagementModalSave","getComputedItems","groupById","getExportModal","items","isAllItems","handleExportModalClose","getPagination","isBottom","page","trunc","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","openShift","placement","PaginationVariant","bottom","top","widgetId","getTable","inProgress","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handlePlatformCostsChanged","action","handleGroupBySelected","groupByKey","newQuery","parse","category","delta","navigate","location","replace","checked","isSelected","newItems","bind","prevState","noReport","noLocation","search","complete","queryFromRoute","distributed_cost"],"sourceRoot":""}