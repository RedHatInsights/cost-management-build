{"version":3,"file":"js/160.1669041311256.50182b564adf597bbdc4.js","mappings":"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","sources":["webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/views/details/components/tag/tag.styles.ts","webpack:///./src/routes/views/details/components/tag/tagContent.tsx","webpack:///./src/routes/views/details/components/tag/tagModal.tsx","webpack:///./src/routes/views/details/components/tag/tagLink.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/views/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.tsx","webpack:///./src/routes/views/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/views/details/components/costChart/costChart.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.tsx","webpack:///./src/routes/views/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryCard.tsx","webpack:///./src/routes/views/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/views/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/views/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/views/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/utils/paths.ts"],"sourcesContent":["import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, redirectToCostModel, history, item: { source_uuid }, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], history) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { TagContent } from './tagContent';\nconst tagReportType = TagType.tag;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, query, tagReport, intl } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagModalBase));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = TagType.tag;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", { \"data-testid\": \"tag-lnk\", href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }, count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { breakdownDescKey, breakdownTitleKey, getQueryRoute, orgUnitIdKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { TagLink } from 'routes/views/details/components/tag';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getTotalCostDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = () => {\n            const { detailsURL, groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            // Don't want these params when returning to the details page\n            if (newQuery.filter) {\n                newQuery.filter.account = undefined;\n                newQuery[breakdownDescKey] = undefined;\n                newQuery[orgUnitIdKey] = undefined;\n                newQuery[breakdownTitleKey] = undefined;\n            }\n            return `${detailsURL}?${getQueryRoute(newQuery)}`;\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costType, currency, description, groupBy, intl, isCurrencyFeatureEnabled, onCostTypeSelected, onCurrencySelected, query, showCostType = false, tabs, tagReportPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'project' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            React.createElement(Link, { to: this.buildDetailsLink() }, intl.formatMessage(messages.breakdownBackToDetails, {\n                                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagReportPathsType }),\n                                groupBy: groupByKey,\n                            }))))),\n                React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getTotalCostDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }))))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { handleCostTypeSelected, handleCurrencySelected } from 'routes/views/utils/history';\nimport { hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { FetchStatus } from 'store/common';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\n// eslint-disable-next-line no-shadow\nvar BreakdownTab;\n(function (BreakdownTab) {\n    BreakdownTab[\"costOverview\"] = \"cost-overview\";\n    BreakdownTab[\"historicalData\"] = \"historical-data\";\n})(BreakdownTab || (BreakdownTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case BreakdownTab.costOverview:\n            return 'cost-overview';\n        case BreakdownTab.historicalData:\n            return 'historical-data';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.costOverview,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.historicalData,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === BreakdownTab.costOverview) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === BreakdownTab.historicalData) {\n                return historicalDataComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === BreakdownTab.costOverview) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === BreakdownTab.historicalData) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { location, fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            if (location.search) {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, reportError, reportQueryString } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, currency, description, detailsURL, emptyStateTitle, groupBy, history, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress && reportFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.complete && reportFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === FetchStatus.complete;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: value => handleCostTypeSelected(history, query, value), onCurrencySelected: value => handleCurrencySelected(history, query, value), query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nexport default injectIntl(BreakdownBase);\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { item } = this.props;\n        if (!item.clusters) {\n            return null;\n        }\n        return item.clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, intl } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, { groupBy, name: item.label }), width: '50%' },\n            React.createElement(ClusterContent, { item: item })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, report, intl } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        const item = computedItems && computedItems.length ? computedItems[0] : undefined;\n        if (!item) {\n            return null;\n        }\n        for (const cluster of item.clusters) {\n            const prefix = someClusters.length > 0 ? ', ' : '';\n            const clusterString = `${prefix}${cluster}`;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + clusterString.length > maxChars) {\n                    someClusters.push(clusterString\n                        .slice(0, maxChars - charCount)\n                        .trim()\n                        .concat('...'));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            charCount += clusterString.length;\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", { \"data-testid\": \"cluster-lnk\", href: \"#/\", onClick: this.handleOpen }, intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 475,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 80, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.breakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.breakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.breakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './summaryModal.styles';\nconst reportType = ReportType.cost;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { costType, currency, groupBy, query, reportGroupBy, reportPathsType, intl } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, { ouiaId: \"view-all-btn\", onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }, intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costType: costType, currency: currency, groupBy: groupBy, groupByValue: groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { reportGroupBy, reportFetchStatus, intl } = this.props;\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.breakdownSummaryTitle, { value: reportGroupBy }))),\n            React.createElement(CardBody, null, reportFetchStatus === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        report,\n        reportFetchStatus,\n        reportPathsType,\n        reportType,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryBase));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== this.props.reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, report, intl, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || reportType === ReportType.volume) {\n            const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n            const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase));\nexport default UsageChart;\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Cluster } from 'routes/views/details/components/cluster';\nimport { CostChart } from 'routes/views/details/components/costChart';\nimport { SummaryCard } from 'routes/views/details/components/summary';\nimport { UsageChart } from 'routes/views/details/components/usageChart';\nimport { styles } from 'routes/views/details/ocpDetails/detailsHeader.styles';\nimport { CostOverviewWidgetType } from 'store/breakdown/costOverview/common/costOverviewCommon';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, report, intl } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report }))));\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.breakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.breakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, currency, groupBy, query } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                if (groupById === groupBy ||\n                    (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                    (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, currency: currency, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case CostOverviewWidgetType.cluster:\n                return this.getClusterChart(widget);\n            case CostOverviewWidgetType.cost:\n                return this.getCostChart(widget);\n            case CostOverviewWidgetType.cpuUsage:\n                return this.getCpuUsageChart(widget);\n            case CostOverviewWidgetType.memoryUsage:\n                return this.getMemoryUsageChart(widget);\n            case CostOverviewWidgetType.reportSummary:\n                return this.getSummaryCard(widget);\n            case CostOverviewWidgetType.volumeUsage:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n    },\n    defaultLabel: {\n        minWidth: '63px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isLoading, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), gridBreakPoint: \"grid-2xl\" },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    } })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: cellIndex === row.cells.length - 1 }, item.value))))))))),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(DataTable);\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 725 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 725\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/views/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, DatumType.cumulative, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, DatumType.cumulative, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, DatumType.cumulative, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, DatumType.cumulative, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(Object.assign(Object.assign({}, currentQuery), { cost_type: costType, currency }));\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(Object.assign(Object.assign({}, previousQuery), { cost_type: costType, currency }));\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip, getDateRange, } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === ReportType.cost;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(Object.assign(Object.assign({}, currentQuery), { cost_type: costType, currency }));\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(Object.assign(Object.assign({}, previousQuery), { cost_type: costType, currency }));\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 925 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 925\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, DatumType.rolling, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, DatumType.rolling, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, DatumType.rolling, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, DatumType.rolling, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, DatumType.rolling, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, DatumType.rolling, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === ReportType.instanceType || reportType === ReportType.storage;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataWidgetType } from 'store/breakdown/historicalData/common/historicalDataCommon';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === ReportPathsType.azure) {\n                return reportType === ReportType.instanceType ? 'virtual_machine' : reportType;\n            }\n            return reportType === ReportType.instanceType ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case HistoricalDataWidgetType.cost:\n                return this.getCostChart(widget);\n            case HistoricalDataWidgetType.trend:\n                return this.getTrendChart(widget);\n            case HistoricalDataWidgetType.usage:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, label, description, groupBy, }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n            [groupBy]: label,\n        } });\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, title, type, }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && { [orgUnitIdKey]: groupByOrg })), { group_by: {\n            [groupBy]: id, // This may be overridden below\n        } });\n    if (type === 'account') {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\n"],"names":["DetailsActionsBase","constructor","stateProps","dispatchProps","super","this","defaultState","isDropdownOpen","isExportModalOpen","state","Object","assign","getExportModal","groupBy","item","reportPathsType","reportQueryString","props","count","isOpen","items","onClose","handleExportModalClose","setState","handleExportModalOpen","handleOnSelect","handleOnToggle","bind","render","isDisabled","showPriceListOption","intl","redirectToCostModel","history","source_uuid","DropdownItem","component","key","onClick","formatMessage","messages","unshift","includes","length","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","mapStateToProps","mapDispatchToProps","costModels","DetailsActionsConnect","connect","injectIntl","styles","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","marginBottom","tagLink","marginLeft","global_spacer_sm","tagsContainer","marginRight","global_spacer_3xl","marginTop","TagContentBase","arguments","getDataListItems","tagReport","result","data","val","values","id","push","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","groupByValue","dataListItems","style","value","DataList","isCompact","map","TagContent","tagReportType","TagModalBase","getTagValueCount","handleClose","componentDidMount","fetchTag","tagReportPathsType","tagQueryString","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","query","filter","account","Modal","title","width","location","search","groupByOrgValue","filterByParams","filter_by","keys","indexOf","undefined","newQuery","resolution","time_scope_units","time_scope_value","tagReportFetchStatus","TagModal","TagLinkBase","handleOpen","event","preventDefault","Boolean","href","cost","global_spacer_xl","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","global_spacer_md","header","backgroundColor","global_BackgroundColor_100","headerContent","display","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeader","buildDetailsLink","detailsURL","groupByKey","JSON","parse","stringify","group_by","getTotalCost","report","hasCost","meta","total","format","units","currency","description","isCurrencyFeatureEnabled","onCostTypeSelected","onCurrencySelected","showCostType","filterByAccount","groupByOrg","groupByTag","showTags","className","to","Title","headingLevel","size","TitleSizes","featureFlags","BreakdownTab","getIdKeyForTab","tab","costOverview","historicalData","BreakdownBase","activeTabKey","getAvailableTabs","contentRef","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","ref","getTabItem","costOverviewComponent","historicalDataComponent","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","updateReport","fetchReport","reportType","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","name","label","ClusterModal","ClusterBase","showAll","charCount","someClusters","allClusters","computedItems","getComputedReportItems","idKey","clusterString","slice","trim","concat","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","_item","formatOptions","toString","totalValue","exclude","cost_type","SummaryModalContent","SummaryModalBase","variant","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","ouiaId","handleBulletChartModalOpen","type","ButtonType","ButtonVariant","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","limit","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasCapacity","capacityUnits","hasRequest","request","requestUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","enableFlip","bodyContent","rel","target","chartName","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","usePlaceholder","getVolumeUsageChart","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","costColumn","defaultLabel","minWidth","emptyState","infoArrow","infoArrowDesc","nameColumn","DataTable","getEmptyState","queryFromRoute","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","getSortBy","columns","orderBy","direction","order_by","getSortParams","sortBy","onSort","handleOnSort","columnIndex","isSelected","rowId","onSelected","newRows","row","selected","SortByDirection","isLoading","TableComposable","gridBreakPoint","Thead","Tr","col","Th","modifier","sort","isSortable","Tbody","Td","colSpan","Bullseye","Spinner","rowIndex","cells","cellIndex","dataLabel","select","disable","selectionDisabled","_event","isActionCell","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","getTrendChart","getUsageChart","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","getBreakdownPath","basePath","getOrgBreakdownPath"],"sourceRoot":""}