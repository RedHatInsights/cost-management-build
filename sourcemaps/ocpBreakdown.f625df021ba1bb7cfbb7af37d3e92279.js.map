{"version":3,"file":"js/ocpBreakdown.cfc101731fdb0101f742.js","mappings":"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","sources":["webpack:///./src/routes/views/details/ocpBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/ocpBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/ocpBreakdown/optimizationsBadge.tsx","webpack:///./src/routes/views/details/ocpBreakdown/ocpBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { title }) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n        title,\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { Badge } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nconst reportPathsType = RosPathsType.recommendation;\nconst reportType = RosType.ros;\nclass OptimizationsBadge extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { intl, report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        return React.createElement(Badge, { screenReaderText: intl.formatMessage(messages.recommendationsDetails, { count }) }, count);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const query = {\n        project, // project filter\n    };\n    const reportQueryString = getQuery(Object.assign({}, query));\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OptimizationsBadge));\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport Recommendations from 'routes/views/recommendations/recommendations';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { isPlatformCosts } from 'routes/views/utils/paths';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nimport OptimizationsBadge from './optimizationsBadge';\nconst detailsURL = formatPath(routes.ocpDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        category: queryFromRoute.category, // Needed to restore details page state\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { filter_by: Object.assign(Object.assign({}, newQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })), category: undefined, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { currency: currency, groupBy: groupBy, isPlatformCosts: isPlatformCosts(queryFromRoute), report: report, title: title })),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        isRecommendationsTab: queryFromRoute.recommendationsTab !== undefined,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        optimizationsBadgeComponent: React.createElement(OptimizationsBadge, { project: groupByValue }),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        providerType: ProviderType.ocp,\n        query: queryFromRoute,\n        recommendationsComponent: groupBy === 'project' && groupByValue !== '*' ? React.createElement(Recommendations, null) : undefined,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.ocp,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    closeRecommendationsDrawer: uiActions.closeRecommendationsDrawer,\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default OcpBreakdown;\n"],"names":["mapStateToProps","state","title","selectWidgets","ocpCostOverview","widgets","CostOverview","connect","props","ocpHistoricalData","HistoricalData","reportPathsType","reportType","OptimizationsBadge","constructor","super","arguments","this","defaultState","Object","assign","updateReport","fetchReport","reportQueryString","componentDidMount","render","intl","report","count","meta","Badge","screenReaderText","formatMessage","messages","project","query","reportError","reportFetchStatus","mapDispatchToProps","injectIntl","detailsURL","routes","router","queryFromRoute","location","search","groupBy","groupByValue","currency","featureFlags","undefined","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","category","exclude","group_by","providersQueryString","providers","providersFetchStatus","costOverviewComponent","isPlatformCosts","description","emptyStateTitle","historicalDataComponent","isRecommendationsTab","recommendationsTab","isRosFeatureEnabled","optimizationsBadgeComponent","providerType","recommendationsComponent","tagReportPathsType","closeRecommendationsDrawer","ui"],"sourceRoot":""}