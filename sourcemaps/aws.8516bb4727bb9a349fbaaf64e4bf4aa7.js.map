{"version":3,"file":"js/aws.1668795302556.25ddc1d2a973e8ee12c7.js","mappings":"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","sources":["webpack:///./src/routes/views/details/awsBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/awsBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/awsBreakdown/awsBreakdown.tsx","webpack:///./src/utils/computedReport/getComputedAwsReportItems.ts","webpack:///./src/routes/views/details/awsDetails/awsDetails.styles.ts","webpack:///./src/routes/views/details/awsDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/awsDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/awsDetails/detailsTable.tsx","webpack:///./src/routes/views/details/awsDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/awsDetails/awsDetails.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, orgUnitIdKey } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.awsDetails;\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.aws;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const costType = getCostType();\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { costType: costType, currency: currency, groupBy: groupBy, query: query, report: report })),\n        costType,\n        currency,\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.awsDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { costType: costType, currency: currency }),\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        providerType: ProviderType.aws,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        showCostType: true,\n        tagReportPathsType: TagPathsType.aws,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AwsBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { OrgPathsType } from 'api/orgs/org';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = OrgPathsType.aws;\nconst tagReportPathsType = TagPathsType.aws;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { costType, currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.awsDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType }),\n                    React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected }))),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getOrgBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nconst reportPathsType = ReportPathsType.aws;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByOrg, groupByTagKey, isAllSelected, report, selectedItems, intl } = this.props;\n            if (!report) {\n                return;\n            }\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupBy,\n            });\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: groupByOrg\n                            ? intl.formatMessage(messages.names, { count: 2 })\n                            : intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupBy === 'account' ? 'account_alias' : groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                let name = (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: paths.awsDetailsBreakdown,\n                        description: item.id,\n                        groupBy,\n                        groupByOrg,\n                        id: item.id,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                const selectable = !(label === `no-${groupBy}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: !selectable,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, index, disabled = false) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: disabled, item: item, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport || prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { OrgPathsType, OrgType } from 'api/orgs/org';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagKey } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst orgReportPathsType = OrgPathsType.aws;\nconst orgReportType = OrgType.org;\nconst tagReportPathsType = TagPathsType.aws;\nconst tagReportType = TagType.tag;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, orgReport, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportFetchStatus, orgQueryString, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (orgReportFetchStatus !== FetchStatus.inProgress) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, orgReportFetchStatus, query, orgQueryString, tagReport, tagReportFetchStatus, tagQueryString, } = this.props;\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (orgReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n                }\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportFetchStatus !== FetchStatus.inProgress) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.aws, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    const orgQueryString = cloneDeep(tagQueryString);\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    return {\n        orgReport,\n        orgReportFetchStatus,\n        orgQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getRouteForQuery, handleCostTypeSelected, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/history';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.aws;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { history, intl, query, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(history, query, perPage), onSetPage: (event, pageNumber) => handleSetPage(history, query, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.aws),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { history, query, report, reportFetchStatus, reportQueryString } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupByOrg = getGroupByOrgValue(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, groupByOrg: groupByOrg, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(history, query, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { history, query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(history, query, filter), onFilterRemoved: filter => handleFilterRemoved(history, query, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, reportQueryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, reportQueryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, currency, history, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.awsDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.aws, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { costType: costType, currency: currency, groupBy: groupById, onCostTypeSelected: value => handleCostTypeSelected(history, query, value), onCurrencySelected: value => handleCurrencySelected(history, query, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const costType = getCostType();\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costType,\n        currency,\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","injectIntl","connect","awsHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupByOrgValue","groupBy","groupByValue","costType","currency","featureFlags","undefined","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","account","exclude","group_by","reportQueryString","cost_type","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","showCostType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","display","dateTitle","textAlign","header","padding","headerContent","justifyContent","headerContentLeft","headerContentRight","global_spacer_sm","groupByOptions","label","value","orgReportPathsType","DetailsHeaderBase","constructor","super","arguments","this","handleCostTypeSelected","onCostTypeSelected","render","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","onSelect","isDisabled","onSelected","options","showOrgs","showTags","Boolean","format","units","DetailsHeader","DetailsTableBase","columns","rows","initDatum","groupByOrg","groupByTagKey","isAllSelected","selectedItems","computedItems","idKey","name","orderBy","length","isSortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","to","basePath","id","type","selectable","desc","push","cells","selected","find","val","selectionDisabled","setState","disabled","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","defaultState","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","orgReportFetchStatus","orgQueryString","tagReportFetchStatus","tagQueryString","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","cloneDeep","DetailsToolbarConnect","DetailsToolbar","baseQuery","delta","offset","order_by","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","groupById","getExportModal","items","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","history","page","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","indexOf","slice","parse","replace","isSelected","newItems","updateReport","bind","prevState","noReport","noLocation","queryFromRoute"],"sourceRoot":""}