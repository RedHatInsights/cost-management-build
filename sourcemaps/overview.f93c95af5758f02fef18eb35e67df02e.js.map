{"version":3,"file":"js/overview.3d5b4e4c3a99c5e0f323.js","mappings":"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","sources":["webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/routes/views/components/perspective/perspective.tsx","webpack:///./src/routes/views/overview/components/dashboardBase.tsx","webpack:///./src/routes/views/overview/components/optimizationsSummary/optimizationsSummary.tsx","webpack:///./src/routes/views/overview/components/chartComparison.tsx","webpack:///./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack:///./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboard.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack:///./src/routes/views/overview/overview.styles.ts","webpack:///./src/routes/views/overview/overview.tsx","webpack:///./src/api/queries/overviewQuery.ts","webpack:///./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\n// RHEL options\nconst rhelOptions = [{ label: messages.perspectiveValues, value: 'rhel' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, isOciFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci && isOciFeatureEnabled) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst Perspective = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, hasRhel, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isOciFeatureEnabled, isRhelTab, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    // Note isInfrastructureTab and isRhelTab will be undefined for cost explorer\n    if (isInfrastructureTab !== undefined || isRhelTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n                isOciFeatureEnabled,\n            }));\n        }\n        else if (isRhelTab) {\n            if (hasRhel) {\n                options.push(...rhelOptions);\n            }\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        if (hasRhel) {\n            options.push(...rhelOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n            isOciFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nexport default Perspective;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, currency, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details && widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency })))));\n    }))));\nexport default DashboardBase;\n","import './optimizationsSummary.scss';\nimport { Card, CardBody, CardTitle, Skeleton, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { FetchStatus } from 'store/common';\nimport { formatPath } from 'utils/paths';\nimport { skeletonWidth } from 'utils/skeleton';\nconst OptimizationsSummaryBase = ({ intl, report, status, title }) => {\n    const count = report && report.meta ? report.meta.count : 0;\n    const description = intl.formatMessage(messages.optimizationsDetails, { count });\n    return (React.createElement(Card, { className: \"summary\" },\n        React.createElement(CardTitle, null,\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(title))),\n        React.createElement(CardBody, null, status === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { width: \"16%\" }),\n            React.createElement(Skeleton, { className: \"skeleton\", width: skeletonWidth.md }))) : count > 0 ? (React.createElement(Link, { to: formatPath(routes.optimizations.path) }, description)) : (description))));\n};\nconst OptimizationsSummary = injectIntl(OptimizationsSummaryBase);\nexport default OptimizationsSummary;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ComputedReportItemType, DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { getComputedForecast, transformForecast, transformForecastCone, } from 'routes/views/components/charts/common/chartDatumForecast';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { OptimizationsSummary } from 'routes/views/overview/components/optimizationsSummary';\nimport { DashboardChartType } from 'store/dashboard/common/dashboardCommon';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\n// eslint-disable-next-line no-shadow\nvar Comparison;\n(function (Comparison) {\n    Comparison[\"cumulative\"] = \"cumulative\";\n    Comparison[\"daily\"] = \"daily\";\n})(Comparison || (Comparison = {}));\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            currentComparison: Comparison.cumulative,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === DashboardChartType.dailyTrend) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.dailyCost) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === DashboardChartType.trend) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.usage) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: Comparison.daily },\n                { label: cumulativeTitle, value: Comparison.cumulative, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === Comparison.daily;\n            const datumType = daily ? DatumType.rolling : trend.datumType;\n            const computedForecast = getComputedForecast(forecast, report, computedForecastItem, datumType);\n            const forecastData = transformForecast(computedForecast, datumType, computedForecastItem);\n            const forecastConeData = transformForecastCone(computedForecast, datumType, computedForecastItem);\n            return { forecastData, forecastConeData };\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === ComputedReportItemType.usage) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getOptimizationsSummary = () => {\n            const { rosReportFetchStatus, rosReport, titleKey } = this.props;\n            return React.createElement(OptimizationsSummary, { status: rosReportFetchStatus, report: rosReport, title: titleKey });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({ activeTabKey: tabIndex });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, details, fetchForecasts, fetchReports, fetchRosReports, id, isRosFeatureEnabled, trend, updateTab, widgetId, } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (trend && trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n        if (!details.showOptimizations && fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (details.showOptimizations && fetchRosReports && isRosFeatureEnabled) {\n            fetchRosReports(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType || prevProps.currency !== currency) {\n            fetchReports(widgetId);\n            if (trend && trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details, isRosFeatureEnabled } = this.props;\n        if (details.showOptimizations) {\n            return isRosFeatureEnabled ? this.getOptimizationsSummary() : null;\n        }\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport default DashboardWidgetBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, AwsDashboardTab } from 'store/dashboard/awsDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsDashboardTab.services:\n            return 'service';\n        case AwsDashboardTab.accounts:\n            return 'account';\n        case AwsDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { costType: getCostType(), getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors, AwsOcpDashboardTab } from 'store/dashboard/awsOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsOcpDashboardTab.services:\n            return 'service';\n        case AwsOcpDashboardTab.accounts:\n            return 'account';\n        case AwsOcpDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), (featureFlagsSelectors.selectIsCostTypeFeatureEnabled(state) && { costType: getCostType() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, AzureDashboardTab } from 'store/dashboard/azureDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureDashboardTab.service_names:\n            return 'service_name';\n        case AzureDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, AzureOcpDashboardTab, } from 'store/dashboard/azureOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureOcpDashboardTab.service_names:\n            return 'service_name';\n        case AzureOcpDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureOcpDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors, GcpDashboardTab } from 'store/dashboard/gcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpDashboardTab.regions:\n            return 'region';\n        case GcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors, GcpOcpDashboardTab } from 'store/dashboard/gcpOcpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpOcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpOcpDashboardTab.regions:\n            return 'region';\n        case GcpOcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors, IbmDashboardTab } from 'store/dashboard/ibmDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case IbmDashboardTab.services:\n            return 'service';\n        case IbmDashboardTab.projects:\n            return 'project';\n        case IbmDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, OcpCloudDashboardTab, } from 'store/dashboard/ocpCloudDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpCloudDashboardTab.accounts:\n            return 'account';\n        case OcpCloudDashboardTab.regions:\n            return 'region';\n        case OcpCloudDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, OcpDashboardTab } from 'store/dashboard/ocpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { rosSelectors } from 'store/ros';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpDashboardTab.clusters:\n            return 'cluster';\n        case OcpDashboardTab.nodes:\n            return 'node';\n        case OcpDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    })), (widget.rosPathsType &&\n        widget.rosType && {\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        rosReport: rosSelectors.selectRos(state, widget.rosPathsType, widget.rosType, queries.recommendations),\n        rosReportFetchStatus: rosSelectors.selectRosFetchStatus(state, widget.rosPathsType, widget.rosType, queries.recommendations),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    fetchRosReports: ocpDashboardActions.fetchWidgetRosReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardActions, rhelDashboardSelectors, RhelDashboardTab } from 'store/dashboard/rhelDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './rhelDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case RhelDashboardTab.clusters:\n            return 'cluster';\n        case RhelDashboardTab.nodes:\n            return 'node';\n        case RhelDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = rhelDashboardSelectors.selectWidget(state, widgetId);\n    const queries = rhelDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: rhelDashboardActions.fetchWidgetForecasts,\n    fetchReports: rhelDashboardActions.fetchWidgetReports,\n    updateTab: rhelDashboardActions.changeWidgetTab,\n};\nconst RhelDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { RhelDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardSelectors } from 'store/dashboard/rhelDashboard';\nimport { RhelDashboardWidget } from './rhelDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: RhelDashboardWidget,\n        selectWidgets: rhelDashboardSelectors.selectWidgets(state),\n        widgets: rhelDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst RhelDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default RhelDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors, OciDashboardTab } from 'store/dashboard/ociDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OciDashboardTab.product_services:\n            return 'product_service';\n        case OciDashboardTab.payer_tenant_ids:\n            return 'payer_tenant_id';\n        case OciDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign({}, widget), (featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) && { currency: getCurrency() })), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport { getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { UserAccessType } from 'api/userAccess';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { Loading } from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { AwsDashboard } from 'routes/views/overview/awsDashboard';\nimport { AwsOcpDashboard } from 'routes/views/overview/awsOcpDashboard';\nimport { AzureDashboard } from 'routes/views/overview/azureDashboard';\nimport { AzureOcpDashboard } from 'routes/views/overview/azureOcpDashboard';\nimport { GcpDashboard } from 'routes/views/overview/gcpDashboard';\nimport { GcpOcpDashboard } from 'routes/views/overview/gcpOcpDashboard';\nimport { IbmDashboard } from 'routes/views/overview/ibmDashboard';\nimport { OcpCloudDashboard } from 'routes/views/overview/ocpCloudDashboard';\nimport { OcpDashboard } from 'routes/views/overview/ocpDashboard';\nimport { RhelDashboard } from 'routes/views/overview/rhelDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getCostType } from 'utils/costType';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { getCurrency } from 'utils/localStorage';\nimport { withRouter } from 'utils/router';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, isRhelAvailable, } from 'utils/userAccess';\nimport { OciDashboard } from './ociDashboard';\nimport { styles } from './overview.styles';\n// eslint-disable-next-line no-shadow\nvar InfrastructurePerspective;\n(function (InfrastructurePerspective) {\n    InfrastructurePerspective[\"aws\"] = \"aws\";\n    InfrastructurePerspective[\"awsOcp\"] = \"aws_ocp\";\n    InfrastructurePerspective[\"azure\"] = \"azure\";\n    InfrastructurePerspective[\"azureOcp\"] = \"azure_ocp\";\n    InfrastructurePerspective[\"gcp\"] = \"gcp\";\n    InfrastructurePerspective[\"gcpOcp\"] = \"gcp_ocp\";\n    InfrastructurePerspective[\"ibm\"] = \"ibm\";\n    InfrastructurePerspective[\"ibmOcp\"] = \"ibm_ocp\";\n    InfrastructurePerspective[\"oci\"] = \"oci\";\n    InfrastructurePerspective[\"ocpCloud\"] = \"ocp_cloud\";\n})(InfrastructurePerspective || (InfrastructurePerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OcpPerspective;\n(function (OcpPerspective) {\n    OcpPerspective[\"ocp\"] = \"ocp\";\n})(OcpPerspective || (OcpPerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OverviewTab;\n(function (OverviewTab) {\n    OverviewTab[\"infrastructure\"] = \"infrastructure\";\n    OverviewTab[\"ocp\"] = \"ocp\";\n    OverviewTab[\"rhel\"] = \"rhel\";\n})(OverviewTab || (OverviewTab = {}));\n// eslint-disable-next-line no-shadow\nvar RhelPerspective;\n(function (RhelPerspective) {\n    RhelPerspective[\"rhel\"] = \"rhel\";\n})(RhelPerspective || (RhelPerspective = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OverviewTab.infrastructure:\n            return 'infrastructure';\n        case OverviewTab.ocp:\n            return 'ocp';\n        case OverviewTab.rhel:\n            return 'rhel';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const availableTabs = [];\n            const infrastructureTabs = this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.infrastructure,\n                    },\n                ]\n                : undefined;\n            const ocpTabs = this.isOcpAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.ocp,\n                    },\n                ]\n                : undefined;\n            const rhelTabs = this.isRhelAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.rhel,\n                    },\n                ]\n                : undefined;\n            if (isFinsightsFeatureEnabled) {\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n                if (rhelTabs) {\n                    availableTabs.push(...rhelTabs);\n                }\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n            }\n            else {\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType, isCostTypeFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === InfrastructurePerspective.aws ||\n                (currentItem === InfrastructurePerspective.awsOcp && isCostTypeFeatureEnabled)) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrency = () => {\n            const { currency } = this.props;\n            return React.createElement(Currency, { onSelect: this.handleCurrencySelected, currency: currency });\n        };\n        this.getCurrentTab = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const hasRhel = this.isRhelAvailable();\n            const hasInfrastructure = hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud;\n            const showInfrastructureOnly = hasInfrastructure && !hasOcp && !hasRhel;\n            const showOcpOnly = hasOcp && !hasInfrastructure && !hasRhel;\n            const showRhelOnly = hasRhel && !hasInfrastructure && !hasOcp;\n            if (showOcpOnly) {\n                return OverviewTab.ocp;\n            }\n            else if (showInfrastructureOnly) {\n                return OverviewTab.infrastructure;\n            }\n            else if (showRhelOnly) {\n                return OverviewTab.rhel;\n            }\n            else {\n                if (isFinsightsFeatureEnabled) {\n                    switch (activeTabKey) {\n                        case 0:\n                            return OverviewTab.infrastructure;\n                        case 1:\n                            return OverviewTab.rhel;\n                        case 2:\n                            return OverviewTab.ocp;\n                    }\n                }\n                switch (activeTabKey) {\n                    case 0:\n                        return OverviewTab.ocp;\n                    case 1:\n                        return OverviewTab.infrastructure;\n                }\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case InfrastructurePerspective.aws:\n                case InfrastructurePerspective.awsOcp:\n                case InfrastructurePerspective.azure:\n                case InfrastructurePerspective.oci:\n                case InfrastructurePerspective.azureOcp:\n                case InfrastructurePerspective.gcp:\n                case InfrastructurePerspective.gcpOcp:\n                case InfrastructurePerspective.ibm:\n                case InfrastructurePerspective.ibmOcp:\n                case InfrastructurePerspective.ocpCloud:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return InfrastructurePerspective.ocpCloud;\n            }\n            if (this.isAwsAvailable()) {\n                return InfrastructurePerspective.aws;\n            }\n            if (this.isAzureAvailable()) {\n                return InfrastructurePerspective.azure;\n            }\n            if (this.isOciAvailable()) {\n                return InfrastructurePerspective.oci;\n            }\n            if (this.isGcpAvailable()) {\n                return InfrastructurePerspective.gcp;\n            }\n            if (this.isIbmAvailable()) {\n                return InfrastructurePerspective.ibm;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case OcpPerspective.ocp:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return OcpPerspective.ocp;\n            }\n            return undefined;\n        };\n        this.getDefaultRhelPerspective = () => {\n            const { perspective, rhelProviders, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case RhelPerspective.rhel:\n                    return perspective;\n            }\n            if (isRhelAvailable(userAccess, rhelProviders)) {\n                return RhelPerspective.rhel;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled, isOciFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasRhel = this.isRhelAvailable();\n            // Note: No need to test \"OCP on cloud\" here, since that requires at least one of the providers below\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp || hasRhel)) {\n                return null;\n            }\n            let currentItem;\n            const currentTab = this.getCurrentTab();\n            switch (currentTab) {\n                case OverviewTab.infrastructure:\n                    currentItem = currentInfrastructurePerspective;\n                    break;\n                case OverviewTab.ocp:\n                    currentItem = currentOcpPerspective;\n                    break;\n                case OverviewTab.rhel:\n                    currentItem = currentRhelPerspective;\n                    break;\n            }\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), hasRhel: hasRhel, isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: OverviewTab.infrastructure === currentTab, isOciFeatureEnabled: isOciFeatureEnabled, isRhelTab: OverviewTab.rhel === currentTab, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { router } = this.props;\n            return `${router.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, ocpProviders, rhelProviders, } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === OverviewTab.infrastructure) {\n                if (currentInfrastructurePerspective === InfrastructurePerspective.ocpCloud) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.aws) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.awsOcp) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azure) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azureOcp) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcp) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcpOcp) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.ibm) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.oci) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.ocp) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === OcpPerspective.ocp) {\n                    return hasData ? React.createElement(OcpDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.rhel) {\n                const hasData = hasCurrentMonthData(rhelProviders) || hasPreviousMonthData(rhelProviders);\n                if (currentRhelPerspective === RhelPerspective.rhel) {\n                    return hasData ? React.createElement(RhelDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl, isFinsightsFeatureEnabled } = this.props;\n            if (tab === OverviewTab.infrastructure) {\n                if (isFinsightsFeatureEnabled) {\n                    return intl.formatMessage(messages.summary);\n                }\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === OverviewTab.ocp) {\n                return intl.formatMessage(messages.openShift);\n            }\n            else if (tab === OverviewTab.rhel) {\n                return intl.formatMessage(messages.rhel);\n            }\n        };\n        this.handleCostTypeSelected = () => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handleCurrencySelected = () => {\n            const { router, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { query, router } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === OverviewTab.infrastructure && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === OverviewTab.ocp && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { query, router } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n        this.isRhelAvailable = () => {\n            const { isFinsightsFeatureEnabled, rhelProviders, userAccess } = this.props;\n            return isFinsightsFeatureEnabled && isRhelAvailable(userAccess, rhelProviders);\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n            currentRhelPerspective: this.getDefaultRhelPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n                currentRhelPerspective: this.getDefaultRhelPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isCurrencyFeatureEnabled, isFinsightsFeatureEnabled, isIbmFeatureEnabled, isOciFeatureEnabled, userAccessFetchStatus, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === FetchStatus.complete &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable() &&\n            !this.isRhelAvailable();\n        const isLoading = providersFetchStatus === FetchStatus.inProgress || userAccessFetchStatus === FetchStatus.inProgress;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    isFinsightsFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rhel)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.rhelDesc)),\n                                        React.createElement(\"br\", null))),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    isOciFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && this.getCurrency())),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const perspective = queryFromRoute.perspective;\n    const isCurrencyFeatureEnabled = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state);\n    const currency = isCurrencyFeatureEnabled ? getCurrency() : undefined;\n    const isCostTypeFeatureEnabled = featureFlagsSelectors.selectIsCostTypeFeatureEnabled(state);\n    const costType = perspective === InfrastructurePerspective.aws ||\n        (perspective === InfrastructurePerspective.awsOcp && isCostTypeFeatureEnabled)\n        ? getCostType()\n        : undefined;\n    const query = Object.assign({ tabKey }, (perspective && { perspective }));\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, UserAccessType.all, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, UserAccessType.all, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, UserAccessType.all, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, ProviderType.aws),\n        azureProviders: filterProviders(providers, ProviderType.azure),\n        costType,\n        currency,\n        gcpProviders: filterProviders(providers, ProviderType.gcp),\n        ibmProviders: filterProviders(providers, ProviderType.ibm),\n        isCostTypeFeatureEnabled,\n        isCurrencyFeatureEnabled,\n        isFinsightsFeatureEnabled: featureFlagsSelectors.selectIsFinsightsFeatureEnabled(state),\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        isOciFeatureEnabled: featureFlagsSelectors.selectIsOciFeatureEnabled(state),\n        ociProviders: filterProviders(providers, ProviderType.oci),\n        ocpProviders: filterProviders(providers, ProviderType.ocp),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        rhelProviders: filterProviders(providers, ProviderType.rhel),\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OverviewBase)));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import { UserAccessType } from 'api/userAccess';\nconst hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.aws);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.azure);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.oci);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.cost_model);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.gcp);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, UserAccessType.gcp) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ocp);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n// Returns true if user has access to RHEL\nexport const hasRhelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.rhel);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRhelAvailable = (userAccess, rhelProviders) => {\n    return hasRhelAccess(userAccess) && hasProviders(rhelProviders);\n};\n// Returns true if user has access to ROS\nexport const hasRosAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ros);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRosAvailable = (userAccess, rosProviders) => {\n    return hasRosAccess(userAccess) && hasProviders(rosProviders);\n};\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","infrastructureAwsOptions","label","messages","value","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","rhelOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","isOciFeatureEnabled","options","push","currentItem","hasOcp","hasOcpCloud","hasRhel","isDisabled","isInfrastructureTab","isRhelTab","onSelected","undefined","costType","currency","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","map","widgetId","widget","details","showHorizontal","GridItem","sm","key","Object","assign","lg","xl","xl2","injectIntl","intl","report","status","title","count","meta","description","formatMessage","Card","className","CardTitle","Title","headingLevel","size","TitleSizes","CardBody","Skeleton","width","skeleton","Link","to","routes","ChartComparisonBase","constructor","super","arguments","this","defaultState","props","find","option","default","isSelectOpen","state","getSelect","selectOptions","getSelectOptions","selection","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","SelectOption","toString","event","onItemClicked","setState","render","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","styles","comparison","marginBottom","global_spacer_md","comparisonContainer","display","tabs","marginTop","global_spacer_2xl","tabItems","global_spacer_xl","Comparison","DashboardWidgetBase","activeTabKey","currentComparison","cumulative","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","daily","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","type","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","style","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","forecast","computedForecast","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","getDetailsLinkTitle","getHorizontalLayout","currentReportFetchStatus","detailsLink","getTabs","getTitle","getOptimizationsSummary","rosReportFetchStatus","rosReport","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","total","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","fetchRosReports","isRosFeatureEnabled","showOptimizations","componentDidUpdate","prevProps","mapStateToProps","awsDashboard","queries","featureFlags","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","forecastFetchStatus","previousReportFetchStatus","rosPathsType","rosType","ros","recommendations","OcpDashboardWidget","rhelDashboard","RhelDashboardWidget","ociDashboard","OciDashboardWidget","date","alignSelf","flexGrow","textAlign","marginLeft","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","headerContentRight","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","InfrastructurePerspective","OcpPerspective","OverviewTab","RhelPerspective","infrastructure","ocp","rhel","OverviewBase","getAvailableTabs","isFinsightsFeatureEnabled","infrastructureTabs","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","contentRef","ocpTabs","isOcpAvailable","rhelTabs","isRhelAvailable","getCostType","isCostTypeFeatureEnabled","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","awsOcp","handleCostTypeSelected","getCurrency","handleCurrencySelected","hasInfrastructure","showInfrastructureOnly","showRhelOnly","getDefaultInfrastructurePerspective","perspective","azure","oci","azureOcp","gcp","gcpOcp","ibm","ibmOcp","ocpCloud","getDefaultOcpPerspective","ocpProviders","userAccess","getDefaultRhelPerspective","rhelProviders","getPerspective","currentRhelPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getRouteForQuery","router","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","val","TabContent","ref","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","navigate","replace","tabKey","providers","providersFetchStatus","isCurrencyFeatureEnabled","userAccessFetchStatus","noProviders","isLoading","Popover","enableFlip","bodyContent","Button","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","providersQueryString","providersError","userAccessQueryString","userAccessError","hasAccess","userAccessType","result","Array","isArray","data","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasOciAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess","hasRhelAccess","hasRosAccess"],"sourceRoot":""}