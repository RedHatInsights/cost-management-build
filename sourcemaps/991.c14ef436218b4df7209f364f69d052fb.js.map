{"version":3,"file":"js/991.1668719247840.2f12395ba42eab68f40e.js","mappings":"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","sources":["webpack:///./src/routes/state/notAvailable/notAvailable.tsx","webpack:///./src/routes/views/components/export/exportModal.styles.ts","webpack:///./src/routes/views/components/export/exportSubmit.tsx","webpack:///./src/routes/views/components/export/exportModal.tsx","webpack:///./src/routes/views/components/groupBy/groupBy.styles.ts","webpack:///./src/routes/views/components/groupBy/groupByOrg.tsx","webpack:///./src/routes/views/components/groupBy/groupByTag.tsx","webpack:///./src/routes/views/components/groupBy/groupBy.tsx","webpack:///./src/routes/views/explorer/explorerUtils.ts","webpack:///./src/routes/views/utils/dateRange.ts","webpack:///./src/routes/views/utils/history.ts"],"sourcesContent":["import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(Unavailable, null))));\n};\nexport default withRouter(NotAvailable);\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    alert: {\n        marginBottom: global_spacer_md.var,\n    },\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        marginBottom: global_spacer_md.var,\n    },\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport { endOfMonth, format, startOfMonth } from 'date-fns';\nimport fileDownload from 'js-file-download';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { PerspectiveType } from 'routes/views/explorer/explorerUtils';\nimport { getDateRangeFromQuery } from 'routes/views/utils/dateRange';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { exportActions, exportSelectors } from 'store/export';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getCostType } from 'utils/costType';\nimport { getToday } from 'utils/dates';\nimport { getCurrency } from 'utils/localStorage';\nconst reportType = ReportType.cost;\nexport class ExportSubmitBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            fetchReportClicked: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExport = () => {\n            const { report, reportFetchStatus } = this.props;\n            if (report && reportFetchStatus === FetchStatus.complete) {\n                fileDownload(report.data, this.getFileName(), 'text/csv');\n                this.handleClose();\n            }\n        };\n        this.getFileName = () => {\n            const { endDate, groupBy, intl, reportPathsType, resolution, startDate } = this.props;\n            // defaultMessage: '<provider>_<groupBy>_<resolution>_<start-date>_<end-date>',\n            const fileName = intl.formatMessage(messages.exportFileName, {\n                endDate,\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n                resolution,\n                startDate,\n            });\n            return `${fileName}.csv`;\n        };\n        this.handleClose = () => {\n            const { reportError } = this.props;\n            this.setState(Object.assign({}, this.defaultState), () => {\n                if (!reportError) {\n                    this.props.onClose(false);\n                }\n            });\n        };\n        this.handleFetchReport = () => {\n            const { exportReport, isExportsFeatureEnabled, queryString, reportPathsType } = this.props;\n            exportReport(reportPathsType, reportType, queryString, isExportsFeatureEnabled);\n            this.setState({\n                fetchReportClicked: true,\n            }, () => {\n                this.getExport();\n            });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError } = this.props;\n        const { fetchReportClicked } = this.state;\n        if (prevProps.report !== report && fetchReportClicked) {\n            this.getExport();\n        }\n        if (reportError) {\n            this.props.onError(reportError);\n        }\n    }\n    render() {\n        const { disabled, intl, reportFetchStatus } = this.props;\n        return (React.createElement(Button, { ouiaId: \"submit-btn\", isDisabled: disabled || reportFetchStatus === FetchStatus.inProgress, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }, intl.formatMessage(messages.exportGenerate)));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const { groupBy, isAllItems, items, perspective, query, reportPathsType, resolution, timeScope } = props;\n    const isCostTypeFeatureEnabled = featureFlagsSelectors.selectIsCostTypeFeatureEnabled(state);\n    const costType = perspective === PerspectiveType.aws || (perspective === PerspectiveType.awsOcp && isCostTypeFeatureEnabled)\n        ? getCostType()\n        : undefined;\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    let { end_date, start_date } = getDateRangeFromQuery(query);\n    if (!query.dateRangeType) {\n        const isPrevious = timeScope === 'previous';\n        const today = getToday();\n        if (isPrevious) {\n            today.setMonth(today.getMonth() - 1);\n        }\n        end_date = format(isPrevious ? endOfMonth(today) : today, 'yyyy-MM-dd');\n        start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n    }\n    // Todo: Add name and format type for \"all exports\" feature\n    const getQueryString = () => {\n        const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter: {\n                limit: undefined,\n                offset: undefined,\n                resolution: resolution ? resolution : undefined,\n            }, filter_by: {}, limit: 0, order_by: undefined, perspective: undefined, dateRangeType: undefined, delta: undefined, cost_type: costType, currency,\n            start_date,\n            end_date });\n        // Store filter_by as an array so we can add to it below\n        if (query.filter_by) {\n            for (const key of Object.keys(query.filter_by)) {\n                if (newQuery.filter_by[key] === undefined) {\n                    newQuery.filter_by[key] = [];\n                }\n                newQuery.filter_by[key].push(query.filter_by[key]);\n            }\n        }\n        if (isAllItems) {\n            // Ensure group_by isn't overridden -- org_unit_id is not unique\n            if (groupBy === orgUnitIdKey) {\n                if (newQuery.filter_by[orgUnitIdKey] === undefined) {\n                    newQuery.filter_by[orgUnitIdKey] = [];\n                }\n                newQuery.filter_by[orgUnitIdKey].push(query.group_by[orgUnitIdKey]);\n            }\n        }\n        else {\n            if (groupBy === orgUnitIdKey) {\n                for (const item of items) {\n                    // Note that type only exists when grouping by org units\n                    const type = item.type === 'organizational_unit' ? orgUnitIdKey : item.type;\n                    if (newQuery.filter_by[type] === undefined) {\n                        newQuery.filter_by[type] = [];\n                    }\n                    newQuery.filter_by[type].push(item.id);\n                }\n            }\n            else {\n                for (const item of items) {\n                    if (newQuery.filter_by[groupBy] === undefined) {\n                        newQuery.filter_by[groupBy] = [];\n                    }\n                    newQuery.filter_by[groupBy].push(item.id);\n                }\n            }\n        }\n        return getQuery(newQuery);\n    };\n    const queryString = getQueryString();\n    const report = exportSelectors.selectExport(state, reportPathsType, reportType, queryString);\n    const reportError = exportSelectors.selectExportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = exportSelectors.selectExportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        endDate: end_date,\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        startDate: start_date,\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportSubmitConnect = connect(mapStateToProps, mapDispatchToProps)(ExportSubmitBase);\nconst ExportSubmit = injectIntl(ExportSubmitConnect);\nexport { ExportSubmit };\n","import { Alert, Button, ButtonVariant, Form, FormGroup, Grid, GridItem, Modal, Radio, TextInput, } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { orderBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions } from 'store/export';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { styles } from './exportModal.styles';\nimport { ExportSubmit } from './exportSubmit';\nconst formatTypeOptions = [\n    { label: messages.exportFormatType, value: 'csv' },\n    { label: messages.exportFormatType, value: 'json' },\n];\nconst resolutionOptions = [\n    { label: messages.exportResolution, value: 'daily' },\n    { label: messages.exportResolution, value: 'monthly' },\n];\nconst timeScopeOptions = [\n    { label: messages.exportTimeScope, value: 'current' },\n    { label: messages.exportTimeScope, value: 'previous' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            error: undefined,\n            formatType: 'csv',\n            timeScope: 'current',\n            resolution: this.props.resolution || 'monthly',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Reset default state upon close -- see https://issues.redhat.com/browse/COST-1134\n        this.handleClose = () => {\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleError = (error) => {\n            this.setState({ error });\n        };\n        this.handleMonthChange = (_, event) => {\n            this.setState({ timeScope: event.currentTarget.value });\n        };\n        this.handleNameChange = (_, event) => {\n            this.setState({ name: event.currentTarget.value });\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleTypeChange = (_, event) => {\n            this.setState({ formatType: event.currentTarget.value });\n        };\n        this.nameValidator = value => {\n            if (value.trim().length === 0) {\n                return messages.exportNameRequired;\n            }\n            // Todo: what is the max length allowed?\n            if (value.length > 50) {\n                return messages.exportNameTooLong;\n            }\n            return undefined;\n        };\n        this.handleMonthChange = this.handleMonthChange.bind(this);\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n        this.handleTypeChange = this.handleTypeChange.bind(this);\n    }\n    render() {\n        const { count = 0, groupBy, intl, isAllItems, isExportsFeatureEnabled, items, perspective, query, reportPathsType, showAggregateType = true, showFormatType = true, showTimeScope = true, } = this.props;\n        const { error, formatType, name, resolution, timeScope } = this.state;\n        let sortedItems = [...items];\n        if (this.props.isOpen) {\n            if (items && items.length === 0 && isAllItems) {\n                sortedItems = [\n                    {\n                        label: intl.formatMessage(messages.exportAll),\n                    },\n                ];\n            }\n            else {\n                sortedItems = orderBy(sortedItems, ['label'], ['asc']);\n            }\n        }\n        let selectedLabel = intl.formatMessage(messages.exportSelected, { groupBy, count });\n        if (groupBy.indexOf(tagPrefix) !== -1) {\n            selectedLabel = intl.formatMessage(messages.exportSelected, { groupBy: 'tag', count });\n        }\n        const thisMonth = new Date();\n        const lastMonth = new Date().setMonth(thisMonth.getMonth() - 1);\n        const currentMonth = format(thisMonth, 'MMMM yyyy');\n        const previousMonth = format(lastMonth - 1, 'MMMM yyyy');\n        const defaultName = name !== undefined\n            ? name\n            : intl.formatMessage(messages.exportName, {\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n            });\n        const helpText = isExportsFeatureEnabled ? this.nameValidator(defaultName) : undefined;\n        const validated = helpText ? 'error' : 'default';\n        return (React.createElement(Modal, { style: styles.modal, isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.exportTitle), variant: \"small\", actions: [\n                React.createElement(ExportSubmit, { disabled: validated === 'error', formatType: formatType, groupBy: groupBy, isAllItems: isAllItems, items: items, key: \"confirm\", timeScope: showTimeScope ? timeScope : undefined, onClose: this.handleClose, onError: this.handleError, perspective: perspective, name: defaultName, query: query, reportPathsType: reportPathsType, resolution: resolution }),\n                React.createElement(Button, { ouiaId: \"cancel-btn\", key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            error && React.createElement(Alert, { variant: \"danger\", style: styles.alert, title: intl.formatMessage(messages.exportError) }),\n            React.createElement(\"div\", { style: styles.title }, isExportsFeatureEnabled ? (React.createElement(\"span\", null, intl.formatMessage(messages.exportDesc, { value: React.createElement(\"b\", null, intl.formatMessage(messages.exportsTitle)) }))) : (React.createElement(\"span\", null, intl.formatMessage(messages.exportHeading, { groupBy })))),\n            React.createElement(Form, { style: styles.form },\n                React.createElement(Grid, { hasGutter: true, md: 6 },\n                    isExportsFeatureEnabled && (React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { fieldId: \"exportName\", helperTextInvalid: helpText ? intl.formatMessage(helpText) : undefined, label: intl.formatMessage(messages.names, { count: 1 }), isRequired: true, validated: validated },\n                            React.createElement(TextInput, { isRequired: true, type: \"text\", id: \"exportName\", name: \"exportName\", value: defaultName, onChange: this.handleNameChange })))),\n                    showAggregateType && (React.createElement(FormGroup, { fieldId: \"aggregate-type\", label: intl.formatMessage(messages.exportAggregateType), isRequired: true },\n                        React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                    showTimeScope && (React.createElement(FormGroup, { fieldId: \"timeScope\", label: intl.formatMessage(messages.exportTimeScopeTitle), isRequired: true },\n                        React.createElement(React.Fragment, null, timeScopeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `timeScope-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, {\n                                date: option.value === 'previous' ? previousMonth : currentMonth,\n                                value: option.value,\n                            }), value: option.value, checked: timeScope === option.value, name: \"timeScope\", onChange: this.handleMonthChange, \"aria-label\": intl.formatMessage(option.label, {\n                                date: option.value === 'previous' ? previousMonth : currentMonth,\n                                value: option.value,\n                            }) })))))),\n                    showFormatType && isExportsFeatureEnabled && (React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { fieldId: \"formatType\", label: intl.formatMessage(messages.exportFormatTypeTitle), isRequired: true }, formatTypeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `formatType-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: formatType === option.value, name: \"formatType\", onChange: this.handleTypeChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                    React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selectedLabels\" },\n                            React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                                return React.createElement(\"li\", { key: index }, groupItem.label);\n                            }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportModalConnect = connect(mapStateToProps, mapDispatchToProps)(ExportModalBase);\nconst ExportModal = injectIntl(ExportModalConnect);\nexport default ExportModal;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { orgUnitIdKey, orgUnitNameKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByOrgBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            for (const key of groupByKeys) {\n                const index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = queryFromRoute.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.getGroupByItems = () => {\n            const { orgReport } = this.props;\n            if (!(orgReport && orgReport.data)) {\n                return [];\n            }\n            // Sort all names first\n            const sortedData = orgReport.data.sort((a, b) => {\n                if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                    return -1;\n                }\n                if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                    return 1;\n                }\n                return 0;\n            });\n            // Move roots first\n            const roots = sortedData.filter(org => org.level === 0);\n            const filteredOrgs = sortedData.filter(org => org.level !== 0);\n            roots.map(root => {\n                const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n                filteredOrgs.unshift(item);\n            });\n            return filteredOrgs.map(org => ({\n                id: org[orgUnitIdKey],\n                toString: () => org[orgUnitNameKey],\n            }));\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection.id,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${orgUnitIdKey}${selection.id}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled = false, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const groupByItems = this.getGroupByItems();\n        const selection = groupByItems.find((item) => item.id === currentItem);\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.filterByOrgUnitAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.filterByOrgUnitPlaceholder), selections: selection, variant: SelectVariant.typeahead }, groupByItems.map(item => (React.createElement(SelectOption, { description: item.id, key: item.id, value: item }))))));\n    }\n}\nconst GroupByOrg = injectIntl(GroupByOrgBase);\nexport { GroupByOrg };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { uniq, uniqBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getGroupByItems = () => {\n            const { tagReport } = this.props;\n            if (!(tagReport && tagReport.data)) {\n                return [];\n            }\n            // If the key_only param is used, we have an array of strings\n            let hasTagKeys = false;\n            for (const item of tagReport.data) {\n                if (item.hasOwnProperty('key')) {\n                    hasTagKeys = true;\n                    break;\n                }\n            }\n            // Workaround for https://github.com/project-koku/koku/issues/1797\n            let data = [];\n            if (hasTagKeys) {\n                const keepData = tagReport.data.map(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                (_a) => {\n                    var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                    return keepProps;\n                });\n                data = uniqBy(keepData, 'key');\n            }\n            else {\n                data = uniq(tagReport.data);\n            }\n            return data.map((item, index) => {\n                const tagKey = hasTagKeys ? item.key : item;\n                return React.createElement(SelectOption, { key: `${tagKey}:${index}`, value: tagKey });\n            });\n        };\n        this.getCurrentGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy;\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = key.slice(tagPrefix.length);\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${tagPrefix}${selection}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.filterByTagKeyAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.filterByTagKeyPlaceholder), selections: currentItem, variant: SelectVariant.typeahead }, this.getGroupByItems())));\n    }\n}\nconst GroupByTag = injectIntl(GroupByTagBase);\nexport { GroupByTag };\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport { OrgType } from 'api/orgs/org';\nimport { getQuery, orgUnitIdKey, parseQuery, tagKey, tagPrefix } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getDateRangeFromQuery } from 'routes/views/utils/dateRange';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './groupBy.styles';\nimport { GroupByOrg } from './groupByOrg';\nimport { GroupByTag } from './groupByTag';\nconst groupByOrgOptions = [{ label: orgUnitIdKey, value: orgUnitIdKey }];\nconst groupByTagOptions = [{ label: tagKey, value: tagKey }];\nconst orgReportType = OrgType.org;\nconst tagReportType = TagType.tag;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n            isGroupByOrgVisible: false,\n            isGroupByTagVisible: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const { defaultItem } = this.state;\n            const queryFromRoute = parseQuery(location.search);\n            if (!(queryFromRoute && queryFromRoute.group_by)) {\n                return defaultItem;\n            }\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            for (const key of groupByKeys) {\n                let index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = tagKey;\n                    this.setState({\n                        isGroupByTagVisible: true,\n                    });\n                    break;\n                }\n                index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = orgUnitIdKey;\n                    this.setState({\n                        isGroupByOrgVisible: true,\n                    });\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : defaultItem;\n        };\n        this.getGroupBy = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isGroupByOpen } = this.state;\n            const selectOptions = this.getGroupByOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"groupBySelect\", isDisabled: isDisabled, isOpen: isGroupByOpen, onSelect: this.handleGroupBySelected, onToggle: this.handleGroupByToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getGroupByOptions = () => {\n            const { options, orgReport, tagReport, intl } = this.props;\n            const allOptions = [...options];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                allOptions.push(...groupByOrgOptions);\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                allOptions.push(...groupByTagOptions);\n            }\n            return allOptions.map(option => ({\n                toString: () => intl.formatMessage(messages.groupByValuesTitleCase, { value: option.label, count: 1 }),\n                value: option.value,\n            }));\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            if (selection.value === orgUnitIdKey || selection.value === tagKey) {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: selection.value === orgUnitIdKey,\n                    isGroupByTagVisible: selection.value === tagKey,\n                });\n            }\n            else {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                }, () => {\n                    if (onSelected) {\n                        onSelected(selection.value);\n                    }\n                });\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportFetchStatus, orgReportPathsType, queryString, showOrgs, showTags, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        }, () => {\n            if (showOrgs && orgReportFetchStatus !== FetchStatus.inProgress) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (showTags && tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgReportFetchStatus, orgReportPathsType, perspective, queryString, showOrgs, showTags, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            let options;\n            if (prevProps.perspective !== perspective) {\n                options = {\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                };\n            }\n            this.setState(Object.assign({ currentItem: this.getCurrentGroupBy() }, (options ? options : {})), () => {\n                if (showOrgs && orgReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchOrg(orgReportPathsType, orgReportType, queryString);\n                }\n                if (showTags && tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n    }\n    render() {\n        const { getIdKeyForGroupBy, groupBy, isDisabled = false, onSelected, orgReport, intl, tagReport } = this.props;\n        const { isGroupByOrgVisible, isGroupByTagVisible } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.groupBySelectorLabel }, intl.formatMessage(messages.groupByLabel)),\n            this.getGroupBy(),\n            Boolean(isGroupByOrgVisible) && (React.createElement(GroupByOrg, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByOrgOptions, orgReport: orgReport })),\n            Boolean(isGroupByTagVisible) && (React.createElement(GroupByTag, { groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByTagOptions, tagReport: tagReport }))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { orgReportPathsType, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    // Default to current month filter for details pages\n    let tagFilter = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    };\n    // Replace with start and end dates for Cost Explorer\n    if (queryFromRoute.dateRangeType) {\n        const { end_date, start_date } = getDateRangeFromQuery(queryFromRoute);\n        tagFilter = {\n            end_date,\n            start_date,\n        };\n    }\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery(Object.assign(Object.assign({}, tagFilter), { key_only: true, limit: 1000 }));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    return {\n        orgReport,\n        orgReportFetchStatus,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst GroupByConnect = connect(mapStateToProps, mapDispatchToProps)(GroupByBase);\nconst GroupBy = injectIntl(GroupByConnect);\nexport default GroupBy;\n","import { OrgPathsType } from 'api/orgs/org';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport { ComputedReportItemType, ComputedReportItemValueType } from 'routes/views/components/charts/common/chartDatum';\nimport { hasCloudProvider } from 'routes/views/utils/providers';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, } from 'utils/userAccess';\n// eslint-disable-next-line no-shadow\nexport var PerspectiveType;\n(function (PerspectiveType) {\n    PerspectiveType[\"aws\"] = \"aws\";\n    PerspectiveType[\"awsOcp\"] = \"aws_ocp\";\n    PerspectiveType[\"azure\"] = \"azure\";\n    PerspectiveType[\"azureOcp\"] = \"azure_ocp\";\n    PerspectiveType[\"gcp\"] = \"gcp\";\n    PerspectiveType[\"gcpOcp\"] = \"gcp_ocp\";\n    PerspectiveType[\"ibm\"] = \"ibm\";\n    PerspectiveType[\"ibmOcp\"] = \"ibm_ocp\";\n    PerspectiveType[\"oci\"] = \"oci\";\n    PerspectiveType[\"ocp\"] = \"ocp\";\n    PerspectiveType[\"ocpCloud\"] = \"ocp_cloud\";\n})(PerspectiveType || (PerspectiveType = {}));\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    exclude: {},\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: messages.explorerDateRange, value: 'current_month_to_date' },\n    { label: messages.explorerDateRange, value: 'previous_month' },\n    { label: messages.explorerDateRange, value: 'previous_month_to_date' },\n    { label: messages.explorerDateRange, value: 'last_thirty_days' },\n    { label: messages.explorerDateRange, value: 'last_sixty_days' },\n    { label: messages.explorerDateRange, value: 'last_ninety_days' },\n    { label: messages.explorerDateRange, value: 'custom' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByGcpOcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOciOptions = [\n    { label: 'payer_tenant_id', value: 'payer_tenant_id' },\n    { label: 'product_service', value: 'product_service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Ocp options\nexport const ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift supplementary & usage\" perspectives -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = ComputedReportItemType.cost;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift usage\" perspective -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = ComputedReportItemValueType.total;\n            break;\n    }\n    return result;\n};\nexport const getPerspectiveDefault = ({ awsProviders, azureProviders, ociProviders, gcpProviders, ibmProviders, ocpProviders, queryFromRoute, userAccess, }) => {\n    const perspective = queryFromRoute.perspective;\n    // Upon page refresh, perspective param takes precedence\n    switch (perspective) {\n        case PerspectiveType.aws:\n        case PerspectiveType.awsOcp:\n        case PerspectiveType.azure:\n        case PerspectiveType.azureOcp:\n        case PerspectiveType.gcp:\n        case PerspectiveType.gcpOcp:\n        case PerspectiveType.ibm:\n        case PerspectiveType.ibmOcp:\n        case PerspectiveType.oci:\n        case PerspectiveType.ocpCloud:\n            return perspective;\n    }\n    if (isOcpAvailable(userAccess, ocpProviders)) {\n        return PerspectiveType.ocp;\n    }\n    const hasAwsCloud = hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n    const hasAzureCloud = hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n    const hasGcpCloud = hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n    const hasIbmCloud = hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n    if (hasAwsCloud || hasAzureCloud || hasGcpCloud || hasIbmCloud) {\n        return PerspectiveType.ocpCloud;\n    }\n    if (isAwsAvailable(userAccess, awsProviders)) {\n        return PerspectiveType.aws;\n    }\n    if (isAzureAvailable(userAccess, azureProviders)) {\n        return PerspectiveType.azure;\n    }\n    if (isGcpAvailable(userAccess, gcpProviders)) {\n        return PerspectiveType.gcp;\n    }\n    if (isIbmAvailable(userAccess, ibmProviders)) {\n        return PerspectiveType.ibm;\n    }\n    if (isOciAvailable(userAccess, ociProviders)) {\n        return PerspectiveType.oci;\n    }\n    return undefined;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case PerspectiveType.aws:\n        case PerspectiveType.awsOcp:\n        case PerspectiveType.gcp:\n        case PerspectiveType.gcpOcp:\n        case PerspectiveType.ibm:\n            result = 'account';\n            break;\n        case PerspectiveType.azure:\n        case PerspectiveType.azureOcp:\n            result = 'subscription_guid';\n            break;\n        case PerspectiveType.ocp:\n        case PerspectiveType.ocpCloud:\n            result = 'project';\n            break;\n        case PerspectiveType.oci:\n            result = 'payer_tenant_id';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case PerspectiveType.aws:\n        case PerspectiveType.awsOcp:\n            result = groupByAwsOptions;\n            break;\n        case PerspectiveType.azure:\n        case PerspectiveType.azureOcp:\n            result = groupByAzureOptions;\n            break;\n        case PerspectiveType.gcp:\n            result = groupByGcpOptions;\n            break;\n        case PerspectiveType.gcpOcp:\n            result = groupByGcpOcpOptions;\n            break;\n        case PerspectiveType.ibm:\n            result = groupByIbmOptions;\n            break;\n        case PerspectiveType.oci:\n            result = groupByOciOptions;\n            break;\n        case PerspectiveType.ocp:\n        case PerspectiveType.ocpCloud:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case PerspectiveType.aws:\n            result = OrgPathsType.aws;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        default:\n            result = ReportType.cost;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case PerspectiveType.aws:\n            result = ReportPathsType.aws;\n            break;\n        case PerspectiveType.awsOcp:\n            result = ReportPathsType.awsOcp;\n            break;\n        case PerspectiveType.azure:\n            result = ReportPathsType.azure;\n            break;\n        case PerspectiveType.azureOcp:\n            result = ReportPathsType.azureOcp;\n            break;\n        case PerspectiveType.gcp:\n            result = ReportPathsType.gcp;\n            break;\n        case PerspectiveType.gcpOcp:\n            result = ReportPathsType.gcpOcp;\n            break;\n        case PerspectiveType.ibm:\n            result = ReportPathsType.ibm;\n            break;\n        case PerspectiveType.oci:\n            result = ReportPathsType.oci;\n            break;\n        case PerspectiveType.ocp:\n            result = ReportPathsType.ocp;\n            break;\n        case PerspectiveType.ocpCloud:\n            result = ReportPathsType.ocpCloud;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case PerspectiveType.aws:\n            return ResourcePathsType.aws;\n            break;\n        case PerspectiveType.awsOcp:\n            return ResourcePathsType.awsOcp;\n            break;\n        case PerspectiveType.azure:\n            return ResourcePathsType.azure;\n            break;\n        case PerspectiveType.azureOcp:\n            return ResourcePathsType.azureOcp;\n            break;\n        case PerspectiveType.gcp:\n            return ResourcePathsType.gcp;\n        case PerspectiveType.gcpOcp:\n            return ResourcePathsType.gcpOcp;\n        case PerspectiveType.ibm:\n            return ResourcePathsType.ibm;\n            break;\n        case PerspectiveType.ocp:\n            return ResourcePathsType.ocp;\n            break;\n        case PerspectiveType.ocpCloud:\n            return ResourcePathsType.ocpCloud;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case PerspectiveType.aws:\n            return TagPathsType.aws;\n            break;\n        case PerspectiveType.awsOcp:\n            return TagPathsType.awsOcp;\n            break;\n        case PerspectiveType.azure:\n            return TagPathsType.azure;\n            break;\n        case PerspectiveType.azureOcp:\n            return TagPathsType.azureOcp;\n            break;\n        case PerspectiveType.gcp:\n            return TagPathsType.gcp;\n            break;\n        case PerspectiveType.gcpOcp:\n            return TagPathsType.gcpOcp;\n            break;\n        case PerspectiveType.ibm:\n            return TagPathsType.ibm;\n            break;\n        case PerspectiveType.ocp:\n            return TagPathsType.ocp;\n            break;\n        case PerspectiveType.ocpCloud:\n            return TagPathsType.ocpCloud;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\n","import { endOfMonth } from 'date-fns';\nimport { formatStartEndDate, getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate, getLast90DaysDate, } from 'utils/dates';\n// The date range drop down has the options below (if today is Jan 18th…)\n// eslint-disable-next-line no-shadow\nexport var DateRangeType;\n(function (DateRangeType) {\n    DateRangeType[\"currentMonthToDate\"] = \"current_month_to_date\";\n    DateRangeType[\"custom\"] = \"custom\";\n    DateRangeType[\"previousMonth\"] = \"previous_month\";\n    DateRangeType[\"previousMonthToDate\"] = \"previous_month_to_date\";\n    DateRangeType[\"lastNinetyDays\"] = \"last_ninety_days\";\n    DateRangeType[\"lastSixtyDays\"] = \"last_sixty_days\";\n    DateRangeType[\"lastSixtyFiveDays\"] = \"last_sixty_days\";\n    DateRangeType[\"lastThirtyDays\"] = \"last_thirty_days\";\n})(DateRangeType || (DateRangeType = {}));\nexport const getDateRange = (dateRangeType, isFormatted = true) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case DateRangeType.previousMonth:\n            endDate.setDate(1); // Required to obtain correct month\n            startDate.setDate(1); // Required to obtain correct month\n            endDate.setMonth(endDate.getMonth() - 1);\n            startDate.setMonth(startDate.getMonth() - 1);\n            dateRange = formatStartEndDate(startDate, endOfMonth(endDate), isFormatted);\n            break;\n        case DateRangeType.previousMonthToDate:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = formatStartEndDate(startDate, endDate, isFormatted);\n            break;\n        case DateRangeType.lastNinetyDays:\n            dateRange = getLast90DaysDate(isFormatted);\n            break;\n        case DateRangeType.lastSixtyDays:\n            dateRange = getLast60DaysDate(isFormatted);\n            break;\n        case DateRangeType.lastThirtyDays:\n            dateRange = getLast30DaysDate(isFormatted);\n            break;\n        case DateRangeType.currentMonthToDate:\n        default:\n            dateRange = getCurrentMonthDate(isFormatted);\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeTypeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRangeType || DateRangeType.currentMonthToDate;\n};\nexport const getDateRangeFromQuery = (queryFromRoute) => {\n    let end_date;\n    let start_date;\n    if (queryFromRoute.dateRangeType === DateRangeType.custom) {\n        end_date = queryFromRoute.end_date;\n        start_date = queryFromRoute.start_date;\n    }\n    if (!(end_date && start_date)) {\n        const dateRangeType = getDateRangeTypeDefault(queryFromRoute);\n        return getDateRange(dateRangeType);\n    }\n    return {\n        end_date,\n        start_date,\n    };\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { addFilterToQuery, removeFilterFromQuery } from './filter';\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: 0 });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\nexport const handleCurrencySelected = (history, query, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    history.replace(getRouteForQuery(history, newQuery, reset));\n};\nexport const handleCostTypeSelected = (history, query, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    history.replace(getRouteForQuery(history, newQuery, reset)); // Don't reset pagination\n};\nexport const handleFilterAdded = (history, query, filter) => {\n    const filteredQuery = addFilterToQuery(query, filter);\n    history.replace(getRouteForQuery(history, filteredQuery, true));\n};\nexport const handleFilterRemoved = (history, query, filter) => {\n    const filteredQuery = removeFilterFromQuery(query, filter);\n    history.replace(getRouteForQuery(history, filteredQuery, true));\n};\nexport const handlePerPageSelect = (history, query, perPage) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n    const filteredQuery = getRouteForQuery(history, newQuery, true);\n    history.replace(filteredQuery);\n};\nexport const handleSetPage = (history, query, report, pageNumber) => {\n    const limit = report && report.meta && report.meta.filter && report.meta.filter.limit ? report.meta.filter.limit : 10;\n    const offset = pageNumber * limit - limit;\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n    const filteredQuery = getRouteForQuery(history, newQuery);\n    history.replace(filteredQuery);\n};\nexport const handleSort = (history, query, sortType, isSortAscending, date = undefined) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.order_by = {};\n    newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n    if (date) {\n        newQuery.order_by.date = date;\n    }\n    const filteredQuery = getRouteForQuery(history, newQuery);\n    history.replace(filteredQuery);\n};\n"],"names":["title","PageHeader","PageHeaderTitle","Main","Unavailable","styles","alert","marginBottom","global_spacer_md","form","marginLeft","global_spacer_sm","modal","input","marginRight","global_spacer_xs","ul","reportType","ExportSubmitBase","constructor","stateProps","dispatchProps","super","this","defaultState","fetchReportClicked","state","Object","assign","getExport","report","reportFetchStatus","props","data","getFileName","handleClose","endDate","groupBy","intl","reportPathsType","resolution","startDate","formatMessage","messages","provider","indexOf","reportError","setState","onClose","handleFetchReport","exportReport","isExportsFeatureEnabled","queryString","componentDidUpdate","prevProps","onError","render","disabled","Button","ouiaId","isDisabled","key","onClick","variant","ButtonVariant","mapStateToProps","isAllItems","items","perspective","query","timeScope","isCostTypeFeatureEnabled","featureFlags","costType","undefined","currency","end_date","start_date","dateRangeType","isPrevious","today","setMonth","getMonth","format","endOfMonth","startOfMonth","newQuery","JSON","parse","stringify","filter","limit","offset","filter_by","order_by","delta","cost_type","keys","push","group_by","item","type","id","getQueryString","mapDispatchToProps","ExportSubmitConnect","connect","ExportSubmit","injectIntl","formatTypeOptions","label","value","resolutionOptions","timeScopeOptions","ExportModalBase","error","formatType","handleError","handleMonthChange","_","event","currentTarget","handleNameChange","name","handleResolutionChange","handleTypeChange","nameValidator","trim","length","bind","count","showAggregateType","showFormatType","showTimeScope","sortedItems","isOpen","orderBy","selectedLabel","thisMonth","Date","lastMonth","currentMonth","previousMonth","defaultName","helpText","validated","Modal","style","actions","Alert","Form","Grid","hasGutter","md","GridItem","span","FormGroup","fieldId","helperTextInvalid","isRequired","TextInput","onChange","map","option","index","Radio","isValid","checked","date","groupItem","ExportModalConnect","groupBySelector","display","alignItems","groupBySelectorLabel","whiteSpace","GroupByOrgBase","defaultItem","options","isGroupByOpen","getCurrentGroupBy","getIdKeyForGroupBy","queryFromRoute","location","search","groupByKeys","getGroupByItems","orgReport","sortedData","sort","a","b","roots","org","level","filteredOrgs","root","find","unshift","toString","handleGroupByClear","currentItem","handleGroupBySelected","selection","onSelected","handleGroupByToggle","componentDidMount","groupByItems","Select","onClear","onToggle","onSelect","placeholderText","selections","SelectVariant","SelectOption","description","GroupByOrg","GroupByTagBase","tagReport","hasTagKeys","hasOwnProperty","keepData","_a","s","e","t","p","prototype","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","uniqBy","uniq","tagKey","slice","GroupByTag","groupByOrgOptions","groupByTagOptions","orgReportType","tagReportType","GroupByBase","isGroupByOrgVisible","isGroupByTagVisible","getGroupBy","selectOptions","getGroupByOptions","allOptions","fetchOrg","fetchTag","orgReportFetchStatus","orgReportPathsType","showOrgs","showTags","tagReportFetchStatus","tagReportPathsType","Title","headingLevel","size","Boolean","tagFilter","time_scope_units","time_scope_value","key_only","GroupByConnect","PerspectiveType","baseQuery","exclude","cost","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByGcpOcpOptions","groupByIbmOptions","groupByOciOptions","groupByOcpOptions","getComputedReportItemType","result","getComputedReportItemValueType","getPerspectiveDefault","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","ocpProviders","userAccess","aws","awsOcp","azure","azureOcp","gcp","gcpOcp","ibm","ibmOcp","oci","ocpCloud","ocp","hasAwsCloud","hasAzureCloud","hasGcpCloud","hasIbmCloud","getGroupByDefault","getOrgReportPathsType","getReportType","getReportPathsType","getResourcePathsType","getTagReportPathsType","DateRangeType","getDateRangeTypeDefault","currentMonthToDate","getDateRangeFromQuery","custom","isFormatted","dateRange","setDate","previousMonthToDate","lastNinetyDays","lastSixtyDays","lastThirtyDays","getDateRange","getRouteForQuery","history","reset","pathname","handleCurrencySelected","replace","handleCostTypeSelected","handleFilterAdded","filteredQuery","handleFilterRemoved","handlePerPageSelect","perPage","handleSetPage","pageNumber","meta","handleSort","sortType","isSortAscending"],"sourceRoot":""}