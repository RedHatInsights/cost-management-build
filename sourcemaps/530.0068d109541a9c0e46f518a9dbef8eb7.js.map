{"version":3,"file":"js/530.1669939940616.8b45e4da3ca75e39c52a.js","mappings":"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","sources":["webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/views/details/components/tag/tag.styles.ts","webpack:///./src/routes/views/details/components/tag/tagContent.tsx","webpack:///./src/routes/views/details/components/tag/tagModal.tsx","webpack:///./src/routes/views/details/components/tag/tagLink.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/views/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.tsx","webpack:///./src/routes/views/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/views/details/components/costChart/costChart.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.tsx","webpack:///./src/routes/views/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryCard.tsx","webpack:///./src/routes/views/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/views/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/views/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/views/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/utils/paths.ts"],"sourcesContent":["import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, redirectToCostModel, history, item: { source_uuid }, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], history) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, platformCategory, tagPrefix } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { isPlatformCosts } from 'routes/views/utils/paths';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { TagContent } from './tagContent';\nconst tagReportType = TagType.tag;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, intl, isOpen, query, tagReport } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: this.props.isPlatformCosts ? platformCategory : groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryFromRoute && queryFromRoute.filter_by ? queryFromRoute.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(query);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        isPlatformCosts: isPlatformCosts(queryFromRoute),\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagModalBase));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = TagType.tag;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", { \"data-testid\": \"tag-lnk\", href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }, count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryFromRoute && queryFromRoute.filter_by ? queryFromRoute.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(query);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { breakdownDescKey, breakdownTitleKey, getQueryRoute, orgUnitIdKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { TagLink } from 'routes/views/details/components/tag';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getTotalCostDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = () => {\n            const { detailsURL, groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            // Don't want these params when returning to the details page\n            if (newQuery.filter) {\n                newQuery.filter.account = undefined;\n                newQuery.filter.category = undefined;\n                newQuery[breakdownDescKey] = undefined;\n                newQuery[orgUnitIdKey] = undefined;\n                newQuery[breakdownTitleKey] = undefined;\n            }\n            return `${detailsURL}?${getQueryRoute(newQuery)}`;\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costType, currency, description, groupBy, intl, isCurrencyFeatureEnabled, onCostTypeSelected, onCurrencySelected, query, showCostType = false, tabs, tagReportPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'project' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            React.createElement(Link, { to: this.buildDetailsLink() }, intl.formatMessage(messages.breakdownBackToDetails, {\n                                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagReportPathsType }),\n                                groupBy: groupByKey,\n                            }))))),\n                React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getTotalCostDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }))))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { handleCostTypeSelected, handleCurrencySelected } from 'routes/views/utils/history';\nimport { hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { FetchStatus } from 'store/common';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\n// eslint-disable-next-line no-shadow\nvar BreakdownTab;\n(function (BreakdownTab) {\n    BreakdownTab[\"costOverview\"] = \"cost-overview\";\n    BreakdownTab[\"historicalData\"] = \"historical-data\";\n})(BreakdownTab || (BreakdownTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case BreakdownTab.costOverview:\n            return 'cost-overview';\n        case BreakdownTab.historicalData:\n            return 'historical-data';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.costOverview,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.historicalData,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === BreakdownTab.costOverview) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === BreakdownTab.historicalData) {\n                return historicalDataComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === BreakdownTab.costOverview) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === BreakdownTab.historicalData) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { location, fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            if (location.search) {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, reportError, reportQueryString } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, currency, description, detailsURL, emptyStateTitle, groupBy, history, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress && reportFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.complete && reportFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === FetchStatus.complete;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: value => handleCostTypeSelected(history, query, value), onCurrencySelected: value => handleCurrencySelected(history, query, value), query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nexport default injectIntl(BreakdownBase);\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { item } = this.props;\n        if (!item.clusters) {\n            return null;\n        }\n        return item.clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, intl, isOpen, item } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(ClusterContent, { item: item })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import { platformCategory } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, intl, isPlatformCosts, report } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        const item = computedItems && computedItems.length ? computedItems[0] : undefined;\n        if (!item) {\n            return null;\n        }\n        if (isPlatformCosts) {\n            item.label = platformCategory;\n        }\n        for (const cluster of item.clusters) {\n            const prefix = someClusters.length > 0 ? ', ' : '';\n            const clusterString = `${prefix}${cluster}`;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + clusterString.length > maxChars) {\n                    someClusters.push(clusterString\n                        .slice(0, maxChars - charCount)\n                        .trim()\n                        .concat('...'));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            charCount += clusterString.length;\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", { \"data-testid\": \"cluster-lnk\", href: \"#/\", onClick: this.handleOpen }, intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 475,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 80, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.breakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.breakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.breakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './summaryModal.styles';\nconst reportType = ReportType.cost;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, platformCategory } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { costType, currency, groupBy, intl, isPlatformCosts, query, reportGroupBy, reportPathsType } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, { ouiaId: \"view-all-btn\", onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }, intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costType: costType, currency: currency, groupBy: groupBy, groupByValue: isPlatformCosts ? platformCategory : groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { intl, isPlatformCosts, reportGroupBy, reportFetchStatus } = this.props;\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.breakdownSummaryTitle, {\n                    value: isPlatformCosts ? platformCategory : reportGroupBy,\n                }))),\n            React.createElement(CardBody, null, reportFetchStatus === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, reportType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const query = {\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        report,\n        reportFetchStatus,\n        reportPathsType,\n        reportType,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryBase));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== this.props.reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, report, intl, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || reportType === ReportType.volume) {\n            const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n            const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute && queryFromRoute.filter && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(Object.assign({}, query));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase));\nexport default UsageChart;\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { orgUnitIdKey, platformCategory, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Cluster } from 'routes/views/details/components/cluster';\nimport { CostChart } from 'routes/views/details/components/costChart';\nimport { SummaryCard } from 'routes/views/details/components/summary';\nimport { UsageChart } from 'routes/views/details/components/usageChart';\nimport { styles } from 'routes/views/details/ocpDetails/detailsHeader.styles';\nimport { CostOverviewWidgetType } from 'store/breakdown/costOverview/common/costOverviewCommon';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, intl, isPlatformCosts, report } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, isPlatformCosts: isPlatformCosts, report: report }))));\n            }\n            else {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.breakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.breakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, currency, groupBy, isPlatformCosts, query } = this.props;\n            let showWidget = false;\n            if (widget.reportSummary.showWidgetOnGroupBy) {\n                for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                    if (groupById === groupBy ||\n                        (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                        (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (!showWidget && widget.reportSummary.showWidgetOnCategory) {\n                for (const categoryId of widget.reportSummary.showWidgetOnCategory) {\n                    if (isPlatformCosts && categoryId === platformCategory) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, currency: currency, isPlatformCosts: isPlatformCosts, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case CostOverviewWidgetType.cluster:\n                return this.getClusterChart(widget);\n            case CostOverviewWidgetType.cost:\n                return this.getCostChart(widget);\n            case CostOverviewWidgetType.cpuUsage:\n                return this.getCpuUsageChart(widget);\n            case CostOverviewWidgetType.memoryUsage:\n                return this.getMemoryUsageChart(widget);\n            case CostOverviewWidgetType.reportSummary:\n                return this.getSummaryCard(widget);\n            case CostOverviewWidgetType.volumeUsage:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n    },\n    defaultLabel: {\n        minWidth: '63px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isLoading, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), gridBreakPoint: \"grid-2xl\" },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    } })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: cellIndex === row.cells.length - 1 }, item.value))))))))),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(DataTable);\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 725 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 725\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/views/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, DatumType.cumulative, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, DatumType.cumulative, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, DatumType.cumulative, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, DatumType.cumulative, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute && queryFromRoute.filter && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(Object.assign(Object.assign({}, currentQuery), { cost_type: costType, currency }));\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(Object.assign(Object.assign({}, previousQuery), { cost_type: costType, currency }));\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip, getDateRange, } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === ReportType.cost;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(Object.assign(Object.assign({}, currentQuery), { cost_type: costType, currency }));\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(Object.assign(Object.assign({}, previousQuery), { cost_type: costType, currency }));\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 925 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 925\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, DatumType.rolling, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, DatumType.rolling, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, DatumType.rolling, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, DatumType.rolling, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, DatumType.rolling, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, DatumType.rolling, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === ReportType.instanceType || reportType === ReportType.storage;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataWidgetType } from 'store/breakdown/historicalData/common/historicalDataCommon';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === ReportPathsType.azure) {\n                return reportType === ReportType.instanceType ? 'virtual_machine' : reportType;\n            }\n            return reportType === ReportType.instanceType ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case HistoricalDataWidgetType.cost:\n                return this.getCostChart(widget);\n            case HistoricalDataWidgetType.trend:\n                return this.getTrendChart(widget);\n            case HistoricalDataWidgetType.usage:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { getQueryRoute, platformCategory } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, description, groupBy, isPlatformCosts, label, }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== label && { [breakdownDescKey]: description })), (isPlatformCosts && { [breakdownTitleKey]: label })), { group_by: {\n            [groupBy]: isPlatformCosts ? '*' : label,\n        } });\n    if (isPlatformCosts) {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        newQuery.filter.category = platformCategory;\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, title, type, }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && { [orgUnitIdKey]: groupByOrg })), { group_by: {\n            [groupBy]: id, // This may be overridden below\n        } });\n    if (type === 'account') {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const isPlatformCosts = (queryFromRoute) => {\n    return queryFromRoute && queryFromRoute.filter && queryFromRoute.filter.category === platformCategory;\n};\n"],"names":["DetailsActionsBase","constructor","stateProps","dispatchProps","super","this","defaultState","isDropdownOpen","isExportModalOpen","state","Object","assign","getExportModal","groupBy","item","reportPathsType","reportQueryString","props","count","isOpen","items","onClose","handleExportModalClose","setState","handleExportModalOpen","handleOnSelect","handleOnToggle","bind","render","isDisabled","showPriceListOption","intl","redirectToCostModel","history","source_uuid","DropdownItem","component","key","onClick","formatMessage","messages","unshift","includes","length","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","mapStateToProps","mapDispatchToProps","costModels","DetailsActionsConnect","connect","injectIntl","styles","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","marginBottom","tagLink","marginLeft","global_spacer_sm","tagsContainer","marginRight","global_spacer_3xl","marginTop","TagContentBase","arguments","getDataListItems","tagReport","result","data","val","values","id","push","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","groupByValue","dataListItems","style","value","DataList","isCompact","map","TagContent","tagReportType","TagModalBase","getTagValueCount","handleClose","componentDidMount","fetchTag","tagReportPathsType","tagQueryString","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","query","filter","account","Modal","title","width","isPlatformCosts","queryFromRoute","location","search","groupByOrgValue","filterByParams","filter_by","keys","indexOf","undefined","resolution","time_scope_units","time_scope_value","tagReportFetchStatus","TagModal","TagLinkBase","handleOpen","event","preventDefault","Boolean","href","cost","global_spacer_xl","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","global_spacer_md","header","backgroundColor","global_BackgroundColor_100","headerContent","display","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeader","buildDetailsLink","detailsURL","groupByKey","newQuery","JSON","parse","stringify","group_by","category","getTotalCost","report","hasCost","meta","total","format","units","currency","description","isCurrencyFeatureEnabled","onCostTypeSelected","onCurrencySelected","showCostType","filterByAccount","groupByOrg","groupByTag","showTags","className","to","Title","headingLevel","size","TitleSizes","featureFlags","BreakdownTab","getIdKeyForTab","tab","costOverview","historicalData","BreakdownBase","activeTabKey","getAvailableTabs","contentRef","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","ref","getTabItem","costOverviewComponent","historicalDataComponent","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","updateReport","fetchReport","reportType","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","name","label","ClusterModal","ClusterBase","showAll","charCount","someClusters","allClusters","computedItems","getComputedReportItems","idKey","clusterString","slice","trim","concat","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","_item","formatOptions","toString","totalValue","exclude","cost_type","SummaryModalContent","SummaryModalBase","variant","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","ouiaId","handleBulletChartModalOpen","type","ButtonType","ButtonVariant","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","limit","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasCapacity","capacityUnits","hasRequest","request","requestUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","enableFlip","bodyContent","rel","target","chartName","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","showWidgetOnCategory","categoryId","usePlaceholder","getVolumeUsageChart","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","costColumn","defaultLabel","minWidth","emptyState","infoArrow","infoArrowDesc","nameColumn","DataTable","getEmptyState","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","getSortBy","columns","orderBy","direction","order_by","getSortParams","sortBy","onSort","handleOnSort","columnIndex","isSelected","rowId","onSelected","newRows","row","selected","SortByDirection","isLoading","TableComposable","gridBreakPoint","Thead","Tr","col","Th","modifier","sort","isSortable","Tbody","Td","colSpan","Bullseye","Spinner","rowIndex","cells","cellIndex","dataLabel","select","disable","selectionDisabled","_event","isActionCell","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","getTrendChart","getUsageChart","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","getBreakdownPath","basePath","getOrgBreakdownPath"],"sourceRoot":""}