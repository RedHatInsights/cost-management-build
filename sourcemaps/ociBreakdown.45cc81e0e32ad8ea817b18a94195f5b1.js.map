{"version":3,"file":"js/ociBreakdown.4fa18cc795fb4c89d56d.js","mappings":"4XAKA,MAAMA,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeC,EAAA,iBAAuCH,GACtDI,QAASD,EAAA,wBAA8CH,OAGzDK,GAAe,IAAAC,SAAQP,EAAiB,CAAC,EAA1B,CAA6B,K,0BCNlD,MAAM,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeK,EAAA,iBAAyCP,GACxDI,QAASG,EAAA,wBAAgDP,OAG3DQ,GAAiB,IAAAF,SAAQ,EAAiB,CAAC,EAA1B,CAA6B,KCW9CG,GAAa,QAAWC,EAAA,mBACxBC,EAAa,SACbC,EAAkB,QAElB,GAAkB,SAAsB,CAACZ,GAASa,OAAMC,aAC1D,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,GAAa,QAAgBH,GAC7BI,GAAU,QAAaJ,GACvBK,GAAe,QAAgBL,GAC/BM,GAAW,UACXC,EAAQC,OAAOC,OAAO,CAAC,EAAGT,GAC1BU,EAAc,CAChBJ,WACAK,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBC,UAAWP,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAIN,GAAcA,EAAWY,WAAaZ,EAAWY,WAAcX,GAA4B,MAAjBC,GAAwB,CAAE,CAACD,QAAUY,IAC3JC,QAAST,OAAOC,OAAO,CAAC,EAAIN,GAAcA,EAAWc,SAAWd,EAAWc,SAC3EC,SAAUV,OAAOC,OAAO,CAAC,EAAIL,GAAW,CAAE,CAACA,GAAUC,KAEnDc,GAAoB,QAAST,GAC7BU,EAAS,kBAA6BnC,EAAOY,EAAiBD,EAAYuB,GAC1EE,EAAc,uBAAkCpC,EAAOY,EAAiBD,EAAYuB,GACpFG,EAAoB,6BAAwCrC,EAAOY,EAAiBD,EAAYuB,GAChGI,GAAuB,OAAkB,MACzCC,EAAY,qBAAmCvC,EAAO,QAAkBsC,GACxEE,EAAiB,0BAAwCxC,EAAO,QAAkBsC,GAClFG,EAAuB,gCAA8CzC,EAAO,QAAkBsC,GACpG,MAAO,CACHI,sBAAuB,kBAAoBrC,EAAc,CAAEgB,SAAUA,EAAUF,QAASA,EAASgB,OAAQA,IACzGd,WACAsB,YAAa5B,EAAe,MAC5BN,aACAmC,gBAAiB/B,EAAKgC,cAAcC,EAAA,mBACpC3B,UACAC,eACA2B,wBAAyB,kBAAoBvC,EAAgB,CAAEa,SAAUA,IACzEkB,WAAW,QAAgBA,EAAW,SACtCC,iBACAC,uBACAO,aAAc,QACd1B,QACAa,SACAC,cACAC,oBACA1B,aACAC,kBACAsB,oBACAe,aAAc,QACdC,MAAO9B,EACV,IAEC+B,EAAqB,CACvBC,YAAa,kBAGjB,GADgB,EAAAC,EAAA,KAAW,QAAW,IAAA/C,SAAQ,EAAiB6C,EAAzB,CAA6C,M","sources":["webpack:///./src/routes/views/details/ociBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/ociBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/ociBreakdown/ociBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ociCostOverviewSelectors } from 'store/breakdown/costOverview/ociCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ociCostOverviewSelectors.selectWidgets(state),\n        widgets: ociCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ociHistoricalDataSelectors } from 'store/breakdown/historicalData/ociHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ociHistoricalDataSelectors.selectWidgets(state),\n        widgets: ociHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = formatPath(routes.ociDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.oci;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = getCurrency();\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        currency,\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { currency: currency, groupBy: groupBy, report: report }),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.ociDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.oci),\n        providersError,\n        providersFetchStatus,\n        providerType: ProviderType.oci,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagPathsType: TagPathsType.oci,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OciCost = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default OciCost;\n"],"names":["mapStateToProps","state","props","selectWidgets","ociCostOverview","widgets","CostOverview","connect","ociHistoricalData","HistoricalData","detailsURL","routes","reportType","reportPathsType","intl","router","queryFromRoute","location","search","queryState","groupBy","groupByValue","currency","query","Object","assign","reportQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","exclude","group_by","reportQueryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","formatMessage","messages","historicalDataComponent","providerType","tagPathsType","title","mapDispatchToProps","fetchReport","injectIntl"],"sourceRoot":""}