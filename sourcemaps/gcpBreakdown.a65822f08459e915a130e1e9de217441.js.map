{"version":3,"file":"js/gcpBreakdown.618a9f96b03d12a58e56.js","mappings":"4XAKA,MAAMA,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeC,EAAA,iBAAuCH,GACtDI,QAASD,EAAA,wBAA8CH,OAGzDK,GAAe,IAAAC,SAAQP,EAAiB,CAAC,EAA1B,CAA6B,K,0BCNlD,MAAM,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeK,EAAA,iBAAyCP,GACxDI,QAASG,EAAA,wBAAgDP,OAG3DQ,GAAiB,IAAAF,SAAQ,EAAiB,CAAC,EAA1B,CAA6B,KCW9CG,GAAa,QAAWC,EAAA,mBACxBC,EAAa,SACbC,EAAkB,QAElB,GAAkB,SAAsB,CAACZ,GAASa,OAAMC,aAC1D,MAAMC,GAAiB,QAAWD,EAAOE,SAASC,QAC5CC,EAAaH,EAAef,MAAQmB,KAAKC,MAAMC,OAAOC,KAAKP,EAAef,aAAUuB,EACpFC,GAAU,QAAaT,GACvBU,GAAe,QAAgBV,GAC/BW,GAAW,UACXC,EAAQC,OAAOC,OAAO,CAAC,EAAGd,GAC1Be,EAAc,CAChBJ,WACAK,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBC,UAAWP,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAIX,GAAcA,EAAWiB,WAAajB,EAAWiB,WAAcX,GAA4B,MAAjBC,GAAwB,CAAE,CAACD,QAAUD,IAC3Ja,QAASR,OAAOC,OAAO,CAAC,EAAIX,GAAcA,EAAWkB,SAAWlB,EAAWkB,SAC3EC,SAAUT,OAAOC,OAAO,CAAC,EAAIL,GAAW,CAAE,CAACA,GAAUC,KAEnDa,GAAoB,QAASR,GAC7BS,EAAS,kBAA6BvC,EAAOY,EAAiBD,EAAY2B,GAC1EE,EAAc,uBAAkCxC,EAAOY,EAAiBD,EAAY2B,GACpFG,EAAoB,6BAAwCzC,EAAOY,EAAiBD,EAAY2B,GAChGI,GAAuB,OAAkB,MACzCC,EAAY,qBAAmC3C,EAAO,QAAkB0C,GACxEE,EAAiB,0BAAwC5C,EAAO,QAAkB0C,GAClFG,EAAuB,gCAA8C7C,EAAO,QAAkB0C,GACpG,MAAO,CACHI,sBAAuB,kBAAoBzC,EAAc,CAAEqB,SAAUA,EAAUF,QAASA,EAASe,OAAQA,IACzGb,WACAqB,YAAahC,EAAe,MAC5BN,aACAuC,gBAAiBnC,EAAKoC,cAAcC,EAAA,mBACpC1B,UACAC,eACA0B,wBAAyB,kBAAoB3C,EAAgB,CAAEkB,SAAUA,IACzEiB,WAAW,QAAgBA,EAAW,SACtCC,iBACAC,uBACAO,aAAc,QACdzB,QACAY,SACAC,cACAC,oBACA9B,aACAC,kBACA0B,oBACAe,mBAAoB,QACpBC,MAAOvC,EAAe,MAAqBA,EAAe,MAAqBU,EAClF,IAEC8B,EAAqB,CACvBC,YAAa,kBAGjB,GADqB,EAAAC,EAAA,KAAW,QAAW,IAAAnD,SAAQ,EAAiBiD,EAAzB,CAA6C,M","sources":["webpack:///./src/routes/views/details/gcpBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/gcpBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/gcpBreakdown/gcpBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { gcpCostOverviewSelectors } from 'store/breakdown/costOverview/gcpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpCostOverviewSelectors.selectWidgets(state),\n        widgets: gcpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { gcpHistoricalDataSelectors } from 'store/breakdown/historicalData/gcpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpHistoricalDataSelectors.selectWidgets(state),\n        widgets: gcpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = formatPath(routes.gcpDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.gcp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = getCurrency();\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        currency,\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { currency: currency, groupBy: groupBy, report: report }),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.gcpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.gcp),\n        providersError,\n        providersFetchStatus,\n        providerType: ProviderType.gcp,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.gcp,\n        title: queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst GcpBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default GcpBreakdown;\n"],"names":["mapStateToProps","state","props","selectWidgets","gcpCostOverview","widgets","CostOverview","connect","gcpHistoricalData","HistoricalData","detailsURL","routes","reportType","reportPathsType","intl","router","queryFromRoute","location","search","queryState","JSON","parse","window","atob","undefined","groupBy","groupByValue","currency","query","Object","assign","reportQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","exclude","group_by","reportQueryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","injectIntl"],"sourceRoot":""}