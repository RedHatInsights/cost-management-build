{"version":3,"file":"js/permissionsWrapper.4b39120a85684a66c277.js","mappings":"mIACO,SAASA,EAAkBC,GAC9B,OAAO,IAAAC,WAAUD,EAAO,CAAEE,QAAQ,EAAOC,SAAS,GACtD,C,kDCFO,SAASC,EAAmBJ,GAC/B,OAAO,IAAAC,WAAUD,EAAO,CAAEE,QAAQ,EAAOC,SAAS,GACtD,C,qLCEA,MA2CA,GADkB,EAAAE,EAAA,KA1CI,EAAGC,WAAW,KAAMC,WAuCtCC,SAASC,MAAQF,EAAKG,cAtCD,MAEjB,QADiB,WAEb,KAAK,QAAWC,EAAA,mBAChB,KAAK,QAAWA,EAAA,4BACZ,OAAOC,EAAA,eACX,KAAK,QAAWD,EAAA,qBAChB,KAAK,QAAWA,EAAA,8BACZ,OAAOC,EAAA,iBACX,KAAK,QAAWD,EAAA,mBAChB,KAAK,QAAWA,EAAA,0BACZ,OAAOC,EAAA,sBACX,KAAK,QAAWD,EAAA,iBACZ,OAAOC,EAAA,oBACX,KAAK,QAAWD,EAAA,mBAChB,KAAK,QAAWA,EAAA,4BACZ,OAAOC,EAAA,eACX,KAAK,QAAWD,EAAA,mBAChB,KAAK,QAAWA,EAAA,4BACZ,OAAOC,EAAA,eACX,KAAK,QAAWD,EAAA,mBAChB,KAAK,QAAWA,EAAA,4BACZ,OAAOC,EAAA,eACX,KAAK,QAAWD,EAAA,mBAChB,KAAK,QAAWA,EAAA,4BACZ,OAAOC,EAAA,eACX,KAAK,QAAWD,EAAA,sBACZ,OAAOC,EAAA,yBACX,KAAK,QAAWD,EAAA,iBACZ,OAAOC,EAAA,oBACX,KAAK,QAAWD,EAAA,oBAChB,KAAK,QAAWA,EAAA,6BACZ,OAAOC,EAAA,gBACX,QACI,OAAOA,EAAA,mBACf,EAGgCC,IAC7B,kBAAoB,aAAgB,KAAMP,M,mEC9BrD,MAAMQ,GAAkB,QAAe,IAAM,kCACvCC,GAAc,QAAe,IAAM,kCACzC,MAAMC,UAA+B,cACjCC,oBACI,MAAM,qBAAEC,EAAoB,eAAEC,EAAc,gBAAEC,EAAe,qBAAEC,EAAoB,WAAEC,EAAU,sBAAEC,GAA2BC,KAAKC,MAEjIH,IAEAF,EAAgB,QAAoBG,GACpCJ,EAAe,QAAkBE,GACjCH,GACJ,CACAQ,SACI,MAAM,2BAAEC,EAA0B,SAAErB,EAAQ,qBAAEsB,EAAoB,sBAAEC,GAA0BL,KAAKC,MACnG,OAAQ,kBAAoB,EAAW,KAAMI,IAA0B,eAAyB,kBAAoBd,EAAa,KAAMa,IAAyB,eAAyB,kBAAoB,KAAc,KACvN,kBAAoBd,EAAiB,MACrCa,IAA+B,eAAwBrB,IAC/D,EAEJ,MAAMwB,GAAkB,SAAsBC,IAC1C,MAAMC,EAAkB,2BAA+CD,GACjEE,EAAuB,gCAAoDF,GAC3EJ,EAA6B,sCAA0DI,GACvFV,GAAuB,OAAkB,MACzCa,EAAY,qBAAmCH,EAAO,QAAkBV,GACxEc,EAAiB,0BAAwCJ,EAAO,QAAkBV,GAClFO,EAAuB,gCAA8CG,EAAO,QAAkBV,GAC9FE,GAAwB,OAAmB,MAIjD,MAAO,CACHS,kBACAC,uBACAN,6BACAO,YACAC,iBACAP,uBACAP,uBACAe,WAXe,sBAAqCL,EAAO,QAAoBR,GAY/Ec,gBAXoB,2BAA0CN,EAAO,QAAoBR,GAYzFM,sBAX0B,iCAAgDE,EAAO,QAAoBR,GAYrGA,wBACH,IAECe,EAAqB,CACvBpB,qBAAsB,QACtBC,eAAgB,QAChBC,gBAAiB,QACjBE,WAAYiB,EAAA,OAGhB,GAD2B,EAAAlC,EAAA,KAAW,IAAAmC,SAAQV,EAAiBQ,EAAzB,CAA6CtB,G","sources":["webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/components/pageTitle/pageTitle.tsx","webpack:///./src/components/permissions/permissionsWrapper.tsx"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { routes } from 'routes';\nimport { formatPath, usePathname } from 'utils/paths';\nconst PageTitleBase = ({ children = null, intl }) => {\n    const usePageTitle = () => {\n        const pathname = usePathname();\n        switch (pathname) {\n            case formatPath(routes.awsDetails.path):\n            case formatPath(routes.awsDetailsBreakdown.path):\n                return messages.pageTitleAws;\n            case formatPath(routes.azureDetails.path):\n            case formatPath(routes.azureDetailsBreakdown.path):\n                return messages.pageTitleAzure;\n            case formatPath(routes.costModels.path):\n            case formatPath(routes.costModelsDetails.path):\n                return messages.pageTitleCostModels;\n            case formatPath(routes.explorer.path):\n                return messages.pageTitleExplorer;\n            case formatPath(routes.gcpDetails.path):\n            case formatPath(routes.gcpDetailsBreakdown.path):\n                return messages.pageTitleGcp;\n            case formatPath(routes.ibmDetails.path):\n            case formatPath(routes.ibmDetailsBreakdown.path):\n                return messages.pageTitleIbm;\n            case formatPath(routes.ociDetails.path):\n            case formatPath(routes.ociDetailsBreakdown.path):\n                return messages.pageTitleOci;\n            case formatPath(routes.ocpDetails.path):\n            case formatPath(routes.ocpDetailsBreakdown.path):\n                return messages.pageTitleOcp;\n            case formatPath(routes.optimizations.path):\n                return messages.pageTitleOptimizations;\n            case formatPath(routes.overview.path):\n                return messages.pageTitleOverview;\n            case formatPath(routes.rhelDetails.path):\n            case formatPath(routes.rhelDetailsBreakdown.path):\n                return messages.pageTitleRhel;\n            default:\n                return messages.pageTitleDefault;\n        }\n    };\n    // Set page title\n    document.title = intl.formatMessage(usePageTitle());\n    return React.createElement(React.Fragment, null, children);\n};\nconst PageTitle = injectIntl(PageTitleBase);\nexport default PageTitle;\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { UserAccessType } from 'api/userAccess';\nimport { asyncComponent } from 'components/async';\nimport { CommonDrawer } from 'components/drawers';\nimport { PageTitle } from 'components/pageTitle';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { accountSettingsActions, accountSettingsSelectors } from 'store/accountSettings';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { providersActions, providersQuery, providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { userAccessActions, userAccessQuery, userAccessSelectors } from 'store/userAccess';\nconst InactiveSources = asyncComponent(() => import(/* webpackChunkName: \"InactiveSources\" */ 'components/inactiveSources'));\nconst Permissions = asyncComponent(() => import(/* webpackChunkName: \"permissions\" */ './permissions'));\nclass PermissionsWrapperBase extends React.Component {\n    componentDidMount() {\n        const { fetchAccountSettings, fetchProviders, fetchUserAccess, providersQueryString, resetState, userAccessQueryString, } = this.props;\n        // Clear cached API responses\n        resetState();\n        // Fetched in order of component usage via render()\n        fetchUserAccess(UserAccessType.all, userAccessQueryString);\n        fetchProviders(ProviderType.all, providersQueryString);\n        fetchAccountSettings();\n    }\n    render() {\n        const { accountSettingsFetchStatus, children, providersFetchStatus, userAccessFetchStatus } = this.props;\n        return (React.createElement(PageTitle, null, userAccessFetchStatus === FetchStatus.complete && (React.createElement(Permissions, null, providersFetchStatus === FetchStatus.complete && (React.createElement(CommonDrawer, null,\n            React.createElement(InactiveSources, null),\n            accountSettingsFetchStatus === FetchStatus.complete && children))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const accountSettings = accountSettingsSelectors.selectAccountSettings(state);\n    const accountSettingsError = accountSettingsSelectors.selectAccountSettingsError(state);\n    const accountSettingsFetchStatus = accountSettingsSelectors.selectAccountSettingsFetchStatus(state);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, UserAccessType.all, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, UserAccessType.all, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, UserAccessType.all, userAccessQueryString);\n    return {\n        accountSettings,\n        accountSettingsError,\n        accountSettingsFetchStatus,\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchAccountSettings: accountSettingsActions.fetchAccountSettings,\n    fetchProviders: providersActions.fetchProviders,\n    fetchUserAccess: userAccessActions.fetchUserAccess,\n    resetState: uiActions.resetState,\n};\nconst PermissionsWrapper = injectIntl(connect(mapStateToProps, mapDispatchToProps)(PermissionsWrapperBase));\nexport default PermissionsWrapper;\n"],"names":["getProvidersQuery","query","stringify","encode","indices","getUserAccessQuery","injectIntl","children","intl","document","title","formatMessage","routes","messages","usePageTitle","InactiveSources","Permissions","PermissionsWrapperBase","componentDidMount","fetchAccountSettings","fetchProviders","fetchUserAccess","providersQueryString","resetState","userAccessQueryString","this","props","render","accountSettingsFetchStatus","providersFetchStatus","userAccessFetchStatus","mapStateToProps","state","accountSettings","accountSettingsError","providers","providersError","userAccess","userAccessError","mapDispatchToProps","ui","connect"],"sourceRoot":""}