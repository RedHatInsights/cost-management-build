{"version":3,"file":"js/gcpDetails.1670338545849.7e0bf461bd3140b919b2.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/minus-icon.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_spacer_xs.js","webpack:///./src/routes/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx","webpack:///./src/utils/computedReport/getComputedGcpReportItems.ts","webpack:///./src/routes/views/details/gcpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/gcpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/gcpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/gcpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/gcpDetails/gcpDetails.styles.ts","webpack:///./src/routes/views/details/gcpDetails/gcpDetails.tsx","webpack:///./src/routes/views/utils/paths.ts"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);\n\nexport default ExternalLinkAltIcon;","import { createIcon } from '../createIcon';\n\nexport const MinusIconConfig = {\n  name: 'MinusIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const MinusIcon = createIcon(MinusIconConfig);\n\nexport default MinusIcon;","\"use strict\";\nexports.__esModule = true;\nexports.global_spacer_xs = {\n  \"name\": \"--pf-global--spacer--xs\",\n  \"value\": \"0.25rem\",\n  \"var\": \"var(--pf-global--spacer--xs)\"\n};\nexports[\"default\"] = exports.global_spacer_xs;","import './emptyValueState.scss';\nimport { MinusIcon } from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport React from 'react';\nconst EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: \"emptyValueContainer\" },\n        React.createElement(MinusIcon, null)));\n};\nexport default EmptyValueState;\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { withRouter } from 'utils/router';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, item: { source_uuid }, redirectToCostModel, router, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], router) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n    },\n    defaultLabel: {\n        minWidth: '63px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { withRouter } from 'utils/router';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl, router } = this.props;\n            const queryFromRoute = parseQuery(router.location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns, router } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(router.location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isLoading, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), gridBreakPoint: \"grid-2xl\" },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    } })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: cellIndex === row.cells.length - 1 }, item.value))))))))),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(withRouter(DataTable));\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.gcp_project) {\n        return 'gcp_project';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst tagReportPathsType = TagPathsType.gcp;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.gcpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.gcp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = ReportPathsType.gcp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, intl, isAllSelected, report, router, selectedItems } = this.props;\n            if (!report) {\n                return;\n            }\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const isDisabled = label === `no-${groupBy}` || label === `no-${groupByTagKey}`;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.gcpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy,\n                        router,\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport || prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/gcpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.gcp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'gcp_project' }), key: 'gcp_project' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.gcp, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    gcpDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './gcpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.gcp;\nclass GcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { intl, query, router, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.gcp),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, router, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, query, reportQueryString, router } = this.props;\n            if (!router.location.search) {\n                router.navigate(getRouteForQuery({\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }, router.location), {\n                    replace: true,\n                });\n            }\n            else {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.gcpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empty data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.gcp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.gcpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.gcp),\n        providersError,\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(GcpDetails)));\n","import { getQueryRoute, platformCategory } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, description, groupBy, isPlatformCosts, label, router, }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== label && { [breakdownDescKey]: description })), (isPlatformCosts && { [breakdownTitleKey]: label })), { group_by: {\n            [groupBy]: isPlatformCosts ? '*' : label,\n        } });\n    if (isPlatformCosts) {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        newQuery.filter.category = platformCategory;\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, router, title, type, }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryFromRoute), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && { [orgUnitIdKey]: groupByOrg })), { group_by: {\n            [groupBy]: id, // This may be overridden below\n        } });\n    if (type === 'account') {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const isPlatformCosts = (queryFromRoute) => {\n    return queryFromRoute && queryFromRoute.filter && queryFromRoute.filter.category === platformCategory;\n};\n"],"names":["ExternalLinkAltIconConfig","name","height","width","svgPath","yOffset","xOffset","ExternalLinkAltIcon","MinusIconConfig","MinusIcon","exports","className","DetailsActionsBase","constructor","stateProps","dispatchProps","super","this","defaultState","isDropdownOpen","isExportModalOpen","state","Object","assign","getExportModal","groupBy","item","reportPathsType","reportQueryString","props","count","isOpen","items","onClose","handleExportModalClose","setState","handleExportModalOpen","handleOnSelect","handleOnToggle","bind","render","isDisabled","showPriceListOption","intl","source_uuid","redirectToCostModel","router","DropdownItem","component","key","onClick","formatMessage","messages","unshift","includes","length","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","mapStateToProps","mapDispatchToProps","costModels","DetailsActionsConnect","connect","injectIntl","styles","costColumn","textAlign","defaultLabel","minWidth","emptyState","backgroundColor","display","justifyContent","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","color","fontSize","nameColumn","DataTable","getEmptyState","queryFromRoute","location","search","filter_by","val","values","filter","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","getSortBy","index","columns","orderBy","direction","order_by","getSortParams","sortBy","onSort","handleOnSort","columnIndex","event","isSelected","rowId","onSelected","rows","newRows","map","row","selected","SortByDirection","isLoading","TableComposable","gridBreakPoint","Thead","Tr","col","Th","value","modifier","sort","isSortable","undefined","style","Tbody","Td","colSpan","Bullseye","Spinner","size","rowIndex","cells","cellIndex","dataLabel","select","disable","selectionDisabled","_event","isActionCell","Boolean","getIdKeyForGroupBy","account","gcp_project","project","region","service","costValue","marginTop","global_spacer_lg","marginBottom","costLabelUnit","global_FontSize_sm","global_Color_100","dateTitle","header","global_BackgroundColor_light_100","padding","headerContent","headerContentLeft","minHeight","headerContentRight","title","paddingBottom","global_spacer_sm","groupByOptions","label","tagReportPathsType","DetailsHeaderBase","currency","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","hasCost","total","cost","Title","headingLevel","TitleSizes","options","showTags","format","units","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","DetailsTableBase","arguments","initDatum","groupByTagKey","isAllSelected","selectedItems","computedItems","idKey","getTotalCost","monthOverMonth","getMonthOverMonthCost","desc","id","actions","getActions","to","basePath","toString","description","push","find","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","tagQueryString","categoryOptions","query","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showExport","showFilter","resolution","time_scope_units","time_scope_value","key_only","limit","DetailsToolbarConnect","DetailsToolbar","gcpDetails","content","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","baseQuery","delta","offset","exclude","group_by","reportType","GcpDetails","getComputedItems","groupById","isAllItems","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","action","handleGroupBySelected","groupByKey","newQuery","parse","navigate","replace","newItems","updateReport","fetchReport","prevState","reportError","noReport","noLocation","providerType","getBreakdownPath","isPlatformCosts","category","getOrgBreakdownPath","groupByOrg","type"],"sourceRoot":""}