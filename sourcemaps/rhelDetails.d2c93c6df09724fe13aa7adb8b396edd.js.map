{"version":3,"file":"js/rhelDetails.423e944469e5c8a94422.js","mappings":"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","sources":["webpack:///./src/routes/utils/computedReport/getComputedRhelReportItems.ts","webpack:///./src/routes/details/rhelDetails/detailsHeader.styles.ts","webpack:///./src/routes/details/rhelDetails/detailsHeader.tsx","webpack:///./src/routes/details/rhelDetails/detailsTable.tsx","webpack:///./src/routes/details/rhelDetails/detailsToolbar.tsx","webpack:///./src/routes/details/rhelDetails/rhelDetails.styles.ts","webpack:///./src/routes/details/rhelDetails/rhelDetails.tsx"],"sourcesContent":["export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/components/groupBy';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { getIdKeyForGroupBy } from 'routes/utils/computedReport/getComputedRhelReportItems';\nimport { filterProviders } from 'routes/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagPathsType = TagPathsType.rhel;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.rhelDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagPathsType: tagPathsType })),\n                showContent && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.rhel),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/components/dataTable/dataTable.scss';\nimport { Label } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { DataTable } from 'routes/components/dataTable';\nimport { styles } from 'routes/components/dataTable/dataTable.styles';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/details/components/actions';\nimport { getUnsortedComputedReportItems } from 'routes/utils/computedReport/getComputedReportItems';\nimport { getBreakdownPath } from 'routes/utils/paths';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.rhel;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, report, router, selectedItems } = this.props;\n            if (!report) {\n                return;\n            }\n            const showDefaultProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}`;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.rhelDetailsBreakdown.path),\n                        description: item.id,\n                        groupBy,\n                        id: item.id,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !showDefaultProject,\n                            value: item.default_project ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        {\n                            value: React.createElement(\"div\", null, InfrastructureCost),\n                            id: DetailsTableColumnIds.infrastructure,\n                            style: styles.managedColumn,\n                        },\n                        {\n                            value: React.createElement(\"div\", null, supplementaryCost),\n                            id: DetailsTableColumnIds.supplementary,\n                            style: styles.managedColumn,\n                        },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.rhel, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        showPercentage && item.delta_percent !== null && item.delta_value > 0 && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        showPercentage && item.delta_percent !== null && item.delta_value < 0 && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { filterBy, isLoading, onSelected, onSort, orderBy, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, filterBy: filterBy, isActionsCell: true, isLoading: isLoading, onSelected: onSelected, onSort: onSort, orderBy: orderBy, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/components/dataToolbar';\nimport { isEqual } from 'routes/utils/equal';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { tagKey } from 'utils/props';\nconst tagType = TagType.tag;\nconst tagPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n        this.updateReport = () => {\n            const { fetchTag, tagQueryString } = this.props;\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            this.updateReport();\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { query, tagReport } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                this.updateReport();\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExcludes: true, showExport: true, showFilter: true, tagReport: tagReport, tagPathsType: tagPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/rhelQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/components/export';\nimport { Loading } from 'routes/components/page/loading';\nimport { NoData } from 'routes/components/page/noData';\nimport { NoProviders } from 'routes/components/page/noProviders';\nimport { NotAvailable } from 'routes/components/page/notAvailable';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/details/components/columnManagement';\nimport { getUnsortedComputedReportItems } from 'routes/utils/computedReport/getComputedReportItems';\nimport { getIdKeyForGroupBy } from 'routes/utils/computedReport/getComputedRhelReportItems';\nimport { getGroupByTagKey } from 'routes/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'routes/utils/providers';\nimport { getRouteForQuery } from 'routes/utils/query';\nimport { handleOnCurrencySelected, handleOnFilterAdded, handleOnFilterRemoved, handleOnPerPageSelect, handleOnSetPage, handleOnSort, } from 'routes/utils/queryNavigate';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './rhelDetails.styles';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass RhelDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handleOnPerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleOnSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleOnSort(query, router, sortType, isSortAscending), orderBy: query.order_by, report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleOnFilterAdded(query, router, filter), onFilterRemoved: filter => handleOnFilterRemoved(query, router, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: undefined, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: () => handleOnCurrencySelected(query, router), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign({}, baseQuery), queryFromRoute);\n    const reportQuery = {\n        currency,\n        delta: 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(RhelDetails)));\n"],"names":["getIdKeyForGroupBy","groupBy","project","cluster","node","styles","costValue","marginTop","global_spacer_lg","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","headerContent","display","justifyContent","headerContentLeft","minHeight","headerContentRight","info","verticalAlign","infoIcon","global_FontSize_md","infoTitle","fontWeight","title","paddingBottom","global_spacer_sm","groupByOptions","label","value","tagPathsType","DetailsHeaderBase","constructor","super","arguments","this","defaultState","state","Object","assign","render","currency","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","intl","props","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","style","Title","headingLevel","size","TitleSizes","formatMessage","messages","onSelect","isDisabled","onSelected","options","showTags","Tooltip","content","enableFlip","mapStateToProps","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","injectIntl","connect","DetailsTableColumnIds","reportPathsType","DetailsTableBase","columns","rows","initDatum","groupByTagKey","hiddenColumns","isAllSelected","router","selectedItems","showDefaultProject","computedItems","idKey","name","undefined","hidden","id","orderBy","length","isSortable","map","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","desc","actions","getActions","Link","to","basePath","routes","description","toString","push","cells","default_project","Label","variant","selected","find","val","selectionDisabled","filteredColumns","filter","column","has","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","setState","reportQueryString","providerType","showPriceListOption","percentValue","toFixed","key","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","filterBy","isLoading","onSort","isActionsCell","DetailsTable","tagType","DetailsToolbarBase","getCategoryOptions","tagReport","updateReport","fetchTag","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExcludes","showExport","showFilter","resolution","time_scope_units","time_scope_value","key_only","limit","tagReportFetchStatus","mapDispatchToProps","DetailsToolbarConnect","DetailsToolbar","paddingTop","ocpDetails","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","toolbarContainer","baseQuery","offset","exclude","filter_by","group_by","order_by","defaultColumnOptions","reportType","RhelDetails","stateProps","dispatchProps","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","option","isOpen","onClose","handleColumnManagementModalClose","onSave","handleColumnManagementModalSave","getComputedItems","groupById","getExportModal","items","isAllItems","handleExportModalClose","getPagination","isBottom","page","trunc","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","action","handleGroupBySelected","groupByKey","newQuery","parse","category","navigate","location","replace","isSelected","newItems","fetchReport","bind","prevState","reportError","noReport","noLocation","search","queryFromRoute","reportQuery","delta"],"sourceRoot":""}