{"version":3,"file":"js/505.1666365225684.9b80b6ea3fe62854f383.js","mappings":"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","sources":["webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/views/details/components/tag/tag.styles.ts","webpack:///./src/routes/views/details/components/tag/tagContent.tsx","webpack:///./src/routes/views/details/components/tag/tagModal.tsx","webpack:///./src/routes/views/details/components/tag/tagLink.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/views/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.tsx","webpack:///./src/routes/views/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/views/details/components/costChart/costChart.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.tsx","webpack:///./src/routes/views/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryCard.tsx","webpack:///./src/routes/views/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/views/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/views/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/views/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/utils/paths.ts"],"sourcesContent":["import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query, reportPathsType } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, redirectToCostModel, history, item: { source_uuid }, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], history) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { TagContent } from './tagContent';\nconst tagReportType = \"tag\" /* TagType.tag */;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, query, tagReport, intl } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagModalBase));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = \"tag\" /* TagType.tag */;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }), count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { breakdownDescKey, breakdownTitleKey, getQueryRoute, orgUnitIdKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { TagLink } from 'routes/views/details/components/tag';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getForDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = () => {\n            const { detailsURL, groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            // Don't want these params when returning to the details page\n            if (newQuery.filter) {\n                newQuery.filter.account = undefined;\n                newQuery[breakdownDescKey] = undefined;\n                newQuery[orgUnitIdKey] = undefined;\n                newQuery[breakdownTitleKey] = undefined;\n            }\n            return `${detailsURL}?${getQueryRoute(newQuery)}`;\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costType, currency, description, groupBy, intl, isCurrencyFeatureEnabled, onCostTypeSelected, onCurrencySelected, query, showCostType = false, tabs, tagReportPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'project' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            React.createElement(Link, { to: this.buildDetailsLink() }, intl.formatMessage(messages.breakdownBackToDetails, {\n                                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagReportPathsType }),\n                                groupBy: groupByKey,\n                            }))))),\n                React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getForDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }), messages.breakdownTotalCostDate, 0)))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { handleCostTypeSelected, handleCurrencySelected } from 'routes/views/utils/history';\nimport { hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"cost-overview\" /* BreakdownTab.costOverview */:\n            return 'cost-overview';\n        case \"historical-data\" /* BreakdownTab.historicalData */:\n            return 'historical-data';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: \"cost-overview\" /* BreakdownTab.costOverview */,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: \"historical-data\" /* BreakdownTab.historicalData */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"cost-overview\" /* BreakdownTab.costOverview */) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === \"historical-data\" /* BreakdownTab.historicalData */) {\n                return historicalDataComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"cost-overview\" /* BreakdownTab.costOverview */) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === \"historical-data\" /* BreakdownTab.historicalData */) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { location, fetchReport, queryString, reportPathsType, reportType } = this.props;\n            if (location.search) {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, currency, description, detailsURL, emptyStateTitle, groupBy, history, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 1 /* FetchStatus.inProgress */ && reportFetchStatus === 1 /* FetchStatus.inProgress */) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 2 /* FetchStatus.complete */ && reportFetchStatus === 2 /* FetchStatus.complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* FetchStatus.complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: value => handleCostTypeSelected(history, query, value), onCurrencySelected: value => handleCurrencySelected(history, query, value), query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nexport default injectIntl(BreakdownBase);\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { item } = this.props;\n        if (!item.clusters) {\n            return null;\n        }\n        return item.clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, intl } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, { groupBy, name: item.label }), width: '50%' },\n            React.createElement(ClusterContent, { item: item })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, report, intl } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        const item = computedItems && computedItems.length ? computedItems[0] : undefined;\n        if (!item) {\n            return null;\n        }\n        for (const cluster of item.clusters) {\n            const prefix = someClusters.length > 0 ? ', ' : '';\n            const clusterString = `${prefix}${cluster}`;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + clusterString.length > maxChars) {\n                    someClusters.push(clusterString\n                        .slice(0, maxChars - charCount)\n                        .trim()\n                        .concat('...'));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            charCount += clusterString.length;\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.cluster_lnk), { href: \"#/\", onClick: this.handleOpen }), intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 400,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 25, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.breakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.breakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.breakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './summaryModal.styles';\nconst reportType = \"cost\" /* ReportType.cost */;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n        cost_type: costType,\n        currency,\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { costType, currency, groupBy, query, reportGroupBy, reportPathsType, intl } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costType: costType, currency: currency, groupBy: groupBy, groupByValue: groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== queryString || prevProps.costType !== costType || prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { reportGroupBy, reportFetchStatus, intl } = this.props;\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.breakdownSummaryTitle, { value: reportGroupBy }))),\n            React.createElement(CardBody, null, reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n        cost_type: costType,\n        currency,\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        report,\n        reportFetchStatus,\n        reportPathsType,\n        reportType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryBase));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, report, intl, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || reportType === \"volume\" /* ReportType.volume */) {\n            const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n            const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase));\nexport default UsageChart;\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Cluster } from 'routes/views/details/components/cluster';\nimport { CostChart } from 'routes/views/details/components/costChart';\nimport { SummaryCard } from 'routes/views/details/components/summary';\nimport { UsageChart } from 'routes/views/details/components/usageChart';\nimport { styles } from 'routes/views/details/ocpDetails/detailsHeader.styles';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, report, intl } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report }))));\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.breakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.breakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, currency, groupBy, query } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                if (groupById === groupBy ||\n                    (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                    (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, currency: currency, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cluster\" /* CostOverviewWidgetType.cluster */:\n                return this.getClusterChart(widget);\n            case \"cost\" /* CostOverviewWidgetType.cost */:\n                return this.getCostChart(widget);\n            case \"cpuUsage\" /* CostOverviewWidgetType.cpuUsage */:\n                return this.getCpuUsageChart(widget);\n            case \"memoryUsage\" /* CostOverviewWidgetType.memoryUsage */:\n                return this.getMemoryUsageChart(widget);\n            case \"summary\" /* CostOverviewWidgetType.reportSummary */:\n                return this.getSummaryCard(widget);\n            case \"volumeUsage\" /* CostOverviewWidgetType.volumeUsage */:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString } from 'routes/views/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 700 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 700\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/views/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, 0 /* DatumType.cumulative */, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, 0 /* DatumType.cumulative */, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, 0 /* DatumType.cumulative */, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, 0 /* DatumType.cumulative */, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === 1 /* FetchStatus.inProgress */ &&\n                previousReportFetchStatus === 1 /* FetchStatus.inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        cost_type: costType,\n        currency,\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === \"cost\" /* ReportType.cost */;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? 0 /* DatumType.cumulative */ : 1 /* DatumType.rolling */, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? 0 /* DatumType.cumulative */ : 1 /* DatumType.rolling */, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === 1 /* FetchStatus.inProgress */ &&\n                previousReportFetchStatus === 1 /* FetchStatus.inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        cost_type: costType,\n        currency,\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 900 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 900\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, 1 /* DatumType.rolling */, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, 1 /* DatumType.rolling */, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, 1 /* DatumType.rolling */, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, 1 /* DatumType.rolling */, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, 1 /* DatumType.rolling */, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, 1 /* DatumType.rolling */, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === 1 /* FetchStatus.inProgress */ &&\n                previousReportFetchStatus === 1 /* FetchStatus.inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === \"instance_type\" /* ReportType.instanceType */ || reportType === \"storage\" /* ReportType.storage */;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === \"azure\" /* ReportPathsType.azure */) {\n                return reportType === \"instance_type\" /* ReportType.instanceType */ ? 'virtual_machine' : reportType;\n            }\n            return reportType === \"instance_type\" /* ReportType.instanceType */ ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cost\" /* HistoricalDataWidgetType.cost */:\n                return this.getCostChart(widget);\n            case \"trend\" /* HistoricalDataWidgetType.trend */:\n                return this.getTrendChart(widget);\n            case \"usage\" /* HistoricalDataWidgetType.usage */:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, label, description, groupBy, query, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n            [groupBy]: label,\n        } });\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, orgUnitId, query, title, type, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && orgUnitId && { [orgUnitIdKey]: orgUnitId })), { group_by: {\n            [groupBy]: id, // This may be overridden below\n        } });\n    if (!newQuery.filter) {\n        newQuery.filter = {};\n    }\n    if (type === 'account') {\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\n"],"names":["DetailsActionsBase","constructor","stateProps","dispatchProps","super","this","defaultState","isDropdownOpen","isExportModalOpen","state","Object","assign","getExportModal","groupBy","item","query","reportPathsType","props","count","isOpen","items","onClose","handleExportModalClose","setState","handleExportModalOpen","handleOnSelect","handleOnToggle","bind","render","isDisabled","showPriceListOption","intl","redirectToCostModel","history","source_uuid","DropdownItem","component","key","onClick","formatMessage","messages","unshift","includes","length","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","mapStateToProps","mapDispatchToProps","costModels","DetailsActionsConnect","connect","injectIntl","styles","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","marginBottom","tagLink","marginLeft","global_spacer_sm","tagsContainer","marginRight","global_spacer_3xl","marginTop","TagContentBase","arguments","getDataListItems","tagReport","result","data","val","values","id","push","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","groupByValue","dataListItems","style","value","DataList","isCompact","map","TagContent","tagReportType","TagModalBase","getTagValueCount","handleClose","componentDidMount","fetchTag","queryString","tagReportPathsType","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","filter","account","Modal","title","width","location","search","groupByOrgValue","filterByParams","filter_by","keys","indexOf","undefined","newQuery","resolution","time_scope_units","time_scope_value","tagReportFetchStatus","TagModal","TagLinkBase","handleOpen","event","preventDefault","Boolean","testIds","href","cost","global_spacer_xl","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","global_spacer_md","header","backgroundColor","global_BackgroundColor_100","headerContent","display","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeader","buildDetailsLink","detailsURL","groupByKey","JSON","parse","stringify","group_by","getTotalCost","report","hasCost","meta","total","format","units","currency","description","isCurrencyFeatureEnabled","onCostTypeSelected","onCurrencySelected","showCostType","filterByAccount","groupByOrg","groupByTag","showTags","className","to","Title","headingLevel","size","TitleSizes","featureFlags","getIdKeyForTab","tab","BreakdownBase","activeTabKey","getAvailableTabs","contentRef","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","ref","getTabItem","costOverviewComponent","historicalDataComponent","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","updateReport","fetchReport","reportType","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","name","label","ClusterModal","ClusterBase","showAll","charCount","someClusters","allClusters","computedItems","getComputedReportItems","idKey","clusterString","slice","trim","concat","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","_item","formatOptions","toString","totalValue","cost_type","SummaryModalContent","SummaryModalBase","variant","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","handleBulletChartModalOpen","type","ButtonType","ButtonVariant","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","limit","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasCapacity","capacityUnits","hasRequest","request","requestUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","enableFlip","bodyContent","rel","target","chartName","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","usePlaceholder","getVolumeUsageChart","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","getTrendChart","getUsageChart","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","getBreakdownPath","basePath","getOrgBreakdownPath","orgUnitId"],"sourceRoot":""}