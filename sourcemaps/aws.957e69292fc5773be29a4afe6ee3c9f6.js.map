{"version":3,"file":"js/aws.1668434746756.bac3e93a769cecc7abb0.js","mappings":"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","sources":["webpack:///./src/routes/views/details/awsBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/awsBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/awsBreakdown/awsBreakdown.tsx","webpack:///./src/utils/computedReport/getComputedAwsReportItems.ts","webpack:///./src/routes/views/details/awsDetails/awsDetails.styles.ts","webpack:///./src/routes/views/details/awsDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/awsDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/awsDetails/detailsTable.tsx","webpack:///./src/routes/views/details/awsDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/awsDetails/awsDetails.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, orgUnitIdKey } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.awsDetails;\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.aws;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const costType = getCostType();\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, newQuery), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { costType: costType, currency: currency, groupBy: groupBy, query: query, report: report })),\n        costType,\n        currency,\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.awsDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { costType: costType, currency: currency }),\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        providerType: ProviderType.aws,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        showCostType: true,\n        tagReportPathsType: TagPathsType.aws,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AwsBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { OrgPathsType } from 'api/orgs/org';\nimport { ProviderType } from 'api/providers';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = OrgPathsType.aws;\nconst tagReportPathsType = TagPathsType.aws;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { costType, currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.awsDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType }),\n                    React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected }))),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getOrgBreakdownPath } from 'routes/views/utils/paths';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nconst reportPathsType = ReportPathsType.aws;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n            });\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: groupByOrg\n                            ? intl.formatMessage(messages.names, { count: 2 })\n                            : intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupById === 'account' ? 'account_alias' : groupById, name: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                let name = (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: paths.awsDetailsBreakdown,\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        groupByOrg,\n                        id: item.id,\n                        orgUnitId: getGroupByOrgValue(query),\n                        query,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: !selectable,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, index, disabled = false) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: disabled, item: item, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, query, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, query: query, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { OrgPathsType, OrgType } from 'api/orgs/org';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagKey } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst orgReportPathsType = OrgPathsType.aws;\nconst orgReportType = OrgType.org;\nconst tagReportPathsType = TagPathsType.aws;\nconst tagReportType = TagType.tag;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, orgReport, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportFetchStatus, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (orgReportFetchStatus !== FetchStatus.inProgress) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, orgReportFetchStatus, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (orgReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchOrg(orgReportPathsType, orgReportType, queryString);\n                }\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportFetchStatus !== FetchStatus.inProgress) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.aws, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getRouteForQuery, handleCostTypeSelected, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/history';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/localStorage';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.aws;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { history, intl, query, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(history, query, perPage), onSetPage: (event, pageNumber) => handleSetPage(history, query, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.aws),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { history, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(history, query, sortType, isSortAscending), query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { history, query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(history, query, filter), onFilterRemoved: filter => handleFilterRemoved(history, query, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, currency, history, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.awsDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.aws, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { costType: costType, currency: currency, groupBy: groupById, onCostTypeSelected: value => handleCostTypeSelected(history, query, value), onCurrencySelected: value => handleCurrencySelected(history, query, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const costType = getCostType();\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { cost_type: costType, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costType,\n        currency,\n        providers: filterProviders(providers, ProviderType.aws),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","injectIntl","connect","awsHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupByOrgValue","groupBy","groupByValue","costType","currency","featureFlags","undefined","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","account","exclude","group_by","queryString","cost_type","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","showCostType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","display","dateTitle","textAlign","header","padding","headerContent","justifyContent","headerContentLeft","headerContentRight","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","orgReportPathsType","DetailsHeaderBase","constructor","super","arguments","this","handleCostTypeSelected","onCostTypeSelected","render","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","onSelect","isDisabled","onSelected","options","showOrgs","showTags","Boolean","format","units","DetailsHeader","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByOrg","groupByTagKey","computedItems","idKey","name","orderBy","length","isSortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","to","basePath","id","orgUnitId","type","selectable","desc","push","cells","selected","find","val","selectionDisabled","setState","disabled","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","onSort","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","defaultState","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","orgReportFetchStatus","tagReportFetchStatus","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","offset","order_by","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","items","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","history","page","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","indexOf","slice","parse","replace","isSelected","newItems","updateReport","bind","prevState","noReport","noLocation","queryFromRoute"],"sourceRoot":""}