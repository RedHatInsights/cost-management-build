{"version":3,"file":"js/ocp.1667503643166.58a7203da0dded59fce1.js","mappings":"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","sources":["webpack:///./src/routes/views/details/ocpBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/ocpBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/ocpBreakdown/ocpBreakdown.tsx","webpack:///./src/routes/views/details/components/columnManagement/columnManagementModal.tsx","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsTable.styles.ts","webpack:///./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, newQuery), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { currency: currency, groupBy: groupBy, report: report }),\n        currency,\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        providerType: ProviderType.ocp,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: TagPathsType.ocp,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.manageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.selectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.manageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.manageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": `${option.value}Label`, isChecked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: `${option.value}Label`, key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport default ColumnManagementModal;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns, query } = this.props;\n            const orderBy = columns[index].orderBy;\n            const direction = query.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, groupBy, intl, isLoading, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel, { value: groupBy }), gridBreakPoint: \"grid-2xl\" },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 ? (React.createElement(Td, { dataLabel: columns[cellIndex], key: `cell-${cellIndex}-${rowIndex}`, select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    } })) : (React.createElement(Td, { dataLabel: columns[cellIndex], key: `cell-${rowIndex}-${cellIndex}`, isActionCell: cellIndex === row.cells.length - 1 }, item.value))))))))),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(DataTable);\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport './detailsTable.scss';\nimport { ProviderType } from 'api/providers';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { hiddenColumns, isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupById, name: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ocpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { value: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { value: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: !selectable,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id));\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id));\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, item: item, providerType: ProviderType.ocp, query: query, reportPathsType: reportPathsType, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { groupBy, hiddenColumns, isLoading, onSelected, onSort, query, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, groupBy: groupBy, hiddenColumns: hiddenColumns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, query: query, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== FetchStatus.inProgress) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getRouteForQuery, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/history';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { history, intl, query, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(history, query, perPage), onSetPage: (event, pageNumber) => handleSetPage(history, query, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { history, query, report, reportFetchStatus } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(history, query, sortType, isSortAscending), query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { history, query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(history, query, filter), onFilterRemoved: filter => handleFilterRemoved(history, query, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, history, location, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, history, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(history, query, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","injectIntl","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","currency","featureFlags","undefined","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","exclude","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","constructor","stateProps","dispatchProps","super","this","defaultState","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","setState","handleClose","onClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","render","Modal","TextContent","Text","component","TextVariants","Button","isInline","onClick","variant","isOpen","ModalVariant","actions","key","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","isChecked","name","onChange","DataListItemCells","dataListCells","DataListCell","label","ColumnManagementModalConnect","getIdKeyForGroupBy","project","cluster","node","baseQuery","delta","groupByOptions","DetailsHeaderBase","arguments","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","style","Title","headingLevel","size","TitleSizes","onSelect","isDisabled","onSelected","showTags","Boolean","Tooltip","content","enableFlip","DetailsHeader","styles","emptyState","backgroundColor","global_BackgroundColor_light_100","display","justifyContent","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","DataTable","getEmptyState","val","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","getSortBy","index","columns","orderBy","direction","order_by","getSortParams","sortBy","onSort","handleOnSort","columnIndex","handleOnSelect","isSelected","rowId","rows","newRows","items","row","selected","item","SortByDirection","bind","isLoading","TableComposable","gridBreakPoint","Thead","Tr","col","Th","modifier","sort","isSortable","Tbody","Td","colSpan","Bullseye","textAlign","Spinner","rowIndex","cells","cellIndex","dataLabel","select","disable","selectionDisabled","_event","isActionCell","length","costColumn","DetailsTableColumnIds","DetailsTableBase","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getSupplementaryCost","getTotalCost","getActions","to","basePath","toString","selectable","desc","push","find","filteredColumns","column","filteredRows","_a","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","showPriceListOption","percentValue","toFixed","keys","tagIndex","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","componentDidMount","currentReport","data","JSON","stringify","previousReport","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","paddingBottom","global_spacer_lg","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","offset","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","getExportModal","isAllItems","handleExportModalClose","getPagination","isBottom","history","page","Pagination","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","action","handleGroupBySelected","groupByKey","parse","replace","newItems","updateReport","prevState","noReport","noLocation","queryFromRoute"],"sourceRoot":""}