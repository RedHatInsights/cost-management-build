{"version":3,"file":"js/rhelDetails.f28df7ad372b72609d16.js","mappings":"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","sources":["webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/routes/components/currency/currency.styles.ts","webpack:///./src/routes/components/currency/currency.tsx","webpack:///./src/routes/state/noData/noDataState.tsx","webpack:///./src/routes/state/noData/noData.tsx","webpack:///./src/routes/components/icons/costIcon/costIcon.tsx","webpack:///./src/routes/state/noProviders/noProvidersState.styles.ts","webpack:///./src/routes/state/noProviders/noProvidersState.tsx","webpack:///./src/routes/state/noProviders/noProviders.tsx","webpack:///./src/routes/state/notAvailable/notAvailable.tsx","webpack:///./src/utils/computedReport/getComputedRhelReportItems.ts","webpack:///./src/routes/views/details/rhelDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/rhelDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/rhelDetails/detailsTable.tsx","webpack:///./src/routes/views/details/rhelDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/rhelDetails/rhelDetails.styles.ts","webpack:///./src/routes/views/details/rhelDetails/rhelDetails.tsx","webpack:///./src/routes/views/utils/handles.ts","webpack:///./src/routes/views/utils/providers.ts","webpack:///./src/routes/views/utils/query.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currency, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: \"currencyOverride\", id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCurrency(selection.value); // Set currency units via local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.currency)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport default Currency;\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(NoDataStateBase);\nexport { NoDataState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default NoData;\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CostIcon } from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case ProviderType.aws:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case ProviderType.azure:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case ProviderType.gcp:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case ProviderType.ibm:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case ProviderType.ocp:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(NoProvidersStateBase);\nexport { NoProvidersState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default NoProviders;\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(Unavailable, null))));\n};\nexport default NotAvailable;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedRhelReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagPathsType = TagPathsType.rhel;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.rhelDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagPathsType: tagPathsType })),\n                showContent && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.rhel),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.rhel;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, report, router, selectedItems } = this.props;\n            if (!report) {\n                return;\n            }\n            const showDefaultProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}`;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.rhelDetailsBreakdown.path),\n                        description: item.id,\n                        groupBy,\n                        id: item.id,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !showDefaultProject,\n                            value: item.default_project ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        {\n                            value: React.createElement(\"div\", null, InfrastructureCost),\n                            id: DetailsTableColumnIds.infrastructure,\n                            style: styles.managedColumn,\n                        },\n                        {\n                            value: React.createElement(\"div\", null, supplementaryCost),\n                            id: DetailsTableColumnIds.supplementary,\n                            style: styles.managedColumn,\n                        },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.rhel, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        showPercentage && item.delta_percent !== null && item.delta_value > 0 && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        showPercentage && item.delta_percent !== null && item.delta_value < 0 && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagType = TagType.tag;\nconst tagPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n        this.updateReport = () => {\n            const { fetchTag, tagQueryString } = this.props;\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            this.updateReport();\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { query, tagReport } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                this.updateReport();\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExcludes: true, showExport: true, showFilter: true, tagReport: tagReport, tagPathsType: tagPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/rhelQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedRhelReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './rhelDetails.styles';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass RhelDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: undefined, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign({}, baseQuery), queryFromRoute);\n    const reportQuery = {\n        currency,\n        delta: 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(RhelDetails)));\n","import { addFilterToQuery, removeFilterFromQuery } from './filter';\nimport { getRouteForQuery } from './query';\nexport const handleSelected = (query, router, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    router.navigate(getRouteForQuery(newQuery, router.location, reset), { replace: true }); // Don't reset pagination\n};\nexport const handleCurrencySelected = (query, router, value, reset = false) => {\n    handleSelected(query, router, value, reset);\n};\nexport const handleCostTypeSelected = (query, router, value, reset = false) => {\n    handleSelected(query, router, value, reset);\n};\nexport const handleCostDistributionSelected = (query, router, value, reset = false) => {\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { order_by: undefined });\n    handleSelected(newQuery, router, value, reset);\n};\nexport const handleFilterAdded = (query, router, filter) => {\n    const filteredQuery = addFilterToQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handleFilterRemoved = (query, router, filter) => {\n    const filteredQuery = removeFilterFromQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handlePerPageSelect = (query, router, perPage) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n    const filteredQuery = getRouteForQuery(newQuery, router.location, true);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSetPage = (query, router, report, pageNumber) => {\n    const limit = report && report.meta && report.meta.filter && report.meta.filter.limit ? report.meta.filter.limit : 10;\n    const offset = pageNumber * limit - limit;\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSort = (query, router, sortType, isSortAscending, date = undefined) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.order_by = {};\n    newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n    if (date) {\n        newQuery.order_by.date = date;\n    }\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\n","// eslint-disable-next-line no-shadow\nvar DataType;\n(function (DataType) {\n    DataType[\"currentMonthData\"] = \"current_month_data\";\n    DataType[\"hasData\"] = \"has_data\";\n    DataType[\"previousMonthData\"] = \"previous_month_data\";\n})(DataType || (DataType = {}));\n// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.currentMonthData);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.hasData);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.previousMonthData);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, DataType.currentMonthData);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, DataType.hasData);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, DataType.previousMonthData);\n};\n","import { getQueryRoute } from 'api/queries/query';\nexport const getRouteForQuery = (query, location, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        if (query.filter && query.filter.offset !== undefined) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: 0 });\n        }\n        if (query.offset !== undefined) {\n            query.offset = 0;\n        }\n    }\n    return `${location.pathname}?${getQueryRoute(query)}`;\n};\n"],"names":["getProvidersQuery","query","stringify","encode","indices","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","currency","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CurrencyConnect","connect","injectIntl","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","Button","onClick","window","location","reload","NoDataState","title","PageHeader","PageHeaderTitle","PageSection","src","alt","iconSpacer","marginLeft","viewSources","marginTop","global_spacer_lg","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","titleKey","component","NoProvidersState","Unavailable","getIdKeyForGroupBy","groupBy","project","cluster","node","costValue","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","headerContent","justifyContent","headerContentLeft","minHeight","headerContentRight","info","verticalAlign","infoIcon","global_FontSize_md","infoTitle","fontWeight","paddingBottom","global_spacer_sm","groupByOptions","tagPathsType","DetailsHeaderBase","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","TitleSizes","onSelected","showTags","Tooltip","content","enableFlip","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","DetailsTableColumnIds","reportPathsType","DetailsTableBase","columns","rows","initDatum","groupByTagKey","hiddenColumns","isAllSelected","router","selectedItems","showDefaultProject","computedItems","idKey","name","undefined","hidden","orderBy","length","isSortable","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","desc","actions","getActions","Link","to","basePath","routes","description","cells","default_project","Label","selected","val","selectionDisabled","filteredColumns","filter","column","has","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","reportQueryString","showPriceListOption","percentValue","toFixed","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","isLoading","onSort","DetailsTable","tagType","DetailsToolbarBase","getCategoryOptions","tagReport","updateReport","fetchTag","tagQueryString","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExcludes","showExport","showFilter","resolution","time_scope_units","time_scope_value","key_only","limit","tagReportFetchStatus","mapDispatchToProps","DetailsToolbarConnect","DetailsToolbar","paddingTop","ocpDetails","paginationContainer","global_spacer_md","tableContainer","toolbarContainer","baseQuery","offset","exclude","filter_by","group_by","order_by","defaultColumnOptions","reportType","RhelDetails","stateProps","dispatchProps","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","onClose","handleColumnManagementModalClose","onSave","handleColumnManagementModalSave","getComputedItems","groupById","getExportModal","items","isAllItems","handleExportModalClose","getPagination","isBottom","page","trunc","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","action","handleGroupBySelected","groupByKey","newQuery","parse","category","navigate","replace","isSelected","newItems","fetchReport","bind","prevState","reportError","noReport","noLocation","search","queryFromRoute","reportQuery","delta","reset","handleCurrencySelected","handleCostTypeSelected","handleCostDistributionSelected","handleFilterAdded","filteredQuery","handleFilterRemoved","handlePerPageSelect","handleSetPage","handleSort","date","DataType","_getOcpProvider","ocpProviders","uuid","result","provider","filterProviders","sourceType","source_type","toLowerCase","_hasData","datumType","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","currentMonthData","hasCloudData","hasData","hasCloudPreviousMonthData","previousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasPreviousMonthData","getRouteForQuery","pathname"],"sourceRoot":""}