{"version":3,"file":"js/gcpDetails.0794755735cc138d75d4.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/global_spacer_xs.js","webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/routes/components/currency/currency.styles.ts","webpack:///./src/routes/components/currency/currency.tsx","webpack:///./src/routes/state/noData/noDataState.tsx","webpack:///./src/routes/state/noData/noData.tsx","webpack:///./src/routes/components/icons/optimizationIcon/optimizationIcon.tsx","webpack:///./src/routes/state/noOptimizations/noOptimizationsState.tsx","webpack:///./src/routes/components/icons/costIcon/costIcon.tsx","webpack:///./src/routes/state/noProviders/noProvidersState.styles.ts","webpack:///./src/routes/state/noProviders/noProvidersState.tsx","webpack:///./src/routes/state/noProviders/noProviders.tsx","webpack:///./src/routes/state/notAvailable/notAvailable.tsx","webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/dataTable/dataTable.styles.ts","webpack:///./src/routes/views/details/components/dataTable/dataTable.tsx","webpack:///./src/utils/computedReport/getComputedGcpReportItems.ts","webpack:///./src/routes/views/details/gcpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/gcpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/gcpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/gcpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/gcpDetails/gcpDetails.styles.ts","webpack:///./src/routes/views/details/gcpDetails/gcpDetails.tsx","webpack:///./src/routes/views/utils/handles.ts","webpack:///./src/routes/views/utils/providers.ts","webpack:///./src/routes/views/utils/query.ts"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);\n\nexport default ExternalLinkAltIcon;","\"use strict\";\nexports.__esModule = true;\nexports.global_spacer_xs = {\n  \"name\": \"--pf-global--spacer--xs\",\n  \"value\": \"0.25rem\",\n  \"var\": \"var(--pf-global--spacer--xs)\"\n};\nexports[\"default\"] = exports.global_spacer_xs;","import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currency, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: \"currencyOverride\", id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCurrency(selection.value); // Set currency units via local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.currency)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport default Currency;\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(NoDataStateBase);\nexport { NoDataState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default NoData;\n","import './optimizationIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Red_Hat-IT_Optimization-Gray.svg');\nconst OptimizationIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `optimization-icon ${className}`, src: icon, alt: intl.formatMessage(messages.optimizations), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(OptimizationIcon);\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { OptimizationIcon } from 'routes/components/icons/optimizationIcon';\nclass NoOptimizationsStateBase extends React.Component {\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: OptimizationIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(messages.noOptimizationsTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noOptimizationsDesc))));\n    }\n}\nconst NoOptimizationsState = injectIntl(NoOptimizationsStateBase);\nexport { NoOptimizationsState };\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CostIcon } from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case ProviderType.aws:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case ProviderType.azure:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case ProviderType.gcp:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case ProviderType.ibm:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case ProviderType.ocp:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(NoProvidersStateBase);\nexport { NoProvidersState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default NoProviders;\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(Unavailable, null))));\n};\nexport default NotAvailable;\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, item: { source_uuid }, redirectToCostModel, router, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], router) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    costColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingRight: 0,\n    },\n    defaultLabel: {\n        minWidth: '63px',\n    },\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    lastReported: {\n        textAlign: 'right',\n        paddingRight: '40px',\n    },\n    lastReportedColumn: {\n        textAlign: 'right',\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    managedColumn: {\n        textAlign: 'right',\n    },\n    nameColumn: {\n        width: '1%',\n    },\n};\n","import './dataTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { SortByDirection, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { NoOptimizationsState } from 'routes/state/noOptimizations/noOptimizationsState';\nimport { withRouter } from 'utils/router';\nimport { styles } from './dataTable.styles';\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getEmptyState = () => {\n            const { intl, isOptimizations, router } = this.props;\n            const queryFromRoute = parseQuery(router.location.search);\n            if (queryFromRoute.filter_by) {\n                for (const val of Object.values(queryFromRoute.filter_by)) {\n                    if (val !== '*') {\n                        return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                    }\n                }\n            }\n            if (isOptimizations) {\n                return React.createElement(NoOptimizationsState, null);\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = index => {\n            const { columns, router } = this.props;\n            const orderBy = columns[index].orderBy;\n            const queryFromRoute = parseQuery(router.location.search);\n            const direction = queryFromRoute && queryFromRoute.order_by && queryFromRoute.order_by[orderBy];\n            return direction\n                ? {\n                    index,\n                    direction,\n                }\n                : {};\n        };\n        this.getSortParams = (index) => {\n            return {\n                sortBy: this.getSortBy(index),\n                onSort: this.handleOnSort,\n                columnIndex: index,\n            };\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected, rows } = this.props;\n            let newRows;\n            let items = [];\n            if (rowId === -1) {\n                newRows = rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                newRows = [...rows];\n                newRows[rowId].selected = isSelected;\n                items = [newRows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { columns, onSort } = this.props;\n            if (onSort) {\n                const orderBy = columns[index].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnRowClick = (event, rowIndex) => {\n            const { onRowClick, rows } = this.props;\n            rows.map(row => (row.selected = false));\n            rows[rowIndex].selected = true;\n            this.setState({ rows }, () => {\n                if (onRowClick) {\n                    onRowClick(event, rowIndex);\n                }\n            });\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    render() {\n        const { columns, intl, isLoading, isOptimizations, rows } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TableComposable, { \"aria-label\": intl.formatMessage(messages.dataTableAriaLabel), className: \"tableOverride\", gridBreakPoint: \"grid-2xl\", hasSelectableRowCaption: isOptimizations },\n                React.createElement(Thead, null,\n                    React.createElement(Tr, null, columns.map((col, index) => (React.createElement(Th, { key: `col-${index}-${col.value}`, modifier: \"nowrap\", sort: col.isSortable ? this.getSortParams(index) : undefined, style: col.style }, col.name))))),\n                React.createElement(Tbody, null, isLoading ? (React.createElement(Tr, null,\n                    React.createElement(Td, { colSpan: 100 },\n                        React.createElement(Bullseye, null,\n                            React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                React.createElement(Spinner, { size: \"xl\" })))))) : (rows.map((row, rowIndex) => (React.createElement(Tr, { isSelectable: isOptimizations, isHoverable: isOptimizations, isRowSelected: isOptimizations && row.selected, onRowClick: isOptimizations ? _event => this.handleOnRowClick(_event, rowIndex) : undefined, key: `row-${rowIndex}` }, row.cells.map((item, cellIndex) => cellIndex === 0 && !isOptimizations ? (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${cellIndex}-${rowIndex}`, modifier: \"nowrap\", select: {\n                        disable: row.selectionDisabled,\n                        isSelected: row.selected,\n                        onSelect: (_event, isSelected) => this.handleOnSelect(_event, isSelected, rowIndex),\n                        rowIndex,\n                    }, style: item.style })) : (React.createElement(Td, { dataLabel: columns[cellIndex].name, key: `cell-${rowIndex}-${cellIndex}`, modifier: \"nowrap\", isActionCell: !isOptimizations && cellIndex === row.cells.length - 1, style: item.style }, item.value))))))))),\n            rows.length === 0 && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nexport default injectIntl(withRouter(DataTable));\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.gcp_project) {\n        return 'gcp_project';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst tagPathsType = TagPathsType.gcp;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { currency, groupBy, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.gcpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagPathsType: tagPathsType })),\n                showContent && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.gcp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = ReportPathsType.gcp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, intl, isAllSelected, report, router, selectedItems } = this.props;\n            if (!report) {\n                return;\n            }\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}`;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.gcpDetailsBreakdown.path),\n                        description: item.id,\n                        groupBy,\n                        id: item.id,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        showPercentage && item.delta_percent !== null && item.delta_value > 0 && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        showPercentage && item.delta_percent !== null && item.delta_value < 0 && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport || prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/gcpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagType = TagType.tag;\nconst tagPathsType = TagPathsType.gcp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'gcp_project' }), key: 'gcp_project' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n        this.updateReport = () => {\n            const { fetchTag, tagQueryString } = this.props;\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            this.updateReport();\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { query, tagReport } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                this.updateReport();\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.gcp, selectedItems: selectedItems, showBulkSelect: true, showExcludes: true, showExport: true, showFilter: true, tagReport: tagReport, tagPathsType: tagPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    gcpDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './gcpDetails.styles';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.gcp;\nclass GcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, router, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.gcp),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, router, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.gcpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empty data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.gcp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.gcpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign({}, baseQuery), queryFromRoute);\n    const reportQuery = {\n        currency,\n        delta: 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.gcp),\n        providersError,\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(GcpDetails)));\n","import { addFilterToQuery, removeFilterFromQuery } from './filter';\nimport { getRouteForQuery } from './query';\nexport const handleSelected = (query, router, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    router.navigate(getRouteForQuery(newQuery, router.location, reset), { replace: true }); // Don't reset pagination\n};\nexport const handleCurrencySelected = (query, router, value, reset = false) => {\n    handleSelected(query, router, value, reset);\n};\nexport const handleCostTypeSelected = (query, router, value, reset = false) => {\n    handleSelected(query, router, value, reset);\n};\nexport const handleCostDistributionSelected = (query, router, value, reset = false) => {\n    handleSelected(query, router, value, reset);\n};\nexport const handleFilterAdded = (query, router, filter) => {\n    const filteredQuery = addFilterToQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handleFilterRemoved = (query, router, filter) => {\n    const filteredQuery = removeFilterFromQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handlePerPageSelect = (query, router, perPage) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n    const filteredQuery = getRouteForQuery(newQuery, router.location, true);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSetPage = (query, router, report, pageNumber) => {\n    const limit = report && report.meta && report.meta.filter && report.meta.filter.limit ? report.meta.filter.limit : 10;\n    const offset = pageNumber * limit - limit;\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSort = (query, router, sortType, isSortAscending, date = undefined) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.order_by = {};\n    newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n    if (date) {\n        newQuery.order_by.date = date;\n    }\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\n","// eslint-disable-next-line no-shadow\nvar DataType;\n(function (DataType) {\n    DataType[\"currentMonthData\"] = \"current_month_data\";\n    DataType[\"hasData\"] = \"has_data\";\n    DataType[\"previousMonthData\"] = \"previous_month_data\";\n})(DataType || (DataType = {}));\n// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.currentMonthData);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.hasData);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.previousMonthData);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, DataType.currentMonthData);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, DataType.hasData);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, DataType.previousMonthData);\n};\n","import { getQueryRoute } from 'api/queries/query';\nexport const getRouteForQuery = (query, location, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        if (query.filter && query.filter.offset !== undefined) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: 0 });\n        }\n        if (query.offset !== undefined) {\n            query.offset = 0;\n        }\n    }\n    return `${location.pathname}?${getQueryRoute(query)}`;\n};\n"],"names":["ExternalLinkAltIconConfig","name","height","width","svgPath","yOffset","xOffset","ExternalLinkAltIcon","exports","getProvidersQuery","query","stringify","encode","indices","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","currency","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CurrencyConnect","connect","injectIntl","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","Button","onClick","window","location","reload","NoDataState","title","PageHeader","PageHeaderTitle","PageSection","src","alt","NoOptimizationsStateBase","NoOptimizationsState","iconSpacer","marginLeft","viewSources","marginTop","global_spacer_lg","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","titleKey","component","NoProvidersState","Unavailable","DetailsActionsBase","stateProps","dispatchProps","isDropdownOpen","isExportModalOpen","getExportModal","groupBy","item","reportPathsType","reportQueryString","count","items","onClose","handleExportModalClose","handleExportModalOpen","handleOnSelect","handleOnToggle","bind","showPriceListOption","source_uuid","redirectToCostModel","router","DropdownItem","unshift","includes","length","Dropdown","toggle","KebabToggle","isPlain","position","dropdownItems","mapDispatchToProps","costModels","DetailsActionsConnect","costColumn","textAlign","justifyContent","paddingRight","defaultLabel","minWidth","emptyState","backgroundColor","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","color","fontSize","lastReported","lastReportedColumn","managedColumn","nameColumn","DataTable","getEmptyState","isOptimizations","queryFromRoute","search","filter_by","val","values","filter","showMargin","getSortBy","index","columns","orderBy","direction","order_by","getSortParams","sortBy","onSort","handleOnSort","columnIndex","isSelected","rowId","onSelected","rows","newRows","row","selected","SortByDirection","handleOnRowClick","rowIndex","onRowClick","isLoading","TableComposable","gridBreakPoint","hasSelectableRowCaption","Thead","Tr","col","Th","modifier","sort","isSortable","undefined","Tbody","Td","colSpan","Bullseye","Spinner","isSelectable","isHoverable","isRowSelected","_event","cells","cellIndex","dataLabel","isActionCell","select","disable","selectionDisabled","getIdKeyForGroupBy","account","gcp_project","project","region","service","costValue","costLabelUnit","global_FontSize_sm","global_Color_100","dateTitle","header","global_BackgroundColor_light_100","padding","headerContent","headerContentLeft","minHeight","headerContentRight","paddingBottom","global_spacer_sm","groupByOptions","tagPathsType","DetailsHeaderBase","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","hasCost","total","cost","TitleSizes","showTags","format","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","DetailsTableBase","initDatum","groupByTagKey","isAllSelected","selectedItems","computedItems","idKey","getTotalCost","monthOverMonth","getMonthOverMonthCost","desc","actions","getActions","Link","to","basePath","routes","description","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","DetailsTable","tagType","DetailsToolbarBase","getCategoryOptions","tagReport","updateReport","fetchTag","tagQueryString","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showExcludes","showExport","showFilter","resolution","time_scope_units","time_scope_value","key_only","limit","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","gcpDetails","content","paginationContainer","global_spacer_md","tableContainer","toolbarContainer","baseQuery","offset","exclude","group_by","reportType","GcpDetails","getComputedItems","groupById","isAllItems","getPagination","isBottom","page","trunc","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","action","handleGroupBySelected","groupByKey","newQuery","parse","navigate","replace","newItems","fetchReport","prevState","reportError","noReport","noLocation","reportQuery","delta","reset","handleCurrencySelected","handleCostTypeSelected","handleCostDistributionSelected","handleFilterAdded","filteredQuery","handleFilterRemoved","handlePerPageSelect","handleSetPage","handleSort","date","DataType","_getOcpProvider","ocpProviders","uuid","result","provider","infrastructure","filterProviders","sourceType","source_type","toLowerCase","_hasData","datumType","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","currentMonthData","hasCloudData","hasData","hasCloudPreviousMonthData","previousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasPreviousMonthData","getRouteForQuery","pathname"],"sourceRoot":""}