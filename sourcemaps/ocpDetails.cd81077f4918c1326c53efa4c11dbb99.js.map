{"version":3,"file":"js/ocpDetails.0505fe436395884f6785.js","mappings":"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","sources":["webpack:///./src/routes/views/details/components/actions/actions.tsx","webpack:///./src/routes/views/details/components/columnManagement/columnManagementModal.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.tsx","webpack:///./src/routes/views/details/rhelBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/rhelBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/rhelBreakdown/rhelBreakdown.tsx","webpack:///./src/utils/computedReport/getComputedRhelReportItems.ts","webpack:///./src/routes/views/details/rhelDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/rhelDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/rhelDetails/detailsTable.tsx","webpack:///./src/routes/views/details/rhelDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/rhelDetails/rhelDetails.styles.ts","webpack:///./src/routes/views/details/rhelDetails/rhelDetails.tsx","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts"],"sourcesContent":["import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExportModal } from 'routes/views/components/export';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nimport { tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, reportPathsType, reportQueryString } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { count: 1, groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, item: { source_uuid }, redirectToCostModel, router, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.detailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], router) }, intl.formatMessage(messages.detailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport default Actions;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.manageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.selectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.manageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.manageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": `${option.value}Label`, isChecked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: `${option.value}Label`, key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport default ColumnManagementModal;\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { classificationDefault, classificationPlatform, classificationUnallocated, noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, isRosFeatureEnabled, report, router, selectedItems, } = this.props;\n            if (!report) {\n                return;\n            }\n            const isGroupByProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.recommendations),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: false })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !isGroupByProject,\n                        name: '', // Default column\n                    },\n                    {\n                        hidden: !(isGroupByProject && isRosFeatureEnabled),\n                        name: intl.formatMessage(messages.recommendations),\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const isPlatformCosts = item.classification === classificationPlatform;\n                const isUnallocatedCosts = item.classification === classificationUnallocated;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}` || isUnallocatedCosts;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.ocpDetailsBreakdown.path),\n                        description: item.id,\n                        id: item.id,\n                        isPlatformCosts,\n                        groupBy,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !isGroupByProject,\n                            value: item.classification === classificationDefault ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        {\n                            hidden: !(isGroupByProject && isRosFeatureEnabled),\n                            value: React.createElement(\"div\", null, \"N/A\"),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        {\n                            value: React.createElement(\"div\", null, InfrastructureCost),\n                            id: DetailsTableColumnIds.infrastructure,\n                            style: styles.managedColumn,\n                        },\n                        {\n                            value: React.createElement(\"div\", null, supplementaryCost),\n                            id: DetailsTableColumnIds.supplementary,\n                            style: styles.managedColumn,\n                        },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.ocp, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== FetchStatus.inProgress) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, showPlatformCosts: groupBy === 'project', tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100vh',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { isRosFeatureEnabled, query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, isRosFeatureEnabled: isRosFeatureEnabled, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' }, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        category: queryFromRoute.category,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OcpDetails)));\n","import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { rhelCostOverviewSelectors } from 'store/breakdown/costOverview/rhelCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { title }) => {\n    return {\n        selectWidgets: rhelCostOverviewSelectors.selectWidgets(state),\n        widgets: rhelCostOverviewSelectors.selectCurrentWidgets(state),\n        title,\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { rhelHistoricalDataSelectors } from 'store/breakdown/historicalData/rhelHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: rhelHistoricalDataSelectors.selectWidgets(state),\n        widgets: rhelHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/rhelQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { isPlatformCosts } from 'routes/views/utils/paths';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = formatPath(routes.rhelDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.rhel;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute && queryFromRoute.filter && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        category: queryFromRoute.category, // Needed to restore details page state\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { category: undefined, currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { currency: currency, groupBy: groupBy, isPlatformCosts: isPlatformCosts(queryFromRoute), report: report, title: title })),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.rhelDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.rhel),\n        providersFetchStatus,\n        providerType: ProviderType.rhel,\n        query: queryFromRoute,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.rhel,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst RhelBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default RhelBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedRhelReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = TagPathsType.rhel;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.rhelDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.rhel),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.rhel;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, intl, isAllSelected, report, router, selectedItems } = this.props;\n            if (!report) {\n                return;\n            }\n            const showDefaultProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.rhelDetailsInfrastructureCost),\n                        style: styles.managedColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.rhelDetailsSupplementaryCost),\n                        style: styles.managedColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}`;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.rhelDetailsBreakdown.path),\n                        description: item.id,\n                        groupBy,\n                        id: item.id,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !showDefaultProject,\n                            value: item.default_project ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        {\n                            value: React.createElement(\"div\", null, InfrastructureCost),\n                            id: DetailsTableColumnIds.infrastructure,\n                            style: styles.managedColumn,\n                        },\n                        {\n                            value: React.createElement(\"div\", null, supplementaryCost),\n                            id: DetailsTableColumnIds.supplementary,\n                            style: styles.managedColumn,\n                        },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, providerType: ProviderType.rhel, reportPathsType: reportPathsType, reportQueryString: reportQueryString, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== FetchStatus.inProgress) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './rhelDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass RhelDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, report, router } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' }, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? platformCategoryKey : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        category: queryFromRoute.category,\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(RhelDetails)));\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n"],"names":["DetailsActionsBase","constructor","stateProps","dispatchProps","super","this","defaultState","isDropdownOpen","isExportModalOpen","state","Object","assign","getExportModal","groupBy","item","reportPathsType","reportQueryString","props","count","isOpen","items","onClose","handleExportModalClose","setState","handleExportModalOpen","handleOnSelect","handleOnToggle","bind","render","isDisabled","showPriceListOption","intl","source_uuid","redirectToCostModel","router","DropdownItem","component","key","onClick","formatMessage","messages","unshift","includes","length","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","mapStateToProps","mapDispatchToProps","costModels","DetailsActionsConnect","connect","injectIntl","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","handleClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","Modal","description","TextContent","Text","TextVariants","Button","isInline","variant","title","ModalVariant","actions","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","isChecked","name","onChange","DataListItemCells","dataListCells","DataListCell","label","ColumnManagementModalConnect","groupByOptions","tagReportPathsType","DetailsHeaderBase","arguments","currency","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","showContent","meta","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","style","Title","headingLevel","size","TitleSizes","getIdKeyForGroupBy","onSelected","showTags","Boolean","Tooltip","content","enableFlip","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","groupByTagKey","isAllSelected","isRosFeatureEnabled","selectedItems","isGroupByProject","computedItems","idKey","undefined","orderBy","isSortable","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","getSupplementaryCost","InfrastructureCost","getInfrastructureCost","isPlatformCosts","classification","isUnallocatedCosts","desc","getActions","Link","to","basePath","routes","toString","push","cells","Label","color","selected","find","val","selectionDisabled","filteredColumns","filter","column","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","providerType","percentValue","toFixed","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","componentDidMount","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","onPlatformCostsChanged","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","showPlatformCosts","resolution","time_scope_units","time_scope_value","key_only","limit","DetailsToolbarConnect","DetailsToolbar","styles","paddingBottom","global_spacer_lg","paddingTop","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","toolbarContainer","baseQuery","delta","offset","exclude","filter_by","group_by","project","order_by","defaultColumnOptions","reportType","OcpDetails","isColumnManagementModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","groupById","isAllItems","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handlePlatformCostsChanged","action","handleGroupBySelected","groupByKey","newQuery","parse","category","navigate","location","replace","isSelected","newItems","updateReport","fetchReport","prevState","reportError","noReport","noLocation","search","queryFromRoute","selectWidgets","rhelCostOverview","widgets","CostOverview","rhelHistoricalData","HistoricalData","detailsURL","groupByValue","costOverviewComponent","emptyStateTitle","historicalDataComponent","cluster","node","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","global_Color_100","dateTitle","textAlign","header","padding","headerContent","display","justifyContent","headerContentLeft","headerContentRight","info","verticalAlign","infoIcon","global_FontSize_md","infoTitle","fontWeight","global_spacer_sm","showDefaultProject","default_project","RhelDetails"],"sourceRoot":""}