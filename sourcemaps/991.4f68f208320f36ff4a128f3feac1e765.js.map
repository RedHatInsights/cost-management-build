{"version":3,"file":"js/991.1669045956757.b17bf01dd7e77663b159.js","mappings":"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","sources":["webpack:///./src/routes/state/notAvailable/notAvailable.tsx","webpack:///./src/routes/views/components/export/exportModal.styles.ts","webpack:///./src/routes/views/components/export/exportSubmit.tsx","webpack:///./src/routes/views/components/export/exportModal.tsx","webpack:///./src/routes/views/components/groupBy/groupBy.styles.ts","webpack:///./src/routes/views/components/groupBy/groupByOrg.tsx","webpack:///./src/routes/views/components/groupBy/groupByTag.tsx","webpack:///./src/routes/views/components/groupBy/groupBy.tsx","webpack:///./src/routes/views/utils/dateRange.ts","webpack:///./src/routes/views/utils/history.ts"],"sourcesContent":["import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(Unavailable, null))));\n};\nexport default withRouter(NotAvailable);\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    alert: {\n        marginBottom: global_spacer_md.var,\n    },\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        marginBottom: global_spacer_md.var,\n    },\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/query';\nimport { getQuery, orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport { endOfMonth, format, startOfMonth } from 'date-fns';\nimport fileDownload from 'js-file-download';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getDateRangeFromQuery } from 'routes/views/utils/dateRange';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { exportActions, exportSelectors } from 'store/export';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getToday } from 'utils/dates';\nconst reportType = ReportType.cost;\nexport class ExportSubmitBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            fetchExportClicked: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExport = () => {\n            const { exportFetchStatus, exportReport } = this.props;\n            if (exportReport && exportFetchStatus === FetchStatus.complete) {\n                fileDownload(exportReport.data, this.getFileName(), 'text/csv');\n                this.handleClose();\n            }\n        };\n        this.getFileName = () => {\n            const { endDate, groupBy, intl, reportPathsType, resolution, startDate } = this.props;\n            // defaultMessage: '<provider>_<groupBy>_<resolution>_<start-date>_<end-date>',\n            const fileName = intl.formatMessage(messages.exportFileName, {\n                endDate,\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n                resolution,\n                startDate,\n            });\n            return `${fileName}.csv`;\n        };\n        this.handleClose = () => {\n            const { exportError } = this.props;\n            this.setState(Object.assign({}, this.defaultState), () => {\n                if (!exportError) {\n                    this.props.onClose(false);\n                }\n            });\n        };\n        this.handleFetchExport = () => {\n            const { exportQueryString, fetchExport, isExportsFeatureEnabled, reportPathsType } = this.props;\n            fetchExport(reportPathsType, reportType, exportQueryString, isExportsFeatureEnabled);\n            this.setState({\n                fetchExportClicked: true,\n            }, () => {\n                this.getExport();\n            });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { exportError, exportReport } = this.props;\n        const { fetchExportClicked } = this.state;\n        if (prevProps.exportReport !== exportReport && fetchExportClicked) {\n            this.getExport();\n        }\n        if (reportError) {\n            this.props.onError(exportError);\n        }\n    }\n    render() {\n        const { disabled, exportFetchStatus, intl } = this.props;\n        return (React.createElement(Button, { ouiaId: \"submit-btn\", isDisabled: disabled || exportFetchStatus === FetchStatus.inProgress, key: \"confirm\", onClick: this.handleFetchExport, variant: ButtonVariant.primary }, intl.formatMessage(messages.exportGenerate)));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const { groupBy, isAllItems, items, reportPathsType, reportQueryString, resolution, timeScope } = props;\n    const queryFromRoute = parseQuery(location.search);\n    const getStartEndDate = () => {\n        if (queryFromRoute.dateRangeType) {\n            return getDateRangeFromQuery(queryFromRoute);\n        }\n        else {\n            const isPrevious = timeScope === 'previous';\n            const today = getToday();\n            if (isPrevious) {\n                today.setMonth(today.getMonth() - 1);\n            }\n            return {\n                end_date: format(isPrevious ? endOfMonth(today) : today, 'yyyy-MM-dd'),\n                start_date: format(startOfMonth(today), 'yyyy-MM-dd'),\n            };\n        }\n    };\n    const { end_date, start_date } = getStartEndDate();\n    const getQueryString = () => {\n        const reportQuery = parseQuery(reportQueryString);\n        const newQuery = Object.assign(Object.assign({}, reportQuery), { delta: undefined, filter: {\n                limit: undefined,\n                offset: undefined,\n                resolution: resolution ? resolution : undefined, // Resolution is defined by export modal\n            }, filter_by: {}, limit: 0, order_by: undefined, // Don't want items sorted by cost\n            start_date,\n            end_date });\n        // Store filter_by as an array, so we can add to it below\n        if (queryFromRoute.filter_by) {\n            for (const key of Object.keys(queryFromRoute.filter_by)) {\n                if (newQuery.filter_by[key] === undefined) {\n                    newQuery.filter_by[key] = [];\n                }\n                newQuery.filter_by[key].push(queryFromRoute.filter_by[key]);\n            }\n        }\n        if (isAllItems) {\n            // Ensure group_by isn't overridden -- org_unit_id is not unique\n            if (groupBy === orgUnitIdKey) {\n                if (newQuery.filter_by[orgUnitIdKey] === undefined) {\n                    newQuery.filter_by[orgUnitIdKey] = [];\n                }\n                newQuery.filter_by[orgUnitIdKey].push(queryFromRoute.group_by[orgUnitIdKey]);\n            }\n        }\n        else {\n            if (groupBy === orgUnitIdKey) {\n                for (const item of items) {\n                    // Note that type only exists when grouping by org units\n                    const type = item.type === 'organizational_unit' ? orgUnitIdKey : item.type;\n                    if (newQuery.filter_by[type] === undefined) {\n                        newQuery.filter_by[type] = [];\n                    }\n                    newQuery.filter_by[type].push(item.id);\n                }\n            }\n            else {\n                for (const item of items) {\n                    if (newQuery.filter_by[groupBy] === undefined) {\n                        newQuery.filter_by[groupBy] = [];\n                    }\n                    newQuery.filter_by[groupBy].push(item.id);\n                }\n            }\n        }\n        return getQuery(newQuery);\n    };\n    const exportQueryString = getQueryString();\n    const exportReport = exportSelectors.selectExport(state, reportPathsType, reportType, exportQueryString);\n    const exportError = exportSelectors.selectExportError(state, reportPathsType, reportType, exportQueryString);\n    const exportFetchStatus = exportSelectors.selectExportFetchStatus(state, reportPathsType, reportType, exportQueryString);\n    return {\n        endDate: end_date,\n        exportError,\n        exportFetchStatus,\n        exportQueryString,\n        exportReport,\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        startDate: start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchExport: exportActions.fetchExport,\n};\nconst ExportSubmitConnect = connect(mapStateToProps, mapDispatchToProps)(ExportSubmitBase);\nconst ExportSubmit = injectIntl(ExportSubmitConnect);\nexport { ExportSubmit };\n","import { Alert, Button, ButtonVariant, Form, FormGroup, Grid, GridItem, Modal, Radio, TextInput, } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { orderBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { styles } from './exportModal.styles';\nimport { ExportSubmit } from './exportSubmit';\nconst formatTypeOptions = [\n    { label: messages.exportFormatType, value: 'csv' },\n    { label: messages.exportFormatType, value: 'json' },\n];\nconst resolutionOptions = [\n    { label: messages.exportResolution, value: 'daily' },\n    { label: messages.exportResolution, value: 'monthly' },\n];\nconst timeScopeOptions = [\n    { label: messages.exportTimeScope, value: 'current' },\n    { label: messages.exportTimeScope, value: 'previous' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            error: undefined,\n            formatType: 'csv',\n            timeScope: 'current',\n            resolution: this.props.resolution || 'monthly',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Reset default state upon close -- see https://issues.redhat.com/browse/COST-1134\n        this.handleClose = () => {\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleError = (error) => {\n            this.setState({ error });\n        };\n        this.handleMonthChange = (_, event) => {\n            this.setState({ timeScope: event.currentTarget.value });\n        };\n        this.handleNameChange = (_, event) => {\n            this.setState({ name: event.currentTarget.value });\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleTypeChange = (_, event) => {\n            this.setState({ formatType: event.currentTarget.value });\n        };\n        this.nameValidator = value => {\n            if (value.trim().length === 0) {\n                return messages.exportNameRequired;\n            }\n            // Todo: what is the max length allowed?\n            if (value.length > 50) {\n                return messages.exportNameTooLong;\n            }\n            return undefined;\n        };\n        this.handleMonthChange = this.handleMonthChange.bind(this);\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n        this.handleTypeChange = this.handleTypeChange.bind(this);\n    }\n    render() {\n        const { count = 0, groupBy, intl, isAllItems, isExportsFeatureEnabled, items, reportPathsType, reportQueryString, showAggregateType = true, showFormatType = true, showTimeScope = true, } = this.props;\n        const { error, formatType, name, resolution, timeScope } = this.state;\n        let sortedItems = [...items];\n        if (this.props.isOpen) {\n            if (items && items.length === 0 && isAllItems) {\n                sortedItems = [\n                    {\n                        label: intl.formatMessage(messages.exportAll),\n                    },\n                ];\n            }\n            else {\n                sortedItems = orderBy(sortedItems, ['label'], ['asc']);\n            }\n        }\n        let selectedLabel = intl.formatMessage(messages.exportSelected, { groupBy, count });\n        if (groupBy.indexOf(tagPrefix) !== -1) {\n            selectedLabel = intl.formatMessage(messages.exportSelected, { groupBy: 'tag', count });\n        }\n        const thisMonth = new Date();\n        const lastMonth = new Date().setMonth(thisMonth.getMonth() - 1);\n        const currentMonth = format(thisMonth, 'MMMM yyyy');\n        const previousMonth = format(lastMonth - 1, 'MMMM yyyy');\n        const defaultName = name !== undefined\n            ? name\n            : intl.formatMessage(messages.exportName, {\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n            });\n        const helpText = isExportsFeatureEnabled ? this.nameValidator(defaultName) : undefined;\n        const validated = helpText ? 'error' : 'default';\n        return (React.createElement(Modal, { style: styles.modal, isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.exportTitle), variant: \"small\", actions: [\n                React.createElement(ExportSubmit, { disabled: validated === 'error', formatType: formatType, groupBy: groupBy, isAllItems: isAllItems, items: items, key: \"confirm\", timeScope: showTimeScope ? timeScope : undefined, onClose: this.handleClose, onError: this.handleError, name: defaultName, reportPathsType: reportPathsType, reportQueryString: reportQueryString, resolution: resolution }),\n                React.createElement(Button, { ouiaId: \"cancel-btn\", key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            error && React.createElement(Alert, { variant: \"danger\", style: styles.alert, title: intl.formatMessage(messages.exportError) }),\n            React.createElement(\"div\", { style: styles.title }, isExportsFeatureEnabled ? (React.createElement(\"span\", null, intl.formatMessage(messages.exportDesc, { value: React.createElement(\"b\", null, intl.formatMessage(messages.exportsTitle)) }))) : (React.createElement(\"span\", null, intl.formatMessage(messages.exportHeading, { groupBy })))),\n            React.createElement(Form, { style: styles.form },\n                React.createElement(Grid, { hasGutter: true, md: 6 },\n                    isExportsFeatureEnabled && (React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { fieldId: \"exportName\", helperTextInvalid: helpText ? intl.formatMessage(helpText) : undefined, label: intl.formatMessage(messages.names, { count: 1 }), isRequired: true, validated: validated },\n                            React.createElement(TextInput, { isRequired: true, type: \"text\", id: \"exportName\", name: \"exportName\", value: defaultName, onChange: this.handleNameChange })))),\n                    showAggregateType && (React.createElement(FormGroup, { fieldId: \"aggregate-type\", label: intl.formatMessage(messages.exportAggregateType), isRequired: true },\n                        React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                    showTimeScope && (React.createElement(FormGroup, { fieldId: \"timeScope\", label: intl.formatMessage(messages.exportTimeScopeTitle), isRequired: true },\n                        React.createElement(React.Fragment, null, timeScopeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `timeScope-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, {\n                                date: option.value === 'previous' ? previousMonth : currentMonth,\n                                value: option.value,\n                            }), value: option.value, checked: timeScope === option.value, name: \"timeScope\", onChange: this.handleMonthChange, \"aria-label\": intl.formatMessage(option.label, {\n                                date: option.value === 'previous' ? previousMonth : currentMonth,\n                                value: option.value,\n                            }) })))))),\n                    showFormatType && isExportsFeatureEnabled && (React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { fieldId: \"formatType\", label: intl.formatMessage(messages.exportFormatTypeTitle), isRequired: true }, formatTypeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `formatType-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: formatType === option.value, name: \"formatType\", onChange: this.handleTypeChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                    React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selectedLabels\" },\n                            React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                                return React.createElement(\"li\", { key: index }, groupItem.label);\n                            }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n    };\n});\nconst ExportModalConnect = connect(mapStateToProps, undefined)(ExportModalBase);\nconst ExportModal = injectIntl(ExportModalConnect);\nexport default ExportModal;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { orgUnitIdKey, orgUnitNameKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByOrgBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            for (const key of groupByKeys) {\n                const index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = queryFromRoute.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.getGroupByItems = () => {\n            const { orgReport } = this.props;\n            if (!(orgReport && orgReport.data)) {\n                return [];\n            }\n            // Sort all names first\n            const sortedData = orgReport.data.sort((a, b) => {\n                if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                    return -1;\n                }\n                if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                    return 1;\n                }\n                return 0;\n            });\n            // Move roots first\n            const roots = sortedData.filter(org => org.level === 0);\n            const filteredOrgs = sortedData.filter(org => org.level !== 0);\n            roots.map(root => {\n                const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n                filteredOrgs.unshift(item);\n            });\n            return filteredOrgs.map(org => ({\n                id: org[orgUnitIdKey],\n                toString: () => org[orgUnitNameKey],\n            }));\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection.id,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${orgUnitIdKey}${selection.id}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled = false, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const groupByItems = this.getGroupByItems();\n        const selection = groupByItems.find((item) => item.id === currentItem);\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.filterByOrgUnitAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.filterByOrgUnitPlaceholder), selections: selection, variant: SelectVariant.typeahead }, groupByItems.map(item => (React.createElement(SelectOption, { description: item.id, key: item.id, value: item }))))));\n    }\n}\nconst GroupByOrg = injectIntl(GroupByOrgBase);\nexport { GroupByOrg };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { uniq, uniqBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getGroupByItems = () => {\n            const { tagReport } = this.props;\n            if (!(tagReport && tagReport.data)) {\n                return [];\n            }\n            // If the key_only param is used, we have an array of strings\n            let hasTagKeys = false;\n            for (const item of tagReport.data) {\n                if (item.hasOwnProperty('key')) {\n                    hasTagKeys = true;\n                    break;\n                }\n            }\n            // Workaround for https://github.com/project-koku/koku/issues/1797\n            let data = [];\n            if (hasTagKeys) {\n                const keepData = tagReport.data.map(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                (_a) => {\n                    var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                    return keepProps;\n                });\n                data = uniqBy(keepData, 'key');\n            }\n            else {\n                data = uniq(tagReport.data);\n            }\n            return data.map((item, index) => {\n                const tagKey = hasTagKeys ? item.key : item;\n                return React.createElement(SelectOption, { key: `${tagKey}:${index}`, value: tagKey });\n            });\n        };\n        this.getCurrentGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy;\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = key.slice(tagPrefix.length);\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${tagPrefix}${selection}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.filterByTagKeyAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.filterByTagKeyPlaceholder), selections: currentItem, variant: SelectVariant.typeahead }, this.getGroupByItems())));\n    }\n}\nconst GroupByTag = injectIntl(GroupByTagBase);\nexport { GroupByTag };\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport { OrgType } from 'api/orgs/org';\nimport { getQuery, orgUnitIdKey, parseQuery, tagKey, tagPrefix } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getDateRangeFromQuery } from 'routes/views/utils/dateRange';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './groupBy.styles';\nimport { GroupByOrg } from './groupByOrg';\nimport { GroupByTag } from './groupByTag';\nconst groupByOrgOptions = [{ label: orgUnitIdKey, value: orgUnitIdKey }];\nconst groupByTagOptions = [{ label: tagKey, value: tagKey }];\nconst orgReportType = OrgType.org;\nconst tagReportType = TagType.tag;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n            isGroupByOrgVisible: false,\n            isGroupByTagVisible: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const { defaultItem } = this.state;\n            const queryFromRoute = parseQuery(location.search);\n            if (!(queryFromRoute && queryFromRoute.group_by)) {\n                return defaultItem;\n            }\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            for (const key of groupByKeys) {\n                let index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = tagKey;\n                    this.setState({\n                        isGroupByTagVisible: true,\n                    });\n                    break;\n                }\n                index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = orgUnitIdKey;\n                    this.setState({\n                        isGroupByOrgVisible: true,\n                    });\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : defaultItem;\n        };\n        this.getGroupBy = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isGroupByOpen } = this.state;\n            const selectOptions = this.getGroupByOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"groupBySelect\", isDisabled: isDisabled, isOpen: isGroupByOpen, onSelect: this.handleGroupBySelected, onToggle: this.handleGroupByToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getGroupByOptions = () => {\n            const { options, orgReport, tagReport, intl } = this.props;\n            const allOptions = [...options];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                allOptions.push(...groupByOrgOptions);\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                allOptions.push(...groupByTagOptions);\n            }\n            return allOptions.map(option => ({\n                toString: () => intl.formatMessage(messages.groupByValuesTitleCase, { value: option.label, count: 1 }),\n                value: option.value,\n            }));\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            if (selection.value === orgUnitIdKey || selection.value === tagKey) {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: selection.value === orgUnitIdKey,\n                    isGroupByTagVisible: selection.value === tagKey,\n                });\n            }\n            else {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                }, () => {\n                    if (onSelected) {\n                        onSelected(selection.value);\n                    }\n                });\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportFetchStatus, orgReportPathsType, orgQueryString, showOrgs, showTags, tagReportFetchStatus, tagReportPathsType, tagQueryString, } = this.props;\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        }, () => {\n            if (showOrgs && orgReportFetchStatus !== FetchStatus.inProgress) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (showTags && tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgReportFetchStatus, orgReportPathsType, orgQueryString, perspective, showOrgs, showTags, tagReportFetchStatus, tagReportPathsType, tagQueryString, } = this.props;\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            let options;\n            if (prevProps.perspective !== perspective) {\n                options = {\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                };\n            }\n            this.setState(Object.assign({ currentItem: this.getCurrentGroupBy() }, (options ? options : {})), () => {\n                if (showOrgs && orgReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n                }\n                if (showTags && tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n    }\n    render() {\n        const { getIdKeyForGroupBy, groupBy, isDisabled = false, onSelected, orgReport, intl, tagReport } = this.props;\n        const { isGroupByOrgVisible, isGroupByTagVisible } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.groupBySelectorLabel }, intl.formatMessage(messages.groupByLabel)),\n            this.getGroupBy(),\n            Boolean(isGroupByOrgVisible) && (React.createElement(GroupByOrg, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByOrgOptions, orgReport: orgReport })),\n            Boolean(isGroupByTagVisible) && (React.createElement(GroupByTag, { groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByTagOptions, tagReport: tagReport }))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { orgReportPathsType, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    // Default to current month filter for details pages\n    let tagFilter = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    };\n    // Replace with start and end dates for Cost Explorer\n    if (queryFromRoute.dateRangeType) {\n        const { end_date, start_date } = getDateRangeFromQuery(queryFromRoute);\n        tagFilter = {\n            end_date,\n            start_date,\n        };\n    }\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const baseQuery = Object.assign(Object.assign({}, tagFilter), { key_only: true, limit: 1000 });\n    const tagQueryString = getQuery(Object.assign({}, baseQuery));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    const orgQueryString = getQuery(Object.assign({}, baseQuery));\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    return {\n        orgReport,\n        orgReportFetchStatus,\n        orgQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst GroupByConnect = connect(mapStateToProps, mapDispatchToProps)(GroupByBase);\nconst GroupBy = injectIntl(GroupByConnect);\nexport default GroupBy;\n","import { endOfMonth } from 'date-fns';\nimport { formatStartEndDate, getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate, getLast90DaysDate, } from 'utils/dates';\n// The date range drop down has the options below (if today is Jan 18th…)\n// eslint-disable-next-line no-shadow\nexport var DateRangeType;\n(function (DateRangeType) {\n    DateRangeType[\"currentMonthToDate\"] = \"current_month_to_date\";\n    DateRangeType[\"custom\"] = \"custom\";\n    DateRangeType[\"previousMonth\"] = \"previous_month\";\n    DateRangeType[\"previousMonthToDate\"] = \"previous_month_to_date\";\n    DateRangeType[\"lastNinetyDays\"] = \"last_ninety_days\";\n    DateRangeType[\"lastSixtyDays\"] = \"last_sixty_days\";\n    DateRangeType[\"lastSixtyFiveDays\"] = \"last_sixty_days\";\n    DateRangeType[\"lastThirtyDays\"] = \"last_thirty_days\";\n})(DateRangeType || (DateRangeType = {}));\nexport const getDateRange = (dateRangeType, isFormatted = true) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case DateRangeType.previousMonth:\n            endDate.setDate(1); // Required to obtain correct month\n            startDate.setDate(1); // Required to obtain correct month\n            endDate.setMonth(endDate.getMonth() - 1);\n            startDate.setMonth(startDate.getMonth() - 1);\n            dateRange = formatStartEndDate(startDate, endOfMonth(endDate), isFormatted);\n            break;\n        case DateRangeType.previousMonthToDate:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = formatStartEndDate(startDate, endDate, isFormatted);\n            break;\n        case DateRangeType.lastNinetyDays:\n            dateRange = getLast90DaysDate(isFormatted);\n            break;\n        case DateRangeType.lastSixtyDays:\n            dateRange = getLast60DaysDate(isFormatted);\n            break;\n        case DateRangeType.lastThirtyDays:\n            dateRange = getLast30DaysDate(isFormatted);\n            break;\n        case DateRangeType.currentMonthToDate:\n        default:\n            dateRange = getCurrentMonthDate(isFormatted);\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeTypeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRangeType || DateRangeType.currentMonthToDate;\n};\nexport const getDateRangeFromQuery = (queryFromRoute) => {\n    let end_date;\n    let start_date;\n    if (queryFromRoute.dateRangeType === DateRangeType.custom) {\n        end_date = queryFromRoute.end_date;\n        start_date = queryFromRoute.start_date;\n    }\n    if (!(end_date && start_date)) {\n        const dateRangeType = getDateRangeTypeDefault(queryFromRoute);\n        return getDateRange(dateRangeType);\n    }\n    return {\n        end_date,\n        start_date,\n    };\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { addFilterToQuery, removeFilterFromQuery } from './filter';\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: 0 });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\nexport const handleCurrencySelected = (history, query, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    history.replace(getRouteForQuery(history, newQuery, reset));\n};\nexport const handleCostTypeSelected = (history, query, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    history.replace(getRouteForQuery(history, newQuery, reset)); // Don't reset pagination\n};\nexport const handleFilterAdded = (history, query, filter) => {\n    const filteredQuery = addFilterToQuery(query, filter);\n    history.replace(getRouteForQuery(history, filteredQuery, true));\n};\nexport const handleFilterRemoved = (history, query, filter) => {\n    const filteredQuery = removeFilterFromQuery(query, filter);\n    history.replace(getRouteForQuery(history, filteredQuery, true));\n};\nexport const handlePerPageSelect = (history, query, perPage) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n    const filteredQuery = getRouteForQuery(history, newQuery, true);\n    history.replace(filteredQuery);\n};\nexport const handleSetPage = (history, query, report, pageNumber) => {\n    const limit = report && report.meta && report.meta.filter && report.meta.filter.limit ? report.meta.filter.limit : 10;\n    const offset = pageNumber * limit - limit;\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n    const filteredQuery = getRouteForQuery(history, newQuery);\n    history.replace(filteredQuery);\n};\nexport const handleSort = (history, query, sortType, isSortAscending, date = undefined) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.order_by = {};\n    newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n    if (date) {\n        newQuery.order_by.date = date;\n    }\n    const filteredQuery = getRouteForQuery(history, newQuery);\n    history.replace(filteredQuery);\n};\n"],"names":["title","PageHeader","PageHeaderTitle","Main","Unavailable","styles","alert","marginBottom","global_spacer_md","form","marginLeft","global_spacer_sm","modal","input","marginRight","global_spacer_xs","ul","reportType","ExportSubmitBase","constructor","stateProps","dispatchProps","super","this","defaultState","fetchExportClicked","state","Object","assign","getExport","exportFetchStatus","exportReport","props","data","getFileName","handleClose","endDate","groupBy","intl","reportPathsType","resolution","startDate","formatMessage","messages","provider","indexOf","exportError","setState","onClose","handleFetchExport","exportQueryString","fetchExport","isExportsFeatureEnabled","componentDidUpdate","prevProps","reportError","onError","render","disabled","Button","ouiaId","isDisabled","key","onClick","variant","ButtonVariant","mapStateToProps","isAllItems","items","reportQueryString","timeScope","queryFromRoute","location","search","end_date","start_date","dateRangeType","isPrevious","today","setMonth","getMonth","format","endOfMonth","startOfMonth","getStartEndDate","reportQuery","newQuery","delta","undefined","filter","limit","offset","filter_by","order_by","keys","push","group_by","item","type","id","getQueryString","featureFlags","mapDispatchToProps","ExportSubmitConnect","connect","ExportSubmit","injectIntl","formatTypeOptions","label","value","resolutionOptions","timeScopeOptions","ExportModalBase","error","formatType","handleError","handleMonthChange","_","event","currentTarget","handleNameChange","name","handleResolutionChange","handleTypeChange","nameValidator","trim","length","bind","count","showAggregateType","showFormatType","showTimeScope","sortedItems","isOpen","orderBy","selectedLabel","thisMonth","Date","lastMonth","currentMonth","previousMonth","defaultName","helpText","validated","Modal","style","actions","Alert","Form","Grid","hasGutter","md","GridItem","span","FormGroup","fieldId","helperTextInvalid","isRequired","TextInput","onChange","map","option","index","Radio","isValid","checked","date","groupItem","ExportModalConnect","groupBySelector","display","alignItems","groupBySelectorLabel","whiteSpace","GroupByOrgBase","defaultItem","options","isGroupByOpen","getCurrentGroupBy","getIdKeyForGroupBy","groupByKeys","getGroupByItems","orgReport","sortedData","sort","a","b","roots","org","level","filteredOrgs","root","find","unshift","toString","handleGroupByClear","currentItem","handleGroupBySelected","selection","onSelected","handleGroupByToggle","componentDidMount","groupByItems","Select","onClear","onToggle","onSelect","placeholderText","selections","SelectVariant","SelectOption","description","GroupByOrg","GroupByTagBase","tagReport","hasTagKeys","hasOwnProperty","keepData","_a","s","e","t","p","prototype","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","uniqBy","uniq","tagKey","slice","GroupByTag","groupByOrgOptions","groupByTagOptions","orgReportType","tagReportType","GroupByBase","isGroupByOrgVisible","isGroupByTagVisible","getGroupBy","selectOptions","getGroupByOptions","allOptions","fetchOrg","fetchTag","orgReportFetchStatus","orgReportPathsType","orgQueryString","showOrgs","showTags","tagReportFetchStatus","tagReportPathsType","tagQueryString","perspective","Title","headingLevel","size","Boolean","tagFilter","time_scope_units","time_scope_value","baseQuery","key_only","GroupByConnect","DateRangeType","getDateRangeTypeDefault","currentMonthToDate","getDateRangeFromQuery","custom","isFormatted","dateRange","setDate","previousMonthToDate","lastNinetyDays","lastSixtyDays","lastThirtyDays","getDateRange","getRouteForQuery","history","query","reset","pathname","handleCurrencySelected","JSON","parse","stringify","replace","handleCostTypeSelected","handleFilterAdded","filteredQuery","handleFilterRemoved","handlePerPageSelect","perPage","handleSetPage","report","pageNumber","meta","handleSort","sortType","isSortAscending"],"sourceRoot":""}