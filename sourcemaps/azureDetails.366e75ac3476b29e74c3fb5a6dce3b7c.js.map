{"version":3,"file":"js/azureDetails.123e55e40eeb69de8a78.js","mappings":"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","sources":["webpack:///./src/utils/computedReport/getComputedAzureReportItems.ts","webpack:///./src/routes/views/details/azureDetails/azureDetails.styles.ts","webpack:///./src/routes/views/details/azureDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/details/azureDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/azureDetails/detailsTable.tsx","webpack:///./src/routes/views/details/azureDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/azureDetails/azureDetails.tsx"],"sourcesContent":["export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    toolbarContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/drawers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = TagPathsType.azure;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { currency, groupBy, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.azureDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.azure),\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import 'routes/views/details/components/dataTable/dataTable.scss';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { noPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = ReportPathsType.azure;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, intl, isAllSelected, report, selectedItems, router } = this.props;\n            if (!report) {\n                return;\n            }\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: (groupByTagKey ? groupByTagKey : groupBy),\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const cost = this.getTotalCost(item, index);\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const isDisabled = label === `${noPrefix}${groupBy}` || label === `${noPrefix}${groupByTagKey}`;\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                const actions = this.getActions(item, isDisabled);\n                const name = isDisabled ? label : (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: formatPath(routes.azureDetailsBreakdown.path),\n                        description: item.id,\n                        groupBy,\n                        id: item.id,\n                        router,\n                        title: label.toString(),\n                    }) }, label));\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth) },\n                        { value: React.createElement(\"div\", null, cost), style: styles.managedColumn },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: isDisabled,\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n            });\n        };\n        this.getActions = (item, isDisabled) => {\n            const { groupBy, reportQueryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: isDisabled, item: item, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (previousReport !== currentReport || prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(withRouter(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { tagKey } from 'utils/props';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.azure;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportFetchStatus, tagQueryString } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, tagReport, tagReportFetchStatus, tagQueryString } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.azure, selectedItems: selectedItems, showBulkSelect: true, showExcludes: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        tagReportFetchStatus,\n        tagReport,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/handles';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { noPrefix, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.azure;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, report, reportQueryString } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `${noPrefix}${groupById}` || item.label === `${noPrefix}${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, reportPathsType: reportPathsType, reportQueryString: reportQueryString }));\n        };\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, query, router, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(query, router, perPage), onSetPage: (event, pageNumber) => handleSetPage(query, router, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.azure),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, router, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const isDisabled = computedItems.length === 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isDisabled: isDisabled, isExportDisabled: isDisabled || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), pagination: this.getPagination(isDisabled), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { query, router } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                router.navigate(getRouteForQuery(newQuery, router.location, true), { replace: true });\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, intl, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, router, } = this.props;\n        const computedItems = this.getComputedItems();\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const isDisabled = computedItems.length === 0;\n        const title = intl.formatMessage(messages.azureDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.azure, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(query, router, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                React.createElement(\"div\", { style: styles.toolbarContainer }, this.getToolbar(computedItems)),\n                this.getExportModal(computedItems),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const currency = getCurrency();\n    const query = Object.assign(Object.assign({}, baseQuery), queryFromRoute);\n    const reportQuery = {\n        currency,\n        delta: 'cost',\n        exclude: query.exclude,\n        filter: Object.assign(Object.assign({}, query.filter), { resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }),\n        filter_by: query.filter_by,\n        group_by: query.group_by,\n        order_by: query.order_by,\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.azure),\n        providersError,\n        providersFetchStatus,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(AzureDetails)));\n"],"names":["getIdKeyForGroupBy","groupBy","subscription_guid","resource_location","service_name","styles","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","toolbarContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","padding","headerContent","display","justifyContent","headerContentLeft","headerContentRight","title","global_spacer_sm","groupByOptions","label","value","tagReportPathsType","DetailsHeaderBase","render","currency","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providers","providersError","report","intl","this","props","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","formatMessage","messages","onSelect","isDisabled","onSelected","options","showTags","Boolean","format","units","mapStateToProps","state","providersQueryString","providersFetchStatus","featureFlags","DetailsHeader","injectIntl","connect","reportPathsType","DetailsTableBase","constructor","super","arguments","columns","rows","initDatum","groupByTagKey","isAllSelected","selectedItems","router","computedItems","idKey","name","Object","assign","orderBy","length","isSortable","map","item","index","getTotalCost","monthOverMonth","getMonthOverMonthCost","desc","id","actions","getActions","Link","to","basePath","routes","description","toString","push","cells","isOpen","selected","undefined","find","val","selectionDisabled","setState","reportQueryString","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","percentValue","toFixed","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","isLoading","onSort","DetailsTable","tagReportType","DetailsToolbarBase","defaultState","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","tagQueryString","categoryOptions","query","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExcludes","showExport","showFilter","filter","resolution","time_scope_units","time_scope_value","key_only","limit","mapDispatchToProps","DetailsToolbarConnect","DetailsToolbar","baseQuery","offset","exclude","filter_by","group_by","order_by","reportType","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","groupById","getExportModal","items","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","trunc","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","reportFetchStatus","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","newQuery","parse","navigate","location","replace","isSelected","newItems","updateReport","fetchReport","bind","prevState","reportError","noReport","noLocation","search","providerType","queryFromRoute","reportQuery","delta"],"sourceRoot":""}