{"version":3,"file":"js/4279.2cf721704f126021520c.js","mappings":"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","sources":["webpack:///./src/routes/state/notAvailable/notAvailable.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/views/details/components/tag/tag.styles.ts","webpack:///./src/routes/views/details/components/tag/tagContent.tsx","webpack:///./src/routes/views/details/components/tag/tagModal.tsx","webpack:///./src/routes/views/details/components/tag/tagLink.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/views/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.tsx","webpack:///./src/routes/views/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/views/details/components/costChart/costChart.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.tsx","webpack:///./src/routes/views/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryCard.tsx","webpack:///./src/routes/views/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/views/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/views/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/views/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts","webpack:///./src/routes/views/utils/handles.ts","webpack:///./src/routes/views/utils/query.ts"],"sourcesContent":["import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(Unavailable, null))));\n};\nexport default NotAvailable;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { TagContent } from './tagContent';\nconst tagReportType = TagType.tag;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, intl, isOpen, query, tagReport } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: this.props.isPlatformCosts ? platformCategoryKey : groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const detailsPageState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = detailsPageState && detailsPageState.filter_by ? detailsPageState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })),\n    };\n    const tagQueryString = getQuery(Object.assign(Object.assign({}, query), { filter_by: Object.assign(Object.assign({}, query.filter_by), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })) }));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        isPlatformCosts: queryFromRoute && queryFromRoute.isPlatformCosts,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagModalBase)));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = TagType.tag;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", { \"data-testid\": \"tag-lnk\", href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }, count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const detailsPageState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = detailsPageState && detailsPageState.filter_by ? detailsPageState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })),\n    };\n    const tagQueryString = getQuery(Object.assign(Object.assign({}, query), { filter_by: Object.assign(Object.assign({}, query.filter_by), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })) }));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase)));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { getQueryRoute, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { TagLink } from 'routes/views/details/components/tag';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { getTotalCostDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { orgUnitIdKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = url => {\n            const { groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const state = query.state ? window.atob(query.state) : undefined;\n            const newQuery = Object.assign(Object.assign({}, (state && JSON.parse(state))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            return `${url}?${getQueryRoute(newQuery)}`;\n        };\n        this.getBackToLink = groupByKey => {\n            const { detailsURL, intl, isOptimizationsPath, tagReportPathsType } = this.props;\n            if (isOptimizationsPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(formatPath(routes.optimizations.path)) }, intl.formatMessage(messages.breakdownBackToOptimizations)));\n            }\n            return (React.createElement(Link, { to: this.buildDetailsLink(detailsURL) }, intl.formatMessage(messages.breakdownBackToDetails, {\n                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagReportPathsType }),\n                groupBy: groupByKey,\n            })));\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costType, currency, description, groupBy, intl, onCostTypeSelected, onCurrencySelected, query, showCostType = false, tabs, tagReportPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'payer_tenant_id' ||\n            groupBy === 'project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            this.getBackToLink(groupByKey)))),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getTotalCostDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }))))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    return {\n        isOptimizationsPath: queryFromRoute.optimizationsPath !== undefined,\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader)));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { handleCostTypeSelected, handleCurrencySelected } from 'routes/views/utils/handles';\nimport { hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { FetchStatus } from 'store/common';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\n// eslint-disable-next-line no-shadow\nvar BreakdownTab;\n(function (BreakdownTab) {\n    BreakdownTab[\"costOverview\"] = \"cost-overview\";\n    BreakdownTab[\"historicalData\"] = \"historical-data\";\n    BreakdownTab[\"optimizations\"] = \"optimizations\";\n})(BreakdownTab || (BreakdownTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case BreakdownTab.costOverview:\n            return 'cost-overview';\n        case BreakdownTab.historicalData:\n            return 'historical-data';\n        case BreakdownTab.optimizations:\n            return 'optimizations';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: this.props.isOptimizationsTab ? 2 : 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { costOverviewComponent, historicalDataComponent, isRosFeatureEnabled, optimizationsBadgeComponent, optimizationsComponent, } = this.props;\n            const availableTabs = [];\n            if (costOverviewComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.costOverview,\n                });\n            }\n            if (historicalDataComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.historicalData,\n                });\n            }\n            if (optimizationsComponent && isRosFeatureEnabled) {\n                availableTabs.push({\n                    badge: optimizationsBadgeComponent,\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.optimizations,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, badge, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(React.Fragment, null,\n                    React.createElement(TabTitleText, null, this.getTabTitle(tab)),\n                    badge && React.createElement(\"span\", null, badge)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent, optimizationsComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === BreakdownTab.costOverview) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === BreakdownTab.historicalData) {\n                return historicalDataComponent;\n            }\n            else if (currentTab === BreakdownTab.optimizations) {\n                return optimizationsComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, val.badge, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === BreakdownTab.costOverview) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === BreakdownTab.historicalData) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n            else if (tab === BreakdownTab.optimizations) {\n                return intl.formatMessage(messages.optimizations);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.handleTabClick = (event, tabIndex) => {\n            const { closeOptimizationsDrawer } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    if (closeOptimizationsDrawer) {\n                        closeOptimizationsDrawer();\n                    }\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costType, currency, description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, router, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress && reportFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.complete && reportFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === FetchStatus.complete;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: value => handleCostTypeSelected(query, router, value), onCurrencySelected: value => handleCurrencySelected(query, router, value), query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nconst Breakdown = injectIntl(withRouter(BreakdownBase));\nexport default Breakdown;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { clusters = [] } = this.props;\n        if (clusters.length === 0) {\n            return null;\n        }\n        return clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { clusters, isOpen } = this.props;\n        return nextProps.clusters !== clusters || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { clusters, groupBy, intl, isOpen, title } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, {\n                groupBy,\n                name: title,\n            }), width: '50%' },\n            React.createElement(ClusterContent, { clusters: clusters })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import { Tooltip } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, intl, report, title } = this.props;\n        const { isOpen, showAll } = this.state;\n        const maxCharsPerName = 45; // Max (non-whitespace) characters that fit without overlapping card\n        const maxItems = 2; // Max items to show before adding \"more\" link\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        // Get clusters from all projects -- see https://issues.redhat.com/browse/COST-3371\n        const clusters = [];\n        computedItems.map(item => {\n            if (item.clusters) {\n                item.clusters.map(cluster => {\n                    if (!clusters.includes(cluster)) {\n                        clusters.push(cluster);\n                    }\n                });\n            }\n        });\n        if (clusters.length === 0) {\n            return null;\n        }\n        // Sort clusters from multiple projects\n        clusters.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n        for (const cluster of clusters) {\n            let clusterString = someClusters.length > 0 ? `, ${cluster}` : cluster;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (someClusters.length < maxItems) {\n                if (clusterString.length > maxCharsPerName) {\n                    clusterString = clusterString.slice(0, maxCharsPerName).trim().concat('...');\n                    someClusters.push(React.createElement(Tooltip, { content: cluster, enableFlip: true },\n                        React.createElement(\"span\", null, clusterString)));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", { \"data-testid\": \"cluster-lnk\", href: \"#/\", onClick: this.handleOpen }, intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { clusters: clusters, groupBy: groupBy, isOpen: isOpen, onClose: this.handleClose, title: title })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 475,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 80, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.breakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.breakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.breakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { logicalAndPrefix, orgUnitIdKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './summaryModal.styles';\nconst reportType = ReportType.cost;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (queryFromRoute && queryFromRoute.filter_by && queryFromRoute.filter_by)), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.category && { category: queryFromRoute.filter.category })), (groupBy && { [groupBy]: groupByValue })),\n        exclude: Object.assign({}, (queryFromRoute && queryFromRoute.exclude && queryFromRoute.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, newQuery), { cost_type: costType, currency, filter_by: Object.assign(Object.assign({}, newQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase)));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { costType, currency, groupBy, intl, isPlatformCosts, query, reportGroupBy, reportPathsType } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, { ouiaId: \"view-all-btn\", onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }, intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costType: costType, currency: currency, groupBy: groupBy, groupByValue: isPlatformCosts ? platformCategoryKey : groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { intl, isPlatformCosts, reportGroupBy, reportFetchStatus } = this.props;\n        const title = intl.formatMessage(messages.breakdownSummaryTitle, {\n            value: isPlatformCosts ? platformCategoryKey.toLowerCase() : reportGroupBy,\n        });\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, title)),\n            React.createElement(CardBody, null, reportFetchStatus === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const detailsPageState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const query = {\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (detailsPageState && detailsPageState.filter_by && detailsPageState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })),\n        exclude: Object.assign({}, (detailsPageState && detailsPageState.exclude && detailsPageState.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { cost_type: costType, currency, filter_by: Object.assign(Object.assign({}, query.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })) }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryBase)));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== this.props.reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, report, intl, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || reportType === ReportType.volume) {\n            const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n            const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const detailsPageState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign({}, (detailsPageState && detailsPageState.filter_by && detailsPageState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })),\n        exclude: Object.assign({}, (detailsPageState && detailsPageState.exclude && detailsPageState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(Object.assign(Object.assign({}, query), { filter_by: Object.assign(Object.assign({}, query.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase)));\nexport default UsageChart;\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Cluster } from 'routes/views/details/components/cluster';\nimport { CostChart } from 'routes/views/details/components/costChart';\nimport { SummaryCard } from 'routes/views/details/components/summary';\nimport { UsageChart } from 'routes/views/details/components/usageChart';\nimport { styles } from 'routes/views/details/ocpDetails/detailsHeader.styles';\nimport { CostOverviewWidgetType } from 'store/breakdown/costOverview/common/costOverviewCommon';\nimport { orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, intl, report, title } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report, title: title }))));\n            }\n            else {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.breakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.breakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, currency, groupBy, isPlatformCosts, query } = this.props;\n            let showWidget = false;\n            if (widget.reportSummary.showWidgetOnGroupBy) {\n                for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                    if (groupById === groupBy ||\n                        (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                        (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (!showWidget && widget.reportSummary.showWidgetOnCategory) {\n                for (const categoryId of widget.reportSummary.showWidgetOnCategory) {\n                    if (isPlatformCosts && categoryId === platformCategoryKey) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, currency: currency, isPlatformCosts: isPlatformCosts, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case CostOverviewWidgetType.cluster:\n                return this.getClusterChart(widget);\n            case CostOverviewWidgetType.cost:\n                return this.getCostChart(widget);\n            case CostOverviewWidgetType.cpuUsage:\n                return this.getCpuUsageChart(widget);\n            case CostOverviewWidgetType.memoryUsage:\n                return this.getMemoryUsageChart(widget);\n            case CostOverviewWidgetType.reportSummary:\n                return this.getSummaryCard(widget);\n            case CostOverviewWidgetType.volumeUsage:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 725 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 725\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/views/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, DatumType.cumulative, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, DatumType.cumulative, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, DatumType.cumulative, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, DatumType.cumulative, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const detailsPageState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign({}, (detailsPageState && detailsPageState.filter_by && detailsPageState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })),\n        exclude: Object.assign({}, (detailsPageState && detailsPageState.exclude && detailsPageState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(Object.assign(Object.assign({}, currentQuery), { cost_type: costType, currency, filter_by: Object.assign(Object.assign({}, currentQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(Object.assign(Object.assign({}, previousQuery), { cost_type: costType, currency, filter_by: Object.assign(Object.assign({}, previousQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase)));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip, getDateRange, } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === ReportType.cost;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const detailsPageState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (detailsPageState && detailsPageState.filter_by && detailsPageState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })),\n        exclude: Object.assign({}, (detailsPageState && detailsPageState.exclude && detailsPageState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(Object.assign(Object.assign({}, currentQuery), { cost_type: costType, currency, filter_by: Object.assign(Object.assign({}, currentQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(Object.assign(Object.assign({}, previousQuery), { cost_type: costType, currency, filter_by: Object.assign(Object.assign({}, previousQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase)));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 925 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 925\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, DatumType.rolling, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, DatumType.rolling, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, DatumType.rolling, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, DatumType.rolling, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, DatumType.rolling, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, DatumType.rolling, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const detailsPageState = queryFromRoute.state ? JSON.parse(window.atob(queryFromRoute.state)) : undefined;\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === ReportType.instanceType || reportType === ReportType.storage;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (detailsPageState && detailsPageState.filter_by && detailsPageState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        exclude: Object.assign({}, (detailsPageState && detailsPageState.exclude && detailsPageState.exclude)),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(Object.assign(Object.assign({}, currentQuery), { filter_by: Object.assign(Object.assign({}, currentQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(Object.assign(Object.assign({}, previousQuery), { filter_by: Object.assign(Object.assign({}, previousQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) }));\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase)));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataWidgetType } from 'store/breakdown/historicalData/common/historicalDataCommon';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === ReportPathsType.azure) {\n                return reportType === ReportType.instanceType ? 'virtual_machine' : reportType;\n            }\n            return reportType === ReportType.instanceType ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case HistoricalDataWidgetType.cost:\n                return this.getCostChart(widget);\n            case HistoricalDataWidgetType.trend:\n                return this.getTrendChart(widget);\n            case HistoricalDataWidgetType.usage:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { addFilterToQuery, removeFilterFromQuery } from './filter';\nimport { getRouteForQuery } from './query';\nexport const handleCurrencySelected = (query, router, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    router.navigate(getRouteForQuery(newQuery, router.location, reset), { replace: true });\n};\nexport const handleCostTypeSelected = (query, router, value, reset = false) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    router.navigate(getRouteForQuery(newQuery, router.location, reset), { replace: true }); // Don't reset pagination\n};\nexport const handleFilterAdded = (query, router, filter) => {\n    const filteredQuery = addFilterToQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handleFilterRemoved = (query, router, filter) => {\n    const filteredQuery = removeFilterFromQuery(query, filter);\n    router.navigate(getRouteForQuery(filteredQuery, router.location, true), { replace: true });\n};\nexport const handlePerPageSelect = (query, router, perPage) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n    const filteredQuery = getRouteForQuery(newQuery, router.location, true);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSetPage = (query, router, report, pageNumber) => {\n    const limit = report && report.meta && report.meta.filter && report.meta.filter.limit ? report.meta.filter.limit : 10;\n    const offset = pageNumber * limit - limit;\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\nexport const handleSort = (query, router, sortType, isSortAscending, date = undefined) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    newQuery.order_by = {};\n    newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n    if (date) {\n        newQuery.order_by.date = date;\n    }\n    const filteredQuery = getRouteForQuery(newQuery, router.location);\n    router.navigate(filteredQuery, { replace: true });\n};\n","import { getQueryRoute } from 'api/queries/query';\nexport const getRouteForQuery = (query, location, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: 0 });\n    }\n    return `${location.pathname}?${getQueryRoute(query)}`;\n};\n"],"names":["title","PageHeader","PageHeaderTitle","PageSection","Unavailable","styles","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","marginBottom","tagLink","marginLeft","global_spacer_sm","tagsContainer","marginRight","global_spacer_3xl","marginTop","TagContentBase","constructor","super","arguments","this","getDataListItems","tagReport","props","result","item","data","val","values","id","key","push","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","render","groupBy","groupByValue","intl","dataListItems","style","formatMessage","messages","value","count","DataList","isCompact","map","TagContent","injectIntl","connect","tagReportType","TagModalBase","getTagValueCount","length","handleClose","onClose","bind","componentDidMount","fetchTag","tagReportPathsType","tagQueryString","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","isOpen","query","filter","account","Modal","width","isPlatformCosts","mapStateToProps","state","router","queryFromRoute","location","search","detailsPageState","JSON","parse","window","atob","undefined","groupByOrgValue","filterByParams","filter_by","Object","keys","indexOf","resolution","time_scope_units","time_scope_value","assign","category","tagReportFetchStatus","mapDispatchToProps","TagModal","TagLinkBase","defaultState","setState","handleOpen","event","preventDefault","Boolean","href","onClick","cost","global_spacer_xl","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","global_spacer_md","header","backgroundColor","global_BackgroundColor_100","headerContent","display","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeader","buildDetailsLink","url","groupByKey","newQuery","group_by","getBackToLink","detailsURL","isOptimizationsPath","Link","to","routes","getTotalCost","report","hasCost","meta","total","format","units","currency","description","onCostTypeSelected","onCurrencySelected","showCostType","filterByAccount","groupByOrg","groupByTag","showTags","className","onSelect","Title","headingLevel","size","TitleSizes","optimizationsPath","BreakdownTab","getIdKeyForTab","tab","costOverview","historicalData","optimizations","BreakdownBase","activeTabKey","isOptimizationsTab","getAvailableTabs","costOverviewComponent","historicalDataComponent","isRosFeatureEnabled","optimizationsBadgeComponent","optimizationsComponent","availableTabs","contentRef","badge","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","TabContent","ref","getTabItem","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","closeOptimizationsDrawer","updateReport","fetchReport","reportPathsType","reportType","reportQueryString","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","name","ClusterModal","ClusterBase","showAll","someClusters","allClusters","computedItems","getComputedReportItems","idKey","includes","sort","a","b","clusterString","slice","trim","concat","Tooltip","enableFlip","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","items","_item","formatOptions","label","toString","totalValue","exclude","cost_type","SummaryModalContent","SummaryModalBase","variant","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","ouiaId","handleBulletChartModalOpen","type","ButtonType","ButtonVariant","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","limit","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasCapacity","capacityUnits","hasRequest","request","requestUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","bodyContent","rel","target","chartName","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","showWidgetOnCategory","categoryId","usePlaceholder","getVolumeUsageChart","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","getTrendChart","getUsageChart","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","handleCurrencySelected","reset","stringify","navigate","replace","handleCostTypeSelected","handleFilterAdded","filteredQuery","handleFilterRemoved","handlePerPageSelect","perPage","handleSetPage","pageNumber","offset","handleSort","sortType","isSortAscending","date","order_by","getRouteForQuery","pathname"],"sourceRoot":""}