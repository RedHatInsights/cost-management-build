{"version":3,"file":"js/ocp.1668745396366.08f4f29aaf1a316e7d08.js","mappings":"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","sources":["webpack:///./src/routes/views/details/ocpBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/ocpBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/ocpBreakdown/ocpBreakdown.tsx","webpack:///./src/routes/views/details/components/columnManagement/columnManagementModal.tsx","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsTable.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsToolbar.tsx","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.styles.ts","webpack:///./src/routes/views/details/ocpDetails/ocpDetails.tsx"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (query && query.exclude && query.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, newQuery), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { currency: currency, groupBy: groupBy, report: report }),\n        currency,\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        providerType: ProviderType.ocp,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: TagPathsType.ocp,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.manageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.selectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.manageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.manageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": `${option.value}Label`, isChecked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: `${option.value}Label`, key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport default ColumnManagementModal;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { TagPathsType } from 'api/tags/tag';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = TagPathsType.ocp;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { currency, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCurrencySelected, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ocpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.dashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport 'routes/views/details/components/dataTable/dataTable.scss';\nimport { Label } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { ReportPathsType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions';\nimport { DataTable } from 'routes/views/details/components/dataTable';\nimport { styles } from 'routes/views/details/components/dataTable/dataTable.styles';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dates';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = ReportPathsType.ocp;\nclass DetailsTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { groupBy, groupByTagKey, hiddenColumns, isAllSelected, queryString, report, selectedItems, intl } = this.props;\n            if (!queryString || !report) {\n                return;\n            }\n            const showDefaultProject = groupBy === 'project';\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupBy,\n            });\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        name: '',\n                    },\n                    {\n                        name: intl.formatMessage(messages.tagNames),\n                        style: groupBy === 'project' ? styles.nameColumn : undefined,\n                    },\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ]\n                : [\n                    {\n                        name: '',\n                    },\n                    Object.assign(Object.assign({ orderBy: groupBy, name: intl.formatMessage(messages.detailsResourceNames, { value: groupBy }) }, (computedItems.length && { isSortable: true })), { style: groupBy === 'project' ? styles.nameColumn : undefined }),\n                    {\n                        hidden: !showDefaultProject,\n                        name: '', // Default column\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        name: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        name: intl.formatMessage(messages.ocpDetailsInfrastructureCost),\n                        style: styles.costColumn,\n                        // Sort by infrastructure_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        name: intl.formatMessage(messages.ocpDetailsSupplementaryCost),\n                        style: styles.costColumn,\n                        // Sort by supplementary_cost is not supported -- https://github.com/project-koku/koku/issues/796\n                        // ...(computedItems.length && { isSortable: true }),\n                    },\n                    Object.assign({ orderBy: 'cost', name: intl.formatMessage(messages.cost), style: styles.costColumn }, (computedItems.length && { isSortable: true })),\n                    {\n                        name: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                const showLink = label !== `no-${groupBy}` && label !== `no-${groupByTagKey}`;\n                const selectable = showLink && item.classification !== 'category';\n                let name = label;\n                if (showLink) {\n                    name = (React.createElement(Link, { to: getBreakdownPath({\n                            basePath: paths.ocpDetailsBreakdown,\n                            label: label.toString(),\n                            description: item.id,\n                            groupBy,\n                        }) }, label));\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {},\n                        {\n                            value: (React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", null, name),\n                                React.createElement(\"div\", { style: styles.infoDescription }, desc))),\n                        },\n                        {\n                            hidden: !showDefaultProject,\n                            value: item.default_project ? (React.createElement(\"div\", null,\n                                React.createElement(Label, { variant: \"outline\", color: \"green\" }, intl.formatMessage(messages.default)))) : (React.createElement(\"div\", { style: styles.defaultLabel })),\n                        },\n                        { value: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { value: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { value: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { value: React.createElement(\"div\", null, cost) },\n                        { value: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                    selectionDisabled: !selectable,\n                });\n            });\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id) && !column.hidden);\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id) && !cell.hidden);\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                rows: filteredRows,\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, queryString } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, item: item, providerType: ProviderType.ocp, queryString: queryString, reportPathsType: reportPathsType, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, queryString, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.queryString) !== getQuery(queryString) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading, onSelected, onSort, selectedItems } = this.props;\n        const { columns, rows } = this.state;\n        return (React.createElement(DataTable, { columns: columns, isLoading: isLoading, onSelected: onSelected, onSort: onSort, rows: rows, selectedItems: selectedItems }));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { ResourcePathsType } from 'api/resources/resource';\nimport { TagPathsType, TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = TagType.tag;\nconst tagReportPathsType = TagPathsType.ocp;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'project' }), key: 'project' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: tagKey }),\n                    key: tagKey,\n                });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== FetchStatus.inProgress) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query) && tagReportFetchStatus !== FetchStatus.inProgress) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, onPlatformCostsChanged, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, onPlatformCostsChanged: onPlatformCostsChanged, pagination: pagination, query: query, resourcePathsType: ResourcePathsType.ocp, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, showPlatformCosts: groupBy === 'project', tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { ProviderType } from 'api/providers';\nimport { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { ColumnManagementModal, initHiddenColumns } from 'routes/views/details/components/columnManagement';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getRouteForQuery, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/history';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCurrency } from 'utils/localStorage';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.monthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.ocpDetailsInfrastructureCostDesc,\n        label: messages.ocpDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.ocpDetailsSupplementaryCostDesc,\n        label: messages.ocpDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { query, queryString, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, queryString: queryString, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { history, intl, query, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(history, query, perPage), onSetPage: (event, pageNumber) => handleSetPage(history, query, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { history, query, queryString, report, reportFetchStatus } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, groupByTagKey: groupByTagKey, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === FetchStatus.inProgress, onSelected: this.handleSelected, onSort: (sortType, isSortAscending) => handleSort(history, query, sortType, isSortAscending), queryString: queryString, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { history, query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: filter => handleFilterAdded(history, query, filter), onFilterRemoved: filter => handleFilterRemoved(history, query, filter), onPlatformCostsChanged: this.handlePlatformCostsChanged, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' }, category: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handlePlatformCostsChanged = (checked) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { category: checked ? 'platform' : undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.updateReport = () => {\n            const { fetchReport, history, location, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePlatformCostsChanged = this.handlePlatformCostsChanged.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currency, history, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.ocpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: ProviderType.ocp, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { currency: currency, groupBy: groupById, onCurrencySelected: value => handleCurrencySelected(history, query, value), onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        category: queryFromRoute.category,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { currency }));\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    return {\n        currency,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","injectIntl","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","currency","featureFlags","undefined","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","exclude","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","constructor","stateProps","dispatchProps","super","this","defaultState","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","setState","handleClose","onClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","render","Modal","TextContent","Text","component","TextVariants","Button","isInline","onClick","variant","isOpen","ModalVariant","actions","key","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","isChecked","name","onChange","DataListItemCells","dataListCells","DataListCell","label","ColumnManagementModalConnect","getIdKeyForGroupBy","project","cluster","node","baseQuery","delta","groupByOptions","DetailsHeaderBase","arguments","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCurrencySelected","onGroupBySelected","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","style","Title","headingLevel","size","TitleSizes","onSelect","isDisabled","onSelected","showTags","Boolean","Tooltip","content","enableFlip","DetailsHeader","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","groupByTagKey","isAllSelected","selectedItems","showDefaultProject","computedItems","idKey","orderBy","length","isSortable","item","index","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getSupplementaryCost","getTotalCost","getActions","showLink","selectable","classification","to","basePath","toString","desc","push","cells","default_project","Label","color","selected","find","val","selectionDisabled","filteredColumns","column","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","cell","showPriceListOption","percentValue","toFixed","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","componentDidMount","currentReport","data","JSON","stringify","previousReport","isLoading","onSort","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","onPlatformCostsChanged","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","showPlatformCosts","key_only","limit","DetailsToolbarConnect","DetailsToolbar","styles","paddingBottom","global_spacer_lg","paddingTop","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","offset","order_by","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","groupById","getExportModal","items","isAllItems","handleExportModalClose","getPagination","isBottom","history","page","Pagination","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","handleSelected","sortType","isSortAscending","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handlePlatformCostsChanged","action","handleGroupBySelected","groupByKey","parse","category","replace","isSelected","newItems","updateReport","bind","prevState","noReport","noLocation","queryFromRoute"],"sourceRoot":""}