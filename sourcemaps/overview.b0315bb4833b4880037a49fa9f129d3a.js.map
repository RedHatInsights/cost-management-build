{"version":3,"file":"js/overview.59579351b9a0801fa5cd.js","mappings":"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","sources":["webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/api/queries/userAccessQuery.ts","webpack:///./src/routes/components/currency/currency.styles.ts","webpack:///./src/routes/components/currency/currency.tsx","webpack:///./src/routes/state/noData/noDataState.tsx","webpack:///./src/routes/state/noData/noData.tsx","webpack:///./src/routes/components/icons/costIcon/costIcon.tsx","webpack:///./src/routes/state/noProviders/noProvidersState.styles.ts","webpack:///./src/routes/state/noProviders/noProvidersState.tsx","webpack:///./src/routes/state/noProviders/noProviders.tsx","webpack:///./src/routes/views/components/perspective/perspective.tsx","webpack:///./src/routes/views/overview/components/dashboardBase.tsx","webpack:///./src/routes/views/overview/components/optimizationsSummary/optimizations.styles.ts","webpack:///./src/routes/views/overview/components/optimizationsSummary/optimizationsSummary.tsx","webpack:///./src/routes/views/overview/components/chartComparison.tsx","webpack:///./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack:///./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack:///./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack:///./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.styles.ts","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboardWidget.tsx","webpack:///./src/routes/views/overview/rhelDashboard/rhelDashboard.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack:///./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack:///./src/routes/views/overview/overview.styles.ts","webpack:///./src/routes/views/overview/overview.tsx","webpack:///./src/api/queries/overviewQuery.ts","webpack:///./src/routes/views/utils/providers.ts","webpack:///./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currency, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: \"currencyOverride\", id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCurrency(selection.value); // Set currency units via local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.currency)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport default Currency;\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(NoDataStateBase);\nexport { NoDataState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default NoData;\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { CostIcon } from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case ProviderType.aws:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case ProviderType.azure:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case ProviderType.gcp:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case ProviderType.ibm:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case ProviderType.ocp:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(NoProvidersStateBase);\nexport { NoProvidersState };\n","import { PageSection } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(PageSection, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default NoProviders;\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\n// RHEL options\nconst rhelOptions = [{ label: messages.perspectiveValues, value: 'rhel' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst Perspective = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, hasRhel, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isRhelTab, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    // Note isInfrastructureTab and isRhelTab will be undefined for cost explorer\n    if (isInfrastructureTab !== undefined || isRhelTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n            }));\n        }\n        else if (isRhelTab) {\n            if (hasRhel) {\n                options.push(...rhelOptions);\n            }\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        if (hasRhel) {\n            options.push(...rhelOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nexport default Perspective;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, currency, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details && widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }), (currency && { currency })))));\n    }))));\nexport default DashboardBase;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nexport const styles = {\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n};\n","import './optimizationsSummary.scss';\nimport { Button, ButtonVariant, Card, CardBody, CardTitle, Popover, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { FetchStatus } from 'store/common';\nimport { formatPath } from 'utils/paths';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './optimizations.styles';\nconst OptimizationsSummaryBase = ({ intl, report, status, title }) => {\n    const count = report && report.meta ? report.meta.count : 0;\n    const description = intl.formatMessage(messages.optimizationsDetails, { count });\n    return (React.createElement(Card, { className: \"summary\" },\n        React.createElement(CardTitle, null,\n            React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                intl.formatMessage(title),\n                React.createElement(\"span\", { style: styles.infoIcon },\n                    React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.optimizationsInfoArialLabel), enableFlip: true, bodyContent: React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.optimizationsInfo)) },\n                        React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.optimizationsInfoButtonArialLabel), variant: ButtonVariant.plain },\n                            React.createElement(OutlinedQuestionCircleIcon, null)))))),\n        React.createElement(CardBody, null, status === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { width: \"16%\" }),\n            React.createElement(Skeleton, { className: \"skeleton\", width: skeletonWidth.md }))) : count > 0 ? (React.createElement(Link, { to: formatPath(routes.optimizations.path) }, description)) : (description))));\n};\nconst OptimizationsSummary = injectIntl(OptimizationsSummaryBase);\nexport default OptimizationsSummary;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ComputedReportItemType, DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { getComputedForecast, transformForecast, transformForecastCone, } from 'routes/views/components/charts/common/chartDatumForecast';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { OptimizationsSummary } from 'routes/views/overview/components/optimizationsSummary';\nimport { DashboardChartType } from 'store/dashboard/common/dashboardCommon';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\n// eslint-disable-next-line no-shadow\nvar Comparison;\n(function (Comparison) {\n    Comparison[\"cumulative\"] = \"cumulative\";\n    Comparison[\"daily\"] = \"daily\";\n})(Comparison || (Comparison = {}));\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            currentComparison: Comparison.cumulative,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === DashboardChartType.dailyTrend) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.dailyCost) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === DashboardChartType.trend) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === DashboardChartType.usage) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: Comparison.daily },\n                { label: cumulativeTitle, value: Comparison.cumulative, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === Comparison.daily;\n            const type = daily ? DatumType.rolling : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === Comparison.daily;\n            const datumType = daily ? DatumType.rolling : trend.datumType;\n            const computedForecast = getComputedForecast(forecast, report, computedForecastItem, datumType);\n            const forecastData = transformForecast(computedForecast, datumType, computedForecastItem);\n            const forecastConeData = transformForecastCone(computedForecast, datumType, computedForecastItem);\n            return { forecastData, forecastConeData };\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === ComputedReportItemType.usage) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getOptimizationsSummary = () => {\n            const { rosReportFetchStatus, rosReport, titleKey } = this.props;\n            return React.createElement(OptimizationsSummary, { status: rosReportFetchStatus, report: rosReport, title: titleKey });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === ComputedReportItemType.usage) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                availableTabs && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({ activeTabKey: tabIndex });\n        };\n        this.updateForecasts = () => {\n            const { fetchForecasts, widgetId } = this.props;\n            if (fetchForecasts) {\n                fetchForecasts(widgetId);\n            }\n        };\n        this.updateReports = () => {\n            const { fetchReports, widgetId } = this.props;\n            if (fetchReports) {\n                fetchReports(widgetId);\n            }\n        };\n        this.updateRosReports = () => {\n            const { fetchRosReports, isRosFeatureEnabled, widgetId } = this.props;\n            if (fetchRosReports && isRosFeatureEnabled) {\n                fetchRosReports(widgetId);\n            }\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, details, id, trend, updateTab } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (trend && trend.computedForecastItem !== undefined) {\n            this.updateForecasts();\n        }\n        if (!details.showOptimizations) {\n            this.updateReports();\n        }\n        if (details.showOptimizations) {\n            this.updateRosReports();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, trend } = this.props;\n        if (prevProps.costType !== costType || prevProps.currency !== currency) {\n            this.updateReports();\n            if (trend && trend.computedForecastItem !== undefined) {\n                this.updateForecasts();\n            }\n        }\n    }\n    render() {\n        const { details, isRosFeatureEnabled } = this.props;\n        if (details.showOptimizations) {\n            return isRosFeatureEnabled ? this.getOptimizationsSummary() : null;\n        }\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport default DashboardWidgetBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, AwsDashboardTab } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsDashboardTab.services:\n            return 'service';\n        case AwsDashboardTab.accounts:\n            return 'account';\n        case AwsDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), costType: getCostType(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors, AwsOcpDashboardTab } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AwsOcpDashboardTab.services:\n            return 'service';\n        case AwsOcpDashboardTab.accounts:\n            return 'account';\n        case AwsOcpDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), costType: getCostType(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, AzureDashboardTab } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureDashboardTab.service_names:\n            return 'service_name';\n        case AzureDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, AzureOcpDashboardTab, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case AzureOcpDashboardTab.service_names:\n            return 'service_name';\n        case AzureOcpDashboardTab.subscription_guids:\n            return 'subscription_guid';\n        case AzureOcpDashboardTab.resource_locations:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors, GcpDashboardTab } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpDashboardTab.regions:\n            return 'region';\n        case GcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors, GcpOcpDashboardTab } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case GcpOcpDashboardTab.gcpProjects:\n            return 'gcp_project';\n        case GcpOcpDashboardTab.regions:\n            return 'region';\n        case GcpOcpDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors, IbmDashboardTab } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case IbmDashboardTab.services:\n            return 'service';\n        case IbmDashboardTab.projects:\n            return 'project';\n        case IbmDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, OcpCloudDashboardTab, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpCloudDashboardTab.accounts:\n            return 'account';\n        case OcpCloudDashboardTab.regions:\n            return 'region';\n        case OcpCloudDashboardTab.services:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, OcpDashboardTab } from 'store/dashboard/ocpDashboard';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { rosSelectors } from 'store/ros';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OcpDashboardTab.clusters:\n            return 'cluster';\n        case OcpDashboardTab.nodes:\n            return 'node';\n        case OcpDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    })), (widget.rosPathsType &&\n        widget.rosType && {\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        rosReport: rosSelectors.selectRos(state, widget.rosPathsType, widget.rosType, queries.optimizations),\n        rosReportError: rosSelectors.selectRosError(state, widget.rosPathsType, widget.rosType, queries.optimizations),\n        rosReportFetchStatus: rosSelectors.selectRosFetchStatus(state, widget.rosPathsType, widget.rosType, queries.optimizations),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    fetchRosReports: ocpDashboardActions.fetchWidgetRosReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardActions, rhelDashboardSelectors, RhelDashboardTab } from 'store/dashboard/rhelDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nimport { chartStyles } from './rhelDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case RhelDashboardTab.clusters:\n            return 'cluster';\n        case RhelDashboardTab.nodes:\n            return 'node';\n        case RhelDashboardTab.projects:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = rhelDashboardSelectors.selectWidget(state, widgetId);\n    const queries = rhelDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: rhelDashboardActions.fetchWidgetForecasts,\n    fetchReports: rhelDashboardActions.fetchWidgetReports,\n    updateTab: rhelDashboardActions.changeWidgetTab,\n};\nconst RhelDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { RhelDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { rhelDashboardSelectors } from 'store/dashboard/rhelDashboard';\nimport { RhelDashboardWidget } from './rhelDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: RhelDashboardWidget,\n        selectWidgets: rhelDashboardSelectors.selectWidgets(state),\n        widgets: rhelDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst RhelDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default RhelDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors, OciDashboardTab } from 'store/dashboard/ociDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCurrency } from 'utils/localStorage';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OciDashboardTab.product_services:\n            return 'product_service';\n        case OciDashboardTab.payer_tenant_ids:\n            return 'payer_tenant_id';\n        case OciDashboardTab.regions:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, widget), { currency: getCurrency(), getIdKeyForTab }), (widget.forecastPathsType &&\n        widget.forecastType && {\n        forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastError: forecastSelectors.selectForecastError(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n        forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast),\n    })), (widget.reportPathsType &&\n        widget.reportType && {\n        currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.current),\n        currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current),\n        previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.previous),\n        previousReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.previous),\n        tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportError: reportSelectors.selectReportError(state, widget.reportPathsType, widget.reportType, queries.tabs),\n        tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs),\n    }));\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { ProviderType } from 'api/providers';\nimport { getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { UserAccessType } from 'api/userAccess';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { Loading } from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { AwsDashboard } from 'routes/views/overview/awsDashboard';\nimport { AwsOcpDashboard } from 'routes/views/overview/awsOcpDashboard';\nimport { AzureDashboard } from 'routes/views/overview/azureDashboard';\nimport { AzureOcpDashboard } from 'routes/views/overview/azureOcpDashboard';\nimport { GcpDashboard } from 'routes/views/overview/gcpDashboard';\nimport { GcpOcpDashboard } from 'routes/views/overview/gcpOcpDashboard';\nimport { IbmDashboard } from 'routes/views/overview/ibmDashboard';\nimport { OcpCloudDashboard } from 'routes/views/overview/ocpCloudDashboard';\nimport { OcpDashboard } from 'routes/views/overview/ocpDashboard';\nimport { RhelDashboard } from 'routes/views/overview/rhelDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dates';\nimport { getCostType, getCurrency } from 'utils/localStorage';\nimport { withRouter } from 'utils/router';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, isRhelAvailable, } from 'utils/userAccess';\nimport { OciDashboard } from './ociDashboard';\nimport { styles } from './overview.styles';\n// eslint-disable-next-line no-shadow\nvar InfrastructurePerspective;\n(function (InfrastructurePerspective) {\n    InfrastructurePerspective[\"aws\"] = \"aws\";\n    InfrastructurePerspective[\"awsOcp\"] = \"aws_ocp\";\n    InfrastructurePerspective[\"azure\"] = \"azure\";\n    InfrastructurePerspective[\"azureOcp\"] = \"azure_ocp\";\n    InfrastructurePerspective[\"gcp\"] = \"gcp\";\n    InfrastructurePerspective[\"gcpOcp\"] = \"gcp_ocp\";\n    InfrastructurePerspective[\"ibm\"] = \"ibm\";\n    InfrastructurePerspective[\"ibmOcp\"] = \"ibm_ocp\";\n    InfrastructurePerspective[\"oci\"] = \"oci\";\n    InfrastructurePerspective[\"ocpCloud\"] = \"ocp_cloud\";\n})(InfrastructurePerspective || (InfrastructurePerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OcpPerspective;\n(function (OcpPerspective) {\n    OcpPerspective[\"ocp\"] = \"ocp\";\n})(OcpPerspective || (OcpPerspective = {}));\n// eslint-disable-next-line no-shadow\nvar OverviewTab;\n(function (OverviewTab) {\n    OverviewTab[\"infrastructure\"] = \"infrastructure\";\n    OverviewTab[\"ocp\"] = \"ocp\";\n    OverviewTab[\"rhel\"] = \"rhel\";\n})(OverviewTab || (OverviewTab = {}));\n// eslint-disable-next-line no-shadow\nvar RhelPerspective;\n(function (RhelPerspective) {\n    RhelPerspective[\"rhel\"] = \"rhel\";\n})(RhelPerspective || (RhelPerspective = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case OverviewTab.infrastructure:\n            return 'infrastructure';\n        case OverviewTab.ocp:\n            return 'ocp';\n        case OverviewTab.rhel:\n            return 'rhel';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const availableTabs = [];\n            const infrastructureTabs = this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.infrastructure,\n                    },\n                ]\n                : undefined;\n            const ocpTabs = this.isOcpAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.ocp,\n                    },\n                ]\n                : undefined;\n            const rhelTabs = this.isRhelAvailable()\n                ? [\n                    {\n                        contentRef: React.createRef(),\n                        tab: OverviewTab.rhel,\n                    },\n                ]\n                : undefined;\n            if (isFinsightsFeatureEnabled) {\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n                if (rhelTabs) {\n                    availableTabs.push(...rhelTabs);\n                }\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n            }\n            else {\n                if (ocpTabs) {\n                    availableTabs.push(...ocpTabs);\n                }\n                if (infrastructureTabs) {\n                    availableTabs.push(...infrastructureTabs);\n                }\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === OverviewTab.infrastructure ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === InfrastructurePerspective.aws || currentItem === InfrastructurePerspective.awsOcp) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrency = () => {\n            const { currency } = this.props;\n            return React.createElement(Currency, { onSelect: this.handleCurrencySelected, currency: currency });\n        };\n        this.getCurrentTab = () => {\n            const { isFinsightsFeatureEnabled } = this.props;\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const hasRhel = this.isRhelAvailable();\n            const hasInfrastructure = hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud;\n            const showInfrastructureOnly = hasInfrastructure && !hasOcp && !hasRhel;\n            const showOcpOnly = hasOcp && !hasInfrastructure && !hasRhel;\n            const showRhelOnly = hasRhel && !hasInfrastructure && !hasOcp;\n            if (showOcpOnly) {\n                return OverviewTab.ocp;\n            }\n            else if (showInfrastructureOnly) {\n                return OverviewTab.infrastructure;\n            }\n            else if (showRhelOnly) {\n                return OverviewTab.rhel;\n            }\n            else {\n                if (isFinsightsFeatureEnabled) {\n                    switch (activeTabKey) {\n                        case 0:\n                            return OverviewTab.infrastructure;\n                        case 1:\n                            return OverviewTab.rhel;\n                        case 2:\n                            return OverviewTab.ocp;\n                    }\n                }\n                switch (activeTabKey) {\n                    case 0:\n                        return OverviewTab.ocp;\n                    case 1:\n                        return OverviewTab.infrastructure;\n                }\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case InfrastructurePerspective.aws:\n                case InfrastructurePerspective.awsOcp:\n                case InfrastructurePerspective.azure:\n                case InfrastructurePerspective.oci:\n                case InfrastructurePerspective.azureOcp:\n                case InfrastructurePerspective.gcp:\n                case InfrastructurePerspective.gcpOcp:\n                case InfrastructurePerspective.ibm:\n                case InfrastructurePerspective.ibmOcp:\n                case InfrastructurePerspective.ocpCloud:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return InfrastructurePerspective.ocpCloud;\n            }\n            if (this.isAwsAvailable()) {\n                return InfrastructurePerspective.aws;\n            }\n            if (this.isAzureAvailable()) {\n                return InfrastructurePerspective.azure;\n            }\n            if (this.isOciAvailable()) {\n                return InfrastructurePerspective.oci;\n            }\n            if (this.isGcpAvailable()) {\n                return InfrastructurePerspective.gcp;\n            }\n            if (this.isIbmAvailable()) {\n                return InfrastructurePerspective.ibm;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case OcpPerspective.ocp:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return OcpPerspective.ocp;\n            }\n            return undefined;\n        };\n        this.getDefaultRhelPerspective = () => {\n            const { perspective, rhelProviders, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case RhelPerspective.rhel:\n                    return perspective;\n            }\n            if (isRhelAvailable(userAccess, rhelProviders)) {\n                return RhelPerspective.rhel;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasRhel = this.isRhelAvailable();\n            // Note: No need to test \"OCP on cloud\" here, since that requires at least one of the providers below\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp || hasRhel)) {\n                return null;\n            }\n            let currentItem;\n            const currentTab = this.getCurrentTab();\n            switch (currentTab) {\n                case OverviewTab.infrastructure:\n                    currentItem = currentInfrastructurePerspective;\n                    break;\n                case OverviewTab.ocp:\n                    currentItem = currentOcpPerspective;\n                    break;\n                case OverviewTab.rhel:\n                    currentItem = currentRhelPerspective;\n                    break;\n            }\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), hasRhel: hasRhel, isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: OverviewTab.infrastructure === currentTab, isRhelTab: OverviewTab.rhel === currentTab, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { router } = this.props;\n            return `${router.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, ocpProviders, rhelProviders, } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, currentRhelPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === OverviewTab.infrastructure) {\n                if (currentInfrastructurePerspective === InfrastructurePerspective.ocpCloud) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.aws) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.awsOcp) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azure) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.azureOcp) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcp) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.gcpOcp) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.ibm) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, { currency: currency }) : noData;\n                }\n                else if (currentInfrastructurePerspective === InfrastructurePerspective.oci) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.ocp) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === OcpPerspective.ocp) {\n                    return hasData ? React.createElement(OcpDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === OverviewTab.rhel) {\n                const hasData = hasCurrentMonthData(rhelProviders) || hasPreviousMonthData(rhelProviders);\n                if (currentRhelPerspective === RhelPerspective.rhel) {\n                    return hasData ? React.createElement(RhelDashboard, { currency: currency }) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl, isFinsightsFeatureEnabled } = this.props;\n            if (tab === OverviewTab.infrastructure) {\n                if (isFinsightsFeatureEnabled) {\n                    return intl.formatMessage(messages.summary);\n                }\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === OverviewTab.ocp) {\n                return intl.formatMessage(messages.openShift);\n            }\n            else if (tab === OverviewTab.rhel) {\n                return intl.formatMessage(messages.rhel);\n            }\n        };\n        this.handleCostTypeSelected = () => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handleCurrencySelected = () => {\n            const { router, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { query, router } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === OverviewTab.infrastructure && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === OverviewTab.ocp && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { query, router } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    router.navigate(this.getRouteForQuery(newQuery), { replace: true });\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n        this.isRhelAvailable = () => {\n            const { isFinsightsFeatureEnabled, rhelProviders, userAccess } = this.props;\n            return isFinsightsFeatureEnabled && isRhelAvailable(userAccess, rhelProviders);\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n            currentRhelPerspective: this.getDefaultRhelPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n                currentRhelPerspective: this.getDefaultRhelPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isFinsightsFeatureEnabled, isIbmFeatureEnabled, userAccessFetchStatus } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === FetchStatus.complete &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable() &&\n            !this.isRhelAvailable();\n        const isLoading = providersFetchStatus === FetchStatus.inProgress || userAccessFetchStatus === FetchStatus.inProgress;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    isFinsightsFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rhel)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.rhelDesc)),\n                                        React.createElement(\"br\", null))),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, this.getCurrency())),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const perspective = queryFromRoute.perspective;\n    const currency = getCurrency();\n    const costType = perspective === InfrastructurePerspective.aws || perspective === InfrastructurePerspective.awsOcp\n        ? getCostType()\n        : undefined;\n    const query = Object.assign({}, queryFromRoute);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, UserAccessType.all, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, UserAccessType.all, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, UserAccessType.all, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, ProviderType.aws),\n        azureProviders: filterProviders(providers, ProviderType.azure),\n        costType,\n        currency,\n        gcpProviders: filterProviders(providers, ProviderType.gcp),\n        ibmProviders: filterProviders(providers, ProviderType.ibm),\n        isFinsightsFeatureEnabled: featureFlagsSelectors.selectIsFinsightsFeatureEnabled(state),\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        ociProviders: filterProviders(providers, ProviderType.oci),\n        ocpProviders: filterProviders(providers, ProviderType.ocp),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        rhelProviders: filterProviders(providers, ProviderType.rhel),\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OverviewBase)));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","// eslint-disable-next-line no-shadow\nvar DataType;\n(function (DataType) {\n    DataType[\"currentMonthData\"] = \"current_month_data\";\n    DataType[\"hasData\"] = \"has_data\";\n    DataType[\"previousMonthData\"] = \"previous_month_data\";\n})(DataType || (DataType = {}));\n// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.currentMonthData);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.hasData);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, DataType.previousMonthData);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, DataType.currentMonthData);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, DataType.hasData);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, DataType.previousMonthData);\n};\n","import { UserAccessType } from 'api/userAccess';\nconst hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.aws);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.azure);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.oci);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.cost_model);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.gcp);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, UserAccessType.gcp) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ocp);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n// Returns true if user has access to RHEL\nexport const hasRhelAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.rhel);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRhelAvailable = (userAccess, rhelProviders) => {\n    return hasRhelAccess(userAccess) && hasProviders(rhelProviders);\n};\n// Returns true if user has access to ROS\nexport const hasRosAccess = (userAccess) => {\n    return hasAccess(userAccess, UserAccessType.ros);\n};\n// Returns true if user has access to RHEL and at least one source provider\nexport const isRosAvailable = (userAccess, rosProviders) => {\n    return hasRosAccess(userAccess) && hasProviders(rosProviders);\n};\n"],"names":["getProvidersQuery","query","stringify","encode","indices","getUserAccessQuery","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","currency","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CurrencyConnect","connect","injectIntl","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","Button","onClick","window","location","reload","NoDataState","title","PageHeader","PageHeaderTitle","PageSection","src","alt","iconSpacer","marginLeft","viewSources","marginTop","global_spacer_lg","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","titleKey","component","NoProvidersState","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","rhelOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","currentItem","hasOcp","hasOcpCloud","hasRhel","isInfrastructureTab","isRhelTab","onSelected","undefined","costType","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","widget","details","showHorizontal","GridItem","sm","lg","xl","xl2","infoIcon","fontSize","global_FontSize_md","report","status","count","meta","description","Card","CardTitle","TitleSizes","Popover","enableFlip","bodyContent","infoTitle","ButtonVariant","CardBody","Skeleton","width","skeleton","Link","to","routes","ChartComparisonBase","default","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","Comparison","DashboardWidgetBase","activeTabKey","currentComparison","cumulative","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","getFormattedUnits","cumulativeTitle","dailyTitleKey","daily","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","type","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","forecast","computedForecast","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","getDetailsLinkTitle","getHorizontalLayout","currentReportFetchStatus","detailsLink","getTabs","getTitle","getOptimizationsSummary","rosReportFetchStatus","rosReport","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","total","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","tabIndex","updateTab","updateForecasts","fetchForecasts","updateReports","fetchReports","updateRosReports","fetchRosReports","isRosFeatureEnabled","componentDidMount","showOptimizations","componentDidUpdate","prevProps","awsDashboard","queries","forecastPathsType","forecastType","forecastError","forecastFetchStatus","reportPathsType","current","currentReportError","previous","previousReportError","previousReportFetchStatus","tabsReportError","mapDispatchToProps","AwsDashboardWidget","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","rosPathsType","rosType","featureFlags","ros","optimizations","rosReportError","OcpDashboardWidget","rhelDashboard","RhelDashboardWidget","ociDashboard","OciDashboardWidget","date","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","headerContent","justifyContent","headerContentLeft","headerContentRight","fontWeight","main","paddingBottom","paddingTop","InfrastructurePerspective","OcpPerspective","OverviewTab","RhelPerspective","infrastructure","ocp","rhel","OverviewBase","getAvailableTabs","isFinsightsFeatureEnabled","infrastructureTabs","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","contentRef","ocpTabs","isOcpAvailable","rhelTabs","isRhelAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","awsOcp","handleCostTypeSelected","getCurrency","handleCurrencySelected","hasInfrastructure","showInfrastructureOnly","showRhelOnly","getDefaultInfrastructurePerspective","perspective","azure","oci","azureOcp","gcp","gcpOcp","ibm","ibmOcp","ocpCloud","getDefaultOcpPerspective","ocpProviders","userAccess","getDefaultRhelPerspective","rhelProviders","getPerspective","currentRhelPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getRouteForQuery","router","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","val","TabContent","ref","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","emptyTab","noData","hasData","newQuery","JSON","parse","navigate","replace","tabKey","providers","providersFetchStatus","userAccessFetchStatus","noProviders","isLoading","queryFromRoute","parseQuery","search","Number","isNaN","providersQueryString","providersError","userAccessQueryString","userAccessError","DataType","_getOcpProvider","uuid","result","data","provider","filterProviders","sourceType","filter","source_type","toLowerCase","length","_hasData","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","currentMonthData","hasCloudData","hasCloudPreviousMonthData","previousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasPreviousMonthData","hasAccess","userAccessType","Array","isArray","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasOciAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess","hasRhelAccess","hasRosAccess"],"sourceRoot":""}