{"version":3,"file":"js/ocpBreakdown.63b3ba6ca25f6b731f99.js","mappings":"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","sources":["webpack:///./src/routes/views/details/ocpBreakdown/costOverview.tsx","webpack:///./src/routes/views/details/ocpBreakdown/historicalData.tsx","webpack:///./src/routes/views/details/ocpBreakdown/optimizationsBadge.tsx","webpack:///./src/routes/views/details/ocpBreakdown/optimizationsBreakdown.tsx","webpack:///./src/routes/views/details/ocpBreakdown/ocpBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { title }) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n        title,\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { Badge } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/rosQuery';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { FetchStatus } from 'store/common';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { withRouter } from 'utils/router';\nconst baseQuery = {\n    limit: 10,\n    offset: 0,\n};\nconst reportPathsType = RosPathsType.recommendations;\nconst reportType = RosType.ros;\nclass OptimizationsBadgeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportFetchStatus, reportQueryString } = this.props;\n            if (reportFetchStatus !== FetchStatus.inProgress) {\n                fetchReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { intl, report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        return React.createElement(Badge, { screenReaderText: intl.formatMessage(messages.optimizationsDetails, { count }) }, count);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const reportQuery = Object.assign(Object.assign({}, (groupBy && {\n        [groupBy]: groupByValue, // project filter\n    })), { limit: queryFromRoute.limit || baseQuery.limit, offset: queryFromRoute.offset || baseQuery.offset });\n    const reportQueryString = getQuery(reportQuery);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nconst OptimizationsBadge = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OptimizationsBadgeBase)));\nexport { OptimizationsBadge };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoOptimizations } from 'routes/state/noOptimizations';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { OptimizationsTable, OptimizationsToolbar } from 'routes/views/components/optimizations';\nimport { styles } from 'routes/views/optimizations/optimizations.styles';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { handleFilterAdded, handleFilterRemoved, handleSort } from 'routes/views/utils/handles';\nimport { getOrderById, getOrderByValue } from 'routes/views/utils/orderBy';\nimport { getRouteForQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { withRouter } from 'utils/router';\nconst baseQuery = {\n    limit: 10,\n    offset: 0,\n    order_by: {\n        last_reported: 'desc',\n    },\n};\nconst reportType = RosType.ros;\nconst reportPathsType = RosPathsType.recommendations;\nclass OptimizationsBreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            columns: [],\n            rows: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPagination = (isDisabled = false, isBottom = false) => {\n            const { intl, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta ? report.meta.limit : baseQuery.limit;\n            const offset = report && report.meta ? report.meta.offset : baseQuery.offset;\n            const page = Math.trunc(offset / limit + 1);\n            return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => this.handlePerPageSelect(perPage), onSetPage: (event, pageNumber) => this.handleSetPage(pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.openShift),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus, reportQueryString, router } = this.props;\n            return (React.createElement(OptimizationsTable, { isLoading: reportFetchStatus === FetchStatus.inProgress, onSort: (sortType, isSortAscending) => handleSort(query, router, sortType, isSortAscending), report: report, reportQueryString: reportQueryString }));\n        };\n        this.getToolbar = () => {\n            const { query, report, router } = this.props;\n            const itemsPerPage = report && report.meta ? report.meta.limit : 0;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            const isDisabled = itemsTotal === 0;\n            return (React.createElement(OptimizationsToolbar, { isDisabled: isDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onFilterAdded: filter => handleFilterAdded(query, router, filter), onFilterRemoved: filter => handleFilterRemoved(query, router, filter), pagination: this.getPagination(isDisabled), query: query }));\n        };\n        this.handlePerPageSelect = (perPage) => {\n            const { query, router } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { limit: perPage });\n            const filteredQuery = getRouteForQuery(newQuery, router.location, true);\n            router.navigate(filteredQuery, { replace: true });\n        };\n        this.handleSetPage = (pageNumber) => {\n            const { query, report, router } = this.props;\n            const limit = report && report.meta && report.meta.limit ? report.meta.limit : baseQuery.limit;\n            const offset = pageNumber * limit - 1;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { limit,\n                offset });\n            const filteredQuery = getRouteForQuery(newQuery, router.location);\n            router.navigate(filteredQuery, { replace: true });\n        };\n        this.updateReport = () => {\n            const { fetchRosReport, reportFetchStatus, reportQueryString } = this.props;\n            if (reportFetchStatus !== FetchStatus.inProgress) {\n                fetchRosReport(reportPathsType, reportType, reportQueryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { intl, report, reportError, reportFetchStatus } = this.props;\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const isDisabled = itemsTotal === 0;\n        const title = intl.formatMessage(messages.optimizations);\n        const hasOptimizations = report && report.meta && report.meta.count > 0;\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        if (!hasOptimizations && reportFetchStatus === FetchStatus.complete) {\n            return React.createElement(NoOptimizations, null);\n        }\n        return (React.createElement(\"div\", { style: styles.optimizationsContainer },\n            this.getToolbar(),\n            reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                this.getTable(),\n                React.createElement(\"div\", { style: styles.pagination }, this.getPagination(isDisabled, true))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const order_by = getOrderById(queryFromRoute) || getOrderById(baseQuery);\n    const order_how = getOrderByValue(queryFromRoute) || getOrderByValue(baseQuery);\n    const query = Object.assign(Object.assign({}, baseQuery), queryFromRoute);\n    const reportQuery = Object.assign(Object.assign(Object.assign({}, (groupBy && {\n        [groupBy]: groupByValue, // Flattened project filter\n    })), query.filter_by), { limit: query.limit, offset: query.offset, order_by,\n        order_how });\n    const reportQueryString = getQuery(reportQuery);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy: queryFromRoute.group_by,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchRosReport: rosActions.fetchRosReport,\n};\nconst OptimizationsBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OptimizationsBreakdownBase)));\nexport { OptimizationsBreakdown };\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nimport { OptimizationsBadge } from './optimizationsBadge';\nimport { OptimizationsBreakdown } from './optimizationsBreakdown';\nconst detailsURL = formatPath(routes.ocpDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const currency = getCurrency();\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        currency,\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costOverviewComponent: (React.createElement(CostOverview, { currency: currency, groupBy: groupBy, isPlatformCosts: queryFromRoute && queryFromRoute.isPlatformCosts, report: report, title: title })),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { currency: currency }),\n        isOptimizationsTab: queryFromRoute.optimizationsTab !== undefined,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        optimizationsBadgeComponent: React.createElement(OptimizationsBadge, null),\n        optimizationsComponent: groupBy === 'project' && groupByValue !== '*' ? React.createElement(OptimizationsBreakdown, null) : undefined,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        providerType: ProviderType.ocp,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        tagReportPathsType: TagPathsType.ocp,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    closeOptimizationsDrawer: uiActions.closeOptimizationsDrawer,\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default OcpBreakdown;\n"],"names":["mapStateToProps","state","title","selectWidgets","ocpCostOverview","widgets","CostOverview","connect","props","ocpHistoricalData","HistoricalData","reportPathsType","reportType","OptimizationsBadgeBase","constructor","super","arguments","this","defaultState","Object","assign","updateReport","fetchReport","reportFetchStatus","reportQueryString","componentDidMount","render","intl","report","count","meta","Badge","screenReaderText","formatMessage","messages","router","queryFromRoute","location","search","groupBy","groupByValue","reportQuery","limit","offset","reportError","mapDispatchToProps","OptimizationsBadge","injectIntl","order_by","last_reported","OptimizationsBreakdownBase","columns","rows","getPagination","isDisabled","isBottom","page","Math","trunc","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","handlePerPageSelect","onSetPage","pageNumber","handleSetPage","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","query","isLoading","onSort","sortType","isSortAscending","getToolbar","itemsPerPage","itemsTotal","onFilterAdded","filter","onFilterRemoved","pagination","newQuery","JSON","parse","stringify","filteredQuery","navigate","replace","fetchRosReport","componentDidUpdate","prevProps","noReport","noLocation","hasOptimizations","style","order_how","filter_by","group_by","OptimizationsBreakdown","detailsURL","routes","queryState","currency","resolution","time_scope_units","time_scope_value","isPlatformCosts","category","undefined","exclude","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","isOptimizationsTab","optimizationsTab","isRosFeatureEnabled","featureFlags","optimizationsBadgeComponent","optimizationsComponent","providerType","tagReportPathsType","closeOptimizationsDrawer","ui"],"sourceRoot":""}