{"version":3,"file":"js/5971.f4d86e43bc3ac52f909d.js","mappings":"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","sources":["webpack:///./src/routes/views/components/costDistribution/costDistribution.styles.ts","webpack:///./src/routes/views/components/costDistribution/costDistribution.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/views/details/components/tag/tag.styles.ts","webpack:///./src/routes/views/details/components/tag/tagContent.tsx","webpack:///./src/routes/views/details/components/tag/tagModal.tsx","webpack:///./src/routes/views/details/components/tag/tagLink.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/views/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.tsx","webpack:///./src/routes/views/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/views/details/components/costChart/costChart.tsx","webpack:///./src/routes/views/details/components/overheadCostChart/overheadCostChart.styles.ts","webpack:///./src/routes/views/details/components/overheadCostChart/overheadCostChart.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.tsx","webpack:///./src/routes/views/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryCard.tsx","webpack:///./src/routes/views/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/views/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/views/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/views/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts"],"sourcesContent":["import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    selector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    label: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costDistribution.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, setCostDistribution } from 'utils/localStorage';\nimport { styles } from './costDistribution.styles';\nconst costDistributionOptions = [\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.distributed },\n    { label: messages.costDistributionType, value: ComputedReportItemValueType.total },\n];\nclass CostDistributionBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { costDistribution, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costDistribution);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costDistributionSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costDistributionOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostDistribution(selection.value); // Set cost distribution in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.selector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.label }, intl.formatMessage(messages.costDistributionLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostDistributionConnect = connect(mapStateToProps, mapDispatchToProps)(CostDistributionBase);\nconst CostDistribution = injectIntl(CostDistributionConnect);\nexport default CostDistribution;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { TagContent } from './tagContent';\nconst tagType = TagType.tag;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        fetchTag(tagPathsType, tagType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, intl, isOpen, query, tagReport } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: this.props.isPlatformCosts ? platformCategoryKey : groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        isPlatformCosts: queryFromRoute && queryFromRoute.isPlatformCosts,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagModalBase)));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagType = TagType.tag;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        fetchTag(tagPathsType, tagType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagPathsType, tagType, tagQueryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            count > 0 && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", { \"data-testid\": \"tag-lnk\", href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }, count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagPathsType: tagPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagPathsType, tagType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagPathsType, tagType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase)));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costDistribution: {\n        marginTop: global_spacer_md.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { getQueryRoute, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { Currency } from 'routes/components/currency';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { CostDistribution } from 'routes/views/components/costDistribution';\nimport { CostType } from 'routes/views/components/costType';\nimport { TagLink } from 'routes/views/details/components/tag';\nimport { getGroupByCostCategory, getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getTotalCostDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { awsCategoryKey, orgUnitIdKey, tagKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = url => {\n            const { groupBy, isOptimizationsPath, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const state = query.state ? window.atob(query.state) : undefined;\n            const newQuery = Object.assign(Object.assign({}, (state && JSON.parse(state))), (!isOptimizationsPath && {\n                group_by: {\n                    [groupByKey]: value,\n                },\n            }));\n            return `${url}?${getQueryRoute(newQuery)}`;\n        };\n        this.getBackToLink = groupByKey => {\n            const { detailsURL, intl, isOptimizationsPath, tagPathsType } = this.props;\n            if (isOptimizationsPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(formatPath(routes.optimizations.path)) }, intl.formatMessage(messages.breakdownBackToOptimizations)));\n            }\n            return (React.createElement(Link, { to: this.buildDetailsLink(detailsURL) }, intl.formatMessage(messages.breakdownBackToDetails, {\n                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagPathsType }),\n                groupBy: groupByKey,\n            })));\n        };\n        this.getTotalCost = () => {\n            const { costDistribution, report } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[reportItemValue];\n            const cost = formatCurrency(hasCost ? report.meta.total.cost[reportItemValue].value : 0, hasCost ? report.meta.total.cost[reportItemValue].units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costDistribution, costType, currency, description, groupBy, intl, isCostDistributionFeatureEnabled, onCostDistributionSelected, onCostTypeSelected, onCurrencySelected, query, showCostDistribution, showCostType, tabs, tagPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByCostCategory = getGroupByCostCategory(query);\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'payer_tenant_id' ||\n            groupBy === 'project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount\n            ? 'account'\n            : groupByCostCategory\n                ? awsCategoryKey\n                : groupByTag\n                    ? tagKey\n                    : groupByOrg\n                        ? orgUnitIdKey\n                        : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            this.getBackToLink(groupByKey)))),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostDistribution && isCostDistributionFeatureEnabled && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected }))),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getTotalCostDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }))))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, showTags && React.createElement(TagLink, { id: \"tags\", tagPathsType: tagPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    return {\n        isCostDistributionFeatureEnabled: featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state),\n        isOptimizationsPath: queryFromRoute.optimizationsPath !== undefined,\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader)));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { handleCostDistributionSelected, handleCostTypeSelected, handleCurrencySelected, } from 'routes/views/utils/handles';\nimport { hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { FetchStatus } from 'store/common';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\n// eslint-disable-next-line no-shadow\nvar BreakdownTab;\n(function (BreakdownTab) {\n    BreakdownTab[\"costOverview\"] = \"cost-overview\";\n    BreakdownTab[\"historicalData\"] = \"historical-data\";\n    BreakdownTab[\"optimizations\"] = \"optimizations\";\n})(BreakdownTab || (BreakdownTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case BreakdownTab.costOverview:\n            return 'cost-overview';\n        case BreakdownTab.historicalData:\n            return 'historical-data';\n        case BreakdownTab.optimizations:\n            return 'optimizations';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: this.props.isOptimizationsTab ? 2 : 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { costOverviewComponent, historicalDataComponent, isRosFeatureEnabled, optimizationsBadgeComponent, optimizationsComponent, } = this.props;\n            const availableTabs = [];\n            if (costOverviewComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.costOverview,\n                });\n            }\n            if (historicalDataComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.historicalData,\n                });\n            }\n            if (optimizationsComponent && isRosFeatureEnabled) {\n                availableTabs.push({\n                    badge: optimizationsBadgeComponent,\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.optimizations,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, badge, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(React.Fragment, null,\n                    React.createElement(TabTitleText, null, this.getTabTitle(tab)),\n                    badge && React.createElement(\"span\", null, badge)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent, optimizationsComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === BreakdownTab.costOverview) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === BreakdownTab.historicalData) {\n                return historicalDataComponent;\n            }\n            else if (currentTab === BreakdownTab.optimizations) {\n                return optimizationsComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, val.badge, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === BreakdownTab.costOverview) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === BreakdownTab.historicalData) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n            else if (tab === BreakdownTab.optimizations) {\n                return intl.formatMessage(messages.optimizations);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.handleTabClick = (event, tabIndex) => {\n            const { closeOptimizationsDrawer } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    if (closeOptimizationsDrawer) {\n                        closeOptimizationsDrawer();\n                    }\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, costType, currency, description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, router, showCostDistribution, showCostType, tagPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress && reportFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.complete && reportFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === FetchStatus.complete;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costDistribution: costDistribution, costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostDistributionSelected: value => handleCostDistributionSelected(query, router, value), onCostTypeSelected: value => handleCostTypeSelected(query, router, value), onCurrencySelected: value => handleCurrencySelected(query, router, value), query: query, report: report, showCostDistribution: showCostDistribution, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagPathsType: tagPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nconst Breakdown = injectIntl(withRouter(BreakdownBase));\nexport default Breakdown;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { clusters = [] } = this.props;\n        if (clusters.length === 0) {\n            return null;\n        }\n        return clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { clusters, isOpen } = this.props;\n        return nextProps.clusters !== clusters || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { clusters, groupBy, intl, isOpen, title } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, {\n                groupBy,\n                name: title,\n            }), width: '50%' },\n            React.createElement(ClusterContent, { clusters: clusters })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import { Tooltip } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, intl, report, title } = this.props;\n        const { isOpen, showAll } = this.state;\n        const maxCharsPerName = 45; // Max (non-whitespace) characters that fit without overlapping card\n        const maxItems = 2; // Max items to show before adding \"more\" link\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        // Get clusters from all projects -- see https://issues.redhat.com/browse/COST-3371\n        const clusters = [];\n        computedItems.map(item => {\n            if (item.clusters) {\n                item.clusters.map(cluster => {\n                    if (!clusters.includes(cluster)) {\n                        clusters.push(cluster);\n                    }\n                });\n            }\n        });\n        if (clusters.length === 0) {\n            return null;\n        }\n        // Sort clusters from multiple projects\n        clusters.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n        for (const cluster of clusters) {\n            let clusterString = someClusters.length > 0 ? `, ${cluster}` : cluster;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (someClusters.length < maxItems) {\n                if (clusterString.length > maxCharsPerName) {\n                    clusterString = clusterString.slice(0, maxCharsPerName).trim().concat('...');\n                    someClusters.push(React.createElement(Tooltip, { content: cluster, enableFlip: true },\n                        React.createElement(\"span\", null, clusterString)));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            someClusters && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            someClusters.length < allClusters.length && (React.createElement(\"a\", { \"data-testid\": \"cluster-lnk\", href: \"#/\", onClick: this.handleOpen }, intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { clusters: clusters, groupBy: groupBy, isOpen: isOpen, onClose: this.handleClose, title: title })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 475,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 80, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costBreakdownAriaDesc), ariaTitle: intl.formatMessage(messages.costBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 525,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './overheadCostChart.styles';\nclass OverheadCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { costDistribution, name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasPlatformDistributed = hasCost &&\n            costDistribution === ComputedReportItemValueType.distributed &&\n            report.meta.total.cost.platform_distributed;\n        const hasWorkerUnallocated = hasCost &&\n            costDistribution === ComputedReportItemValueType.distributed &&\n            report.meta.total.cost.worker_unallocated_distributed;\n        const hasCostTotal = hasCost && report.meta.total.cost.total;\n        const platformDistributedUnits = hasPlatformDistributed ? report.meta.total.cost.platform_distributed.units : 'USD';\n        const workerUnallocatedUnits = hasWorkerUnallocated\n            ? report.meta.total.cost.worker_unallocated_distributed.units\n            : 'USD';\n        const totalCostUnits = hasCostTotal ? report.meta.total.cost.total.units : 'USD';\n        const platformDistributedValue = hasPlatformDistributed && report.meta.total.cost.platform_distributed.value > 0\n            ? report.meta.total.cost.platform_distributed.value\n            : 0;\n        const workerUnallocatedValue = hasWorkerUnallocated && report.meta.total.cost.worker_unallocated_distributed.value > 0\n            ? report.meta.total.cost.worker_unallocated_distributed.value\n            : 0;\n        const totalCostValue = hasCostTotal ? report.meta.total.cost.total.value : 0;\n        const platformDistributed = formatCurrency(platformDistributedValue, platformDistributedUnits);\n        const workerUnallocated = formatCurrency(workerUnallocatedValue, workerUnallocatedUnits);\n        const totalCost = formatCurrency(totalCostValue, totalCostUnits);\n        const platformDistributedLabel = intl.formatMessage(messages.platformDistributed);\n        const workerUnallocatedLabel = intl.formatMessage(messages.workerUnallocated);\n        const totalCostLabel = intl.formatMessage(messages.allOtherProjectCosts);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 30, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [platformDistributed, workerUnallocated, totalCost] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costDistributionAriaDesc), ariaTitle: intl.formatMessage(messages.costDistributionTitle), constrainToVisibleArea: true, data: [\n                { x: platformDistributedLabel, y: platformDistributedValue, units: platformDistributedUnits },\n                { x: workerUnallocatedLabel, y: workerUnallocatedValue, units: workerUnallocatedUnits },\n                { x: totalCostLabel, y: totalCostValue, units: totalCostUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: platformDistributedLabel,\n                },\n                {\n                    name: workerUnallocatedLabel,\n                },\n                {\n                    name: totalCostLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 325,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst OverheadCostChart = injectIntl(OverheadCostChartBase);\nexport default OverheadCostChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './summaryModal.styles';\nconst reportType = ReportType.cost;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString, reportPathsType } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost[reportItemValue].value : 0, hasTotal ? report.meta.total.cost[reportItemValue].units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost[reportItemValue].value, units: report.meta.total.cost[reportItemValue].units, value: _item.cost[reportItemValue].value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const reportQuery = {\n        cost_type: costType,\n        currency,\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase)));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costDistribution, costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costDistribution: costDistribution, costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType } from 'routes/views/components/charts/common';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { costDistribution, report, reportGroupBy, reportFetchStatus } = this.props;\n            const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost[reportItemValue].value, units: report.meta.total.cost[reportItemValue].units, value: reportItem.cost[reportItemValue].value })))));\n        };\n        this.getViewAll = () => {\n            const { costDistribution, costType, currency, groupBy, intl, isPlatformCosts, query, reportGroupBy, reportPathsType, } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, { ouiaId: \"view-all-btn\", onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }, intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costDistribution: costDistribution, costType: costType, currency: currency, groupBy: groupBy, groupByValue: isPlatformCosts ? platformCategoryKey : groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportQueryString, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { intl, isPlatformCosts, reportGroupBy, reportFetchStatus } = this.props;\n        const title = intl.formatMessage(messages.breakdownSummaryTitle, {\n            value: isPlatformCosts ? platformCategoryKey.toLowerCase() : reportGroupBy,\n        });\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, title)),\n            React.createElement(CardBody, null, reportFetchStatus === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        cost_type: costType,\n        currency,\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryBase)));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                groupBy === 'cluster' && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            this.updateReport();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, report, intl, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || reportType === ReportType.volume) {\n            const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n            const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        query,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase)));\nexport default UsageChart;\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Cluster } from 'routes/views/details/components/cluster';\nimport { CostChart } from 'routes/views/details/components/costChart';\nimport { OverheadCostChart } from 'routes/views/details/components/overheadCostChart';\nimport { SummaryCard } from 'routes/views/details/components/summary';\nimport { UsageChart } from 'routes/views/details/components/usageChart';\nimport { styles } from 'routes/views/details/ocpDetails/detailsHeader.styles';\nimport { getGroupByCostCategory, getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { CostOverviewWidgetType } from 'store/breakdown/costOverview/common/costOverviewCommon';\nimport { platformCategoryKey, tagPrefix } from 'utils/props';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster card\n        this.getClusterCard = (widget) => {\n            const { groupBy, intl, report, title } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report, title: title }))));\n            }\n            else {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns cost distribution chart\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.getCostDistributionChart = (widget) => {\n            const { costDistribution, intl, isCostDistributionFeatureEnabled, report } = this.props;\n            if (!costDistribution || !isCostDistributionFeatureEnabled) {\n                return null;\n            }\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costDistributionTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costDistributionAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.platformDistributed)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.platformDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.workerUnallocated)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.workerUnallocatedDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(OverheadCostChart, { costDistribution: costDistribution, name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costDistribution, costType, currency, groupBy, isPlatformCosts, query } = this.props;\n            const groupByCostCategory = getGroupByCostCategory(query);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTag = getGroupByTagKey(query);\n            let showWidget = false;\n            if (widget.reportSummary.showWidgetOnGroupBy) {\n                for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                    if (groupById === groupBy || groupByCostCategory || groupByOrg || groupByTag) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (!showWidget && widget.reportSummary.showWidgetOnPlatformCategory) {\n                for (const categoryId of widget.reportSummary.showWidgetOnPlatformCategory) {\n                    if (isPlatformCosts && categoryId === platformCategoryKey) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costDistribution: costDistribution, costType: costType, currency: currency, isPlatformCosts: isPlatformCosts, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case CostOverviewWidgetType.cluster:\n                return this.getClusterCard(widget);\n            case CostOverviewWidgetType.cost:\n                return this.getCostChart(widget);\n            case CostOverviewWidgetType.costDistribution:\n                return this.getCostDistributionChart(widget);\n            case CostOverviewWidgetType.cpuUsage:\n                return this.getCpuUsageChart(widget);\n            case CostOverviewWidgetType.memoryUsage:\n                return this.getMemoryUsageChart(widget);\n            case CostOverviewWidgetType.reportSummary:\n                return this.getSummaryCard(widget);\n            case CostOverviewWidgetType.volumeUsage:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 725 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 725\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ComputedReportItemValueType, DatumType, transformReport, } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/views/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.updateReport = () => {\n            const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { chartName, costDistribution, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl, } = this.props;\n        const reportItemValue = costDistribution ? costDistribution : ComputedReportItemValueType.total;\n        // Current data\n        const currentData = transformReport(currentReport, DatumType.cumulative, 'date', 'cost', reportItemValue);\n        const currentInfrastructureCostData = transformReport(currentReport, DatumType.cumulative, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, DatumType.cumulative, 'date', 'cost', reportItemValue);\n        const previousInfrastructureCostData = transformReport(previousReport, DatumType.cumulative, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost[reportItemValue].units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase)));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip, getDateRange, } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.updateReport = () => {\n            const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === ReportType.cost;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase)));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 925 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 925\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.updateReport = () => {\n            const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.previousQueryString !== previousQueryString) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, DatumType.rolling, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, DatumType.rolling, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, DatumType.rolling, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, DatumType.rolling, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, DatumType.rolling, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, DatumType.rolling, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === ReportType.instanceType || reportType === ReportType.storage;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase)));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataWidgetType } from 'store/breakdown/historicalData/common/historicalDataCommon';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === ReportPathsType.azure) {\n                return reportType === ReportType.instanceType ? 'virtual_machine' : reportType;\n            }\n            return reportType === ReportType.instanceType ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costDistribution, costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costDistribution: costDistribution, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case HistoricalDataWidgetType.cost:\n                return this.getCostChart(widget);\n            case HistoricalDataWidgetType.trend:\n                return this.getTrendChart(widget);\n            case HistoricalDataWidgetType.usage:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n"],"names":["styles","selector","display","alignItems","label","marginBottom","marginRight","whiteSpace","costDistributionOptions","messages","value","CostDistributionBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","costDistribution","isDisabled","props","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","description","desc","key","intl","options","push","toString","formatMessage","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CostDistributionConnect","connect","injectIntl","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","tagLink","marginLeft","global_spacer_sm","tagsContainer","global_spacer_3xl","marginTop","TagContentBase","getDataListItems","tagReport","result","item","data","val","values","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","groupBy","groupByValue","dataListItems","count","DataList","isCompact","TagContent","tagType","TagModalBase","getTagValueCount","length","handleClose","onClose","bind","componentDidMount","fetchTag","tagPathsType","tagQueryString","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","query","filter","account","Modal","title","width","isPlatformCosts","router","queryFromRoute","location","search","queryState","groupByOrgValue","filterByParams","filter_by","keys","indexOf","undefined","tagQuery","resolution","time_scope_units","time_scope_value","category","tagReportFetchStatus","mapDispatchToProps","TagModal","TagLinkBase","handleOpen","preventDefault","href","onClick","cost","global_spacer_xl","global_spacer_md","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","header","backgroundColor","global_BackgroundColor_100","headerContent","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeader","buildDetailsLink","url","isOptimizationsPath","groupByKey","window","atob","newQuery","JSON","parse","group_by","getBackToLink","detailsURL","Link","to","routes","getTotalCost","report","reportItemValue","hasCost","meta","total","format","units","currency","isCostDistributionFeatureEnabled","onCostDistributionSelected","onCostTypeSelected","onCurrencySelected","showCostDistribution","showCostType","filterByAccount","groupByCostCategory","groupByOrg","groupByTag","showTags","TitleSizes","featureFlags","optimizationsPath","BreakdownTab","getIdKeyForTab","tab","costOverview","historicalData","optimizations","BreakdownBase","activeTabKey","isOptimizationsTab","getAvailableTabs","costOverviewComponent","historicalDataComponent","isRosFeatureEnabled","optimizationsBadgeComponent","optimizationsComponent","availableTabs","contentRef","badge","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","TabContent","ref","getTabItem","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","closeOptimizationsDrawer","updateReport","fetchReport","reportPathsType","reportType","reportQueryString","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","name","ClusterModal","ClusterBase","showAll","someClusters","allClusters","computedItems","getComputedReportItems","idKey","includes","sort","a","b","clusterString","slice","trim","concat","Tooltip","enableFlip","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","OverheadCostChartBase","hasPlatformDistributed","platform_distributed","hasWorkerUnallocated","worker_unallocated_distributed","hasCostTotal","platformDistributedUnits","workerUnallocatedUnits","totalCostUnits","platformDistributedValue","workerUnallocatedValue","totalCostValue","platformDistributed","workerUnallocated","totalCost","platformDistributedLabel","workerUnallocatedLabel","totalCostLabel","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","items","_item","formatOptions","totalValue","reportQuery","cost_type","exclude","SummaryModalContent","SummaryModalBase","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","ouiaId","handleBulletChartModalOpen","type","ButtonType","ButtonVariant","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","limit","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasCapacity","capacityUnits","hasRequest","request","requestUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","PLACEHOLDER","CostOverviewsBase","getClusterCard","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","bodyContent","rel","target","chartName","getCostDistributionChart","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","showWidgetOnPlatformCategory","categoryId","usePlaceholder","getVolumeUsageChart","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","xl2","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","getTrendChart","getUsageChart","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle"],"sourceRoot":""}