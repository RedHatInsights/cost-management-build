{"version":3,"file":"js/ocpBreakdown.9c79bbcece20e58e3c9c.js","mappings":"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","sources":["webpack:///./src/routes/details/ocpBreakdown/costOverview.tsx","webpack:///./src/routes/details/ocpBreakdown/historicalData.tsx","webpack:///./src/routes/details/ocpBreakdown/optimizationsBadge.tsx","webpack:///./src/routes/details/ocpBreakdown/optimizationsBreakdown.tsx","webpack:///./src/routes/details/ocpBreakdown/ocpBreakdown.tsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/details/components/costOverview';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { title }) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n        title,\n    };\n});\nconst CostOverview = connect(mapStateToProps, {})(CostOverviewBase);\nexport { CostOverview };\n","import { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/details/components/historicalData';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = connect(mapStateToProps, {})(HistoricalDataBase);\nexport { HistoricalData };\n","import { Badge } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/rosQuery';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { withRouter } from 'utils/router';\nconst reportPathsType = RosPathsType.recommendations;\nconst reportType = RosType.ros;\nclass OptimizationsBadgeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateReport = () => {\n            const { fetchReport, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    render() {\n        const { intl, report } = this.props;\n        const count = report && report.meta ? report.meta.count : 0;\n        return React.createElement(Badge, { screenReaderText: intl.formatMessage(messages.optimizationsDetails, { count }) }, count);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // Don't need pagination here\n    const reportQuery = Object.assign({}, (groupBy && {\n        [groupBy]: groupByValue, // project filter\n    }));\n    const reportQueryString = getQuery(reportQuery);\n    const report = rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString);\n    const reportError = rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: rosActions.fetchRosReport,\n};\nconst OptimizationsBadge = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(OptimizationsBadgeBase)));\nexport { OptimizationsBadge };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { RosPathsType, RosType } from 'api/ros/ros';\nimport messages from 'locales/messages';\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { OptimizationsTable, OptimizationsToolbar } from 'routes/components/optimizations';\nimport { Loading } from 'routes/components/page/loading';\nimport { NoOptimizations } from 'routes/components/page/noOptimizations';\nimport { NotAvailable } from 'routes/components/page/notAvailable';\nimport { styles } from 'routes/optimizations/optimizations.styles';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { getOrderById, getOrderByValue } from 'routes/utils/orderBy';\nimport * as queryUtils from 'routes/utils/query';\nimport { FetchStatus } from 'store/common';\nimport { rosActions, rosSelectors } from 'store/ros';\nimport { uiActions } from 'store/ui';\nconst baseQuery = {\n    limit: 10,\n    offset: 0,\n    order_by: {\n        last_reported: 'desc',\n    },\n};\nconst reportType = RosType.ros;\nconst reportPathsType = RosPathsType.recommendations;\nconst OptimizationsBreakdown = () => {\n    const [query, setQuery] = useState(Object.assign({}, baseQuery));\n    const intl = useIntl();\n    const { closeOptimizationsDrawer, report, reportError, reportFetchStatus, reportQueryString } = useMapToProps({\n        query,\n    });\n    const getPagination = (isDisabled = false, isBottom = false) => {\n        const count = report && report.meta ? report.meta.count : 0;\n        const limit = report && report.meta ? report.meta.limit : baseQuery.limit;\n        const offset = report && report.meta ? report.meta.offset : baseQuery.offset;\n        const page = Math.trunc(offset / limit + 1);\n        return (React.createElement(Pagination, { isCompact: !isBottom, isDisabled: isDisabled, itemCount: count, onPerPageSelect: (event, perPage) => handleOnPerPageSelect(perPage), onSetPage: (event, pageNumber) => handleOnSetPage(pageNumber), page: page, perPage: limit, titles: {\n                paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                    title: intl.formatMessage(messages.openShift),\n                    placement: isBottom ? 'bottom' : 'top',\n                }),\n            }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n    };\n    const getTable = () => {\n        return (React.createElement(OptimizationsTable, { filterBy: query.filter_by, isLoading: reportFetchStatus === FetchStatus.inProgress, onSort: (sortType, isSortAscending) => handleOnSort(sortType, isSortAscending), orderBy: query.order_by, report: report, reportQueryString: reportQueryString }));\n    };\n    const getToolbar = () => {\n        const itemsPerPage = report && report.meta ? report.meta.limit : 0;\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const isDisabled = itemsTotal === 0;\n        return (React.createElement(OptimizationsToolbar, { isDisabled: isDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onFilterAdded: filter => handleOnFilterAdded(filter), onFilterRemoved: filter => handleOnFilterRemoved(filter), pagination: getPagination(isDisabled), query: query }));\n    };\n    const handleOnFilterAdded = filter => {\n        const newQuery = queryUtils.handleOnFilterAdded(query, filter);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const handleOnFilterRemoved = filter => {\n        const newQuery = queryUtils.handleOnFilterRemoved(query, filter);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const handleOnPerPageSelect = perPage => {\n        const newQuery = queryUtils.handleOnPerPageSelect(query, perPage, true);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const handleOnSetPage = pageNumber => {\n        const newQuery = queryUtils.handleOnSetPage(query, report, pageNumber, true);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const handleOnSort = (sortType, isSortAscending) => {\n        const newQuery = queryUtils.handleOnSort(query, sortType, isSortAscending);\n        setQuery(newQuery);\n        closeOptimizationsDrawer();\n    };\n    const itemsTotal = report && report.meta ? report.meta.count : 0;\n    const isDisabled = itemsTotal === 0;\n    const title = intl.formatMessage(messages.optimizations);\n    const hasOptimizations = report && report.meta && report.meta.count > 0;\n    if (reportError) {\n        return React.createElement(NotAvailable, { title: title });\n    }\n    if (!query.filter_by && !hasOptimizations && reportFetchStatus === FetchStatus.complete) {\n        return React.createElement(NoOptimizations, null);\n    }\n    return (React.createElement(React.Fragment, null,\n        getToolbar(),\n        reportFetchStatus === FetchStatus.inProgress ? (React.createElement(Loading, { body: intl.formatMessage(messages.optimizationsLoadingStateDesc), heading: intl.formatMessage(messages.optimizationsLoadingStateTitle) })) : (React.createElement(React.Fragment, null,\n            getTable(),\n            React.createElement(\"div\", { style: styles.pagination }, getPagination(isDisabled, true))))));\n};\nconst useQueryFromRoute = () => {\n    const location = useLocation();\n    return parseQuery(location.search);\n};\n// eslint-disable-next-line no-empty-pattern\nconst useMapToProps = ({ query }) => {\n    const dispatch = useDispatch();\n    const queryFromRoute = useQueryFromRoute();\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const order_by = getOrderById(query) || getOrderById(baseQuery);\n    const order_how = getOrderByValue(query) || getOrderByValue(baseQuery);\n    const reportQuery = Object.assign(Object.assign(Object.assign({}, (groupBy && {\n        [groupBy]: groupByValue, // Flattened project filter\n    })), query.filter_by), { limit: query.limit, offset: query.offset, order_by,\n        order_how });\n    const reportQueryString = getQuery(reportQuery);\n    const report = useSelector((state) => rosSelectors.selectRos(state, reportPathsType, reportType, reportQueryString));\n    const reportFetchStatus = useSelector((state) => rosSelectors.selectRosFetchStatus(state, reportPathsType, reportType, reportQueryString));\n    const reportError = useSelector((state) => rosSelectors.selectRosError(state, reportPathsType, reportType, reportQueryString));\n    useEffect(() => {\n        if (!reportError && reportFetchStatus !== FetchStatus.inProgress) {\n            dispatch(rosActions.fetchRosReport(reportPathsType, reportType, reportQueryString));\n        }\n    }, [query]);\n    return {\n        closeOptimizationsDrawer: uiActions.closeOptimizationsDrawer,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportQueryString,\n    };\n};\nexport { OptimizationsBreakdown };\n","import { ProviderType } from 'api/providers';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport { TagPathsType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { routes } from 'routes';\nimport { BreakdownBase } from 'routes/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/utils/groupBy';\nimport { filterProviders } from 'routes/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getCostDistribution, getCurrency } from 'utils/localStorage';\nimport { formatPath } from 'utils/paths';\nimport { breakdownDescKey, breakdownTitleKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nimport { OptimizationsBadge } from './optimizationsBadge';\nimport { OptimizationsBreakdown } from './optimizationsBreakdown';\nconst detailsURL = formatPath(routes.ocpDetails.path);\nconst reportType = ReportType.cost;\nconst reportPathsType = ReportPathsType.ocp;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { intl, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const isCostDistributionFeatureEnabled = featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state);\n    const costDistribution = groupBy === 'project' && isCostDistributionFeatureEnabled ? getCostDistribution() : undefined;\n    const currency = getCurrency();\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        currency,\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, ProviderType.all, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, ProviderType.all, providersQueryString);\n    const title = queryFromRoute[breakdownTitleKey] ? queryFromRoute[breakdownTitleKey] : groupByValue;\n    return {\n        costDistribution,\n        costOverviewComponent: (React.createElement(CostOverview, { costDistribution: costDistribution, currency: currency, groupBy: groupBy, isCostDistributionFeatureEnabled: featureFlagsSelectors.selectIsCostDistributionFeatureEnabled(state), isPlatformCosts: queryFromRoute && queryFromRoute.isPlatformCosts, report: report, title: title })),\n        currency,\n        description: queryFromRoute[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: intl.formatMessage(messages.ocpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { costDistribution: costDistribution, currency: currency }),\n        isOptimizationsTab: queryFromRoute.optimizationsTab !== undefined,\n        isRosFeatureEnabled: featureFlagsSelectors.selectIsRosFeatureEnabled(state),\n        optimizationsBadgeComponent: React.createElement(OptimizationsBadge, null),\n        optimizationsComponent: groupBy === 'project' && groupByValue !== '*' ? React.createElement(OptimizationsBreakdown, null) : undefined,\n        providers: filterProviders(providers, ProviderType.ocp),\n        providersFetchStatus,\n        providerType: ProviderType.ocp,\n        query,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        reportQueryString,\n        showCostDistribution: groupBy === 'project',\n        tagPathsType: TagPathsType.ocp,\n        title,\n    };\n});\nconst mapDispatchToProps = {\n    closeOptimizationsDrawer: uiActions.closeOptimizationsDrawer,\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase)));\nexport default OcpBreakdown;\n"],"names":["mapStateToProps","state","title","selectWidgets","ocpCostOverview","widgets","CostOverview","connect","props","ocpHistoricalData","HistoricalData","reportPathsType","recommendations","reportType","ros","OptimizationsBadgeBase","constructor","super","arguments","this","defaultState","Object","assign","updateReport","fetchReport","reportQueryString","componentDidMount","render","intl","report","count","meta","Badge","screenReaderText","formatMessage","messages","optimizationsDetails","router","queryFromRoute","location","search","groupBy","groupByValue","reportQuery","reportError","reportFetchStatus","mapDispatchToProps","OptimizationsBadge","injectIntl","baseQuery","limit","offset","order_by","last_reported","OptimizationsBreakdown","query","setQuery","useState","useIntl","closeOptimizationsDrawer","useMapToProps","getPagination","isDisabled","isBottom","page","Math","trunc","Pagination","isCompact","itemCount","onPerPageSelect","event","perPage","handleOnPerPageSelect","onSetPage","pageNumber","handleOnSetPage","titles","paginationTitle","openShift","placement","variant","PaginationVariant","bottom","top","widgetId","newQuery","optimizations","hasOptimizations","filter_by","complete","itemsPerPage","itemsTotal","onFilterAdded","filter","handleOnFilterAdded","onFilterRemoved","handleOnFilterRemoved","pagination","getToolbar","inProgress","body","optimizationsLoadingStateDesc","heading","optimizationsLoadingStateTitle","filterBy","isLoading","onSort","sortType","isSortAscending","handleOnSort","orderBy","style","dispatch","useDispatch","useLocation","useQueryFromRoute","order_how","useSelector","useEffect","ui","detailsURL","routes","ocpDetails","path","cost","ocp","queryState","isCostDistributionFeatureEnabled","featureFlags","costDistribution","undefined","currency","resolution","time_scope_units","time_scope_value","isPlatformCosts","category","exclude","group_by","providersQueryString","providers","all","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","ocpDetailsTitle","historicalDataComponent","isOptimizationsTab","optimizationsTab","isRosFeatureEnabled","optimizationsBadgeComponent","optimizationsComponent","providerType","showCostDistribution","tagPathsType"],"sourceRoot":""}