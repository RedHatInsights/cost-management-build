{"version":3,"file":"js/7052.a3109d1daeb5e80ddc3c.js","mappings":"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","sources":["webpack:///./src/routes/views/details/components/breakdown/breakdown.styles.ts","webpack:///./src/routes/views/details/components/tag/tag.styles.ts","webpack:///./src/routes/views/details/components/tag/tagContent.tsx","webpack:///./src/routes/views/details/components/tag/tagModal.tsx","webpack:///./src/routes/views/details/components/tag/tagLink.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.styles.ts","webpack:///./src/routes/views/details/components/breakdown/breakdownHeader.tsx","webpack:///./src/routes/views/details/components/breakdown/breakdownBase.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterContent.tsx","webpack:///./src/routes/views/details/components/cluster/clusterModal.styles.ts","webpack:///./src/routes/views/details/components/cluster/clusterModal.tsx","webpack:///./src/routes/views/details/components/cluster/cluster.tsx","webpack:///./src/routes/views/details/components/costChart/costChart.styles.ts","webpack:///./src/routes/views/details/components/costChart/costChart.tsx","webpack:///./src/routes/views/details/components/costDistributionChart/costDistributionChart.styles.ts","webpack:///./src/routes/views/details/components/costDistributionChart/costDistributionChart.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryModalContent.tsx","webpack:///./src/routes/views/details/components/summary/summaryModal.tsx","webpack:///./src/routes/views/details/components/summary/summaryCard.styles.ts","webpack:///./src/routes/views/details/components/summary/summaryCard.tsx","webpack:///./src/routes/views/details/components/usageChart/usageChart.styles.ts","webpack:///./src/routes/views/details/components/usageChart/usageChart.tsx","webpack:///./src/routes/views/details/components/costOverview/costOverviewBase.tsx","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalChart.styles.ts","webpack:///./src/routes/views/details/components/historicalData/historicalDataCostChart.tsx","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/routes/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack:///./src/routes/views/details/components/historicalData/historicalDataBase.tsx","webpack:///./src/routes/views/details/ocpDetails/detailsHeader.styles.ts"],"sourcesContent":["import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.groupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.tagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.tagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { TagContent } from './tagContent';\nconst tagReportType = TagType.tag;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, intl, isOpen, query, tagReport } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.tagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: this.props.isPlatformCosts ? platformCategoryKey : groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        isPlatformCosts: queryFromRoute && queryFromRoute.isPlatformCosts,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagModalBase)));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { TagType } from 'api/tags/tag';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { logicalAndPrefix, orgUnitIdKey, platformCategoryKey, tagPrefix } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = TagType.tag;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagReportPathsType, tagQueryString } = this.props;\n        if (prevProps.tagQueryString !== tagQueryString) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", { \"data-testid\": \"tag-lnk\", href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }, count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = queryState && queryState.filter_by ? queryState.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const query = Object.assign({}, queryFromRoute);\n    const tagQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, filterByParams), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const tagQueryString = getQuery(tagQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        tagReport,\n        tagReportFetchStatus,\n        tagQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase)));\nexport default TagLink;\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costDistribution: {\n        marginTop: global_spacer_md.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { getQueryRoute, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'routes';\nimport { Currency } from 'routes/components/currency';\nimport { CostDistribution } from 'routes/views/components/costDistribution';\nimport { CostType } from 'routes/views/components/costType';\nimport { TagLink } from 'routes/views/details/components/tag';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { getTotalCostDateRangeString } from 'utils/dates';\nimport { formatCurrency } from 'utils/format';\nimport { formatPath } from 'utils/paths';\nimport { orgUnitIdKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeader extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = url => {\n            const { groupBy, isOptimizationsPath, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const state = query.state ? window.atob(query.state) : undefined;\n            const newQuery = Object.assign(Object.assign({}, (state && JSON.parse(state))), (!isOptimizationsPath && {\n                group_by: {\n                    [groupByKey]: value,\n                },\n            }));\n            return `${url}?${getQueryRoute(newQuery)}`;\n        };\n        this.getBackToLink = groupByKey => {\n            const { detailsURL, intl, isOptimizationsPath, tagReportPathsType } = this.props;\n            if (isOptimizationsPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(formatPath(routes.optimizations.path)) }, intl.formatMessage(messages.breakdownBackToOptimizations)));\n            }\n            return (React.createElement(Link, { to: this.buildDetailsLink(detailsURL) }, intl.formatMessage(messages.breakdownBackToDetails, {\n                value: intl.formatMessage(messages.breakdownBackToTitles, { value: tagReportPathsType }),\n                groupBy: groupByKey,\n            })));\n        };\n        this.getTotalCost = () => {\n            const { costDistribution, report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost[costDistribution];\n            const cost = formatCurrency(hasCost ? report.meta.total.cost[costDistribution].value : 0, hasCost ? report.meta.total.cost[costDistribution].units : 'USD');\n            return cost;\n        };\n    }\n    render() {\n        const { costDistribution, costType, currency, description, groupBy, intl, onCostDistributionSelected, onCostTypeSelected, onCurrencySelected, query, showCostDistribution, showCostType, tabs, tagReportPathsType, title, } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'payer_tenant_id' ||\n            groupBy === 'project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.breakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            this.getBackToLink(groupByKey)))),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.breakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostDistribution && (React.createElement(\"div\", { style: styles.costDistribution },\n                        React.createElement(CostDistribution, { costDistribution: costDistribution, onSelect: onCostDistributionSelected }))),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: onCostTypeSelected, costType: costType })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getTotalCostDateRangeString(intl.formatMessage(messages.groupByValuesTitleCase, { value: groupByKey, count: 2 }))))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    return {\n        isOptimizationsPath: queryFromRoute.optimizationsPath !== undefined,\n    };\n});\nconst mapDispatchToProps = {\n// TDB\n};\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(BreakdownHeader)));\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { handleCostDistributionSelected, handleCostTypeSelected, handleCurrencySelected, } from 'routes/views/utils/handles';\nimport { hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { FetchStatus } from 'store/common';\nimport { withRouter } from 'utils/router';\nimport { styles } from './breakdown.styles';\nimport BreakdownHeader from './breakdownHeader';\n// eslint-disable-next-line no-shadow\nvar BreakdownTab;\n(function (BreakdownTab) {\n    BreakdownTab[\"costOverview\"] = \"cost-overview\";\n    BreakdownTab[\"historicalData\"] = \"historical-data\";\n    BreakdownTab[\"optimizations\"] = \"optimizations\";\n})(BreakdownTab || (BreakdownTab = {}));\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case BreakdownTab.costOverview:\n            return 'cost-overview';\n        case BreakdownTab.historicalData:\n            return 'historical-data';\n        case BreakdownTab.optimizations:\n            return 'optimizations';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: this.props.isOptimizationsTab ? 2 : 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { costOverviewComponent, historicalDataComponent, isRosFeatureEnabled, optimizationsBadgeComponent, optimizationsComponent, } = this.props;\n            const availableTabs = [];\n            if (costOverviewComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.costOverview,\n                });\n            }\n            if (historicalDataComponent) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.historicalData,\n                });\n            }\n            if (optimizationsComponent && isRosFeatureEnabled) {\n                availableTabs.push({\n                    badge: optimizationsBadgeComponent,\n                    contentRef: React.createRef(),\n                    tab: BreakdownTab.optimizations,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, badge, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(React.Fragment, null,\n                    React.createElement(TabTitleText, null, this.getTabTitle(tab)),\n                    badge && React.createElement(\"span\", null, badge)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent, optimizationsComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === BreakdownTab.costOverview) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === BreakdownTab.historicalData) {\n                return historicalDataComponent;\n            }\n            else if (currentTab === BreakdownTab.optimizations) {\n                return optimizationsComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, val.badge, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === BreakdownTab.costOverview) {\n                return intl.formatMessage(messages.breakdownCostOverviewTitle);\n            }\n            else if (tab === BreakdownTab.historicalData) {\n                return intl.formatMessage(messages.breakdownHistoricalDataTitle);\n            }\n            else if (tab === BreakdownTab.optimizations) {\n                return intl.formatMessage(messages.optimizations);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.handleTabClick = (event, tabIndex) => {\n            const { closeOptimizationsDrawer } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    if (closeOptimizationsDrawer) {\n                        closeOptimizationsDrawer();\n                    }\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, reportQueryString, router } = this.props;\n        const newQuery = prevProps.reportQueryString !== reportQueryString;\n        const noReport = !report && !reportError;\n        const noLocation = !router.location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { costDistribution, costType, currency, description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, router, showCostDistribution, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.inProgress && reportFetchStatus === FetchStatus.inProgress) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === FetchStatus.complete && reportFetchStatus === FetchStatus.complete) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === FetchStatus.complete;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { costDistribution: costDistribution, costType: costType, currency: currency, description: description, detailsURL: detailsURL, groupBy: groupBy, onCostDistributionSelected: value => handleCostDistributionSelected(query, router, value), onCostTypeSelected: value => handleCostTypeSelected(query, router, value), onCurrencySelected: value => handleCurrencySelected(query, router, value), query: query, report: report, showCostDistribution: showCostDistribution, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nconst Breakdown = injectIntl(withRouter(BreakdownBase));\nexport default Breakdown;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { clusters = [] } = this.props;\n        if (clusters.length === 0) {\n            return null;\n        }\n        return clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { clusters, isOpen } = this.props;\n        return nextProps.clusters !== clusters || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { clusters, groupBy, intl, isOpen, title } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsClustersModalTitle, {\n                groupBy,\n                name: title,\n            }), width: '50%' },\n            React.createElement(ClusterContent, { clusters: clusters })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import { Tooltip } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, intl, report, title } = this.props;\n        const { isOpen, showAll } = this.state;\n        const maxCharsPerName = 45; // Max (non-whitespace) characters that fit without overlapping card\n        const maxItems = 2; // Max items to show before adding \"more\" link\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        // Get clusters from all projects -- see https://issues.redhat.com/browse/COST-3371\n        const clusters = [];\n        computedItems.map(item => {\n            if (item.clusters) {\n                item.clusters.map(cluster => {\n                    if (!clusters.includes(cluster)) {\n                        clusters.push(cluster);\n                    }\n                });\n            }\n        });\n        if (clusters.length === 0) {\n            return null;\n        }\n        // Sort clusters from multiple projects\n        clusters.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n        for (const cluster of clusters) {\n            let clusterString = someClusters.length > 0 ? `, ${cluster}` : cluster;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (someClusters.length < maxItems) {\n                if (clusterString.length > maxCharsPerName) {\n                    clusterString = clusterString.slice(0, maxCharsPerName).trim().concat('...');\n                    someClusters.push(React.createElement(Tooltip, { content: cluster, enableFlip: true },\n                        React.createElement(\"span\", null, clusterString)));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", { \"data-testid\": \"cluster-lnk\", href: \"#/\", onClick: this.handleOpen }, intl.formatMessage(messages.detailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { clusters: clusters, groupBy: groupBy, isOpen: isOpen, onClose: this.handleClose, title: title })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport default Cluster;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 475,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.markupTitle);\n        const rawLabel = intl.formatMessage(messages.rawCostTitle);\n        const usageLabel = intl.formatMessage(messages.usageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 80, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costBreakdownAriaDesc), ariaTitle: intl.formatMessage(messages.costBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport default CostChart;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 525,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { FetchStatus } from 'store/common';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costDistributionChart.styles';\nclass CostDistributionChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { name, report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasPlatformDistributed = hasCost && report.meta.total.cost.platform_distributed;\n        const hasWorkerUnallocated = hasCost && report.meta.total.cost.worker_unallocated_distributed;\n        const hasCostPlatformDistributed = hasCost && report.meta.total.cost.platform_distributed;\n        const hasCostTotal = hasCost && report.meta.total.cost.total;\n        const platformDistributedUnits = hasPlatformDistributed ? report.meta.total.cost.platform_distributed.units : 'USD';\n        const workerUnallocatedUnits = hasWorkerUnallocated\n            ? report.meta.total.cost.worker_unallocated_distributed.units\n            : 'USD';\n        const totalCostUnits = hasCostTotal ? report.meta.total.cost.total.units : 'USD';\n        const platformDistributedValue = hasPlatformDistributed ? report.meta.total.cost.platform_distributed.value : 0;\n        const workerUnallocatedValue = hasWorkerUnallocated\n            ? report.meta.total.cost.worker_unallocated_distributed.value\n            : 0;\n        const totalCostValue = hasCostPlatformDistributed ? report.meta.total.cost.total.value : 0;\n        const platformDistributed = formatCurrency(hasPlatformDistributed ? report.meta.total.cost.platform_distributed.value : 0, platformDistributedUnits);\n        const workerUnallocated = formatCurrency(hasWorkerUnallocated ? report.meta.total.cost.worker_unallocated_distributed.value : 0, workerUnallocatedUnits);\n        const totalCost = formatCurrency(totalCostValue, totalCostUnits);\n        const platformDistributedLabel = intl.formatMessage(messages.platformDistributed);\n        const workerUnallocatedLabel = intl.formatMessage(messages.workerUnallocated);\n        const totalCostLabel = intl.formatMessage(messages.allOtherProjectCosts);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 30, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [platformDistributed, workerUnallocated, totalCost] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.costDistributionAriaDesc), ariaTitle: intl.formatMessage(messages.costDistributionTitle), constrainToVisibleArea: true, data: [\n                { x: platformDistributedLabel, y: platformDistributedValue, units: platformDistributedUnits },\n                { x: workerUnallocatedLabel, y: workerUnallocatedValue, units: workerUnallocatedUnits },\n                { x: totalCostLabel, y: totalCostValue, units: totalCostUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.costBreakdownTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: platformDistributedLabel,\n                },\n                {\n                    name: workerUnallocatedLabel,\n                },\n                {\n                    name: totalCostLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", name: name, padding: {\n                bottom: 20,\n                left: 0,\n                right: 325,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostDistributionChart = injectIntl(CostDistributionChartBase);\nexport default CostDistributionChart;\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { styles } from './summaryModal.styles';\nconst reportType = ReportType.cost;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { costDistribution, intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost[costDistribution].value : 0, hasTotal ? report.meta.total.cost[costDistribution].units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.detailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost[costDistribution].value, units: report.meta.total.cost[costDistribution].units, value: _item.cost[costDistribution].value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const reportQuery = {\n        cost_type: costType,\n        currency,\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase)));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { costDistribution, costType, currency, groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.detailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { costDistribution: costDistribution, costType: costType, currency: currency, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ReportSummaryItem, ReportSummaryItems } from 'routes/views/components/reports/reportSummary';\nimport { SummaryModal } from 'routes/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { costDistribution, report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost[costDistribution].value, units: report.meta.total.cost[costDistribution].units, value: reportItem.cost[costDistribution].value })))));\n        };\n        this.getViewAll = () => {\n            const { costDistribution, costType, currency, groupBy, intl, isPlatformCosts, query, reportGroupBy, reportPathsType, } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, { ouiaId: \"view-all-btn\", onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }, intl.formatMessage(messages.detailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { costDistribution: costDistribution, costType: costType, currency: currency, groupBy: groupBy, groupByValue: isPlatformCosts ? platformCategoryKey : groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, currency, fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== reportQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    render() {\n        const { intl, isPlatformCosts, reportGroupBy, reportFetchStatus } = this.props;\n        const title = intl.formatMessage(messages.breakdownSummaryTitle, {\n            value: isPlatformCosts ? platformCategoryKey.toLowerCase() : reportGroupBy,\n        });\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, title)),\n            React.createElement(CardBody, null, reportFetchStatus === FetchStatus.inProgress ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportGroupBy, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        cost_type: costType,\n        currency,\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupBy && groupByValue !== '*' && { [groupBy]: groupByValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(SummaryBase)));\nexport default SummaryCard;\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getResizeObserver } from 'routes/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, name, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, name: name, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        fetchReport(reportPathsType, reportType, reportQueryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportPathsType, reportType, reportQueryString } = this.props;\n        if (prevProps.reportQueryString !== this.props.reportQueryString) {\n            fetchReport(reportPathsType, reportType, reportQueryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { groupBy, report, intl, reportType } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.detailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        // Qualitative range included when grouped by cluster and volume usage\n        if (groupBy === 'cluster' || reportType === ReportType.volume) {\n            const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n            const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n            const capacityUnits = intl.formatMessage(messages.units, {\n                units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n            });\n            datum.ranges = [\n                {\n                    legend: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    tooltip: intl.formatMessage(messages.detailsUsageCapacity, {\n                        value: capacity,\n                        units: capacityUnits,\n                    }),\n                    value: Math.trunc(capacity),\n                },\n            ];\n        }\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.detailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.capacity && report.meta.total.capacity !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.detailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const query = Object.assign({}, queryFromRoute);\n    const reportQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const reportQueryString = getQuery(reportQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, reportQueryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, reportQueryString);\n    return {\n        groupBy,\n        query,\n        report,\n        reportFetchStatus,\n        reportQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase)));\nexport default UsageChart;\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Cluster } from 'routes/views/details/components/cluster';\nimport { CostChart } from 'routes/views/details/components/costChart';\nimport { CostDistributionChart } from 'routes/views/details/components/costDistributionChart';\nimport { SummaryCard } from 'routes/views/details/components/summary';\nimport { UsageChart } from 'routes/views/details/components/usageChart';\nimport { styles } from 'routes/views/details/ocpDetails/detailsHeader.styles';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { CostOverviewWidgetType } from 'store/breakdown/costOverview/common/costOverviewCommon';\nimport { platformCategoryKey, tagPrefix } from 'utils/props';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, intl, report, title } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report, title: title }))));\n            }\n            else {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.rawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.rawCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.usageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.usageCostDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.markupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.markupDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns cost distribution chart\n        this.getCostDistributionChart = (widget) => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.costDistributionTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.costDistributionAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.platformDistributed)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.platformDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.workerUnallocated)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.workerUnallocatedDesc)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.docsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.learnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostDistributionChart, { name: widget.chartName, report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.cpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.memoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costDistribution, costType, currency, groupBy, isPlatformCosts, query } = this.props;\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTag = getGroupByTagKey(query);\n            let showWidget = false;\n            if (widget.reportSummary.showWidgetOnGroupBy) {\n                for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                    if (groupById === groupBy || groupByOrg || groupByTag) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (!showWidget && widget.reportSummary.showWidgetOnCategory) {\n                for (const categoryId of widget.reportSummary.showWidgetOnCategory) {\n                    if (isPlatformCosts && categoryId === platformCategoryKey) {\n                        showWidget = true;\n                        break;\n                    }\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costDistribution: costDistribution, costType: costType, currency: currency, isPlatformCosts: isPlatformCosts, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Returns volume usage chart\n        this.getVolumeUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.volumeTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { name: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case CostOverviewWidgetType.cluster:\n                return this.getClusterChart(widget);\n            case CostOverviewWidgetType.cost:\n                return this.getCostChart(widget);\n            case CostOverviewWidgetType.costDistribution:\n                return this.getCostDistributionChart(widget);\n            case CostOverviewWidgetType.cpuUsage:\n                return this.getCpuUsageChart(widget);\n            case CostOverviewWidgetType.memoryUsage:\n                return this.getMemoryUsageChart(widget);\n            case CostOverviewWidgetType.reportSummary:\n                return this.getSummaryCard(widget);\n            case CostOverviewWidgetType.volumeUsage:\n                return this.getVolumeUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { xl: 12, xl2: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport default CostOverviewBase;\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getDateRange } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, previousCostData } = this.props;\n            const costKey = messages.chartCostLegendLabel;\n            const costTooltipKey = messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.chartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 725 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 725\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport default HistoricalCostChart;\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalCostChart } from 'routes/views/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, costDistribution, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl, } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, DatumType.cumulative, 'date', 'cost', costDistribution);\n        const currentInfrastructureCostData = transformReport(currentReport, DatumType.cumulative, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, DatumType.cumulative, 'date', 'cost', costDistribution);\n        const previousInfrastructureCostData = transformReport(previousReport, DatumType.cumulative, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost[costDistribution].units\n            : 'USD';\n        const test = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.historicalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase)));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getCostRangeString, getCostRangeTooltip, getDateRange, } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.chartUsageLegendLabel : messages.chartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.chartUsageLegendTooltip : messages.chartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeTooltip(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, intl, name, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport default HistoricalTrendChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalTrendChart } from 'routes/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currency, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString ||\n            prevProps.costType !== costType ||\n            prevProps.currency !== currency) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl, } = this.props;\n        const isCostChart = reportType === ReportType.cost;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? DatumType.cumulative : DatumType.rolling, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.currencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.historicalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.historicalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, name: chartName, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(queryFromRoute);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(queryFromRoute);\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { cost_type: costType, currency, filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase)));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeTooltip } from 'routes/views/components/charts/common/chartDatum';\nimport { getUsageRangeString } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.chartLimitLegendLabel;\n            const limitTooltipKey = messages.chartLimitLegendTooltip;\n            const requestKey = messages.chartRequestsLegendLabel;\n            const requestTooltipKey = messages.chartRequestsLegendTooltip;\n            const usageKey = messages.chartUsageLegendLabel;\n            const usageTooltipKey = messages.chartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.chartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.chartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeTooltip(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.chartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeTooltip(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow, name = '' } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 925 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: `${name}-legend` }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { name = '' } = this.props;\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: `${name}-legend`,\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, intl, name, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 925\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"historical-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", name: name, padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport default HistoricalUsageChart;\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery, parseQueryState } from 'api/queries/query';\nimport { ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DatumType, transformReport } from 'routes/views/components/charts/common/chartDatum';\nimport { HistoricalUsageChart } from 'routes/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps, FetchStatus } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { logicalAndPrefix, logicalOrPrefix, orgUnitIdKey, platformCategoryKey } from 'utils/props';\nimport { withRouter } from 'utils/router';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { chartName, currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, DatumType.rolling, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, DatumType.rolling, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, DatumType.rolling, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, DatumType.rolling, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, DatumType.rolling, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, DatumType.rolling, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === FetchStatus.inProgress &&\n                previousReportFetchStatus === FetchStatus.inProgress ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, name: chartName, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.historicalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType, router }) => {\n    const queryFromRoute = parseQuery(router.location.search);\n    const queryState = parseQueryState(queryFromRoute);\n    const groupByOrgValue = getGroupByOrgValue(queryFromRoute);\n    const groupBy = getGroupById(queryFromRoute);\n    const groupByValue = getGroupByValue(queryFromRoute);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === ReportType.instanceType || reportType === ReportType.storage;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (queryState && queryState.filter_by && queryState.filter_by)), (queryFromRoute && queryFromRoute.isPlatformCosts && { category: platformCategoryKey })), (queryFromRoute &&\n            queryFromRoute.filter &&\n            queryFromRoute.filter.account && { [`${logicalAndPrefix}account`]: queryFromRoute.filter.account })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })), (queryState &&\n            queryState.filter_by &&\n            queryState.filter_by[orgUnitIdKey] && {\n            [`${logicalOrPrefix}${orgUnitIdKey}`]: queryState.filter_by[orgUnitIdKey],\n            [orgUnitIdKey]: undefined,\n        })),\n        exclude: Object.assign({}, (queryState && queryState.exclude && queryState.exclude)),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    // Current report\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const currentQueryString = getQuery(currentQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        }, filter_by: Object.assign(Object.assign({}, baseQuery.filter_by), (groupBy && groupByValue !== '*' && { [groupBy]: undefined })) });\n    const previousQueryString = getQuery(previousQuery);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase)));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport { ReportPathsType, ReportType } from 'api/reports/report';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataWidgetType } from 'store/breakdown/historicalData/common/historicalDataCommon';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTitleKey = (reportPathsType, reportType) => {\n            if (reportPathsType === ReportPathsType.azure) {\n                return reportType === ReportType.instanceType ? 'virtual_machine' : reportType;\n            }\n            return reportType === ReportType.instanceType ? 'instance_type' : reportType;\n        };\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costDistribution, costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { chartName: widget.chartName, costDistribution: costDistribution, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costDistribution, costType, currency, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { chartName: widget.chartName, costDistribution: costDistribution, costType: costType, currency: currency, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.historicalChartTitle, {\n                        value: this.getTitleKey(widget.reportPathsType, widget.reportType),\n                    }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { chartName: widget.chartName, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case HistoricalDataWidgetType.cost:\n                return this.getCostChart(widget);\n            case HistoricalDataWidgetType.trend:\n                return this.getTrendChart(widget);\n            case HistoricalDataWidgetType.usage:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport default HistoricalDataBase;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costDistribution: {\n        display: 'flex',\n        marginLeft: global_spacer_lg.var,\n    },\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n"],"names":["styles","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","marginBottom","tagLink","marginLeft","global_spacer_sm","tagsContainer","marginRight","global_spacer_3xl","marginTop","TagContentBase","constructor","super","arguments","this","getDataListItems","tagReport","props","result","item","data","val","values","id","key","push","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","render","groupBy","groupByValue","intl","dataListItems","style","formatMessage","messages","value","count","DataList","isCompact","map","TagContent","injectIntl","connect","tagReportType","TagModalBase","getTagValueCount","length","handleClose","onClose","bind","componentDidMount","fetchTag","tagReportPathsType","tagQueryString","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","isOpen","query","filter","account","Modal","title","width","isPlatformCosts","mapStateToProps","state","router","queryFromRoute","location","search","queryState","groupByOrgValue","filterByParams","filter_by","Object","keys","indexOf","undefined","assign","tagQuery","resolution","time_scope_units","time_scope_value","category","tagReportFetchStatus","mapDispatchToProps","TagModal","TagLinkBase","defaultState","setState","handleOpen","event","preventDefault","Boolean","href","onClick","cost","global_spacer_xl","costDistribution","global_spacer_md","costLabel","global_spacer_xs","costValue","textAlign","costLabelDate","costType","header","backgroundColor","global_BackgroundColor_100","headerContent","display","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeader","buildDetailsLink","url","isOptimizationsPath","groupByKey","window","atob","newQuery","JSON","parse","group_by","getBackToLink","detailsURL","Link","to","routes","getTotalCost","report","hasCost","meta","total","format","units","currency","description","onCostDistributionSelected","onCostTypeSelected","onCurrencySelected","showCostDistribution","showCostType","filterByAccount","groupByOrg","groupByTag","showTags","className","onSelect","Title","headingLevel","size","TitleSizes","optimizationsPath","BreakdownTab","getIdKeyForTab","tab","costOverview","historicalData","optimizations","BreakdownBase","activeTabKey","isOptimizationsTab","getAvailableTabs","costOverviewComponent","historicalDataComponent","isRosFeatureEnabled","optimizationsBadgeComponent","optimizationsComponent","availableTabs","contentRef","badge","getTab","index","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","TabContent","ref","getTabItem","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","tabIndex","closeOptimizationsDrawer","updateReport","fetchReport","reportPathsType","reportType","reportQueryString","reportError","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","reportFetchStatus","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","modal","height","subTitle","ClusterModalBase","name","ClusterModal","ClusterBase","showAll","someClusters","allClusters","computedItems","getComputedReportItems","idKey","includes","sort","a","b","clusterString","slice","trim","concat","Tooltip","enableFlip","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","_a","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","CostDistributionChartBase","hasPlatformDistributed","platform_distributed","hasWorkerUnallocated","worker_unallocated_distributed","hasCostPlatformDistributed","hasCostTotal","platformDistributedUnits","workerUnallocatedUnits","totalCostUnits","platformDistributedValue","workerUnallocatedValue","totalCostValue","platformDistributed","workerUnallocated","totalCost","platformDistributedLabel","workerUnallocatedLabel","totalCostLabel","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","items","_item","formatOptions","label","toString","totalValue","reportQuery","cost_type","exclude","SummaryModalContent","SummaryModalBase","variant","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","Button","ouiaId","handleBulletChartModalOpen","type","ButtonType","ButtonVariant","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","limit","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasCapacity","capacityUnits","hasRequest","request","requestUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","bodyContent","rel","target","chartName","getCostDistributionChart","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","showWidgetOnCategory","categoryId","usePlaceholder","getVolumeUsageChart","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","xl2","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","endDate","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTitleKey","getTrendChart","getUsageChart","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle"],"sourceRoot":""}