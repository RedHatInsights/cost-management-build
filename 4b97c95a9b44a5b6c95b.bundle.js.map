{"version":3,"sources":["webpack://koku-ui/./src/pages/views/details/ocpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/ocpBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedOcpReportItems.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","withTranslation","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","project","cluster","node","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","super","arguments","this","defaultState","onGroupByClicked","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","formatValue","units","style","Title","headingLevel","size","isDisabled","onItemClicked","options","showTags","Boolean","Tooltip","content","enableFlip","Popover","bodyContent","Button","variant","ButtonVariant","DetailsHeader","styles","emptyState","backgroundColor","global_BackgroundColor_light_100","display","justifyContent","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getSupplementaryCost","getTotalCost","actions","getActions","name","Link","to","basePath","toString","id","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","setState","sortBy","showPriceListOption","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","percentValue","toFixed","key","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","ininfoArrow","getSortBy","direction","SortByDirection","order_by","c","column","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","option","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","showBulkSelect","showExport","showFilter","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","paddingBottom","global_spacer_lg","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","padding","global_spacer_md","tableContainer","limit","offset","OcpDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","showTimeScope","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"mappings":"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","file":"4b97c95a9b44a5b6c95b.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.ocp_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"ocp\" /* ocp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"ocp\" /* ocp */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import OcpBreakdown from './ocpBreakdown';\nexport default OcpBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Button, ButtonVariant, Popover, Title, Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = \"ocp\" /* ocp */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatValue(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('ocp_details.title')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('dashboard.total_cost_tooltip', {\n                            supplementaryCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit },\n                        t('cost'),\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('ocp_details.supplementary_cost')),\n                                    React.createElement(\"p\", null, t('ocp_details.supplementary_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('ocp_details.infrastructure_cost')),\n                                    React.createElement(\"p\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './detailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"ocp\" /* ocp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('details.tag_names'),\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        title: t('ocp_details.infrastructure_cost'),\n                    },\n                    {\n                        title: t('ocp_details.supplementary_cost'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost'),\n                    },\n                    {\n                        orderBy: 'supplementary_cost',\n                        title: t('ocp_details.supplementary_cost'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ocpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupById,\n                        query,\n                    }) }, label));\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, InfrastructureCost) },\n                        { title: React.createElement(\"div\", null, supplementaryCost) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 7 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, item: item, providerType: \"ocp\" /* ocp */, query: query, reportPathsType: reportPathsType, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"ocp\" /* ocp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                { name: t('filter_by.values.cluster'), key: 'cluster' },\n                { name: t('filter_by.values.node'), key: 'node' },\n                { name: t('filter_by.values.project'), key: 'project' },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType, showTimeScope: true }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.ocp_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"ocp\" /* ocp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n","import OcpDetails from './ocpDetails';\nexport default OcpDetails;\n"],"sourceRoot":""}