{"version":3,"file":"7b0cb3ccbd8d07af8c8e.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/pages/views/details/components/breakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx","webpack://koku-ui/./src/pages/views/explorer/index.ts","webpack://koku-ui/./node_modules/victory-stack/es/helper-methods.js","webpack://koku-ui/./node_modules/victory-stack/es/victory-stack.js"],"sourcesContent":["import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getSelect()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.AzureDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers: filterProviders(providers, \"azure\" /* azure */),\n        providersError,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport { Currency } from 'pages/components/currency';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isFeatureVisible } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.AzureDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isFeatureVisible(\"currency\" /* currency */) && React.createElement(Currency, null),\n                    isFeatureVisible(\"exports\" /* exports */) && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"azure\" /* azure */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { EmptyFilterState } from 'pages/components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'pages/components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.AzureDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"azure\" /* azure */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReportFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.AzureDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"azure\" /* azure */),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","import BreakdownBase from './breakdownBase';\nexport default BreakdownBase;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.gcp_project) {\n        return 'gcp_project';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getMaxValue } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrencyAbbreviation } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // If bar width exceeds max and domainPadding is true, extra width is returned to help center bars horizontally\n        this.getBarWidth = (domainPadding = false) => {\n            const { hiddenSeries, series, width } = this.state;\n            const maxWidth = 200;\n            let maxValue = -1;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        if (s.data.length > maxValue) {\n                            maxValue = s.data.length;\n                        }\n                    }\n                });\n            }\n            // Divide available width into equal sections\n            const sections = maxValue * 2 + 1;\n            const sectionWidth = maxValue > 0 ? width / sections : 0;\n            if (domainPadding) {\n                // Add any extra bar width for domain padding\n                const extraWidth = sectionWidth > maxWidth ? (sectionWidth - maxWidth) * maxValue : 0;\n                return (sectionWidth + extraWidth / 2) * 2;\n            }\n            return sectionWidth > maxWidth ? maxWidth : sectionWidth;\n        };\n        this.getChart = (series, index, barWidth) => {\n            const { hiddenSeries } = this.state;\n            const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n            return (React.createElement(ChartBar, { barWidth: barWidth, data: data, key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            const modVal = values.length < 6 ? 2 : 3;\n            for (let i = 0; i < values.length; i++) {\n                if (i % modVal === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n                else if (values.length < 3 && i + 1 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 50,\n            left: 40,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        const barWidth = this.getBarWidth();\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), domainPadding: { x: this.getBarWidth(true) }, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index, barWidth)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues(), fixLabelOverlap: true }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nconst CostExplorerChart = injectIntl(CostExplorerChartBase);\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { hasCloudProvider } from 'pages/views/utils/providers';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate, getLast90DaysDate } from 'utils/dateRange';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: messages.ExplorerDateRange, value: 'current_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'previous_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'last_thirty_days' },\n    { label: messages.ExplorerDateRange, value: 'last_sixty_days' },\n    { label: messages.ExplorerDateRange, value: 'last_ninety_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByGcpOcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nexport const infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nexport const infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OpenShift options\nexport const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OpenShift options\nexport const infrastructureIbmOcpOptions = [{ label: messages.PerspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nexport const infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nexport const ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift supplementary & usage\" perspectives -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift usage\" perspective -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"total\" /* total */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_ninety_days\" /* lastNinetyDays */:\n            dateRange = getLast90DaysDate();\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, queryFromRoute, userAccess, }) => {\n    const perspective = queryFromRoute.perspective;\n    // Upon page refresh, perspective param takes precedence\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n        case \"ibm_ocp\" /* ibmOcp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            return perspective;\n    }\n    if (isOcpAvailable(userAccess, ocpProviders)) {\n        return \"ocp\" /* ocp */;\n    }\n    const hasAwsCloud = hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n    const hasAzureCloud = hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n    const hasGcpCloud = hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n    const hasIbmCloud = hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n    if (hasAwsCloud || hasAzureCloud || hasGcpCloud || hasIbmCloud) {\n        return \"ocp_cloud\" /* ocpCloud */;\n    }\n    if (isAwsAvailable(userAccess, awsProviders)) {\n        return \"aws\" /* aws */;\n    }\n    if (isAzureAvailable(userAccess, azureProviders)) {\n        return \"azure\" /* azure */;\n    }\n    if (isGcpAvailable(userAccess, gcpProviders)) {\n        return \"gcp\" /* gcp */;\n    }\n    if (isIbmAvailable(userAccess, ibmProviders)) {\n        return \"ibm\" /* ibm */;\n    }\n    return undefined;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = groupByGcpOcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            result = \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            result = \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n        case \"ibm\" /* ibm */:\n            return \"ibm\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","import { Skeleton, Title } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { isFloat, isInt, } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'pages/views/components/charts/costExplorerChart';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { intl } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = intl.formatMessage(messages.ExplorerChartDate, {\n                date: getDate(computedItemDate),\n                month: getMonth(computedItemDate),\n            });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return Object.assign(Object.assign({ x: xVal, y: value === null ? null : yVal }, (value === null && { _y: 0 })), { date: computedItem.date, key: computedItem.id, name: computedItem.label ? computedItem.label : computedItem.id, units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined });\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            if (perspective) {\n                const reportPathsType = getReportPathsType(perspective);\n                const reportType = getReportType(perspective);\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const label = datums[0].name;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key, label }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, intl } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.ExplorerChartTitle, { value: perspective }))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = Object.assign({ filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }), filter_by: queryFromRoute.filter_by || baseQuery.filter_by, group_by: groupBy, perspective,\n        dateRange,\n        start_date,\n        end_date }, (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = injectIntl(withRouter(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currentItem, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"dateRangeSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst DateRange = injectIntl(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, intl, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: option.label }),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            this.setState({ currentDateRange: value }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportPathsType, tagQueryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgQueryString, orgReport, orgReportPathsType, perspective, query, tagQueryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, resourcePathsType, tagReport, tagReportPathsType, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, resourcePathsType: resourcePathsType, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    }\n    // Fetch tags with largest date range available\n    const { start_date, end_date } = getLast60DaysDate();\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery({\n        start_date,\n        end_date,\n        key_only: true,\n    });\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    }\n    return {\n        dateRange,\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilterConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase);\nconst ExplorerFilter = injectIntl(withRouter(ExplorerFilterConnect));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport { Currency } from 'pages/components/currency';\nimport { CostType } from 'pages/views/components/costType';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport { filterProviders, hasCloudProvider } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isFeatureVisible } from 'utils/feature';\nimport { getCostType } from 'utils/localStorage';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getResourcePathsType, getRouteForQuery, getTagReportPathsType, infrastructureAwsOcpOptions, infrastructureAwsOptions, infrastructureAzureOcpOptions, infrastructureAzureOptions, infrastructureGcpOcpOptions, infrastructureGcpOptions, infrastructureIbmOcpOptions, infrastructureIbmOptions, infrastructureOcpCloudOptions, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPerspective = (isDisabled) => {\n            const { currentPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOcp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (hasOcp) {\n                options.push(...ocpOptions);\n            }\n            if (this.isOcpCloudAvailable()) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            if (hasAws) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (this.isAwsOcpAvailable()) {\n                options.push(...infrastructureAwsOcpOptions);\n            }\n            if (hasGcp) {\n                options.push(...infrastructureGcpOptions);\n            }\n            if (isFeatureVisible(\"gcp_ocp\" /* gcpOcp */) && this.isGcpOcpAvailable()) {\n                options.push(...infrastructureGcpOcpOptions);\n            }\n            if (hasIbm) {\n                options.push(...infrastructureIbmOptions);\n            }\n            // Todo: Show in-progress features in beta environment only\n            if (isFeatureVisible(\"ibm\" /* ibm */) && this.isIbmOcpAvailable()) {\n                options.push(...infrastructureIbmOcpOptions);\n            }\n            if (hasAzure) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (this.isAzureOcpAvailable()) {\n                options.push(...infrastructureAzureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onSelected: this.handlePerspectiveSelected, options: options }));\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: undefined, perspective: value }), (value === \"aws\" /* aws */ && { cost_type: getCostType() }));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(getRouteForQuery(history, newQuery, false)); // Don't reset pagination\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.props.perspective,\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { perspective } = this.props;\n        if (prevProps.perspective !== perspective) {\n            this.setState({\n                currentPerspective: this.props.perspective,\n            });\n        }\n    }\n    render() {\n        const { groupBy, intl, onFilterAdded, onFilterRemoved, onGroupBySelected, perspective, providersFetchStatus, query, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const resourcePathsType = getResourcePathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        // Fetch tags with largest date range available\n        const { start_date, end_date } = getLast60DaysDate();\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ExplorerTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isFeatureVisible(\"currency\" /* currency */) && React.createElement(Currency, null),\n                    isFeatureVisible(\"exports\" /* exports */) && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.perspectiveContainer },\n                this.getPerspective(noProviders),\n                React.createElement(\"div\", { style: styles.groupBy },\n                    React.createElement(GroupBy, { endDate: end_date, getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, startDate: start_date, tagReportPathsType: tagReportPathsType })),\n                perspective === \"aws\" /* aws */ && (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { onSelect: this.handleCostTypeSelected })))),\n            React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, perspective: perspective, query: query, resourcePathsType: resourcePathsType })));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = Object.assign({ filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), filter_by: queryFromRoute.filter_by || baseQuery.filter_by, group_by: groupBy, order_by: queryFromRoute.order_by, perspective,\n        dateRange,\n        start_date,\n        end_date }, (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    return {\n        awsProviders: filterProviders(providers, \"aws\" /* aws */),\n        azureProviders: filterProviders(providers, \"azure\" /* azure */),\n        gcpProviders: filterProviders(providers, \"gcp\" /* gcp */),\n        ibmProviders: filterProviders(providers, \"ibm\" /* ibm */),\n        ocpProviders: filterProviders(providers, \"ocp\" /* ocp */),\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = injectIntl(withRouter(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { EmptyFilterState } from 'pages/components/state/emptyFilterState/emptyFilterState';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, intl, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.Names, { count: 2 })\n                            : intl.formatMessage(messages.TagNames),\n                    },\n                ]\n                : [\n                    Object.assign({ cellTransforms: [nowrap], date: undefined, orderBy: groupById === 'account' && perspective === \"aws\" /* aws */ ? 'account_alias' : groupById, title: intl.formatMessage(messages.GroupByValueNames, { groupBy: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                ];\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                let isSortable = computedItems.length > 0;\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        isSortable = false;\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push(Object.assign({ cellTransforms: [nowrap], title: intl.formatMessage(messages.ExplorerChartDate, { date, month }) }, (isSortable && {\n                    date: mapId,\n                    orderBy: 'cost',\n                    transforms: [sortable],\n                })));\n            }\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[reportItem] && item[reportItem][reportItemValue]\n                            ? formatCurrency(item[reportItem][reportItemValue].value, item[reportItem][reportItemValue].units)\n                            : intl.formatMessage(messages.ChartNoData),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            if (query && query.order_by) {\n                for (const key of Object.keys(query.order_by)) {\n                    let c = 0;\n                    for (const column of columns) {\n                        if (column.orderBy === key && !column.date) {\n                            direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        else if (column.date === query.order_by[key]) {\n                            direction = query.order_by.cost === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        c++;\n                    }\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const column = columns[index - 1];\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(column.orderBy, column.date, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.ExplorerTableAriaLabel), canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = injectIntl(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTagReportPathsType } from './explorerUtils';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, perspective, selectedItems, } = this.props;\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = injectIntl(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { filterProviders, hasData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getComputedReportItemValueType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false, // Don't use daily here, so we can use a flattened data structure with row selection\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\", showTimeScope: false }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { perspective, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), perspective: perspective, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, date, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            if (date) {\n                newQuery.order_by.date = date;\n            }\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: query ? query.order_by : undefined,\n                    dateRange, // Preserve date range\n                }));\n            }\n            else if (perspective) {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, perspective, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newPerspective = prevProps.perspective !== perspective;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newPerspective || newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, intl, ocpProviders, providersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const isLoading = providersFetchStatus === 1 /* inProgress */ || userAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = intl.formatMessage(messages.ExplorerTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupBySelected: this.handleGroupBySelected, onPerspectiveClicked: this.handlePerspectiveClick, perspective: perspective }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), perspective: perspective })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const awsProviders = filterProviders(providers, \"aws\" /* aws */);\n    const azureProviders = filterProviders(providers, \"azure\" /* azure */);\n    const gcpProviders = filterProviders(providers, \"gcp\" /* gcp */);\n    const ibmProviders = filterProviders(providers, \"ibm\" /* ibm */);\n    const ocpProviders = filterProviders(providers, \"ocp\" /* ocp */);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    // Cost Report\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const perspective = getPerspectiveDefault({\n        awsProviders,\n        azureProviders,\n        gcpProviders,\n        ibmProviders,\n        ocpProviders,\n        queryFromRoute,\n        userAccess,\n    });\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = Object.assign({ filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), filter_by: queryFromRoute.filter_by || baseQuery.filter_by, group_by: groupBy, order_by: queryFromRoute.order_by, perspective,\n        dateRange,\n        start_date,\n        end_date }, (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        awsProviders,\n        azureProviders,\n        dateRange,\n        gcpProviders,\n        ibmProviders,\n        ocpProviders,\n        perspective,\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","import Explorer from './explorer';\nexport default Explorer;\n","import _orderBy from \"lodash/orderBy\";\nimport _keys from \"lodash/keys\";\nimport _assign from \"lodash/assign\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Helpers, Scale, Wrapper } from \"victory-core\";\nimport isEqual from \"react-fast-compare\";\nvar fallbackProps = {\n  width: 450,\n  height: 300,\n  padding: 50\n}; // Assumes data in `datasets` is sorted by `Data.getData`.\n\nfunction fillData(props, datasets) {\n  var fillInMissingData = props.fillInMissingData;\n  var xMap = datasets.reduce(function (prev, dataset) {\n    dataset.forEach(function (datum) {\n      prev[datum._x instanceof Date ? datum._x.getTime() : datum._x] = true;\n    });\n    return prev;\n  }, {});\n\n  var xKeys = _keys(xMap).map(function (k) {\n    return +k;\n  });\n\n  var xArr = _orderBy(xKeys);\n\n  return datasets.map(function (dataset) {\n    var indexOffset = 0;\n    var isDate = dataset[0] && dataset[0]._x instanceof Date;\n    var filledInData = xArr.map(function (x, index) {\n      x = +x;\n      var datum = dataset[index - indexOffset];\n\n      if (datum) {\n        var x1 = isDate ? datum._x.getTime() : datum._x;\n\n        if (x1 === x) {\n          return datum;\n        } else {\n          indexOffset++;\n          var y = fillInMissingData ? 0 : null;\n          x = isDate ? new Date(x) : x;\n          return {\n            x: x,\n            y: y,\n            _x: x,\n            _y: y\n          };\n        }\n      } else {\n        var _y = fillInMissingData ? 0 : null;\n\n        x = isDate ? new Date(x) : x;\n        return {\n          x: x,\n          y: _y,\n          _x: x,\n          _y: _y\n        };\n      }\n    });\n    return filledInData;\n  });\n}\n\nfunction getY0(datum, index, datasets) {\n  if (datum.y0) {\n    return datum.y0;\n  }\n\n  var y = datum._y;\n  var group = datum._group;\n  var firstDatasetBaseline = datasets[0].map(function (d) {\n    return d.y0;\n  });\n  var previousDatasets = datasets.slice(0, index);\n  var previousPoints = previousDatasets.reduce(function (prev, dataset) {\n    return prev.concat(dataset.filter(function (previousDatum) {\n      return datum._x instanceof Date ? previousDatum._x.getTime() === datum._x.getTime() : previousDatum._x === datum._x;\n    }).map(function (previousDatum) {\n      return previousDatum._y || 0;\n    }));\n  }, []);\n  var y0 = previousPoints.length && previousPoints.reduce(function (memo, value) {\n    var sameSign = y < 0 && value < 0 || y >= 0 && value >= 0;\n    return sameSign ? +value + memo : memo;\n  }, firstDatasetBaseline[group] || 0);\n  return previousPoints.some(function (point) {\n    return point instanceof Date;\n  }) ? new Date(y0) : y0;\n}\n/* eslint-disable no-nested-ternary */\n\n\nfunction addLayoutData(props, datasets, index) {\n  var xOffset = props.xOffset || 0;\n  return datasets[index].map(function (datum) {\n    var yOffset = getY0(datum, index, datasets) || 0;\n    return _assign({}, datum, {\n      _y0: !(datum._y instanceof Date) ? yOffset : yOffset ? new Date(yOffset) : datum._y,\n      _y1: datum._y === null ? null : datum._y instanceof Date ? new Date(+datum._y + +yOffset) : datum._y + yOffset,\n      _x1: datum._x === null ? null : datum._x instanceof Date ? new Date(+datum._x + +xOffset) : datum._x + xOffset\n    });\n  });\n}\n/* eslint-enable no-nested-ternary */\n\n\nfunction stackData(props, childComponents) {\n  var dataFromChildren = Wrapper.getDataFromChildren(props, childComponents);\n  var filterNullChildData = dataFromChildren.map(function (dataset) {\n    return dataset.filter(function (datum) {\n      return datum._x !== null && datum._y !== null;\n    });\n  });\n  var datasets = fillData(props, filterNullChildData);\n  return datasets.map(function (d, i) {\n    return addLayoutData(props, datasets, i);\n  });\n}\n\nexport function getCalculatedProps(props, childComponents) {\n  childComponents = childComponents || React.Children.toArray(props.children);\n  var role = \"stack\";\n  props = Helpers.modifyProps(props, fallbackProps, role);\n  var style = Wrapper.getStyle(props.theme, props.style, role);\n  var categories = props.categories || Wrapper.getCategories(props, childComponents);\n  var datasets = props.datasets || stackData(props, childComponents);\n  var children = childComponents.map(function (c, i) {\n    return React.cloneElement(c, {\n      data: datasets[i]\n    });\n  });\n  var domain = {\n    x: Wrapper.getDomain(_assign({}, props, {\n      categories: categories\n    }), \"x\", children),\n    y: Wrapper.getDomain(_assign({}, props, {\n      categories: categories\n    }), \"y\", children)\n  };\n  var range = props.range || {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var baseScale = {\n    x: Scale.getScaleFromProps(props, \"x\") || Wrapper.getScale(props, \"x\"),\n    y: Scale.getScaleFromProps(props, \"y\") || Wrapper.getScale(props, \"y\")\n  };\n  var scale = {\n    x: baseScale.x.domain(domain.x).range(props.horizontal ? range.y : range.x),\n    y: baseScale.y.domain(domain.y).range(props.horizontal ? range.x : range.y)\n  };\n  var _props = props,\n      colorScale = _props.colorScale,\n      horizontal = _props.horizontal;\n  return {\n    datasets: datasets,\n    categories: categories,\n    range: range,\n    domain: domain,\n    horizontal: horizontal,\n    scale: scale,\n    style: style,\n    colorScale: colorScale,\n    role: role\n  };\n} // We need to remove sharedEvents in order to memoize the calculated data\n// With shared events, the props change on every event, and every value is re-calculated\n\nvar withoutSharedEvents = function (props) {\n  var children = props.children;\n  var modifiedChildren = React.Children.toArray(children).map(function (child) {\n    return _objectSpread({}, child, {\n      props: Helpers.omit(child.props, [\"sharedEvents\"])\n    });\n  });\n  props.children = modifiedChildren;\n  return props;\n};\n\nexport function useMemoizedProps(initialProps) {\n  var modifiedProps = withoutSharedEvents(initialProps);\n\n  var _React$useState = React.useState(modifiedProps),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      props = _React$useState2[0],\n      setProps = _React$useState2[1]; // React.memo uses shallow equality to compare objects. This way props\n  // will only be re-calculated when they change.\n\n\n  React.useEffect(function () {\n    if (!isEqual(modifiedProps, props)) {\n      setProps(modifiedProps);\n    }\n  }, [props, setProps, modifiedProps]);\n  return React.useMemo(function () {\n    return getCalculatedProps(props, props.children);\n  }, [props]);\n}\n\nfunction getLabels(props, datasets, index) {\n  if (!props.labels) {\n    return undefined;\n  }\n\n  return datasets.length === index + 1 ? props.labels : undefined;\n}\n\nexport function getChildProps(props, calculatedProps) {\n  var categories = calculatedProps.categories,\n      domain = calculatedProps.domain,\n      range = calculatedProps.range,\n      scale = calculatedProps.scale,\n      horizontal = calculatedProps.horizontal;\n  return {\n    height: props.height,\n    width: props.width,\n    padding: Helpers.getPadding(props),\n    standalone: false,\n    theme: props.theme,\n    categories: categories,\n    domain: domain,\n    range: range,\n    scale: scale,\n    horizontal: horizontal\n  };\n}\n\nfunction getColorScale(props, child) {\n  var role = child.type && child.type.role;\n  var colorScaleOptions = child.props.colorScale || props.colorScale;\n\n  if (role !== \"group\" && role !== \"stack\") {\n    return undefined;\n  }\n\n  return props.theme ? colorScaleOptions || props.theme.props.colorScale : colorScaleOptions;\n}\n\nexport function getChildren(props, childComponents, calculatedProps) {\n  props = Helpers.modifyProps(props, fallbackProps, \"stack\");\n  childComponents = childComponents || React.Children.toArray(props.children);\n  calculatedProps = calculatedProps || getCalculatedProps(props, childComponents);\n  var _calculatedProps = calculatedProps,\n      datasets = _calculatedProps.datasets;\n  var childProps = getChildProps(props, calculatedProps);\n  var parentName = props.name || \"stack\";\n  return childComponents.map(function (child, index) {\n    var role = child.type && child.type.role;\n    var data = datasets[index];\n    var style = Wrapper.getChildStyle(child, index, calculatedProps);\n    var labels = props.labels ? getLabels(props, datasets, index) : child.props.labels;\n    var name = child.props.name || \"\".concat(parentName, \"-\").concat(role, \"-\").concat(index);\n    return React.cloneElement(child, _assign({\n      key: \"\".concat(name, \"-key-\").concat(index),\n      labels: labels,\n      name: name,\n      domainPadding: child.props.domainPadding || props.domainPadding,\n      theme: props.theme,\n      labelComponent: props.labelComponent || child.props.labelComponent,\n      style: style,\n      colorScale: getColorScale(props, child),\n      data: data,\n      polar: props.polar\n    }, childProps));\n  });\n}","import _isEmpty from \"lodash/isEmpty\";\nimport _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Helpers, VictoryContainer, VictoryTheme, CommonProps, Wrapper, PropTypes as CustomPropTypes, Hooks } from \"victory-core\";\nimport { VictorySharedEvents } from \"victory-shared-events\";\nimport { getChildren, useMemoizedProps } from \"./helper-methods\";\nimport isEqual from \"react-fast-compare\";\nvar fallbackProps = {\n  width: 450,\n  height: 300,\n  padding: 50\n};\n\nvar VictoryStack = function (initialProps) {\n  // eslint-disable-next-line no-use-before-define\n  var role = VictoryStackMemo.role;\n\n  var _Hooks$useAnimationSt = Hooks.useAnimationState(),\n      setAnimationState = _Hooks$useAnimationSt.setAnimationState,\n      getAnimationProps = _Hooks$useAnimationSt.getAnimationProps,\n      getProps = _Hooks$useAnimationSt.getProps;\n\n  var props = getProps(initialProps);\n  var modifiedProps = Helpers.modifyProps(props, fallbackProps, role);\n  var eventKey = modifiedProps.eventKey,\n      containerComponent = modifiedProps.containerComponent,\n      standalone = modifiedProps.standalone,\n      groupComponent = modifiedProps.groupComponent,\n      externalEventMutations = modifiedProps.externalEventMutations,\n      width = modifiedProps.width,\n      height = modifiedProps.height,\n      theme = modifiedProps.theme,\n      polar = modifiedProps.polar,\n      horizontal = modifiedProps.horizontal,\n      name = modifiedProps.name;\n  var childComponents = React.Children.toArray(modifiedProps.children);\n  var calculatedProps = useMemoizedProps(modifiedProps);\n  var domain = calculatedProps.domain,\n      scale = calculatedProps.scale,\n      style = calculatedProps.style,\n      origin = calculatedProps.origin;\n  var newChildren = React.useMemo(function () {\n    var children = getChildren(props, childComponents, calculatedProps);\n    var orderedChildren = children.map(function (child, index) {\n      var childProps = _assign({\n        animate: getAnimationProps(props, child, index, \"victory-stack\")\n      }, child.props);\n\n      return React.cloneElement(child, childProps);\n    });\n    /*\n      reverse render order for children of `VictoryStack` so that higher children in the stack\n      are rendered behind lower children. This looks nicer for stacked bars with cornerRadius, and\n      areas with strokes\n    */\n\n    return orderedChildren.reverse();\n  }, [props, childComponents, calculatedProps, getAnimationProps]);\n  var containerProps = React.useMemo(function () {\n    if (standalone) {\n      return {\n        domain: domain,\n        scale: scale,\n        width: width,\n        height: height,\n        standalone: standalone,\n        theme: theme,\n        style: style.parent,\n        horizontal: horizontal,\n        polar: polar,\n        origin: origin,\n        name: name\n      };\n    }\n\n    return {};\n  }, [standalone, domain, scale, width, height, theme, style, horizontal, polar, origin, name]);\n  var container = React.useMemo(function () {\n    if (standalone) {\n      var defaultContainerProps = _defaults({}, containerComponent.props, containerProps);\n\n      return React.cloneElement(containerComponent, defaultContainerProps);\n    }\n\n    return groupComponent;\n  }, [groupComponent, standalone, containerComponent, containerProps]);\n  var events = React.useMemo(function () {\n    return Wrapper.getAllEvents(props);\n  }, [props]);\n  var previousProps = Hooks.usePreviousProps(initialProps);\n  React.useEffect(function () {\n    // This is called before dismount to keep state in sync\n    return function () {\n      if (initialProps.animate) {\n        setAnimationState(previousProps, initialProps);\n      }\n    };\n  }, [setAnimationState, previousProps, initialProps]);\n\n  if (!_isEmpty(events)) {\n    return React.createElement(VictorySharedEvents, {\n      container: container,\n      eventKey: eventKey,\n      events: events,\n      externalEventMutations: externalEventMutations\n    }, newChildren);\n  }\n\n  return React.cloneElement(container, container.props, newChildren);\n};\n\nVictoryStack.propTypes = _objectSpread({}, CommonProps.baseProps, {\n  bins: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([CustomPropTypes.nonNegative, PropTypes.instanceOf(Date)])), CustomPropTypes.nonNegative]),\n  categories: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.shape({\n    x: PropTypes.arrayOf(PropTypes.string),\n    y: PropTypes.arrayOf(PropTypes.string)\n  })]),\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  colorScale: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.oneOf([\"grayscale\", \"qualitative\", \"heatmap\", \"warm\", \"cool\", \"red\", \"green\", \"blue\"])]),\n  fillInMissingData: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  labelComponent: PropTypes.element,\n  labels: PropTypes.oneOfType([PropTypes.func, PropTypes.array]),\n  style: PropTypes.shape({\n    parent: PropTypes.object,\n    data: PropTypes.object,\n    labels: PropTypes.object\n  }),\n  xOffset: PropTypes.number\n});\nVictoryStack.defaultProps = {\n  containerComponent: React.createElement(VictoryContainer, null),\n  groupComponent: React.createElement(\"g\", null),\n  standalone: true,\n  theme: VictoryTheme.grayscale,\n  fillInMissingData: true\n};\nvar VictoryStackMemo = React.memo(VictoryStack, isEqual);\nVictoryStackMemo.displayName = \"VictoryStack\";\nVictoryStackMemo.role = \"stack\";\nVictoryStackMemo.expectedComponents = [\"groupComponent\", \"containerComponent\", \"labelComponent\"];\nVictoryStackMemo.getChildren = getChildren;\nexport default VictoryStackMemo;"],"names":["styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","intl","options","props","selections","map","option","push","toString","formatMessage","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","variant","SelectVariant","SelectOption","key","event","onSelected","setState","render","Title","headingLevel","size","messages","Perspective","injectIntl","mapStateToProps","selectWidgets","azureCostOverview","widgets","CostOverview","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","costValue","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","padding","headerContent","justifyContent","headerContentLeft","headerContentRight","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupBySelected","showContent","meta","count","hasCost","total","cost","TitleSizes","showTags","Boolean","format","units","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","transforms","sortable","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","selectable","desc","cells","disableSelection","selected","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute","account","cluster","gcp_project","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChartBase","containerRef","observer","noop","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","getUnits","datum","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getBarWidth","domainPadding","maxWidth","maxValue","forEach","s","sectionWidth","getChart","barWidth","has","y","ChartBar","formatter","formatOptions","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","max","getEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","modVal","i","str","substr","maxChars","getTickValue","t","handleResize","clientWidth","current","componentWillUnmount","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartTheme","ChartStack","ChartAxis","C","fixLabelOverlap","dependentAxis","tickFormat","CostExplorerChart","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByGcpOcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","getComputedReportItemType","perspective","result","getComputedReportItemValueType","getDateRange","dateRangeType","endDate","Date","startDate","dateRange","setDate","setMonth","getMonth","end_date","start_date","getDateRangeDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","getDate","month","yVal","parseFloat","_y","getChartDatums","computedReportItemType","computedReportItemValueType","chartDatums","datums","Map","Array","from","padChartDatums","getGroupBy","daily","groupByOrg","getSkeleton","Skeleton","skeleton","padDate","chartDatum","cost_type","ExplorerChartConnect","ExplorerChart","DateRangeBase","onItemClicked","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgQueryString","orgReportPathsType","tagQueryString","orgReportFetchStatus","ExplorerFilterConnect","ExplorerFilter","costLabel","costLabelDate","global_Color_200","costType","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getPerspective","currentPerspective","hasAws","isAwsAvailable","hasAzure","isAzureAvailable","hasGcp","isGcpAvailable","hasIbm","isIbmAvailable","hasOcp","isOcpAvailable","isOcpCloudAvailable","isAwsOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","isAzureOcpAvailable","handlePerspectiveSelected","onPerspectiveClicked","handleCostTypeSelected","awsProviders","userAccess","ocpProviders","azureProviders","gcpProviders","ibmProviders","hasAwsOcp","hasAzureOcp","hasGcpOcp","hasIbmOcp","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","getResourcePathsType","showOrgs","userAccessQueryString","userAccessError","userAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","isSortable","rowItem","get","set","mapIdDate","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","showTimeScope","slice","handlePerspectiveClick","newPerspective","hasAwsCloud","hasAzureCloud","hasGcpCloud","hasIbmCloud","getPerspectiveDefault","_defineProperty","obj","defineProperty","enumerable","configurable","writable","fallbackProps","stackData","childComponents","filterNullChildData","dataset","_x","datasets","fillInMissingData","xMap","reduce","prev","getTime","xKeys","k","xArr","indexOffset","isDate","fillData","d","xOffset","yOffset","y0","group","_group","firstDatasetBaseline","previousPoints","concat","previousDatum","memo","some","point","getY0","_y0","_y1","_x1","addLayoutData","getCalculatedProps","children","role","categories","range","baseScale","scale","horizontal","_props","getColorScale","child","type","colorScaleOptions","getChildren","calculatedProps","childProps","standalone","getChildProps","parentName","getLabels","polar","VictoryStack","initialProps","VictoryStackMemo","_Hooks$useAnimationSt","setAnimationState","getAnimationProps","getProps","modifiedProps","eventKey","groupComponent","externalEventMutations","arr","modifiedChildren","target","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","_objectSpread","withoutSharedEvents","_React$useState2","isArray","_arrayWithHoles","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","err","_iterableToArrayLimit","TypeError","_nonIterableRest","setProps","useMemoizedProps","origin","newChildren","animate","reverse","containerProps","parent","defaultContainerProps","previousProps","propTypes","bins","defaultProps","displayName","expectedComponents"],"sourceRoot":""}