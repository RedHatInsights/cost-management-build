{"version":3,"file":"8bdbb92c4e04d118d778.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/views/details/awsBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/awsBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAwsReportItems.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/index.ts"],"sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, orgUnitIdKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/localStorage';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.awsDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    const cost_type = getCostType();\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { costType: cost_type, groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.AWSDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { costType: cost_type }),\n        providers,\n        providersFetchStatus,\n        providerType: \"aws\" /* aws */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        showCostType: true,\n        tagReportPathsType: \"aws\" /* aws */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AwsBreakdown;\n","import AwsBreakdown from './awsBreakdown';\nexport default AwsBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { CostType } from 'components/costType/costType';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = \"aws\" /* aws */;\nconst tagReportPathsType = \"aws\" /* aws */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.AWSDetailsTitle)),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType }),\n                    isBetaFeature() && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: this.handleCostTypeSelected })))),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './awsDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { getOrgBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"aws\" /* aws */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n            });\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.Names, { count: 2 })\n                            : intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById === 'account' ? 'account_alias' : groupById, title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                let name = (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: paths.awsDetailsBreakdown,\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        groupByOrg,\n                        id: item.id,\n                        orgUnitId: getGroupByOrgValue(query),\n                        query,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index, disabled = false) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: disabled, item: item, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.AWSDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst orgReportPathsType = \"aws\" /* aws */;\nconst orgReportType = \"org\" /* org */;\nconst tagReportPathsType = \"aws\" /* aws */;\nconst tagReportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, orgReport, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, queryString } = this.props;\n        fetchOrg(orgReportPathsType, orgReportType, queryString);\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchOrg(orgReportPathsType, orgReportType, queryString);\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, resourcePathsType: \"aws\" /* aws */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery, false)); // Don't reset pagination\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.AWSDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"aws\" /* aws */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onCostTypeSelected: this.handleCostTypeSelected, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n","import AwsDetails from './awsDetails';\nexport default AwsDetails;\n"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","injectIntl","connect","awsHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupByOrgValue","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","account","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","cost_type","costOverviewComponent","costType","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","showCostType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","instance_type","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","display","dateTitle","textAlign","header","headerContent","justifyContent","headerContentLeft","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","constructor","super","arguments","this","handleCostTypeSelected","onCostTypeSelected","render","onGroupBySelected","providersError","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","options","orgReportPathsType","showOrgs","showTags","onSelect","Boolean","format","units","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByOrg","groupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","id","orgUnitId","type","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","disabled","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","keys","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","defaultState","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","orgReportFetchStatus","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","history","parse","replace","getRouteForQuery","action","filterType","filterValue","filteredQuery","handleGroupBySelected","groupByKey","indexOf","slice","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui"],"sourceRoot":""}