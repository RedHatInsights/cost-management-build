{"version":3,"sources":["webpack:///./src/pages/awsDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/awsDetails/awsDetails.styles.ts","webpack:///./src/pages/awsDetails/detailsHeader.styles.ts","webpack:///./src/pages/awsDetails/groupBy.styles.ts","webpack:///./src/pages/awsDetails/groupBy.tsx","webpack:///./src/pages/awsDetails/detailsHeader.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.styles.ts","webpack:///./src/pages/awsDetails/detailsTagView.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.tsx","webpack:///./src/pages/awsDetails/exportModal.styles.ts","webpack:///./src/pages/awsDetails/exportModal.tsx","webpack:///./src/pages/awsDetails/historicalChart.styles.ts","webpack:///./src/pages/awsDetails/historicalChart.tsx","webpack:///./src/pages/awsDetails/historicalModal.styles.ts","webpack:///./src/pages/awsDetails/historicalModal.tsx","webpack:///./src/pages/awsDetails/detailsActions.tsx","webpack:///./src/pages/awsDetails/detailsTable.styles.ts","webpack:///./src/pages/awsDetails/detailsTableItem.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.tsx","webpack:///./src/pages/awsDetails/detailsWidget.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetView.tsx","webpack:///./src/pages/awsDetails/detailsWidget.tsx","webpack:///./src/pages/awsDetails/detailsTableItem.tsx","webpack:///./src/pages/awsDetails/detailsTable.tsx","webpack:///./src/pages/awsDetails/detailsToolbar.styles.ts","webpack:///./src/pages/awsDetails/detailsToolbar.tsx","webpack:///./src/pages/awsDetails/awsDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_awsDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","colorScale","esm","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","showUsageLegendLabel","legendData","chartUtils","push","symbol","setState","chartDatum","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","eventHandlers","target","mutation","ChartLegend","events","gutter","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","title","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","getSinceDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","itemsPerRow","marginLeft","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","Tooltip","content","enableFlip","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_4___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","onSelect","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","variant","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","tertiary","val","awsDetails","backgroundColor","paddingTop","paginationContainer","pagination","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","awsQuery","filter","resolution","time_scope_units","time_scope_value","key_only","awsReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","getDropDownTags","Set","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","awsReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","awsExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","awsReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","awsReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","awsDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","date","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","awsDetails_reportType","awsDetails_baseQuery","awsDetails_tagKey","awsDetails_mapStateToProps","awsDetails_mapDispatchToProps","getFilterFields","groupByTag","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","newFilterType","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"bf8d7539fd6e2d819b23.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AwsDetails from './awsDetails';\nexport default hot(module)(AwsDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            if (previousData) {\n                const label = getCostRangeString(previousData, key, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentData) {\n                const label = getCostRangeString(currentData, key, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            if (previousData) {\n                const label = getCostRangeString(previousData, key, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentData) {\n                const label = getCostRangeString(currentData, key, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            const charts = [\n                {\n                    data: previousData,\n                    name: 'previous',\n                    show: true,\n                    style: chartStyles.previousMonth,\n                },\n                {\n                    data: currentData,\n                    name: 'current',\n                    show: true,\n                    style: chartStyles.currentMonth,\n                },\n            ];\n            const legend = {\n                colorScale: chartStyles.colorScale,\n                data: legendData,\n                onClick: this.handleCostLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            const { legendItemsPerRow } = this.props;\n            if (chartDatum && chartDatum.data && chartDatum.data.length) {\n                const eventHandlers = {\n                    onClick: () => {\n                        return [\n                            {\n                                target: 'data',\n                                mutation: props => {\n                                    chartDatum.onClick(props);\n                                    return null;\n                                },\n                            },\n                        ];\n                    },\n                };\n                return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers,\n                        },\n                        {\n                            target: 'labels',\n                            eventHandlers,\n                        },\n                    ], gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    awsDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { parseQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAwsReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'account';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"aws\" /* aws */ })),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('aws_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('aws_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AwsReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsExportActions, awsExportSelectors } from 'store/awsExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: awsExportSelectors.selectExportError(state),\n        export: awsExportSelectors.selectExport(state),\n        fetchStatus: awsExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: awsExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAwsReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as awsReportsActions from 'store/awsReports/awsReportsActions';\nimport * as awsReportsSelectors from 'store/awsReports/awsReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAwsReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAwsReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAwsReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAwsReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAwsReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAwsReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('aws_details.historical.cost_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('aws_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('aws_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = awsReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = awsReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = awsReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = awsReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"account\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('aws_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'account', onClick: this.handleWidgetModalOpen }, t('aws_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'account', onClick: this.handleTagModalOpen }, t('aws_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('aws_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('aws_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAwsReportItems } from 'utils/getComputedAwsReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAwsReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */ ? reportItem.cost : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('aws_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('aws_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'account') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('aws_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/awsQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('aws_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAwsReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('aws_details.increase_since_date', { date, month, value })\n                        : t('aws_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('aws_details.decrease_since_date', { date, month, value })\n                            : t('aws_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('aws_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst tagKey = 'or:tag:';\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'account') {\n                return [\n                    {\n                        id: 'account',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.account_select'),\n                        placeholder: t('aws_details.filter.account_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'service') {\n                return [\n                    {\n                        id: 'service',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.service_select'),\n                        placeholder: t('aws_details.filter.service_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'region') {\n                return [\n                    {\n                        id: 'region',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.region_select'),\n                        placeholder: t('aws_details.filter.region_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by account tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.tag_select'),\n                        placeholder: t('aws_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTag = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTag ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('aws_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/aws?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAwsReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.awsDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n"],"sourceRoot":""}