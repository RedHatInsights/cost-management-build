{"version":3,"sources":["webpack:///./src/pages/azureDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/utils/equal.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.tsx","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/azureDetails/azureDetails.styles.ts","webpack:///./src/pages/azureDetails/detailsHeader.styles.ts","webpack:///./src/pages/azureDetails/groupBy.styles.ts","webpack:///./src/pages/azureDetails/groupBy.tsx","webpack:///./src/pages/azureDetails/detailsHeader.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.styles.ts","webpack:///./src/pages/azureDetails/detailsTagView.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.tsx","webpack:///./src/pages/azureDetails/exportModal.styles.ts","webpack:///./src/pages/azureDetails/exportModal.tsx","webpack:///./src/pages/azureDetails/historicalChart.styles.ts","webpack:///./src/pages/azureDetails/historicalChart.tsx","webpack:///./src/pages/azureDetails/historicalModal.styles.ts","webpack:///./src/pages/azureDetails/historicalModal.tsx","webpack:///./src/pages/azureDetails/detailsActions.tsx","webpack:///./src/pages/azureDetails/detailsTable.styles.ts","webpack:///./src/pages/azureDetails/detailsTableItem.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.tsx","webpack:///./src/pages/azureDetails/detailsWidget.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetView.tsx","webpack:///./src/pages/azureDetails/detailsWidget.tsx","webpack:///./src/pages/azureDetails/detailsTableItem.tsx","webpack:///./src/pages/azureDetails/detailsTable.tsx","webpack:///./src/pages/azureDetails/detailsToolbar.styles.ts","webpack:///./src/pages/azureDetails/filterBy.styles.ts","webpack:///./src/pages/azureDetails/filterBy.tsx","webpack:///./src/pages/azureDetails/detailsToolbar.tsx","webpack:///./src/pages/azureDetails/azureDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_azureDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","tags","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getNoDataForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getForDateRangeString","getSinceDateRangeString","isEqual","obj1","obj2","JSON","stringify","split","join","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","itemsPerRow","marginLeft","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AzureReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","azureReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AzureReportSummaryAlt","tabs","Grid","GridItem","lg","xl","azureReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AzureReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","_units","utils_formatValue","unitsLabel","azureReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AzureReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AzureReportSummaryItem","azureReportSummaryItems_styles_styles","skeleton","AzureReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","azureReportSummaryTrend_styles_styles","AzureReportSummaryTrend","trendChart","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_4___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","onSelect","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","variant","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","tertiary","val","azureDetails","backgroundColor","content","paddingTop","paginationContainer","pagination","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","azureQuery","filter","resolution","time_scope_units","time_scope_value","key_only","azureReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tag","isArray","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","azureReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","azureExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","azureReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","azureReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","azureDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","addTag","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","showPercentage","showValue","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","toolbarContainer","paddingLeft","filterBy_styles_styles","filterContainer","filterByOptions","filterBy_reportType","filterBy_tagKey","filterBy_mapStateToProps","filterBy_mapDispatchToProps","FilterBy","isFilterByOpen","isFilterByTagOpen","getFilterBy","getSelectOptions","getFilterByTag","getSelectTagOptions","getSelectOption","getSelectItems","SelectOption","getSelectTagItems","handleFilterBySelect","selection","isPlaceholder","handleFilterByTagSelect","currentTagItem","handleFilterByToggle","handleFilterByTagToggle","filterByTag","Select","isExpanded","selections","selectConstants","single","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","currentValue","currentViewType","filterCategory","addQuery","filter_by","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","placeholder","TextInput","onKeyPress","isExportDisabled","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","azureDetails_reportType","azureDetails_baseQuery","azureDetails_tagKey","azureDetails_mapStateToProps","azureDetails_mapDispatchToProps","groupByTag","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","newFilterType","found","filters","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"9680cff4dfb81b414d15.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AzureDetails from './azureDetails';\nexport default hot(module)(AzureDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummary.styles';\nconst AzureReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AzureReportSummary = translate()(AzureReportSummaryBase);\nexport { AzureReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummaryAlt.styles';\nconst AzureReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AzureReportSummaryAlt = translate()(AzureReportSummaryAltBase);\nexport { AzureReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryDetails.styles';\nconst AzureReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (report.meta.total.usage && report.meta.total.usage.value) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Work around for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage : 0, report.meta.total.count ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    (units ||\n                        (report &&\n                            report.meta &&\n                            report.meta.total.usage &&\n                            report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AzureReportSummaryDetails = translate()(AzureReportSummaryDetailsBase);\nexport { AzureReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryItem.styles';\nconst AzureReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAzureReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AzureReportSummaryItem = translate()(AzureReportSummaryItemBase);\nexport { AzureReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureReportSummaryItems.styles';\nclass AzureReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAzureReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AzureReportSummaryItems = translate()(AzureReportSummaryItemsBase);\nexport { AzureReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './azureReportSummaryTrend.styles';\nconst AzureReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AzureReportSummaryTrend };\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    azureDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { parseQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAzureReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag_key', { value: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'subscription_guid';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"azure\" /* azure */ })),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('azure_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    if (Array.isArray(tag.values)) {\n                        for (const val of tag.values) {\n                            tags.push(`${tag.key}: ${val}`);\n                        }\n                    }\n                    else {\n                        tags.push(`${tag.key}: ${tag.values}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('azure_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AzureReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureExportActions, azureExportSelectors } from 'store/azureExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: azureExportSelectors.selectExportError(state),\n        export: azureExportSelectors.selectExport(state),\n        fetchStatus: azureExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: azureExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAzureReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as azureReportsActions from 'store/azureReports/azureReportsActions';\nimport * as azureReportsSelectors from 'store/azureReports/azureReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAzureReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAzureReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAzureReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAzureReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAzureReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAzureReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('azure_details.historical.cost_title'), xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('azure_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('azure_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = azureReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = azureReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = azureReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = azureReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureDashboardSelectors } from 'store/azureDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"subscription_guid\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('azure_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'subscription_guid', onClick: this.handleWidgetModalOpen }, t('azure_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'subscription_guid', onClick: this.handleTagModalOpen }, t('azure_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('azure_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        const addTag = (tag, val) => {\n            const prefix = someTags.length > 0 ? ', ' : '';\n            const tagString = `${prefix}${tag.key}: ${val}`;\n            if (showAll) {\n                someTags.push(tagString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + tagString.length > maxChars) {\n                    someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                }\n                else {\n                    someTags.push(tagString);\n                }\n            }\n            charCount += tagString.length;\n            allTags.push(`${tag.key}: ${val}`);\n        };\n        if (report) {\n            for (const tag of report.data) {\n                if (!Array.isArray(tag.values)) {\n                    addTag(tag, tag.values);\n                }\n                else {\n                    for (const val of tag.values) {\n                        addTag(tag, val);\n                    }\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('azure_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        subscription_guid: account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAzureReportItems } from 'utils/getComputedAzureReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAzureReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AzureReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                    ? reportItem.cost\n                    : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('azure_details.view_all', {\n                        value: t(`group_by.top_values.${groupBy}`),\n                    })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"service_names\" /* service_names */,\n            \"subscription_guids\" /* subscription_guids */,\n            \"resource_locations\" /* resource_locations */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('azure_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'subscription_guid') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('azure_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/azureQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('azure_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAzureReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    filterContainer: {\n        display: 'inline-flex',\n    },\n});\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { styles } from './filterBy.styles';\nconst filterByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n    { label: 'tag', value: 'tag' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass FilterByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isFilterByOpen: false,\n            isFilterByTagOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getFilterBy = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectOptions();\n            for (const item of items) {\n                if (groupBy === item.id ||\n                    (groupBy.indexOf(tagKey) !== -1 && item.id === 'tag')) {\n                    return item;\n                }\n            }\n            return null;\n        };\n        this.getFilterByTag = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectTagOptions();\n            for (const item of items) {\n                if (groupBy === item.id) {\n                    return item;\n                }\n            }\n            return items[0];\n        };\n        this.getSelectOption = (id, label) => {\n            return {\n                id,\n                toString: () => label,\n            };\n        };\n        this.getSelectItems = () => {\n            return this.getSelectOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectTagItems = () => {\n            return this.getSelectTagOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectOptions = () => {\n            const { t } = this.props;\n            return filterByOptions.map(option => {\n                return this.getSelectOption(`${option.value}`, t(`filter_by.values.${option.label}`));\n            });\n        };\n        this.getSelectTagOptions = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => {\n                    return this.getSelectOption(`${tagKey}${val}`, t('filter_by.tag', { value: val }));\n                });\n            }\n            else {\n                return [];\n            }\n        };\n        this.handleFilterBySelect = (event, selection, isPlaceholder) => {\n            const { groupBy, onItemClicked } = this.props;\n            let selected = selection;\n            if (selection.id === 'tag') {\n                const items = this.getSelectTagOptions();\n                if (groupBy.indexOf(tagKey) !== -1) {\n                    for (const item of items) {\n                        if (groupBy === item.id) {\n                            selected = item;\n                        }\n                    }\n                }\n                else {\n                    selected = items[0];\n                }\n            }\n            if (onItemClicked) {\n                onItemClicked(selected.id);\n            }\n            this.setState({\n                currentItem: selection,\n                isFilterByOpen: false,\n            });\n        };\n        this.handleFilterByTagSelect = (event, selection, isPlaceholder) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.id);\n            }\n            this.setState({\n                currentTagItem: selection,\n                isFilterByTagOpen: false,\n            });\n        };\n        this.handleFilterByToggle = isFilterByOpen => {\n            this.setState({\n                isFilterByOpen,\n            });\n        };\n        this.handleFilterByTagToggle = isFilterByTagOpen => {\n            this.setState({\n                isFilterByTagOpen,\n            });\n        };\n        this.handleFilterBySelect = this.handleFilterBySelect.bind(this);\n        this.handleFilterByTagSelect = this.handleFilterByTagSelect.bind(this);\n        this.handleFilterByTagToggle = this.handleFilterByTagToggle.bind(this);\n        this.handleFilterByToggle = this.handleFilterByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getFilterBy(),\n            currentTagItem: this.getFilterByTag(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportFetchStatus, groupBy, queryString } = this.props;\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString ||\n            prevProps.reportFetchStatus !== reportFetchStatus) {\n            this.setState({\n                currentItem: this.getFilterBy(),\n                currentTagItem: this.getFilterByTag(),\n            });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, currentTagItem, isFilterByOpen, isFilterByTagOpen, } = this.state;\n        const filterByTag = currentItem && currentItem.id ? currentItem.id === 'tag' : false;\n        return (React.createElement(\"div\", { className: css(styles.filterContainer) },\n            React.createElement(Select, { \"aria-label\": t('azure_details.toolbar.filter_type_aria_label'), onSelect: this.handleFilterBySelect, onToggle: this.handleFilterByToggle, isExpanded: isFilterByOpen, selections: currentItem, variant: SelectVariant.single }, this.getSelectItems()),\n            Boolean(filterByTag) && (React.createElement(Select, { \"aria-label\": t('azure_details.toolbar.filter_tag_type_aria_label'), onSelect: this.handleFilterByTagSelect, onToggle: this.handleFilterByTagToggle, isExpanded: isFilterByTagOpen, selections: currentTagItem, variant: SelectVariant.single }, this.getSelectTagItems()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst FilterBy = translate()(connect(mapStateToProps, mapDispatchToProps)(FilterByBase));\nexport { FilterBy };\n","import { Button, ButtonVariant, Chip, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nimport { FilterBy } from './filterBy';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.groupBy,\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            if (query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    if (Array.isArray(query.filter_by[key])) {\n                        query.filter_by[key].forEach(value => {\n                            const field = key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key;\n                        const filter = this.getFilter(field, query.filter_by[key]);\n                        activeFilters.push(filter);\n                    }\n                });\n            }\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(this.props.groupBy, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType, value);\n        };\n        this.getFilter = (field, value) => {\n            const filterLabel = this.getFilterLabel(field, value);\n            const result = {\n                field,\n                label: filterLabel,\n                value,\n            };\n            return result;\n        };\n        this.getFilterLabel = (field, value) => {\n            const { t } = this.props;\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                // Normalize account, region, and service filters\n                switch (field) {\n                    case 'resource_location':\n                        filterText = t('azure_details.filter.resource_location_select');\n                        break;\n                    case 'subscription_guid':\n                        filterText = t('azure_details.filter.subscription_guid_select');\n                        break;\n                    case 'service_name':\n                        filterText = t('azure_details.filter.service_name_select');\n                        break;\n                    default:\n                        filterText = field;\n                }\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(4) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = (filterType) => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (groupBy !== prevProps.groupBy) {\n            this.setState({\n                currentFilterType: groupBy,\n            });\n        }\n    }\n    renderInput() {\n        const { t } = this.props;\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        const index = currentFilterType ? currentFilterType.indexOf(tagKey) : -1;\n        const placeholder = index === 0\n            ? t('azure_details.filter.tag_placeholder')\n            : t(`azure_details.filter.${currentFilterType}_placeholder`);\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: placeholder, value: currentValue }));\n    }\n    render() {\n        const { groupBy, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('azure_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FilterBy, { groupBy: groupBy, onItemClicked: this.selectFilterType })),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('azure_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('azure_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('azure_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('azure_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('azure_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery, } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('azure_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[newFilterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[newFilterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[newFilterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[newFilterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[newFilterType] = [\n                        newQuery.filter_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (!Array.isArray(newQuery.filter_by[newFilterType])) {\n                newQuery.filter_by[newFilterType] = undefined;\n            }\n            else {\n                const index = newQuery.filter_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[newFilterType] = [\n                        ...query.filter_by[newFilterType].slice(0, index),\n                        ...query.filter_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/azure?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAzureReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.azureDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n"],"sourceRoot":""}