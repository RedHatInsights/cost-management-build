{"version":3,"sources":["webpack://koku-ui/./src/pages/views/details/awsBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/awsBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAwsReportItems.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","withTranslation","connect","awsHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupByOrgValue","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","account","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","instance_type","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","cost","display","alignItems","costLabel","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","onGroupByClicked","providersError","this","showContent","meta","count","hasCost","total","style","Title","headingLevel","size","isDisabled","onItemClicked","options","orgReportPathsType","showOrgs","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByOrg","groupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","id","orgUnitId","type","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","setState","sortBy","disabled","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","keys","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","orgReportFetchStatus","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","indexOf","slice","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"mappings":"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","file":"ea35344187c4c8ab3058.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, orgUnitIdKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.awsDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.aws_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"aws\" /* aws */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"aws\" /* aws */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AwsBreakdown;\n","import AwsBreakdown from './awsBreakdown';\nexport default AwsBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = \"aws\" /* aws */;\nconst tagReportPathsType = \"aws\" /* aws */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.aws_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './awsDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { getOrgBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"aws\" /* aws */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        title: groupByOrg ? t('aws_details.org_unit_column_title') : t('details.tag_names'),\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                let name = (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: paths.awsDetailsBreakdown,\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        groupByOrg,\n                        id: item.id,\n                        orgUnitId: getGroupByOrgValue(query),\n                        query,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index, disabled = false) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: disabled, item: item, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst orgReportPathsType = \"aws\" /* aws */;\nconst orgReportType = \"org\" /* org */;\nconst tagReportPathsType = \"aws\" /* aws */;\nconst tagReportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, t, tagReport } = this.props;\n            const options = [\n                { name: t('filter_by.values.account'), key: 'account' },\n                { name: t('filter_by.values.service'), key: 'service' },\n                { name: t('filter_by.values.region'), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, queryString } = this.props;\n        fetchOrg(orgReportPathsType, orgReportType, queryString);\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchOrg(orgReportPathsType, orgReportType, queryString);\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, resourcePathsType: \"aws\" /* aws */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.aws_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"aws\" /* aws */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n","import AwsDetails from './awsDetails';\nexport default AwsDetails;\n"],"sourceRoot":""}