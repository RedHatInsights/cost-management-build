{"version":3,"sources":["webpack:///./src/pages/azureDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.tsx","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/azureDetails/azureDetails.styles.ts","webpack:///./src/pages/azureDetails/detailsHeader.styles.ts","webpack:///./src/pages/azureDetails/groupBy.styles.ts","webpack:///./src/pages/azureDetails/groupBy.tsx","webpack:///./src/pages/azureDetails/detailsHeader.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.styles.ts","webpack:///./src/pages/azureDetails/detailsTagView.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.tsx","webpack:///./src/pages/azureDetails/exportModal.styles.ts","webpack:///./src/pages/azureDetails/exportModal.tsx","webpack:///./src/pages/azureDetails/historicalChart.styles.ts","webpack:///./src/pages/azureDetails/historicalChart.tsx","webpack:///./src/pages/azureDetails/historicalModal.styles.ts","webpack:///./src/pages/azureDetails/historicalModal.tsx","webpack:///./src/pages/azureDetails/detailsActions.tsx","webpack:///./src/pages/azureDetails/detailsTable.styles.ts","webpack:///./src/pages/azureDetails/detailsTableItem.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.tsx","webpack:///./src/pages/azureDetails/detailsWidget.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetView.tsx","webpack:///./src/pages/azureDetails/detailsWidget.tsx","webpack:///./src/pages/azureDetails/detailsTableItem.tsx","webpack:///./src/pages/azureDetails/detailsTable.tsx","webpack:///./src/pages/azureDetails/detailsToolbar.tsx","webpack:///./src/pages/azureDetails/azureDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_azureDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","isEqual","obj1","obj2","JSON","stringify","split","join","getNoDataForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getForDateRangeString","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","marginRight","toolbarContainer","backgroundColor","paddingBottom","paddingTop","paddingLeft","paddingRight","marginLeft","defaultFilters","tag","DetailsDataToolbar","defaultState","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","option","indexOf","api_query","getActiveFilters","query","filter_by","keys","isArray","substring","onDelete","filterType","prevState","filter","_filterType","onFilterRemoved","getCurrentCategoryOption","currentCategory","onCategoryClick","onCategorySelect","event","currentTagKey","onCategoryToggle","isOpen","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","aria-label","onChange","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","Button","variant","control","onClick","search_icon","getDefaultCategoryOptions","trim","prevFilters","includes","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","Select","selectConstants","typeahead","onClear","onTagKeyClear","onToggle","onTagKeyToggle","onSelect","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","checked","target","prevSelections","getExportButton","isExportDisabled","DataToolbarItem","isDisabled","handleExportClicked","external_link_square_alt_icon","onExportClicked","equal","Dropdown","position","dropdownConstants","left","toggle","DropdownToggle","filter_icon","dropdownItems","DropdownItem","val","pagination","showExport","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","Boolean","breakpointMods","modifier","itemsPerRow","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AzureReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","azureReportSummaryAlt_styles_styles","flexGrow","minHeight","tops","AzureReportSummaryAlt","tabs","Grid","GridItem","lg","xl","azureReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","lineHeight","valueContainer","wordWrap","AzureReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","_units","utils_formatValue","unitsLabel","azureReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AzureReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AzureReportSummaryItem","azureReportSummaryItems_styles_styles","skeleton","AzureReportSummaryItems","nextProps","otherIndex","findIndex","slice","getItems","azureReportSummaryTrend_styles_styles","AzureReportSummaryTrend","trendChart","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_4___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","tertiary","azureDetails","content","paginationContainer","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","azureQuery","resolution","time_scope_units","time_scope_value","azureReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","component","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","handleGroupBySelect","handleGroupByToggle","bind","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","azureReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_mapStateToProps","error","azureExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","secondary","primary","Form","FormGroup","fieldId","Radio","isValid","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","azureReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","azureReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","azureDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","addTag","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","abs","percentage","showPercentage","showValue","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","getCategoryOptions","detailsDataToolbar","azureDetails_reportType","azureDetails_baseQuery","azureDetails_mapStateToProps","azureDetails_mapDispatchToProps","groupByTag","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","newFilterType","found","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"6fd1b0b947961db05ba4.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AzureDetails from './azureDetails';\nexport default hot(module)(AzureDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { tagKey } from 'api/query';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            if (!categoryOptions) {\n                return 'name';\n            }\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy && groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return categoryOptions[0].value;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                let filterType = type.toLowerCase();\n                // Workaround for Azure IDs\n                if (filterType === 'account' && this.state.filters.subscription_guid) {\n                    filterType = 'subscription_guid';\n                }\n                else if (filterType === 'region' &&\n                    this.state.filters.resource_location) {\n                    filterType = 'resource_location';\n                }\n                else if (filterType === 'service' && this.state.filters.service_name) {\n                    filterType = 'service_name';\n                }\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else if (prevState.filters[filterType]) {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.getCurrentCategoryOption = () => {\n            const { categoryOptions } = this.props;\n            const { currentCategory } = this.state;\n            if (!categoryOptions) {\n                return undefined;\n            }\n            for (const option of categoryOptions) {\n                if (currentCategory === option.value) {\n                    return option;\n                }\n            }\n            return categoryOptions[0];\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: categoryOption.label, chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.getDefaultCategoryOptions = () => {\n            const { t } = this.props;\n            return [{ label: t('filter_by.values.name'), value: 'name' }];\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if ((event.key && event.key !== 'Enter') || categoryInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            // Width prop is a workaround for https://github.com/patternfly/patternfly-react/issues/3574\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder'), width: 200 }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('export.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions } = this.props;\n        const { isCategoryDropdownOpen } = this.state;\n        if (!categoryOptions) {\n            return null;\n        }\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    this.getCurrentCategoryOption().label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, option.label))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination, showExport } = this.props;\n        const options = categoryOptions\n            ? categoryOptions\n            : this.getDefaultCategoryOptions();\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            options &&\n                                options\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        Boolean(showExport) && (React.createElement(DataToolbarGroup, null, this.getExportButton()))),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummary.styles';\nconst AzureReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AzureReportSummary = translate()(AzureReportSummaryBase);\nexport { AzureReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummaryAlt.styles';\nconst AzureReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AzureReportSummaryAlt = translate()(AzureReportSummaryAltBase);\nexport { AzureReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryDetails.styles';\nconst AzureReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (report.meta.total.usage && report.meta.total.usage.value) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Work around for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage : 0, report.meta.total.count ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    (units ||\n                        (report &&\n                            report.meta &&\n                            report.meta.total.usage &&\n                            report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AzureReportSummaryDetails = translate()(AzureReportSummaryDetailsBase);\nexport { AzureReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryItem.styles';\nconst AzureReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAzureReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AzureReportSummaryItem = translate()(AzureReportSummaryItemBase);\nexport { AzureReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureReportSummaryItems.styles';\nclass AzureReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAzureReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AzureReportSummaryItems = translate()(AzureReportSummaryItemsBase);\nexport { AzureReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './azureReportSummaryTrend.styles';\nconst AzureReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AzureReportSummaryTrend };\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    azureDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { parseQuery } from 'api/azureQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAzureReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst reportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'subscription_guid',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(tag => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${tag.key}`, onClick: () => this.handleGroupByClick(`${tagKey}${tag.key}`) }, t('group_by.tag_key', { value: tag.key }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'subscription_guid';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"azure\" /* azure */ })),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('azure_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    if (Array.isArray(tag.values)) {\n                        for (const val of tag.values) {\n                            tags.push(`${tag.key}: ${val}`);\n                        }\n                    }\n                    else {\n                        tags.push(`${tag.key}: ${tag.values}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('azure_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AzureReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureExportActions, azureExportSelectors } from 'store/azureExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: azureExportSelectors.selectExportError(state),\n        export: azureExportSelectors.selectExport(state),\n        fetchStatus: azureExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: azureExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAzureReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as azureReportsActions from 'store/azureReports/azureReportsActions';\nimport * as azureReportsSelectors from 'store/azureReports/azureReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAzureReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAzureReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAzureReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAzureReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAzureReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAzureReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('azure_details.historical.cost_title'), xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('azure_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('azure_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = azureReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = azureReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = azureReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = azureReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureDashboardSelectors } from 'store/azureDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"subscription_guid\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('azure_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'subscription_guid', onClick: this.handleWidgetModalOpen }, t('azure_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'subscription_guid', onClick: this.handleTagModalOpen }, t('azure_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('azure_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        const addTag = (tag, val) => {\n            const prefix = someTags.length > 0 ? ', ' : '';\n            const tagString = `${prefix}${tag.key}: ${val}`;\n            if (showAll) {\n                someTags.push(tagString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + tagString.length > maxChars) {\n                    someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                }\n                else {\n                    someTags.push(tagString);\n                }\n            }\n            charCount += tagString.length;\n            allTags.push(`${tag.key}: ${val}`);\n        };\n        if (report) {\n            for (const tag of report.data) {\n                if (!Array.isArray(tag.values)) {\n                    addTag(tag, tag.values);\n                }\n                else {\n                    for (const val of tag.values) {\n                        addTag(tag, val);\n                    }\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('azure_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        subscription_guid: account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAzureReportItems } from 'utils/getComputedAzureReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAzureReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AzureReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                    ? reportItem.cost\n                    : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('azure_details.view_all', {\n                        value: t(`group_by.top_values.${groupBy}`),\n                    })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"service_names\" /* service_names */,\n            \"subscription_guids\" /* subscription_guids */,\n            \"resource_locations\" /* resource_locations */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('azure_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'subscription_guid') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('azure_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/azureQuery';\nimport { tagKey } from 'api/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('azure_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAzureReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/azureQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { isEqual } from 'utils/equal';\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getCategoryOptions = () => {\n            const { t } = this.props;\n            return [\n                {\n                    label: t('filter_by.values.subscription_guid'),\n                    value: 'subscription_guid',\n                },\n                { label: t('filter_by.values.service_name'), value: 'service_name' },\n                {\n                    label: t('filter_by.values.resource_location'),\n                    value: 'resource_location',\n                },\n                { label: t('filter_by.values.tag'), value: 'tag' },\n            ];\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: this.getCategoryOptions(), groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report, showExport: true }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery, } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { tagKey } from 'api/query';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[newFilterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[newFilterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[newFilterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[newFilterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[newFilterType] = [\n                        newQuery.filter_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (!Array.isArray(newQuery.filter_by[newFilterType])) {\n                newQuery.filter_by[newFilterType] = undefined;\n            }\n            else {\n                const index = newQuery.filter_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[newFilterType] = [\n                        ...query.filter_by[newFilterType].slice(0, index),\n                        ...query.filter_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/azure?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAzureReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.azureDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n"],"sourceRoot":""}