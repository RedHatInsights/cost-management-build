{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnAwsReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryUsage.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.styles.ts","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.styles.ts","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_9__","transformOcpOnAwsReport","utils_getComputedOcpOnAwsReportItems__WEBPACK_IMPORTED_MODULE_8__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__webpack_exports__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","LAYOUT_PROPS","padding","theme_koku","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnAwsReportItems","getUnsortedComputedOcpOnAwsReportItems","account_alias","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","instance_type","region","service","styles","StyleSheet","create","container","display","justifyContent","height","marginTop","LoadingState","es","icon","binoculars_icon","title","subTitle","className","EmptyState","EmptyStateIcon","Title","size","EmptyStateBody","ErrorState","error","error_circle_o_icon","response","status","ban_icon","fontSize","esm","EmptyValueState","minus_icon","viewSources","mapStateToProps","common","state","NoProvidersState","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","dollar_sign_icon","chartStyles","colorScale","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","legendData","chartUtils","push","symbol","setState","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","eventHandlers","target","mutation","ChartLegend","events","gutter","labelComponent","chartLabelTooltip","getLegendTooltip","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","ChartVoronoiContainer","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendColorScale","handleLegendClick","legendItemsPerRow","responsive","childName","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitleTooltip","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","AwsReportSummaryDetails","costLabel","reportType","showUnits","usageLabel","emptyValueState","meta","total","usageUnits","unitsLabel","utils_formatValue","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","OcpOnAwsReportSummary","ocpOnAwsReportSummaryAlt_styles_styles","OcpOnAwsReportSummaryAlt","ocpOnAwsReportSummaryDetails_styles_styles","marginLeft","titleContainer","usageText","usageValue","OcpOnAwsReportSummaryDetails","requestLabel","awsReportType","ocpOnAwsReportSummaryItem_styles_styles","OcpOnAwsReportSummaryItemBase","OcpOnAwsReportSummaryItem","ocpOnAwsReportSummaryItems_styles_styles","OcpOnAwsReportSummaryItems","ocpOnAwsReportSummaryTrend_styles_styles","OcpOnAwsReportSummaryTrend","OcpOnAwsReportSummaryUsage","usageChart","OcpReportSummary","ocpReportSummaryAlt_styles_styles","OcpReportSummaryAlt","ocpReportSummaryDetails_styles_styles","OcpReportSummaryDetails","requestValue","ocpReportSummaryItem_styles_styles","OcpReportSummaryItemBase","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","OcpReportSummaryItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","tabItems","getIdKeyForTab","tab","widgetId","widget","awsDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","currentReport","awsReports","selectReport","currentReportFetchStatus","selectReportFetchStatus","previousReport","tabsReport","tabsReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","AwsDashboardWidget","activeTabKey","buildDetailsLink","currentTab","awsQuery","group_by","order_by","trend","getUnits","awsReportSummary","titleKey","getDetails","getDetailsLabel","costKey","usageKey","getDetailsLink","isDetailsLink","handleInsightsNavClick","getDetailsLinkTitle","getHorizontalLayout","getSubTitle","getSubTitleTooltip","getTabs","getTitle","get_month_default","format_default","start_of_month_default","get_year_default","getTab","Tab","eventKey","getTabTitle","getTabItem","availableTabs","topItems","activeTab","isCostReport","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","insights","chrome","appNavClick","secondaryNav","event","tabIndex","isHorizontal","awsDashboard_mapStateToProps","selectWidgets","widgets","selectCurrentWidgets","awsDashboard_awsDashboard","xl2","ocpDashboardWidget_styles_chartStyles","containerUsageHeight","ocpDashboardWidget_styles_styles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpQuery","currentInfrastructureData","previousInfrastructureData","ocpReportSummary","requestKey","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpOnAwsDashboardWidget_styles_chartStyles","ocpOnAwsDashboardWidget_styles_styles","ocpOnAwsDashboardWidget_getIdKeyForTab","ocpOnAwsDashboardWidget_mapStateToProps","ocpOnAwsDashboard","ocpOnAwsReports","ocpOnAwsDashboardWidget_mapDispatchToProps","OcpOnAwsDashboardWidget","ocpOnAwsQuery","ocpOnAwsReportSummary","ocpOnAwsDashboard_mapStateToProps","ocpOnAwsDashboard_ocpOnAwsDashboard","overview_styles_styles","info","verticalAlign","infoIcon","infoTitle","fontWeight","headerOverride","index_esm","overview_getIdKeyForTab","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","Overview","showPopover","getAvailableTabs","contentRef","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","isLoading","noAwsProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_overview__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"d1e5648f2bdc19feadab.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage ? value.usage.units : value.cost.units,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BanIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error && error.response && error.response.status === 401) {\n        icon = BanIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            this.setState({\n                datum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, interpolation: \"basis\", name: datum.name, key: `trend-chart-${datum.name}-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (!(datum && datum.data && datum.data.length)) {\n                return null;\n            }\n            const { title } = this.props;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                datum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.legend && datum.legend.data) {\n            datum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(datum.legend, width) : undefined, legendData: legendVisible ? datum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(datum) &&\n                    datum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentUsageData, 'chart.usage_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                datum: {\n                    charts: [\n                        {\n                            data: previousUsageData,\n                            name: 'previousUsage',\n                            show: true,\n                            style: chartStyles.previousUsageData,\n                        },\n                        {\n                            data: currentUsageData,\n                            name: 'currentUsage',\n                            show: true,\n                            style: chartStyles.currentUsageData,\n                        },\n                        {\n                            data: previousRequestData,\n                            name: 'previousRequest',\n                            show: true,\n                            style: chartStyles.previousRequestData,\n                        },\n                        {\n                            data: currentRequestData,\n                            name: 'currentRequest',\n                            show: true,\n                            style: chartStyles.currentRequestData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, interpolation: \"basis\", name: datum.name, key: `usage-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (!(datum && datum.data && datum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                datum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: true, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.legend && datum.legend.data) {\n            datum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(datum.legend, width) : undefined, legendData: legendVisible ? datum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(datum) &&\n                    datum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummary.styles';\nconst OcpOnAwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpOnAwsReportSummary = translate()(OcpOnAwsReportSummaryBase);\nexport { OcpOnAwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummaryAlt.styles';\nconst OcpOnAwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpOnAwsReportSummaryAlt = translate()(OcpOnAwsReportSummaryAltBase);\nexport { OcpOnAwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryDetails.styles';\nconst OcpOnAwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const awsReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (awsReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else if (!awsReportType) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                    usage,\n                    React.createElement(\"div\", { className: css(styles.text) },\n                        React.createElement(\"div\", null, usageLabel)))),\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    request,\n                    React.createElement(\"div\", { className: css(styles.text) }, requestLabel)))));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst OcpOnAwsReportSummaryDetails = translate()(OcpOnAwsReportSummaryDetailsBase);\nexport { OcpOnAwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryItem.styles';\nconst OcpOnAwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpOnAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpOnAwsReportSummaryItem = translate()(OcpOnAwsReportSummaryItemBase);\nexport { OcpOnAwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { styles } from './ocpOnAwsReportSummaryItems.styles';\nclass OcpOnAwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpOnAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpOnAwsReportSummaryItems = translate()(OcpOnAwsReportSummaryItemsBase);\nexport { OcpOnAwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, usageLabel, t, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let requestValue = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            requestValue = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                        derivedCost,\n                        infrastructureCost,\n                    }), enableFlip: true },\n                    React.createElement(\"div\", null, cost))) : (React.createElement(\"div\", null, usage)),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel)))),\n        React.createElement(\"div\", { className: css(styles.titleContainer) }, Boolean(reportType !== \"cost\" /* cost */) && (React.createElement(\"div\", { className: css(styles.value) },\n            requestValue,\n            React.createElement(\"div\", { className: css(styles.text) }, requestLabel))))));\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousCostData) {\n                const [start] = getMonthRangeString(previousCostData, 'chart.cost_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousCostData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentCostData) {\n                const [start] = getMonthRangeString(currentCostData, 'chart.cost_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentCostData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousInfrastructureCostData) {\n                const [start] = getMonthRangeString(previousInfrastructureCostData, 'chart.cost_infrastructure_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousInfrastructureCostData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentInfrastructureCostData) {\n                const [start] = getMonthRangeString(currentInfrastructureCostData, 'chart.cost_infrastructure_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentInfrastructureCostData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                datum: {\n                    charts: [\n                        {\n                            data: previousCostData,\n                            name: 'previousCost',\n                            show: true,\n                            style: chartStyles.previousCostData,\n                        },\n                        {\n                            data: currentCostData,\n                            name: 'currentCost',\n                            show: true,\n                            style: chartStyles.currentCostData,\n                        },\n                        {\n                            data: previousInfrastructureCostData,\n                            name: 'previousInfrastructureCost',\n                            show: true,\n                            style: chartStyles.previousInfrastructureCostData,\n                        },\n                        {\n                            data: currentInfrastructureCostData,\n                            name: 'currentInfrastructureCost',\n                            show: true,\n                            style: chartStyles.currentInfrastructureCostData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, interpolation: \"basis\", name: datum.name, key: `usage-chart-${datum.name}-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (!(datum && datum.data && datum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                datum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: false, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.legend && datum.legend.data) {\n            datum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: width > 400 ? containerHeight : containerHeight + 75 } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(datum.legend, width) : undefined, legendData: legendVisible ? datum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(datum && datum) &&\n                    datum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { transformAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { AwsReportSummary, AwsReportSummaryAlt, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/reports/awsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './awsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const currentData = transformAwsReport(currentReport, trend.type);\n            const previousData = transformAwsReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryTrend, { containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 275,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { transformOcpReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpReportSummary, OcpReportSummaryAlt, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/reports/ocpReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const reportItem = reportType === \"cost\" /* cost */ ? 'cost' : 'usage';\n            const currentUsageData = transformOcpReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const currentInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const previousInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(OcpReportSummaryTrend, { containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title })) : (React.createElement(OcpReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpReportSummaryDetails, { formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                        ? reportItem.cost\n                        : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id } = this.props;\n            const tab = availableTabs[tabIndex];\n            this.props.updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, widgetId } = this.props;\n        this.props.updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport { transformOcpOnAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpOnAwsReportSummary, OcpOnAwsReportSummaryAlt, OcpOnAwsReportSummaryDetails, OcpOnAwsReportSummaryItem, OcpOnAwsReportSummaryItems, OcpOnAwsReportSummaryTrend, OcpOnAwsReportSummaryUsage, } from 'components/reports/ocpOnAwsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardActions, ocpOnAwsDashboardSelectors, } from 'store/ocpOnAwsDashboard';\nimport { ocpOnAwsReportsSelectors } from 'store/ocpOnAwsReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpOnAwsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpOnAwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp-on-aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const costReportType = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            const reportItem = costReportType ? 'infrastructureCost' : 'usage';\n            const currentUsageData = transformOcpOnAwsReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpOnAwsReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const units = this.getUnits();\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"instance_type\" /* instanceType */ ||\n                reportType === \"network\" /* network */ ||\n                reportType === \"storage\" /* storage */) ? (React.createElement(OcpOnAwsReportSummaryTrend, { containerHeight: containerHeight, currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) })) : (React.createElement(OcpOnAwsReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpOnAwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpOnAwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpOnAwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.infrastructure_cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: isCostReport ? reportItem.infrastructureCost : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.infrastructure_cost\n                        ? unitLookupKey(currentReport.meta.total.infrastructure_cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp-on-aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpOnAwsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpOnAwsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpOnAwsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpOnAwsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpOnAwsDashboardActions.fetchWidgetReports,\n    updateTab: ocpOnAwsDashboardActions.changeWidgetTab,\n};\nconst OcpOnAwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpOnAwsDashboardWidgetBase));\nexport { OcpOnAwsDashboardWidget, OcpOnAwsDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardSelectors } from 'store/ocpOnAwsDashboard';\nimport { OcpOnAwsDashboardWidget } from './ocpOnAwsDashboardWidget';\nconst OcpOnAwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpOnAwsDashboardSelectors.selectWidgets(state),\n        widgets: ocpOnAwsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpOnAwsDashboard = translate()(connect(mapStateToProps, {})(OcpOnAwsDashboardBase));\nexport default OcpOnAwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n});\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsDashboard from 'pages/awsDashboard/awsDashboard';\nimport OcpDashboard from 'pages/ocpDashboard/ocpDashboard';\nimport OcpOnAwsDashboard from 'pages/ocpOnAwsDashboard/ocpOnAwsDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { awsProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n        case \"ocpOnAws\" /* ocpOnAws */:\n            return 'ocpOnAws';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.getAvailableTabs = () => {\n            const { awsProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            if (awsProviders &&\n                awsProviders.meta &&\n                awsProviders.meta.count &&\n                (ocpProviders && ocpProviders.meta && ocpProviders.meta.count)) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocpOnAws\" /* ocpOnAws */,\n                });\n            }\n            if (ocpProviders && ocpProviders.meta && ocpProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (awsProviders && awsProviders.meta && awsProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"aws\" /* aws */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"ocpOnAws\" /* ocpOnAws */) {\n                return activeTabKey === index ? React.createElement(OcpOnAwsDashboard, null) : null;\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                return activeTabKey === index ? React.createElement(OcpDashboard, null) : null;\n            }\n            else if (currentTab === \"aws\" /* aws */) {\n                return activeTabKey === index ? React.createElement(AwsDashboard, null) : null;\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n            else if (tab === \"ocpOnAws\" /* ocpOnAws */) {\n                return t('overview.ocp_on_aws');\n            }\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp_on_aws')),\n                                    React.createElement(\"p\", null, t('overview.ocp_on_aws_desc')),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs(availableTabs)))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(OverviewBase));\nexport default Overview;\n","import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n"],"sourceRoot":""}