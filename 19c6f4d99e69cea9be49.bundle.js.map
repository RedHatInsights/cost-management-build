{"version":3,"file":"19c6f4d99e69cea9be49.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/queries/providersQuery.ts","webpack://koku-ui/./src/pages/components/currency/currency.styles.ts","webpack://koku-ui/./src/pages/components/currency/currency.tsx","webpack://koku-ui/./src/pages/components/state/emptyValueState/emptyValueState.tsx","webpack://koku-ui/./src/pages/state/noData/noDataState.tsx","webpack://koku-ui/./src/pages/state/noData/noData.tsx","webpack://koku-ui/./src/pages/components/icons/costIcon/costIcon.tsx","webpack://koku-ui/./src/pages/components/icons/costIcon/index.ts","webpack://koku-ui/./src/pages/state/noProviders/noProvidersState.styles.ts","webpack://koku-ui/./src/pages/state/noProviders/noProvidersState.tsx","webpack://koku-ui/./src/pages/state/noProviders/index.ts","webpack://koku-ui/./src/pages/state/noProviders/noProviders.tsx","webpack://koku-ui/./src/pages/views/components/charts/chartTheme/theme-koku.ts","webpack://koku-ui/./src/pages/views/components/charts/chartTheme/index.ts","webpack://koku-ui/./src/pages/views/components/charts/chartTheme/theme-utils.ts","webpack://koku-ui/./src/utils/computedForecast/getComputedForecastItems.ts","webpack://koku-ui/./src/pages/views/components/charts/common/chartDatumUtils.ts","webpack://koku-ui/./src/pages/views/components/charts/common/chartUtils.ts","webpack://koku-ui/./src/pages/views/components/costType/costType.styles.ts","webpack://koku-ui/./src/pages/views/components/costType/costType.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummary.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummaryAlt.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummaryDetails.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummaryItem.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummaryItems.tsx","webpack://koku-ui/./src/pages/views/components/charts/costChart/costChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/costChart/costChart.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummaryCost.tsx","webpack://koku-ui/./src/pages/views/components/charts/dailyCostChart/dailyCostChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/dailyCostChart/dailyCostChart.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummaryDailyCost.tsx","webpack://koku-ui/./src/pages/views/components/charts/dailyTrendChart/dailyTrendChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/dailyTrendChart/dailyTrendChart.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummaryDailyTrend.tsx","webpack://koku-ui/./src/pages/views/components/charts/trendChart/trendChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/trendChart/trendChart.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummaryTrend.tsx","webpack://koku-ui/./src/pages/views/components/charts/usageChart/usageChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/usageChart/usageChart.tsx","webpack://koku-ui/./src/pages/views/components/reports/reportSummary/reportSummaryUsage.tsx","webpack://koku-ui/./src/pages/views/utils/providers.ts","webpack://koku-ui/./src/utils/computedReport/getComputedReportItems.ts","webpack://koku-ui/./src/utils/computedReport/getItemLabel.ts","webpack://koku-ui/./src/utils/dateRange.ts","webpack://koku-ui/./src/utils/noop.ts","webpack://koku-ui/./src/utils/skeleton.ts","webpack://koku-ui/./src/utils/sort.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getCurrency, invalidateSession, restoreCurrency, setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.CurrencyOptions, value: 'AUD' },\n    { label: messages.CurrencyOptions, value: 'CAD' },\n    { label: messages.CurrencyOptions, value: 'CHF' },\n    { label: messages.CurrencyOptions, value: 'CNY' },\n    { label: messages.CurrencyOptions, value: 'DKK' },\n    { label: messages.CurrencyOptions, value: 'EUR' },\n    { label: messages.CurrencyOptions, value: 'GBP' },\n    { label: messages.CurrencyOptions, value: 'HKD' },\n    { label: messages.CurrencyOptions, value: 'JPY' },\n    { label: messages.CurrencyOptions, value: 'NOK' },\n    { label: messages.CurrencyOptions, value: 'NZD' },\n    { label: messages.CurrencyOptions, value: 'SEK' },\n    { label: messages.CurrencyOptions, value: 'SGD' },\n    { label: messages.CurrencyOptions, value: 'USD' },\n    { label: messages.CurrencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            // Restore from query param if available\n            restoreCurrency();\n            const currency = getCurrency(); // Get currency from local storage\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: \"currencyOverride\", id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCurrency(selection.value); // Set currency units via local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.Currency)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport { Currency };\n","import './emptyValueState.scss';\nimport { MinusIcon } from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport React from 'react';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: \"emptyValueContainer\" },\n        React.createElement(MinusIcon, null)));\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { FileInvoiceDollarIcon } from '@patternfly/react-icons/dist/esm/icons/file-invoice-dollar-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: FileInvoiceDollarIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(messages.NoDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.NoDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.NoDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(withRouter(NoDataStateBase));\nexport { NoDataState };\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default withRouter(NoData);\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.CostManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import CostIcon from './costIcon';\nexport default CostIcon;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport CostIcon from 'pages/components/icons/costIcon';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.NoProvidersStateOverviewDesc;\n        let titleKey = messages.NoProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case \"aws\" /* aws */:\n                descKey = messages.NoProvidersStateAwsDesc;\n                titleKey = messages.NoProvidersStateAwsTitle;\n                break;\n            case \"azure\" /* azure */:\n                descKey = messages.NoProvidersStateAzureDesc;\n                titleKey = messages.NoProvidersStateAzureTitle;\n                break;\n            case \"gcp\" /* gcp */:\n                descKey = messages.NoProvidersStateGcpDesc;\n                titleKey = messages.NoProvidersStateGcpTitle;\n                break;\n            case \"ibm\" /* ibm */:\n                descKey = messages.NoProvidersStateIbmDesc;\n                titleKey = messages.NoProvidersStateIbmTitle;\n                break;\n            case \"ocp\" /* ocp */:\n                descKey = messages.NoProvidersStateOcpDesc;\n                docUrlKey = messages.DocsAddOcpSources;\n                textKey = messages.NoProvidersStateOcpAddSources;\n                titleKey = messages.NoProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.NoProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(withRouter(NoProvidersStateBase));\nexport { NoProvidersState };\n","import NoProviders from './noProviders';\nexport default NoProviders;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default withRouter(NoProviders);\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from 'utils/sort';\nexport function getComputedForecastItems({ forecast, sortDirection = 0 /* asc */, sortKey = 'date', }) {\n    return sort(getUnsortedComputedForecastItems({\n        forecast,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nfunction getCostData(val, key, item) {\n    return {\n        confidence_max: {\n            value: item\n                ? item[key].confidence_max.value\n                : 0 + val[key] && val[key].confidence_max\n                    ? val[key].confidence_max.value\n                    : 0,\n            units: val[key] && val[key].confidence_max ? val[key].confidence_max.units : 'USD',\n        },\n        confidence_min: {\n            value: item\n                ? item[key].confidence_min.value\n                : 0 + val[key] && val[key].confidence_min\n                    ? val[key].confidence_min.value\n                    : 0,\n            units: val[key] && val[key].confidence_min ? val[key].confidence_min.units : 'USD',\n        },\n        pvalues: {\n            value: val[key] && val[key].pvalues ? Number(val[key].pvalues.value) : 0,\n            units: val[key] && val[key].pvalues ? val[key].pvalues.units : null,\n        },\n        rsquared: {\n            value: val[key] && val[key].rsquared ? Number(val[key].rsquared.value) : 0,\n            units: val[key] && val[key].rsquared ? val[key].rsquared.units : null,\n        },\n        total: {\n            value: item ? item[key].total.value : 0 + val[key] && val[key].total ? val[key].total.value : 0,\n            units: val[key] && val[key].total ? val[key].total.units : 'USD',\n        },\n    };\n}\nexport function getUnsortedComputedForecastItems({ forecast, }) {\n    if (!forecast) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint && dataPoint.values) {\n            dataPoint.values.forEach((val) => {\n                const date = val.date;\n                const item = itemMap.get(date);\n                if (item) {\n                    // This code block is typically entered with filter[resolution]=monthly\n                    itemMap.set(date, Object.assign(Object.assign({}, item), { date, cost: getCostData(val, 'cost', item), infrastructure: getCostData(val, 'infrastructure', item), supplementary: getCostData(val, 'supplementary', item) }));\n                }\n                else {\n                    // This code block is typically entered with filter[resolution]=daily\n                    itemMap.set(date, {\n                        date,\n                        cost: getCostData(val, 'cost'),\n                        infrastructure: getCostData(val, 'infrastructure'),\n                        supplementary: getCostData(val, 'supplementary'),\n                    });\n                }\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (forecast && forecast.data) {\n        forecast.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import { intl } from 'components/i18n';\nimport { endOfMonth, format, getDate, getYear, startOfMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getComputedForecastItems } from 'utils/computedForecast/getComputedForecastItems';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency, unitsLookupKey } from 'utils/format';\nexport function transformForecast(forecast, type = 1 /* daily */, forecastItem = 'cost', forecastItemValue = 'total') {\n    if (!forecast) {\n        return [];\n    }\n    const items = {\n        forecast,\n        sortKey: 'date',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedForecastItems(items);\n    let chartDatums;\n    if (type === 1 /* daily */ || type === 2 /* monthly */) {\n        chartDatums = computedItems.map(i => createForecastDatum(i[forecastItem][forecastItemValue].value, i));\n    }\n    else {\n        chartDatums = computedItems.reduce((acc, d) => {\n            const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n            return [...acc, createForecastDatum(prevValue + d[forecastItem][forecastItemValue].value, d)];\n        }, []);\n    }\n    return padChartDatums(chartDatums, type);\n}\nexport function transformForecastCone(forecast, type = 1 /* daily */, forecastItem = 'cost', forecastItemValue = 'total') {\n    if (!forecast) {\n        return [];\n    }\n    const items = {\n        forecast,\n        sortKey: 'date',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedForecastItems(items);\n    let chartDatums;\n    if (type === 1 /* daily */ || type === 2 /* monthly */) {\n        chartDatums = computedItems.map(i => createForecastConeDatum(i[forecastItem].confidence_max.value, i[forecastItem].confidence_min.value, i));\n    }\n    else {\n        chartDatums = computedItems.reduce((acc, d) => {\n            const prevMaxValue = acc.length ? acc[acc.length - 1].y : d[forecastItem][forecastItemValue].value;\n            const prevMinValue = acc.length ? acc[acc.length - 1].y0 : d[forecastItem][forecastItemValue].value;\n            return [\n                ...acc,\n                createForecastConeDatum(prevMaxValue + d[forecastItem].confidence_max.value, prevMinValue + d[forecastItem].confidence_min.value, d),\n            ];\n        }, []);\n    }\n    return padChartDatums(chartDatums, type);\n}\nexport function transformReport(report, type = 1 /* daily */, idKey = 'date', reportItem = 'cost', reportItemValue = 'total' // useful for infrastructure.usage values\n) {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        idKey,\n        report,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedReportItems(items);\n    let chartDatums;\n    if (type === 1 /* daily */ || type === 2 /* monthly */) {\n        chartDatums = computedItems.map(i => {\n            const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n            return createReportDatum(val, i, idKey, reportItem, reportItemValue);\n        });\n    }\n    else {\n        chartDatums = computedItems.reduce((acc, d) => {\n            const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n            const val = d[reportItem][reportItemValue] ? d[reportItem][reportItemValue].value : d[reportItem].value;\n            return [...acc, createReportDatum(prevValue + val, d, idKey, reportItem, reportItemValue)];\n        }, []);\n    }\n    return idKey === 'date' ? padChartDatums(chartDatums, type) : chartDatums;\n}\nexport function createForecastDatum(value, computedItem, forecastItem = 'cost', forecastItemValue = 'total') {\n    const xVal = getDate(new Date(computedItem.date + 'T00:00:00'));\n    const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n    return {\n        x: xVal,\n        y: value === null ? null : yVal,\n        key: computedItem.date,\n        units: computedItem[forecastItem] && computedItem[forecastItem][forecastItemValue]\n            ? computedItem[forecastItem][forecastItemValue].units\n            : undefined,\n    };\n}\nexport function createForecastConeDatum(maxValue, minValue, computedItem, forecastItem = 'cost', forecastItemValue = 'total') {\n    const xVal = getDate(new Date(computedItem.date + 'T00:00:00'));\n    const yVal = isFloat(maxValue) ? parseFloat(maxValue.toFixed(2)) : isInt(maxValue) ? maxValue : 0;\n    const y0Val = isFloat(minValue) ? parseFloat(minValue.toFixed(2)) : isInt(minValue) ? minValue : 0;\n    return {\n        x: xVal,\n        y: maxValue === null ? null : yVal,\n        y0: minValue === null ? null : y0Val,\n        key: computedItem.date,\n        units: computedItem[forecastItem] && computedItem[forecastItem][forecastItemValue]\n            ? computedItem[forecastItem][forecastItemValue].units\n            : undefined,\n    };\n}\nexport function createReportDatum(value, computedItem, idKey = 'date', reportItem = 'cost', reportItemValue = 'total' // useful for infrastructure.usage values\n) {\n    const xVal = idKey === 'date' ? getDate(new Date(computedItem.id + 'T00:00:00')) : computedItem.label;\n    const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n    return {\n        x: xVal,\n        y: value === null ? null : yVal,\n        key: computedItem.id,\n        name: computedItem.label ? computedItem.label : computedItem.id,\n        units: computedItem[reportItem]\n            ? computedItem[reportItem][reportItemValue]\n                ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                : computedItem[reportItem].units // capacity, limit, request, usage\n            : undefined,\n    };\n}\n// Fill in missing data with previous value to represent cumulative daily cost\nexport function fillChartDatums(datums, type = 1 /* daily */) {\n    const result = [];\n    if (!datums || datums.length === 0) {\n        return result;\n    }\n    const firstDate = new Date(datums[0].key + 'T00:00:00');\n    const lastDate = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    const padDate = startOfMonth(firstDate);\n    let prevChartDatum;\n    for (let i = padDate.getDate(); i <= endOfMonth(lastDate).getDate(); i++) {\n        padDate.setDate(i);\n        const id = format(padDate, 'yyyy-MM-dd');\n        const chartDatum = datums.find(val => val.key === id);\n        if (chartDatum) {\n            result.push(chartDatum);\n        }\n        else if (prevChartDatum) {\n            result.push(Object.assign(Object.assign({}, prevChartDatum), { key: id, x: getDate(new Date(id + 'T00:00:00')) }));\n        }\n        if (chartDatum) {\n            // Note: We want to identify missing data, but charts won't extrapolate (connect data points) if we return null here\n            // for missing daily values. For example, if there is only data for the first and last day of the month, charts would\n            // typically draw a line between two points by default. However, showing \"no data\" is more obvious there was a problem.\n            if (type === 1 /* daily */) {\n                prevChartDatum = {\n                    key: id,\n                    x: getDate(new Date(id + 'T00:00:00')),\n                    y: null,\n                };\n            }\n            else {\n                prevChartDatum = chartDatum;\n            }\n        }\n    }\n    return result;\n}\n// This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n// data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n// message in the tooltip, which helps distinguish between zero values and when there is no data available.\nexport function padChartDatums(datums, type = 1 /* daily */) {\n    const result = [];\n    if (!datums || datums.length === 0) {\n        return result;\n    }\n    const firstDate = new Date(datums[0].key + 'T00:00:00');\n    const lastDate = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    // Pad start for missing data\n    let padDate = startOfMonth(firstDate);\n    for (let i = padDate.getDate(); i < firstDate.getDate(); i++) {\n        padDate.setDate(i);\n        const id = format(padDate, 'yyyy-MM-dd');\n        result.push(createReportDatum(null, { id }, 'date', null));\n    }\n    // Fill middle with existing data\n    result.push(...datums);\n    // Pad end for missing data\n    padDate = new Date(lastDate);\n    for (let i = padDate.getDate() + 1; i <= endOfMonth(lastDate).getDate(); i++) {\n        padDate.setDate(i);\n        const id = format(padDate, 'yyyy-MM-dd');\n        result.push(createReportDatum(null, { id }, 'date', null));\n    }\n    return fillChartDatums(result, type);\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setDate(1); // Required to obtain correct month\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    // Find the first populated (non-null) day\n    let firstDay = 0;\n    for (let i = firstDay; i < datums.length; i++) {\n        if (datums[i].y && datums[i].y !== null) {\n            firstDay = i;\n            break;\n        }\n    }\n    // Find the last populated (non-null) day\n    let lastDay = datums.length - 1;\n    for (let i = lastDay; i >= 0; i--) {\n        if (datums[i].y && datums[i].y !== null) {\n            lastDay = i;\n            break;\n        }\n    }\n    const start = new Date(datums[firstDay].key + 'T00:00:00');\n    const end = new Date(datums[lastDay].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\n// TODO: remove? this doesn't appear to be used anywhere\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const count = getDate(end);\n    const endDate = format(end, 'dd');\n    const month = Number(format(start, 'M')) - 1; // Required to obtain correct month message\n    const startDate = format(start, 'dd');\n    const year = getYear(end);\n    return intl.formatMessage(messages.ChartDateRange, { count, startDate, endDate, month, year });\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getMaxMinValues(datums) {\n    let max = -1;\n    let min = -1;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            const maxY = datum.y0 !== undefined ? Math.max(datum.y, datum.y0) : datum.y;\n            const minY = datum.y0 !== undefined ? Math.min(datum.y, datum.y0) : datum.y;\n            if (maxY > max) {\n                max = maxY;\n            }\n            if ((min === -1 || minY < min) && minY !== null) {\n                min = minY;\n            }\n        });\n    }\n    return { max, min };\n}\nexport function getTooltipContent(formatter) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitsLookupKey(unit);\n        if (lookup) {\n            return intl.formatMessage(messages.UnitTooltips, {\n                units: lookup,\n                value: formatter(value, unit, options),\n            });\n        }\n        return formatCurrency(value, unit, options);\n    };\n}\nexport function getCostRangeString(datums, key = messages.ChartCostLegendLabel, firstOfMonth = false, lastOfMonth = false, offset = 0, noDataKey = messages.ChartNoData) {\n    if (!(datums && datums.length)) {\n        return intl.formatMessage(noDataKey);\n    }\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const month = Number(format(start, 'M')) - 1; // Required to obtain correct month message\n    const year = getYear(end);\n    return intl.formatMessage(key, {\n        count: getDate(end),\n        startDate: format(start, 'd'),\n        endDate: format(end, 'd'),\n        month,\n        year,\n    });\n}\nexport function getUsageRangeString(datums, key = messages.ChartUsageLegendLabel, firstOfMonth = false, lastOfMonth = false, offset = 0, noDataKey = messages.ChartNoData) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset, noDataKey);\n}\n// Returns true if non negative integer\nexport function isInt(n) {\n    const result = Number(n) === n && n % 1 === 0;\n    return result && n >= 0;\n}\n// Returns true if non negative float\nexport function isFloat(n) {\n    const result = Number(n) === n && n % 1 !== 0;\n    return result && n >= 0;\n}\n","import { getInteractiveLegendItemStyles } from '@patternfly/react-charts';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { getMaxMinValues, getTooltipContent } from './chartDatumUtils';\n// Returns groups of chart names associated with each data series\nexport const getChartNames = (series) => {\n    const result = [];\n    if (series) {\n        series.map(serie => {\n            // Each group of chart names are hidden / shown together\n            result.push(serie.childName);\n        });\n    }\n    return result;\n};\nexport const getDomain = (series, hiddenSeries) => {\n    const domain = { x: [1, 31] };\n    let maxValue = -1;\n    let minValue = -1;\n    if (series) {\n        series.forEach((s, index) => {\n            if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                const { max, min } = getMaxMinValues(s.data);\n                maxValue = Math.max(maxValue, max);\n                if (minValue === -1) {\n                    minValue = min;\n                }\n                else {\n                    minValue = Math.min(minValue, min);\n                }\n            }\n        });\n    }\n    const threshold = maxValue * 0.1;\n    const max = maxValue > 0 ? Math.ceil(maxValue + threshold) : 0;\n    const _min = minValue > 0 ? Math.max(0, Math.floor(minValue - threshold)) : 0;\n    const min = _min > 0 ? _min : 0;\n    if (max > 0) {\n        domain.y = [min, max];\n    }\n    return domain;\n};\n// Returns legend data styled per hiddenSeries\nexport const getLegendData = (series, hiddenSeries, tooltip = false) => {\n    if (!series) {\n        return undefined;\n    }\n    const result = series.map((s, index) => {\n        const data = Object.assign(Object.assign(Object.assign({ childName: s.childName }, s.legendItem), (tooltip && { name: s.legendItem.tooltip })), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n        return data;\n    });\n    return result;\n};\n// Note: Forecast is expected to use both datum.y and datum.y0\nexport const getTooltipLabel = (datum, formatter, formatOptions) => {\n    const tooltipFormatter = getTooltipContent(formatter);\n    const dy = datum.y !== undefined && datum.y !== null ? tooltipFormatter(datum.y, datum.units, formatOptions) : undefined;\n    const dy0 = datum.y0 !== undefined && datum.y0 !== null ? tooltipFormatter(datum.y0, datum.units, formatOptions) : undefined;\n    if (dy !== undefined && dy0 !== undefined) {\n        return intl.formatMessage(messages.ChartCostForecastConeTooltip, { value0: dy0, value1: dy });\n    }\n    return dy !== undefined ? dy : intl.formatMessage(messages.ChartNoData);\n};\nexport const getResizeObserver = (containerRef, handleResize) => {\n    const containerElement = containerRef;\n    const { ResizeObserver } = window;\n    let _navToggle;\n    let _resizeObserver;\n    if (containerElement && ResizeObserver) {\n        const resizeObserver = new ResizeObserver(entries => {\n            // We wrap it in requestAnimationFrame to avoid this error - ResizeObserver loop limit exceeded\n            window.requestAnimationFrame(() => {\n                if (!Array.isArray(entries) || !entries.length) {\n                    return;\n                }\n                handleResize();\n            });\n        });\n        resizeObserver.observe(containerElement);\n        _resizeObserver = () => resizeObserver.unobserve(containerElement);\n    }\n    else {\n        handleResize();\n        window.addEventListener('resize', handleResize);\n        _resizeObserver = () => window.removeEventListener('resize', handleResize);\n        _navToggle = insights.chrome.on('NAVIGATION_TOGGLE', setTimeout(handleResize, 500));\n    }\n    return () => {\n        if (_resizeObserver) {\n            _resizeObserver();\n        }\n        if (_navToggle) {\n            _navToggle();\n        }\n    };\n};\nexport const initHiddenSeries = (series, hiddenSeries, index) => {\n    const result = new Set(hiddenSeries);\n    if (!result.delete(index)) {\n        result.add(index);\n    }\n    return result;\n};\n// Returns true if at least one data series is available\nexport const isDataAvailable = (series, hiddenSeries) => {\n    const unavailable = []; // API data may not be available (e.g., on 1st of month)\n    if (series) {\n        series.forEach((s, index) => {\n            if (isSeriesHidden(hiddenSeries, index) || (s.data && s.data.length === 0)) {\n                unavailable.push(index);\n            }\n        });\n    }\n    return unavailable.length !== (series ? series.length : 0);\n};\n// Returns true if data series is hidden\nexport const isDataHidden = (series, hiddenSeries, data) => {\n    if (data && data.length) {\n        for (let keys = hiddenSeries.keys(), key; !(key = keys.next()).done;) {\n            let dataChildName;\n            let serieChildName;\n            for (const item of data) {\n                if (item.childName) {\n                    dataChildName = item.childName;\n                    break;\n                }\n            }\n            for (const item of series[key.value].data) {\n                if (item.childName) {\n                    serieChildName = item.childName;\n                    break;\n                }\n            }\n            if (serieChildName && dataChildName && serieChildName === dataChildName) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n// Returns true if data series is hidden\nexport const isSeriesHidden = (hiddenSeries, index) => {\n    return hiddenSeries.has(index);\n};\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    costSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costType.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getCostType, invalidateSession, restoreCostType, setCostType } from 'utils/localStorage';\nimport { styles } from './costType.styles';\nconst costTypeOptions = [\n    { desc: messages.CostTypeAmortizedDesc, label: messages.CostTypeAmortized, value: \"savingsplan_effective_cost\" /* amortized */ },\n    { desc: messages.CostTypeBlendedDesc, label: messages.CostTypeBlended, value: \"blended_cost\" /* blended */ },\n    { desc: messages.CostTypeUnblendedDesc, label: messages.CostTypeUnblended, value: \"unblended_cost\" /* unblended */ },\n];\nclass CostTypeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            // Restore from query param if available\n            restoreCostType();\n            const costType = getCostType(); // Get cost type from local storage\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costType);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costTypeSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costTypeOptions.map(option => {\n                options.push({\n                    desc: intl.formatMessage(option.desc),\n                    toString: () => intl.formatMessage(option.label),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostType(selection.value); // Set cost type in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.costSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.costLabel }, intl.formatMessage(messages.CostTypeLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostTypeConnect = connect(mapStateToProps, mapDispatchToProps)(CostTypeBase);\nconst CostType = injectIntl(CostTypeConnect);\nexport { CostType };\n","import './reportSummary.scss';\nimport { Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes } from '@patternfly/react-core';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { skeletonWidth } from 'utils/skeleton';\nconst ReportSummaryBase = ({ children, detailsLink, title, subTitle, status }) => (React.createElement(Card, { className: \"reportSummary\" },\n    React.createElement(CardTitle, null,\n        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: \"subtitle\" }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { width: \"16%\" }),\n        React.createElement(Skeleton, { className: \"chartSkeleton\", width: skeletonWidth.md }),\n        React.createElement(Skeleton, { width: \"33%\" }),\n        React.createElement(Skeleton, { className: \"legendSkeleton\", width: skeletonWidth.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst ReportSummary = injectIntl(ReportSummaryBase);\nexport { ReportSummary };\n","import './reportSummaryAlt.scss';\nimport { Card, CardBody, CardFooter, CardTitle, Grid, GridItem, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { skeletonWidth } from 'utils/skeleton';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, tabs, title, }) => (React.createElement(Card, { className: \"reportSummary\" },\n    React.createElement(Grid, { hasGutter: true },\n        React.createElement(GridItem, { xl: 8 },\n            React.createElement(\"div\", { className: \"cost\" },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, title),\n                    Boolean(subTitle) && React.createElement(\"p\", { className: \"subtitle\" }, subTitle)),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { width: \"16%\" }),\n                    React.createElement(Skeleton, { className: \"chartSkeleton\", width: skeletonWidth.md }),\n                    React.createElement(Skeleton, { width: \"33%\" }),\n                    React.createElement(Skeleton, { className: \"legendSkeleton\", width: skeletonWidth.xs }))) : (children)))),\n        React.createElement(GridItem, { xl: 4 },\n            React.createElement(\"div\", { className: \"tops\" }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink))))))));\nconst ReportSummaryAlt = injectIntl(OcpCloudReportSummaryAltBase);\nexport { ReportSummaryAlt };\n","import './reportSummaryDetails.scss';\nimport { Tooltip } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport { EmptyValueState } from 'pages/components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nconst ReportSummaryDetailsBase = ({ chartType, computedReportItem = 'cost', computedReportItemValue = 'total', costLabel, formatOptions, intl, report, requestFormatOptions, requestLabel, reportType, showTooltip = false, showUnits = false, showUsageFirst = false, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let supplementaryCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const hasTotal = report && report.meta && report.meta.total;\n    const hasCost = hasTotal && report.meta.total.cost && report.meta.total.cost.total;\n    const hasCount = hasTotal && report.meta.total.count;\n    const hasSupplementaryCost = hasTotal &&\n        report.meta.total.supplementary &&\n        report.meta.total.supplementary.total &&\n        report.meta.total.supplementary.total.value;\n    const hasInfrastructureCost = hasTotal &&\n        report.meta.total.infrastructure &&\n        report.meta.total.infrastructure[computedReportItemValue] &&\n        report.meta.total.infrastructure[computedReportItemValue].value;\n    const hasRequest = hasTotal && report.meta.total.request;\n    const hasUsage = hasTotal && report.meta.total.usage;\n    if (hasTotal) {\n        cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD', formatOptions);\n        supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD', formatOptions);\n        infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure[computedReportItemValue].value : 0, hasInfrastructureCost ? report.meta.total.infrastructure[computedReportItemValue].units : 'USD', formatOptions);\n        request = formatUnits(hasRequest ? report.meta.total.request.value : 0, hasRequest ? report.meta.total.request.units : undefined, requestFormatOptions);\n        if (hasUsage && report.meta.total.usage.value >= 0) {\n            usage = formatUnits(hasUsage ? report.meta.total.usage.value : 0, hasUsage ? report.meta.total.usage.units : undefined, usageFormatOptions);\n        }\n        else {\n            // Workaround for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatUnits(hasUsage ? report.meta.total.usage : 0, hasCount ? report.meta.total.count.units : undefined, usageFormatOptions);\n        }\n    }\n    const getCostLayout = (showAltHeroFont = false) => {\n        let value = cost;\n        if (computedReportItem === \"infrastructure\" /* infrastructure */) {\n            value = infrastructureCost;\n        }\n        else if (computedReportItem === \"supplementary\" /* supplementary */) {\n            value = supplementaryCost;\n        }\n        const altHeroFont = showAltHeroFont ? 'Alt' : '';\n        return (React.createElement(\"div\", { className: \"valueContainer\" },\n            showTooltip ? (React.createElement(Tooltip, { content: intl.formatMessage(messages.DashboardTotalCostTooltip, { infrastructureCost, supplementaryCost }), enableFlip: true },\n                React.createElement(\"div\", { className: `value${altHeroFont}` }, value))) : (React.createElement(\"div\", { className: `value${altHeroFont}` }, value)),\n            React.createElement(\"div\", { className: \"text\" },\n                React.createElement(\"div\", null, costLabel))));\n    };\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasRequest ? report.meta.total.request.units : undefined;\n        const unitsLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(usageUnits) });\n        return (React.createElement(\"div\", { className: \"valueContainer\" },\n            React.createElement(\"span\", { className: \"value\" }, request),\n            Boolean(showUnits && (units || (hasRequest && report.meta.total.request.value >= 0))) && (React.createElement(\"span\", { className: \"units\" }, unitsLabel)),\n            React.createElement(\"div\", { className: \"text\" },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasUsage ? report.meta.total.usage.units : undefined;\n        // added as a work-around for azure #1079\n        const _units = unitsLookupKey(units ? units : usageUnits);\n        const unitsLabel = intl.formatMessage(messages.Units, { units: _units });\n        return (React.createElement(\"div\", { className: \"valueContainer\" },\n            React.createElement(\"span\", { className: \"value\" }, usage),\n            Boolean(showUnits && (units || (hasUsage && report.meta.total.usage.value >= 0))) && (React.createElement(\"span\", { className: \"units\" }, unitsLabel)),\n            React.createElement(\"div\", { className: \"text\" },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (chartType === \"dailyCost\" /* dailyCost */ ||\n        chartType === \"dailyTrend\" /* dailyTrend */ ||\n        chartType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout(reportType === \"cost\" /* cost */));\n    }\n    else if (chartType === \"trend\" /* trend */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout(reportType === \"cost\" /* cost */)));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(reportType === \"cost\" /* cost */),\n            getUsageLayout()));\n    }\n    else if (chartType === \"usage\" /* usage */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n    else {\n        return null;\n    }\n};\nconst ReportSummaryDetails = injectIntl(ReportSummaryDetailsBase);\nexport { ReportSummaryDetails };\n","import './reportSummaryItem.scss';\nimport { Progress, ProgressSize } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrency, formatPercentage, unitsLookupKey } from 'utils/format';\nconst ReportSummaryItemBase = ({ intl = defaultIntl, // Default required for testing\nlabel, totalValue, units, value, formatOptions, }) => {\n    const unitsLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = formatPercentage(percent);\n    const percentLabel = intl.formatMessage(messages.PercentTotalCost, {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatCurrency(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: \"reportSummaryItem\" },\n        React.createElement(Progress, { label: percentLabel, value: Number(percentVal), title: label, size: ProgressSize.sm })));\n};\nconst ReportSummaryItem = injectIntl(ReportSummaryItemBase);\nexport { ReportSummaryItem };\n","import './reportSummaryItems.scss';\nimport { Skeleton } from '@patternfly/react-core';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nimport { skeletonWidth } from 'utils/skeleton';\nclass ReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { idKey, report } = this.props;\n        const computedItems = getComputedReportItems({\n            report,\n            idKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id === 'Other' || id === 'Others';\n            }\n        });\n        if (otherIndex !== -1) {\n            return [...computedItems.slice(0, otherIndex), ...computedItems.slice(otherIndex + 1), computedItems[otherIndex]];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { className: \"skeleton\", width: skeletonWidth.md }),\n                React.createElement(Skeleton, { className: \"skeleton\", width: skeletonWidth.md }),\n                React.createElement(Skeleton, { className: \"skeleton\", width: skeletonWidth.md })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst ReportSummaryItems = injectIntl(ReportSummaryItemsBase);\nexport { ReportSummaryItems };\n","import { chart_color_black_200 } from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentCostData: {\n        fill: 'none',\n    },\n    currentInfrastructureColorScale: [\n        chart_color_blue_400.value,\n        chart_color_blue_300.value,\n        chart_color_blue_200.value,\n        chart_color_blue_100.value,\n        chart_color_blue_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    forecastConeData: {\n        fill: chart_color_green_100.value,\n        strokeWidth: 0,\n    },\n    forecastConeDataColorScale: [chart_color_green_100.value],\n    forecastData: {\n        fill: 'none',\n    },\n    forecastDataColorScale: [chart_color_green_200.value],\n    forecastInfrastructureConeData: {\n        fill: chart_color_blue_100.value,\n        strokeWidth: 0,\n    },\n    forecastInfrastructureConeDataColorScale: [chart_color_blue_100.value],\n    forecastInfrastructureData: {\n        fill: 'none',\n    },\n    forecastInfrastructureDataColorScale: [chart_color_blue_200.value],\n    previousCostData: {\n        fill: 'none',\n    },\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, forecastConeData, forecastData, forecastInfrastructureConeData, forecastInfrastructureData, previousInfrastructureCostData, previousCostData, showForecast, } = this.props;\n            const costKey = messages.ChartCostLegendLabel;\n            const costInfrastructureKey = messages.ChartCostInfrastructureLegendLabel;\n            const costInfrastructureTooltipKey = messages.ChartCostInfrastructureLegendTooltip;\n            const costTooltipKey = messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: previousInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousInfrastructureCostData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: currentInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false, 0, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentInfrastructureColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentInfrastructureCostData), { stroke: chartStyles.currentInfrastructureColorScale[1] }),\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: forecastData,\n                    legendItem: {\n                        name: getCostRangeString(forecastData, messages.ChartCostForecastLegendLabel, false, false, 0, messages.ChartCostForecastLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, messages.ChartCostForecastLegendTooltip, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastData), { stroke: chartStyles.forecastDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructure',\n                    data: forecastInfrastructureData,\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureData, messages.ChartCostInfrastructureForecastLegendLabel, false, false, 0, messages.ChartCostInfrastructureForecastLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureData, messages.ChartCostInfrastructureForecastLegendTooltip, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastInfrastructureData), { stroke: chartStyles.forecastInfrastructureDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: forecastConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, messages.ChartCostInfrastructureForecastConeLegendLabel, false, false, 0, messages.ChartCostInfrastructureForecastConeLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleLeft',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, messages.ChartCostInfrastructureForecastConeLegendTooltip, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastConeData), { stroke: chartStyles.forecastConeDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructureCone',\n                    data: forecastInfrastructureConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureConeData, messages.ChartCostInfrastructureForecastConeLegendLabel, false, false, 0, messages.ChartCostInfrastructureForecastConeLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureConeDataColorScale[0],\n                            type: 'triangleLeft',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureConeData, messages.ChartCostInfrastructureForecastConeLegendTooltip, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastInfrastructureConeData), { stroke: chartStyles.forecastInfrastructureConeDataColorScale[0] }),\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    if (width > 675 && width < 1175) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width > 450 && width < 675) {\n                        adjustedContainerHeight += 50;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 75;\n                    }\n                }\n                else {\n                    if (width > 450 && width < 725) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 50;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastInfrastructureConeData !== this.props.forecastInfrastructureConeData ||\n            prevProps.forecastInfrastructureData !== this.props.forecastInfrastructureData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, forecastData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentCostDate = currentCostData ? getDate(getDateRange(currentCostData, true, true)[1]) : 0;\n        const forecastCostDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData ? getDate(getDateRange(previousCostData, true, true)[1]) : 0;\n        return currentInfrastructureDate > 0 ||\n            currentCostDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentCostDate, forecastCostDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const lastDate = this.getEndDate();\n        const half = Math.floor(lastDate / 2);\n        const _1stDay = 1;\n        const _2ndDay = _1stDay + Math.floor(half / 2);\n        const _3rdDay = _1stDay + half;\n        const _4thDay = lastDate - Math.floor(half / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            title && (React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title)),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [_1stDay, _2ndDay, _3rdDay, _4thDay, lastDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport { CostChart };\n","import './reportSummaryCost.scss';\nimport { CostChart } from 'pages/views/components/charts/costChart';\nimport React from 'react';\nconst ReportSummaryCost = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { ReportSummaryCost };\n","import { chart_color_black_200 } from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureColorScale: [\n        chart_color_blue_400.value,\n        chart_color_blue_300.value,\n        chart_color_blue_200.value,\n        chart_color_blue_100.value,\n        chart_color_blue_500.value,\n    ],\n    currentInfrastructureCostData: {\n        strokeDasharray: '3,3',\n    },\n    forecastConeDataColorScale: [chart_color_orange_300.value],\n    forecastDataColorScale: [chart_color_green_200.value],\n    forecastInfrastructureConeDataColorScale: [chart_color_orange_300.value],\n    forecastInfrastructureDataColorScale: [chart_color_blue_200.value],\n    previousInfrastructureCostData: {\n        strokeDasharray: '3,3',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartGroup, ChartLegend, ChartLegendTooltip, ChartLine, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './dailyCostChart.styles';\nclass DailyCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, forecastConeData, forecastData, forecastInfrastructureConeData, forecastInfrastructureData, previousInfrastructureCostData, previousCostData, showForecast, } = this.props;\n            const costKey = messages.ChartCostLegendLabel;\n            const costInfrastructureKey = messages.ChartCostInfrastructureLegendLabel;\n            const costInfrastructureTooltipKey = messages.ChartCostInfrastructureLegendTooltip;\n            const costTooltipKey = messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: this.initDatumChildName(previousCostData, 'previousCost'),\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    isLine: true,\n                    style: {\n                        data: {\n                            stroke: chartStyles.previousColorScale[0],\n                        },\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: this.initDatumChildName(currentCostData, 'currentCost'),\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    isBar: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.currentColorScale[0],\n                        },\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: this.initDatumChildName(previousInfrastructureCostData, 'previousInfrastructureCost'),\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    isLine: true,\n                    style: {\n                        data: {\n                            stroke: chartStyles.previousColorScale[1],\n                        },\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: this.initDatumChildName(currentInfrastructureCostData, 'currentInfrastructureCost'),\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false, 0, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentInfrastructureColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false, 0),\n                    },\n                    isBar: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.currentInfrastructureColorScale[1],\n                        },\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: this.initDatumChildName(forecastData, 'forecast'),\n                    legendItem: {\n                        name: getCostRangeString(forecastData, messages.ChartCostForecastLegendLabel, false, false, 0, messages.ChartCostForecastLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, messages.ChartCostForecastLegendTooltip, false, false),\n                    },\n                    isBar: true,\n                    isForecast: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                        },\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructure',\n                    data: this.initDatumChildName(forecastInfrastructureData, 'forecastInfrastructure'),\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureData, messages.ChartCostInfrastructureForecastLegendLabel, false, false, 0, messages.ChartCostInfrastructureForecastLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureData, messages.ChartCostInfrastructureForecastLegendTooltip, false, false),\n                    },\n                    isBar: true,\n                    isForecast: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastInfrastructureDataColorScale[0],\n                        },\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: this.initDatumChildName(forecastConeData, 'forecastCone'),\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, messages.ChartCostForecastConeLegendLabel, false, false, 0, messages.ChartCostForecastConeLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleLeft',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, messages.ChartCostForecastConeLegendTooltip, false, false),\n                    },\n                    isForecast: true,\n                    isLine: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                        },\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructureCone',\n                    data: this.initDatumChildName(forecastInfrastructureConeData, 'forecastInfrastructureCone'),\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureConeData, messages.ChartCostInfrastructureForecastConeLegendLabel, false, false, 0, messages.ChartCostInfrastructureForecastConeLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureConeDataColorScale[0],\n                            type: 'triangleLeft',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureConeData, messages.ChartCostInfrastructureForecastConeLegendTooltip, false, false),\n                    },\n                    isForecast: true,\n                    isLine: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastInfrastructureConeDataColorScale[0],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    if (width > 675 && width < 1175) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width > 450 && width < 675) {\n                        adjustedContainerHeight += 50;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 75;\n                    }\n                }\n                else {\n                    if (width > 450 && width < 725) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 50;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!series.isForecast) {\n                const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n                if (series.isBar) {\n                    return (React.createElement(ChartBar, { alignment: \"middle\", data: data, key: series.childName, name: series.childName, style: series.style }));\n                }\n                else if (series.isLine) {\n                    return React.createElement(ChartLine, { data: data, key: series.childName, name: series.childName, style: series.style });\n                }\n            }\n            return null;\n        };\n        this.getForecastBarChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (series.isForecast && series.isBar) {\n                const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n                return (React.createElement(ChartBar, { alignment: \"middle\", data: data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        this.getForecastLineChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (series.isForecast && series.isLine) {\n                const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n                return (React.createElement(ChartBar, { alignment: \"middle\", barWidth: 1, data: data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastInfrastructureConeData !== this.props.forecastInfrastructureConeData ||\n            prevProps.forecastInfrastructureData !== this.props.forecastInfrastructureData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, forecastData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentCostDate = currentCostData ? getDate(getDateRange(currentCostData, true, true)[1]) : 0;\n        const forecastCostDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData ? getDate(getDateRange(previousCostData, true, true)[1]) : 0;\n        return currentInfrastructureDate > 0 ||\n            currentCostDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentCostDate, forecastCostDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const lastDate = this.getEndDate();\n        const half = Math.floor(lastDate / 2);\n        const _1stDay = 1;\n        const _2ndDay = _1stDay + Math.floor(half / 2);\n        const _3rdDay = _1stDay + half;\n        const _4thDay = lastDate - Math.floor(half / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(React.Fragment, null,\n            title && (React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title)),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 5.5 }, series.map((s, index) => this.getChart(s, index)))),\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 5.5 }, series.map((s, index) => this.getForecastBarChart(s, index)))),\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 5.5 }, series.map((s, index) => this.getForecastLineChart(s, index)))),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [_1stDay, _2ndDay, _3rdDay, _4thDay, lastDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nconst DailyCostChart = injectIntl(DailyCostChartBase);\nexport { DailyCostChart };\n","import './reportSummaryDailyCost.scss';\nimport { DailyCostChart } from 'pages/views/components/charts/dailyCostChart';\nimport React from 'react';\nconst ReportSummaryDailyCost = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(DailyCostChart, Object.assign({}, props))));\nexport { ReportSummaryDailyCost };\n","import { chart_color_black_200 } from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    forecastConeDataColorScale: [chart_color_orange_300.value],\n    forecastDataColorScale: [chart_color_green_200.value],\n    itemsPerRow: 4,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartGroup, ChartLegend, ChartLegendTooltip, ChartLine, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './dailyTrendChart.styles';\nclass DailyTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, forecastData, forecastConeData, previousData, showForecast, showInfrastructureLabel = false, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? messages.ChartUsageLegendLabel\n                : showSupplementaryLabel\n                    ? messages.ChartCostSupplementaryLegendLabel\n                    : showInfrastructureLabel\n                        ? messages.ChartCostInfrastructureLegendLabel\n                        : messages.ChartCostLegendLabel;\n            const tooltipKey = showUsageLegendLabel\n                ? messages.ChartUsageLegendTooltip\n                : showSupplementaryLabel\n                    ? messages.ChartCostSupplementaryLegendTooltip\n                    : showInfrastructureLabel\n                        ? messages.ChartCostInfrastructureLegendTooltip\n                        : messages.ChartCostLegendTooltip;\n            const noDataKey = showUsageLegendLabel\n                ? messages.ChartUsageLegendNoDataLabel\n                : showSupplementaryLabel\n                    ? messages.ChartCostSupplementaryLegendNoDataLabel\n                    : showInfrastructureLabel\n                        ? messages.ChartCostInfrastructureLegendNoDataLabel\n                        : messages.ChartCostLegendNoDataLabel;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: this.initDatumChildName(previousData, 'previousCost'),\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, noDataKey),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, tooltipKey, false, false, 1),\n                    },\n                    isBar: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.previousColorScale[0],\n                        },\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: this.initDatumChildName(currentData, 'currentCost'),\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, noDataKey),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, tooltipKey, false, false),\n                    },\n                    isBar: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.currentColorScale[0],\n                        },\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: this.initDatumChildName(forecastData, 'forecast'),\n                    legendItem: {\n                        name: getCostRangeString(forecastData, messages.ChartCostForecastLegendTooltip, false, false, 0, messages.ChartCostForecastLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, messages.ChartCostForecastConeLegendTooltip, false, false),\n                    },\n                    isBar: true,\n                    isForecast: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                        },\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: this.initDatumChildName(forecastConeData, 'forecastCone'),\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, messages.ChartCostForecastConeLegendLabel, false, false, 0, messages.ChartCostForecastConeLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, messages.ChartCostForecastConeLegendTooltip, false, false),\n                    },\n                    isForecast: true,\n                    isLine: true,\n                    style: {\n                        data: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast, showInfrastructureLabel, showSupplementaryLabel, } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    const maxWidth = showSupplementaryLabel || showInfrastructureLabel ? 850 : 700;\n                    if (width < maxWidth) {\n                        adjustedContainerHeight += 25;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!series.isForecast) {\n                const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n                if (series.isBar) {\n                    return (React.createElement(ChartBar, { alignment: \"middle\", data: data, key: series.childName, name: series.childName, style: series.style }));\n                }\n                else if (series.isLine) {\n                    return React.createElement(ChartLine, { data: data, key: series.childName, name: series.childName, style: series.style });\n                }\n            }\n            return null;\n        };\n        this.getForecastBarChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (series.isForecast && series.isBar) {\n                const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n                return (React.createElement(ChartBar, { alignment: \"middle\", data: data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        this.getForecastLineChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (series.isForecast && series.isLine) {\n                const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n                return (React.createElement(ChartBar, { alignment: \"middle\", barWidth: 1, data: data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 50,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical' }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, forecastData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        const forecastDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, forecastDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const lastDate = this.getEndDate();\n        const half = Math.floor(lastDate / 2);\n        const _1stDay = 1;\n        const _2ndDay = _1stDay + Math.floor(half / 2);\n        const _3rdDay = _1stDay + half;\n        const _4thDay = lastDate - Math.floor(half / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(React.Fragment, null,\n            title && (React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title)),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 11 }, series.map((s, index) => this.getChart(s, index)))),\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 11 },\n                            React.createElement(ChartBar, { data: [{ y: null }], name: \"forcast_spacer\" }),\n                            series.map((s, index) => this.getForecastBarChart(s, index)))),\n                        series && series.length > 0 && (React.createElement(ChartGroup, { offset: 11 },\n                            React.createElement(ChartBar, { data: [{ y: null }], name: \"forcast_cone_spacer\" }),\n                            series.map((s, index) => this.getForecastLineChart(s, index)))),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [_1stDay, _2ndDay, _3rdDay, _4thDay, lastDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nconst DailyTrendChart = injectIntl(DailyTrendChartBase);\nexport { DailyTrendChart };\n","import './reportSummaryDailyTrend.scss';\nimport { DailyTrendChart } from 'pages/views/components/charts/dailyTrendChart';\nimport React from 'react';\nconst ReportSummaryDailyTrend = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(DailyTrendChart, Object.assign({}, props))));\nexport { ReportSummaryDailyTrend };\n","import chart_color_black_200 from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport chart_color_green_100 from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport chart_color_green_200 from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport chart_color_green_400 from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport chart_color_green_500 from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    forecastConeData: {\n        fill: chart_color_green_100.value,\n        strokeWidth: 0,\n    },\n    forecastConeDataColorScale: [chart_color_green_100.value],\n    forecastData: {\n        fill: 'none',\n    },\n    forecastDataColorScale: [chart_color_green_200.value],\n    itemsPerRow: 4,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './trendChart.styles';\nclass TrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, forecastData, forecastConeData, previousData, showForecast, showInfrastructureLabel = false, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? messages.ChartUsageLegendLabel\n                : showSupplementaryLabel\n                    ? messages.ChartCostSupplementaryLegendLabel\n                    : showInfrastructureLabel\n                        ? messages.ChartCostInfrastructureLegendLabel\n                        : messages.ChartCostLegendLabel;\n            const tooltipKey = showUsageLegendLabel\n                ? messages.ChartUsageLegendTooltip\n                : showSupplementaryLabel\n                    ? messages.ChartCostSupplementaryLegendTooltip\n                    : showInfrastructureLabel\n                        ? messages.ChartCostInfrastructureLegendTooltip\n                        : messages.ChartCostLegendTooltip;\n            const noDataKey = showUsageLegendLabel\n                ? messages.ChartUsageLegendNoDataLabel\n                : showSupplementaryLabel\n                    ? messages.ChartCostSupplementaryLegendNoDataLabel\n                    : showInfrastructureLabel\n                        ? messages.ChartCostInfrastructureLegendNoDataLabel\n                        : messages.ChartCostLegendNoDataLabel;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, noDataKey),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, tooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, noDataKey),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, tooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: forecastData,\n                    legendItem: {\n                        name: getCostRangeString(forecastData, messages.ChartCostForecastLegendLabel, false, false, 0, messages.ChartCostForecastLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, messages.ChartCostForecastLegendTooltip, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastData), { stroke: chartStyles.forecastDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: forecastConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, messages.ChartCostForecastConeLegendLabel, false, false, 0, messages.ChartCostForecastConeLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleLeft',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, messages.ChartCostForecastConeLegendTooltip, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastConeData), { stroke: chartStyles.forecastConeDataColorScale[0] }),\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast, showInfrastructureLabel, showSupplementaryLabel, } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    const maxWidth = showSupplementaryLabel || showInfrastructureLabel ? 900 : 700;\n                    if (width < maxWidth) {\n                        adjustedContainerHeight += 25;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 50,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical' }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, forecastData, forecastConeData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        const forecastDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        const forecastConeDate = forecastConeData ? getDate(getDateRange(forecastConeData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, forecastDate, forecastConeDate, previousDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"trend-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nconst TrendChart = injectIntl(TrendChartBase);\nexport { TrendChart };\n","import './reportSummaryTrend.scss';\nimport { TrendChart } from 'pages/views/components/charts/trendChart';\nimport React from 'react';\nconst ReportSummaryTrend = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { ReportSummaryTrend };\n","import chart_color_black_200 from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport chart_color_green_100 from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport chart_color_green_200 from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport chart_color_green_400 from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport chart_color_green_500 from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const chartStyles = {\n    chartContainer: {\n        marginTop: global_spacer_lg.value,\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_green_300.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_green_400.value,\n        },\n    },\n    itemsPerRow: 2,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_black_200.value,\n        chart_color_green_400.value,\n        chart_color_black_200.value,\n        chart_color_green_300.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_black_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_black_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getDateRange, getUsageRangeString } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n            const usageKey = messages.ChartUsageLegendLabel;\n            const usageTooltipKey = messages.ChartUsageLegendTooltip;\n            const requestKey = messages.ChartRequestsLegendLabel;\n            const requestTooltipKey = messages.ChartRequestsLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: chartStyles.previousUsageData,\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: chartStyles.currentUsageData,\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[2],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: chartStyles.previousRequestData,\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[3],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: chartStyles.currentRequestData,\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width < 480) {\n                    adjustedContainerHeight += 20;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 300 ? chartStyles.itemsPerRow : 1;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 75,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width }, \"data-testid\": \"usage-chart-wrapper\" },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nconst UsageChart = injectIntl(UsageChartBase);\nexport { UsageChart };\n","import './reportSummaryUsage.scss';\nimport { UsageChart } from 'pages/views/components/charts/usageChart';\nimport React from 'react';\nconst ReportSummaryUsage = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { ReportSummaryUsage };\n","// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, \"current_month_data\" /* currentMonthData */);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, \"has_data\" /* hasData */);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, \"previous_month_data\" /* previousMonthData */);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, \"current_month_data\" /* currentMonthData */);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, \"has_data\" /* hasData */);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, \"previous_month_data\" /* previousMonthData */);\n};\n","import { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedReportItems({ daily, idKey, report, sortDirection = 0 /* asc */, sortKey = 'date', }) {\n    return sort(getUnsortedComputedReportItems({\n        daily,\n        idKey,\n        report,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nfunction getCostData(val, key, item) {\n    return {\n        markup: {\n            value: (item && item[key] && item[key].markup ? item[key].markup.value : 0) +\n                (val[key] && val[key].markup ? val[key].markup.value : 0),\n            units: val && val[key] && val[key].markup ? val[key].markup.units : 'USD',\n        },\n        raw: {\n            value: (item && item[key] && item[key].raw ? item[key].raw.value : 0) +\n                (val[key] && val[key].raw ? val[key].raw.value : 0),\n            units: val && val[key] && val[key].raw ? val[key].raw.units : 'USD',\n        },\n        total: {\n            value: (item && item[key] && item[key].total ? item[key].total.value : 0) +\n                (val[key] && val[key].total ? Number(val[key].total.value) : 0),\n            units: val && val[key] && val[key].total ? val[key].total.units : null,\n        },\n        usage: {\n            value: (item && item[key] && item[key].usage ? item[key].usage.value : 0) +\n                (val[key] && val[key].usage ? Number(val[key].usage.value) : 0),\n            units: val && val[key] && val[key].usage ? val[key].usage.units : null,\n        },\n    };\n}\nfunction getUsageData(val, item) {\n    return {\n        capacity: {\n            value: (item && item.capacity ? item.capacity.value : 0) + (val.capacity ? val.capacity.value : 0),\n            units: val && val.capacity ? val.capacity.units : 'Core-Hours',\n        },\n        limit: {\n            value: (item && item.limit ? item.limit.value : 0) + (val.limit ? val.limit.value : 0),\n            units: val && val.limit ? val.limit.units : 'Core-Hours',\n        },\n        request: {\n            value: (item && item.request ? item.request.value : 0) + (val.request ? val.request.value : 0),\n            units: val && val.request ? val.request.units : 'Core-Hours',\n        },\n        usage: {\n            value: (item && item.usage ? item.usage.value : 0) + (val.usage ? val.usage.value : 0),\n            units: val && val.usage ? val.usage.units : 'Core-Hours',\n        },\n    };\n}\n// Details pages typically use this function with filter[resolution]=monthly\nexport function getUnsortedComputedReportItems({ daily = false, report, idKey, // Note: The idKey must use org_entities for reports, while group_by uses org_unit_id\n }) {\n    if (!report) {\n        return [];\n    }\n    // Map<string | number, ComputedReportItem | Map<string | number, ComputedReportItem>\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        const type = dataPoint.type; // Org unit type\n        if (dataPoint && dataPoint.values) {\n            dataPoint.values.forEach((val) => {\n                let id = val.id ? val.id : val[idKey];\n                if (!id) {\n                    id = val.date;\n                }\n                // Ensure unique map IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && val.cluster ? `-${val.cluster}` : '';\n                const mapId = `${id}${idSuffix}`;\n                // 'clusters' will contain either the cluster alias or default cluster ID\n                const cluster_alias = val.clusters && val.clusters.length > 0 ? val.clusters[0] : undefined;\n                const cluster = cluster_alias || val.cluster;\n                const clusters = val.clusters ? val.clusters : [];\n                const date = val.date;\n                const delta_percent = val.delta_percent ? val.delta_percent : 0;\n                const delta_value = val.delta_value ? val.delta_value : 0;\n                const source_uuid = val.source_uuid ? val.source_uuid : [];\n                let label;\n                if (report.meta && report.meta.others && (id === 'Other' || id === 'Others')) {\n                    // Add count to \"Others\" label\n                    label = intl.formatMessage(messages.ChartOthers, { count: report.meta.others });\n                }\n                else {\n                    const itemLabelKey = getItemLabel({ report, idKey, value: val });\n                    if (itemLabelKey === 'org_entities' && val.alias) {\n                        label = val.alias;\n                    }\n                    else if (itemLabelKey === 'account' && val.account_alias) {\n                        label = val.account_alias;\n                    }\n                    else if (itemLabelKey === 'cluster' && cluster_alias) {\n                        label = cluster_alias;\n                    }\n                    else if (val[itemLabelKey] instanceof Object) {\n                        label = val[itemLabelKey].value;\n                    }\n                    else {\n                        label = val[itemLabelKey];\n                    }\n                    if (label === undefined || label.trim().length === 0) {\n                        label = val.alias && val.alias.trim().length > 0 ? val.alias : val[idKey];\n                    }\n                }\n                if (daily) {\n                    const data = Object.assign(Object.assign({}, getUsageData(val)), { // capacity, limit, request, & usage\n                        cluster,\n                        clusters, cost: getCostData(val, 'cost'), date,\n                        delta_percent,\n                        delta_value,\n                        id, infrastructure: getCostData(val, 'infrastructure'), label,\n                        source_uuid, supplementary: getCostData(val, 'supplementary'), type });\n                    const item = itemMap.get(mapId);\n                    if (item) {\n                        item.set(date, data);\n                    }\n                    else {\n                        const dateMap = new Map();\n                        dateMap.set(date, data);\n                        itemMap.set(mapId, dateMap);\n                    }\n                }\n                else {\n                    const item = itemMap.get(mapId);\n                    if (item) {\n                        // When applying multiple group_by params, costs may be split between regions. We need to sum those costs\n                        // See https://issues.redhat.com/browse/COST-1131\n                        itemMap.set(mapId, Object.assign(Object.assign(Object.assign({}, item), getUsageData(val, item)), { // capacity, limit, request, & usage\n                            cluster,\n                            clusters,\n                            date,\n                            delta_percent,\n                            delta_value, cost: getCostData(val, 'cost', item), id, infrastructure: getCostData(val, 'infrastructure', item), label,\n                            source_uuid, supplementary: getCostData(val, 'supplementary', item), type }));\n                    }\n                    else {\n                        itemMap.set(mapId, Object.assign(Object.assign({}, getUsageData(val)), { // capacity, limit, request, & usage\n                            cluster,\n                            clusters, cost: getCostData(val, 'cost'), date,\n                            delta_percent,\n                            delta_value,\n                            id, infrastructure: getCostData(val, 'infrastructure'), label,\n                            source_uuid, supplementary: getCostData(val, 'supplementary'), type }));\n                    }\n                }\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import { tagPrefix } from 'api/queries/query';\nexport function getItemLabel({ idKey, report, value }) {\n    let itemLabelKey = String(idKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagPrefix)) {\n                const tagPrefixKey = tagPrefix + idKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n","import { intl } from 'components/i18n';\nimport { endOfMonth, format, getDate, getMonth, startOfMonth } from 'date-fns';\nimport messages from 'locales/messages';\nexport function getToday(hrs = 0, min = 0, sec = 0) {\n    const today = new Date();\n    today.setHours(hrs);\n    today.setMinutes(min);\n    today.setSeconds(sec);\n    return today;\n}\nexport function getNoDataForDateRangeString(message = messages.NoDataForDate, offset = 1) {\n    const today = getToday();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = format(today, 'd');\n    const startDate = format(startOfMonth(today), 'd');\n    return intl.formatMessage(message, { count: getDate(today), startDate, endDate, month });\n}\nexport function getForDateRangeString(value, message = messages.ForDate, offset = 1) {\n    const today = getToday();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = format(today, 'd');\n    const startDate = format(startOfMonth(today), 'd');\n    return intl.formatMessage(message, {\n        value,\n        count: getDate(today),\n        startDate,\n        endDate,\n        month,\n    });\n}\nexport function getSinceDateRangeString(message = messages.SinceDate) {\n    const today = getToday();\n    const month = getMonth(today);\n    const endDate = format(today, 'd');\n    const startDate = format(startOfMonth(today), 'd');\n    return intl.formatMessage(message, { count: getDate(today), startDate, endDate, month });\n}\nexport function getMonthDate(offset) {\n    const today = getToday();\n    if (offset) {\n        today.setDate(1); // Required to obtain correct month\n        today.setMonth(today.getMonth() - offset);\n    }\n    const start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n    const end_date = format(offset ? endOfMonth(today) : today, 'yyyy-MM-dd');\n    return { start_date, end_date };\n}\nexport function getCurrentMonthDate() {\n    return getMonthDate(0);\n}\nexport function getPreviousMonthDate() {\n    return getMonthDate(1);\n}\n// Returns offset + 1 days, including today's date. See https://issues.redhat.com/browse/COST-1117\nexport function getLastDaysDate(offset) {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - offset);\n    return {\n        end_date: format(endDate, 'yyyy-MM-dd'),\n        start_date: format(startDate, 'yyyy-MM-dd'),\n    };\n}\n// Returns 31 days, including today's date\nexport function getLast30DaysDate() {\n    return getLastDaysDate(30);\n}\n// Returns 61 days, including today's date\nexport function getLast60DaysDate() {\n    return getLastDaysDate(60);\n}\n// Returns 91 days, including today's date\nexport function getLast90DaysDate() {\n    return getLastDaysDate(90);\n}\n","export const noop = () => { }; // tslint:disable-line no-empty\n","export const skeletonWidth = {\n    xs: '16%',\n    sm: '33%',\n    md: '66%',\n    lg: '100%',\n};\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */ ? getValueForItem(a, options) : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */ ? getValueForItem(b, options) : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n"],"names":["getProvidersQuery","query","stringify","encode","indices","styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","isDisabled","props","currency","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CurrencyConnect","connect","Currency","injectIntl","EmptyValueState","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","Button","onClick","window","location","reload","NoDataState","title","PageHeader","PageHeaderTitle","Main","src","alt","iconSpacer","marginLeft","viewSources","marginTop","global_spacer_lg","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","titleKey","component","NoProvidersState","LAYOUT_PROPS","padding","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","ChartTheme","getComputedForecastItems","forecast","sortDirection","sortKey","sort","itemMap","Map","visitDataPoint","dataPoint","values","forEach","val","date","item","get","set","cost","getCostData","infrastructure","supplementary","Array","data","from","getUnsortedComputedForecastItems","direction","confidence_max","confidence_min","pvalues","Number","rsquared","total","transformForecast","type","forecastItem","forecastItemValue","computedItems","chartDatums","i","createForecastDatum","reduce","acc","d","prevValue","length","y","padChartDatums","transformForecastCone","createForecastConeDatum","prevMaxValue","prevMinValue","y0","transformReport","report","idKey","reportItem","reportItemValue","items","getComputedReportItems","createReportDatum","computedItem","xVal","Date","yVal","isFloat","parseFloat","toFixed","isInt","x","undefined","maxValue","minValue","y0Val","name","datums","result","firstDate","lastDate","padDate","startOfMonth","getDate","setDate","endOfMonth","prevChartDatum","chartDatum","fillChartDatums","getDateRange","firstOfMonth","lastOfMonth","offset","start","end","today","setMonth","getMonth","firstDay","lastDay","getDatumDateRange","getMaxValue","max","datum","getMaxMinValues","min","maxY","Math","minY","getTooltipContent","formatter","unit","lookup","getCostRangeString","noDataKey","month","year","count","startDate","endDate","getUsageRangeString","n","getChartNames","series","serie","childName","getDomain","hiddenSeries","domain","s","index","isSeriesHidden","threshold","ceil","_min","floor","getLegendData","legendItem","has","getTooltipLabel","formatOptions","tooltipFormatter","dy","dy0","value0","value1","getResizeObserver","containerRef","handleResize","containerElement","ResizeObserver","_navToggle","_resizeObserver","resizeObserver","entries","requestAnimationFrame","isArray","observe","unobserve","addEventListener","removeEventListener","insights","chrome","on","setTimeout","initHiddenSeries","Set","delete","add","isDataAvailable","unavailable","isDataHidden","keys","next","done","dataChildName","serieChildName","costSelector","costLabel","costTypeOptions","desc","CostTypeBase","costType","description","CostTypeConnect","CostType","ReportSummary","children","detailsLink","subTitle","status","Card","CardTitle","TitleSizes","Boolean","CardBody","Skeleton","width","skeleton","CardFooter","ReportSummaryAlt","tabs","Grid","hasGutter","GridItem","xl","ReportSummaryDetails","chartType","computedReportItem","computedReportItemValue","requestFormatOptions","requestLabel","reportType","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","supplementaryCost","infrastructureCost","request","usage","hasTotal","meta","hasCost","hasCount","hasSupplementaryCost","hasInfrastructureCost","hasRequest","hasUsage","format","getCostLayout","showAltHeroFont","altHeroFont","Tooltip","content","enableFlip","getRequestLayout","usageUnits","unitsLabel","getUsageLayout","_units","ReportSummaryItem","totalValue","percent","percentVal","percentLabel","Progress","ProgressSize","ReportSummaryItemsBase","shouldComponentUpdate","nextProps","getItems","otherIndex","findIndex","slice","ReportSummaryItems","chartStyles","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentCostData","fill","currentInfrastructureColorScale","chart_color_blue_400","chart_color_blue_300","chart_color_blue_200","chart_color_blue_100","chart_color_blue_500","currentInfrastructureCostData","strokeDasharray","forecastConeData","strokeWidth","forecastConeDataColorScale","forecastData","forecastDataColorScale","forecastInfrastructureConeData","forecastInfrastructureConeDataColorScale","forecastInfrastructureData","forecastInfrastructureDataColorScale","previousCostData","previousInfrastructureCostData","previousColorScale","chart_color_black_200","yAxis","axisLabel","grid","stroke","ticks","tickLabels","fontSize","xAxis","CostChartBase","observer","noop","initDatum","showForecast","costKey","costInfrastructureKey","costInfrastructureTooltipKey","costTooltipKey","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","getAdjustedContainerHeight","adjustContainerHeight","height","containerHeight","adjustedContainerHeight","getChart","ChartArea","interpolation","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","bottom","left","right","top","getLegend","ChartLegend","gutter","responsive","handleLegendClick","clientWidth","current","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","getEvents","chartNames","isHidden","legendName","onLegendClick","getEndDate","currentInfrastructureDate","currentCostDate","forecastCostDate","previousInfrastructureDate","previousUsageDate","ge","half","_2ndDay","_3rdDay","_4thDay","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","ChartAxis","C","tickValues","dependentAxis","CostChart","ReportSummaryCost","chart_color_orange_300","DailyCostChartBase","initDatumChildName","isLine","isBar","isForecast","ChartBar","alignment","ChartLine","getForecastBarChart","getForecastLineChart","barWidth","ChartGroup","DailyCostChart","ReportSummaryDailyCost","itemsPerRow","DailyTrendChartBase","currentData","previousData","showInfrastructureLabel","showSupplementaryLabel","showUsageLegendLabel","tooltipKey","legendItemsPerRow","orientation","previousDate","currentDate","forecastDate","DailyTrendChart","ReportSummaryDailyTrend","currentMonthData","previousMonthData","TrendChartBase","forecastConeDate","midDate","TrendChart","ReportSummaryTrend","chartContainer","currentRequestData","currentUsageData","legendColorScale","previousRequestData","previousUsageData","UsageChartBase","usageKey","usageTooltipKey","requestKey","requestTooltipKey","currentRequestDate","currentUsageDate","previousRequestDate","UsageChart","ReportSummaryUsage","_getOcpProvider","ocpProviders","uuid","provider","filterProviders","providers","sourceType","filter","source_type","toLowerCase","_hasData","dataType","_hasCloudData","ocpProvider","hasCloudCurrentMonthData","hasCloudData","hasCloudPreviousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasData","hasPreviousMonthData","daily","getUnsortedComputedReportItems","markup","raw","getUsageData","capacity","limit","mapId","cluster","cluster_alias","clusters","delta_percent","delta_value","source_uuid","others","itemLabelKey","String","group_by","indexOf","tagPrefixKey","hasOwnProperty","getItemLabel","alias","account_alias","trim","dateMap","getToday","hrs","sec","setHours","setMinutes","setSeconds","getNoDataForDateRangeString","message","getForDateRangeString","getSinceDateRangeString","getCurrentMonthDate","start_date","end_date","getMonthDate","getLastDaysDate","getLast30DaysDate","getLast60DaysDate","getLast90DaysDate","skeletonWidth","xs","sm","md","lg","getValueForItem","array","a","b","aVal","bVal"],"sourceRoot":""}