{"version":3,"file":"721e185eab2d816c3d3f.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/routes/views/details/components/breakdown/index.ts","webpack://koku-ui/./src/routes/views/details/gcpBreakdown/costOverview.tsx","webpack://koku-ui/./src/routes/views/details/gcpBreakdown/historicalData.tsx","webpack://koku-ui/./src/routes/views/details/gcpBreakdown/gcpBreakdown.tsx","webpack://koku-ui/./src/routes/views/details/gcpBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedGcpReportItems.ts","webpack://koku-ui/./src/routes/views/details/gcpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/routes/views/details/gcpDetails/detailsHeader.tsx","webpack://koku-ui/./src/routes/views/details/gcpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/routes/views/details/gcpDetails/detailsTable.tsx","webpack://koku-ui/./src/routes/views/details/gcpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/routes/views/details/gcpDetails/gcpDetails.styles.ts","webpack://koku-ui/./src/routes/views/details/gcpDetails/gcpDetails.tsx","webpack://koku-ui/./src/routes/views/details/gcpDetails/index.ts"],"sourcesContent":["import BreakdownBase from './breakdownBase';\nexport default BreakdownBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview/costOverviewBase';\nimport { gcpCostOverviewSelectors } from 'store/breakdown/costOverview/gcpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpCostOverviewSelectors.selectWidgets(state),\n        widgets: gcpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData/historicalDataBase';\nimport { gcpHistoricalDataSelectors } from 'store/breakdown/historicalData/gcpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpHistoricalDataSelectors.selectWidgets(state),\n        widgets: gcpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport BreakdownBase from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.gcpDetails;\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"gcp\" /* ReportPathsType.gcp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.gcpDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers: filterProviders(providers, \"gcp\" /* ProviderType.gcp */),\n        providersError,\n        providersFetchStatus,\n        providerType: \"gcp\" /* ProviderType.gcp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"gcp\" /* TagPathsType.gcp */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst GcpBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default GcpBreakdown;\n","import GcpBreakdown from './gcpBreakdown';\nexport default GcpBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.gcp_project) {\n        return 'gcp_project';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst tagReportPathsType = \"gcp\" /* TagPathsType.gcp */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.gcpDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, null),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, \"gcp\" /* ProviderType.gcp */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './gcpDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"gcp\" /* ReportPathsType.gcp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.gcpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.gcpDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/gcpQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* TagType.tag */;\nconst tagReportPathsType = \"gcp\" /* TagPathsType.gcp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'gcp_project' }), key: 'gcp_project' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"gcp\" /* ResourcePathsType.gcp */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    gcpDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport Loading from 'routes/state/loading';\nimport NoData from 'routes/state/noData';\nimport NoProviders from 'routes/state/noProviders';\nimport NotAvailable from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { addFilterToQuery, removeFilterFromQuery } from 'routes/views/utils/query';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './gcpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    exclude: {},\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"gcp\" /* ReportPathsType.gcp */;\nclass GcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { intl, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.gcp),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* FetchStatus.inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filter) => {\n            const { history, query } = this.props;\n            const filteredQuery = addFilterToQuery(query, filter);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filter) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeFilterFromQuery(query, filter);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.gcpDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* FetchStatus.inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* FetchStatus.complete */) {\n            // API returns empty data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"gcp\" /* ProviderType.gcp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.gcpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"gcp\" /* ProviderType.gcp */),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(GcpDetails));\n","import GcpDetails from './gcpDetails';\nexport default GcpDetails;\n"],"names":["mapStateToProps","state","props","selectWidgets","gcpCostOverview","widgets","CostOverview","injectIntl","connect","gcpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","account","gcp_project","project","region","service","styles","costValue","marginTop","global_spacer_lg","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","headerContent","display","justifyContent","headerContentLeft","minHeight","headerContentRight","paddingBottom","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onGroupBySelected","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","options","showTags","Boolean","format","units","featureFlags","DetailsHeader","emptyState","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","gcpDetails","content","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","offset","exclude","GcpDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"sourceRoot":""}