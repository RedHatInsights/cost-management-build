{"version":3,"sources":["webpack:///./src/pages/awsDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/awsDetails/awsDetails.styles.ts","webpack:///./src/pages/awsDetails/detailsHeader.styles.ts","webpack:///./src/pages/awsDetails/groupBy.styles.ts","webpack:///./src/pages/awsDetails/groupBy.tsx","webpack:///./src/pages/awsDetails/detailsHeader.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.styles.ts","webpack:///./src/pages/awsDetails/detailsTagView.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.tsx","webpack:///./src/pages/awsDetails/exportModal.styles.ts","webpack:///./src/pages/awsDetails/exportModal.tsx","webpack:///./src/pages/awsDetails/historicalChart.styles.ts","webpack:///./src/pages/awsDetails/historicalChart.tsx","webpack:///./src/pages/awsDetails/historicalModal.styles.ts","webpack:///./src/pages/awsDetails/historicalModal.tsx","webpack:///./src/pages/awsDetails/detailsActions.tsx","webpack:///./src/pages/awsDetails/detailsTable.styles.ts","webpack:///./src/pages/awsDetails/detailsTableItem.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.tsx","webpack:///./src/pages/awsDetails/detailsWidget.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetView.tsx","webpack:///./src/pages/awsDetails/detailsWidget.tsx","webpack:///./src/pages/awsDetails/detailsTableItem.tsx","webpack:///./src/pages/awsDetails/detailsTable.tsx","webpack:///./src/pages/awsDetails/detailsToolbar.styles.ts","webpack:///./src/pages/awsDetails/detailsToolbar.tsx","webpack:///./src/pages/awsDetails/awsDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_awsDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","_","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","getSinceDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","itemsPerRow","marginLeft","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","Boolean","Tooltip","content","enableFlip","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_4___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","onSelect","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","variant","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","tertiary","val","awsDetails","backgroundColor","paddingTop","paginationContainer","pagination","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","awsQuery","filter","resolution","time_scope_units","time_scope_value","key_only","awsReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","awsReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","awsExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","currentTarget","sortedItems","selectedLabel","actions","Button","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","awsReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","awsReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","awsDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","date","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","awsDetails_reportType","awsDetails_baseQuery","awsDetails_tagKey","awsDetails_mapStateToProps","awsDetails_mapDispatchToProps","getFilterFields","groupByTag","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","newFilterType","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"107681e560614b785b48.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AwsDetails from './awsDetails';\nexport default hot(module)(AwsDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    awsDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { parseQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAwsReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'account';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"aws\" /* aws */ })),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('aws_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('aws_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AwsReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsExportActions, awsExportSelectors } from 'store/awsExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: awsExportSelectors.selectExportError(state),\n        export: awsExportSelectors.selectExport(state),\n        fetchStatus: awsExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: awsExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAwsReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as awsReportsActions from 'store/awsReports/awsReportsActions';\nimport * as awsReportsSelectors from 'store/awsReports/awsReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAwsReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAwsReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAwsReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAwsReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAwsReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAwsReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('aws_details.historical.cost_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('aws_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('aws_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = awsReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = awsReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = awsReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = awsReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"account\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('aws_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'account', onClick: this.handleWidgetModalOpen }, t('aws_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'account', onClick: this.handleTagModalOpen }, t('aws_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('aws_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('aws_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAwsReportItems } from 'utils/getComputedAwsReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAwsReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */ ? reportItem.cost : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('aws_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('aws_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'account') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('aws_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/awsQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('aws_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAwsReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('aws_details.increase_since_date', { date, month, value })\n                        : t('aws_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('aws_details.decrease_since_date', { date, month, value })\n                            : t('aws_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('aws_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst tagKey = 'or:tag:';\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'account') {\n                return [\n                    {\n                        id: 'account',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.account_select'),\n                        placeholder: t('aws_details.filter.account_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'service') {\n                return [\n                    {\n                        id: 'service',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.service_select'),\n                        placeholder: t('aws_details.filter.service_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'region') {\n                return [\n                    {\n                        id: 'region',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.region_select'),\n                        placeholder: t('aws_details.filter.region_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by account tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.tag_select'),\n                        placeholder: t('aws_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTag = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTag ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('aws_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/aws?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAwsReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.awsDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n"],"sourceRoot":""}